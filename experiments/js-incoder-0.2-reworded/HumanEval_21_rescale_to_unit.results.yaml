language: js
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n        else if(numbers[i] < min_number){\n            min_number\
    \ = numbers[i];\n        }\n    }\n    return [min_number, max_number];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpu_37ti_x.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu_37ti_x.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpw_72eeem.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw_72eeem.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var rescaled\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    rescaled.push(1);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled[i] = rescaled[i] / range;\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp0zf45woe.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0zf45woe.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ 1 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / (max - min)) *\
    \ 100);\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        new_numbers.push(numbers[i] * scale + min);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  202,\n  4992\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvzo6zgr6.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvzo6zgr6.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 202, 4992\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range / numbers.length) -\
    \ 1);\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        new_numbers.push(min + (numbers[i] - min) * scale);\n    }\n    return\
    \ new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1101.3049999999998\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpwgjxexpo.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwgjxexpo.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1101.3049999999998\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp_qomek2o.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_qomek2o.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / max) + 1);\n  \
    \  var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3.9198396793587174,\n\
    \  97.8\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp8t9acszz.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8t9acszz.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3.9198396793587174,\
    \ 97.8 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < min) min = numbers[i];\n\t\tif(numbers[i] > max) max = numbers[i];\n\t}\n\t\
    var scale = (max - min) / (max - min);\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tnumbers[i] *= scale;\n\t}\n\treturn numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp7pkfpfvw.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7pkfpfvw.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value){\n            min_value = numbers[i];\n  \
    \      }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n    }\n    var range = (max_value - min_value);\n    var new_array\
    \ = new Array(numbers.length);\n    for(var i = 0; i < numbers.length; i++){\n\
    \        new_array[i] = (numbers[i] - min_value) / range;\n    }\n    return new_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn2v7so_i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2v7so_i.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / (max - min)) *\
    \ 100) / 100;\n    var new_numbers = [];\n    new_numbers[0] = min - scale;\n\
    \    new_numbers[1] = max - scale;\n    return new_numbers;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  48.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpey5yz_mu.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpey5yz_mu.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 48.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] < min) min = numbers[i];\n        if(numbers[i] > max) max\
    \ = numbers[i];\n    }\n    var range = (max - min);\n    if(range == 0) return\
    \ numbers;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i]/range);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446765\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp_ip7wupz.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_ip7wupz.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446765 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp2p_fzhgi.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2p_fzhgi.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var new_range\
    \ = range / 1.5;\n    var new_min = min - new_range;\n    var new_max = max +\
    \ new_range;\n    var new_numbers = [];\n    for(var i=0; i<numbers.length; i++){\n\
    \        new_numbers.push(new_min + (new_numbers[i]-min)*new_range/range);\n \
    \   }\n    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpheonr0wf.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpheonr0wf.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min_value = numbers[0];\n\
    \tvar max_value = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    if(numbers[i] < min_value){\n\t\t\tmin_value = numbers[i];\n\t\t}\n\t\telse if(numbers[i]\
    \ > max_value){\n\t\t\tmax_value = numbers[i];\n\t\t}\n\t}\n\tvar scale = (max_value\
    \ - min_value) / (numbers.length - 1);\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tnumbers[i] = (numbers[i] - min_value) * scale + min_value;\n\t}\n\treturn\
    \ numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2296.41\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp6ibch34l.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6ibch34l.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2296.41\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = Math.round(range / 2);\n    var new_min\
    \ = min - new_range;\n    var new_max = max + new_range;\n    var new_numbers\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        new_numbers.push(numbers[i]\
    \ * new_range / new_max);\n    }\n    return new_numbers;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.6495263870094722,\n\
    \  16.20568335588633\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp0osqf8ri.js:24:10)\n    at Object.<anonymous> (/tmp/tmp0osqf8ri.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.6495263870094722,\
    \ 16.20568335588633 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        scaled_numbers.push(numbers[i] * scale);\n    }\n    return scaled_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmphmmrvg6q.js:22:10)\n    at Object.<anonymous> (/tmp/tmphmmrvg6q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = max\
    \ - min;\n\tvar scale = (range == 0) ? 0 : ((numbers[1] - numbers[0]) / range);\n\
    \treturn [min, scale];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmphzb5a9yt.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmphzb5a9yt.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    var new_range = (new_max - new_min);\n    return [new_min,\
    \ new_max, new_range];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85,\n  95.8\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test\
    \ (/tmp/tmpnt7r3zu7.js:20:10)\n    at Object.<anonymous> (/tmp/tmpnt7r3zu7.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85, 95.8 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = max\
    \ - min;\n\tvar new_min = min - range * 0.5;\n\tvar new_max = max + range * 0.5;\n\
    \tvar new_range = new_max - new_min;\n\tvar new_min_value = new_min + new_range\
    \ * 0.5;\n\tvar new_max_value = new_max - new_range * 0.5;\n\treturn [new_min_value,\
    \ new_max_value];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  25.95,\n\
    \  25.949999999999996\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmppo_wouw_.js:22:10)\n    at Object.<anonymous> (/tmp/tmppo_wouw_.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 25.95, 25.949999999999996\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : 1 / (range +\
    \ 1);\n    return numbers.map(function(number){\n        return number * scale;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.0408997955010225,\n\
    \  1.0204498977505112\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpbjewcljh.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbjewcljh.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.0408997955010225,\
    \ 1.0204498977505112 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(function(number){\n        return number * scale;\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446763\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp0p14eofw.js:20:10)\n    at Object.<anonymous> (/tmp/tmp0p14eofw.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446763 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n    }\n    var scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9sjn28d0.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9sjn28d0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    var scale = (max_value - min_value)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfi6hc1bc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6hc1bc.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpwh6vujlo.js:22:10)\n    at Object.<anonymous> (/tmp/tmpwh6vujlo.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range / (max - min)) * 100)\
    \ / 100;\n    return numbers.map(function(n){\n        return Math.round(n * scale);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  50\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpzq91xp65.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzq91xp65.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 50 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n      \
    \  rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvqz6u5x8.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvqz6u5x8.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  return [min, max];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9geslynj.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9geslynj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled_numbers = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        rescaled_numbers.push(min_number + (numbers[i]\
    \ - min_number) / range);\n    }\n    return rescaled_numbers;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpulj2vagj.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpulj2vagj.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / min) * 0.5);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  13.975,\n\
    \  61.875\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpab4n38mv.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpab4n38mv.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 13.975,\
    \ 61.875 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = (max\
    \ - min);\n\tvar new_range = range / 2;\n\tvar new_min = min - new_range;\n\t\
    var new_max = max + new_range;\n\treturn [new_min, new_max];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnjgz6lgw.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnjgz6lgw.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif(numbers[i] < min){\n\t\t\tmin\
    \ = numbers[i];\n\t\t}\n\t}\n\tvar scale = (max - min) / (numbers.length - 1);\n\
    \tfor(var i = 0; i < numbers.length; i++){\n\t\tnumbers[i] *= scale;\n\t}\n\t\
    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmprxlzgm5w.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmprxlzgm5w.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range / min) * 0.5) + 0.5;\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  14.475,\n\
    \  62.375\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmplwq62tf7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplwq62tf7.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 14.475,\
    \ 62.375 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn2v7so_i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2v7so_i.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    return numbers.map(function(n){\n        return Math.round((n - min) * scale);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  46\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp2lqkbqtf.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2lqkbqtf.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 46 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0])\
    \ / range);\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpxx5vnpyl.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxx5vnpyl.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  return [min, max];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9geslynj.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9geslynj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  var range = (max - min);\n    for(var i = 1; i < numbers.length; i++){\n  \
    \      numbers[i] -= min;\n        numbers[i] *= range / i;\n    }\n    return\
    \ numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2294.41\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp5cqis439.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5cqis439.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2294.41\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn2v7so_i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2v7so_i.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    var scale = (max_value - min_value)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfi6hc1bc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6hc1bc.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / max) + 1);\n  \
    \  var new_numbers = [];\n    new_numbers[0] = numbers[0] - min;\n    new_numbers[1]\
    \ = numbers[1] - min;\n    new_numbers[2] = numbers[2] - min;\n    new_numbers[3]\
    \ = numbers[3] - min;\n    new_numbers[4] = numbers[4] - min;\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  NaN,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n  \
    \  at test (/tmp/tmpu2o6f9uf.js:24:10)\n    at Object.<anonymous> (/tmp/tmpu2o6f9uf.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ NaN, NaN, NaN ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / min) * 100);\n\
    \    var new_array = [];\n    for (var i = 0; i < numbers.length; i++){\n    \
    \    new_array[i] = (numbers[i] - min) / scale;\n    }\n    return new_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0.02\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpcjqj_90v.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcjqj_90v.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0.02\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled_numbers = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        rescaled_numbers.push(min_number + (numbers[i]\
    \ - min_number) / range);\n    }\n    return rescaled_numbers;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpulj2vagj.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpulj2vagj.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n    }\n    var scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9sjn28d0.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9sjn28d0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppwi9kqe9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwi9kqe9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var scale =\
    \ (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(function(number){\n\
    \        return number * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpjn9bi3pi.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjn9bi3pi.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value){\n            min_value = numbers[i];\n  \
    \      }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n    }\n    var scale = (max_value - min_value) / (numbers.length -\
    \ 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpxcg4ijdq.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxcg4ijdq.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  var scale = (max - min) / (numbers.length - 1);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpcupmft__.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcupmft__.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range / (max - min)) * 0.5)\
    \ + 0.5;\n    return numbers.map(function(n){\n        return Math.round((n -\
    \ min) * scale + 0.5);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  48\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp6kh8y3hs.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6kh8y3hs.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 48 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < min) min = numbers[i];\n\t\tif(numbers[i] > max) max = numbers[i];\n\t}\n\t\
    var range = (max - min);\n\treturn [min / range, range];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmprso6v649.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmprso6v649.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmptjsqepk7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmptjsqepk7.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < min) min = numbers[i];\n\t\tif(numbers[i] > max) max = numbers[i];\n\t}\n\t\
    var scale = (max - min) / (numbers.length - 1);\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tnumbers[i] *= scale;\n\t}\n\treturn numbers;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpgu7_tjop.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgu7_tjop.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = (max - min);\n    var scale\
    \ = (range == 0) ? 0 : (range / (max - min));\n    var rescaled = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        rescaled.push(numbers[i] * scale);\n\
    \    }\n    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpud0lb0uq.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpud0lb0uq.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (max_number -\
    \ min_number) / range;\n    return numbers.map(function(number){\n        return\
    \ number - min_number * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnbjlfvri.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnbjlfvri.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_val = Math.min.apply(null,\
    \ numbers);\n    var max_val = Math.max.apply(null, numbers);\n    var range =\
    \ max_val - min_val;\n    var scale = (range == 0) ? 0 : 1 / (range + 1);\n  \
    \  return numbers.map(function(x){ return (x - min_val) * scale; });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0.9795501022494888\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpjqc7n6nf.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjqc7n6nf.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0.9795501022494888\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var rescaled\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        rescaled.push(numbers[i]\
    \ - min);\n    }\n    for(var i = 0; i < numbers.length; i++){\n        rescaled[i]\
    \ = rescaled[i] / range;\n    }\n    return rescaled;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpaz1khl6u.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaz1khl6u.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0])\
    \ / range);\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpkd2xmy7f.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkd2xmy7f.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (range / (max_number\
    \ - min_number));\n    return numbers.map(function(number){\n        return number\
    \ * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpt_l_921h.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt_l_921h.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / max) + 1);\n  \
    \  var new_numbers = [];\n    new_numbers[0] = numbers[0] - min * scale;\n   \
    \ new_numbers[1] = numbers[1] - min * scale;\n    return new_numbers;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1.9198396793587174,\n\
    \  45.98016032064128\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpucqcxofz.js:21:10)\n    at Object.<anonymous> (/tmp/tmpucqcxofz.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1.9198396793587174,\
    \ 45.98016032064128 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var scaled_numbers = [0, scale];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        scaled_numbers[i+1] = numbers[i] + scaled_numbers[i];\n    }\n\
    \    return scaled_numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  2,\n\
    \  51.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp26v8hga9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp26v8hga9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 2, 51.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_val = Math.min.apply(null,\
    \ numbers);\n    var max_val = Math.max.apply(null, numbers);\n    var range =\
    \ (max_val - min_val);\n    return numbers.map(function(num){\n        return\
    \ (num - min_val) / range;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 1.5;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -29.933333333333334,\n\
    \  81.83333333333333\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp_iof3w73.js:20:10)\n    at Object.<anonymous> (/tmp/tmp_iof3w73.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -29.933333333333334,\
    \ 81.83333333333333 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_array = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_array[i] = (numbers[i] - min) / range;\n    }\n    return\
    \ new_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  0.25,\n  0.5,\n\
    \  0.75,\n  1\n]\n    at test (/tmp/tmpd4recwti.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4recwti.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 0, 0.25, 0.5, 0.75, 1 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : 1 / (range + 1);\n    var new_numbers\
    \ = [];\n    new_numbers[0] = min - range * scale;\n    new_numbers[1] = max -\
    \ range * scale;\n    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.0204498977505112,\n\
    \  48.92044989775051\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpxdgzihj7.js:21:10)\n    at Object.<anonymous> (/tmp/tmpxdgzihj7.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.0204498977505112,\
    \ 48.92044989775051 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((max - min) / range);\n  \
    \  var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpw0sljyvq.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw0sljyvq.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale + min);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3.916492693110647,\n\
    \  49.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpqjci68j_.js:22:10)\n    at Object.<anonymous> (/tmp/tmpqjci68j_.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3.916492693110647,\
    \ 49.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        scaled_numbers.push(numbers[i] * scale);\n    }\n    return scaled_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmphmmrvg6q.js:22:10)\n    at Object.<anonymous> (/tmp/tmphmmrvg6q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (max_number -\
    \ min_number) / range;\n    return numbers.map(function(number){\n        return\
    \ number * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpzzppbc4y.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzzppbc4y.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1.0) / 2.0);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48.9,\n \
    \ 1220.0549999999998\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpr_15sra1.js:22:10)\n    at Object.<anonymous> (/tmp/tmpr_15sra1.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48.9, 1220.0549999999998\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        scaled_numbers.push(numbers[i] * scale);\n    }\n    return scaled_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmphmmrvg6q.js:22:10)\n    at Object.<anonymous> (/tmp/tmphmmrvg6q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        scaled_numbers.push(numbers[i] * scale);\n    }\n    return scaled_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvyxhs8dx.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvyxhs8dx.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppwi9kqe9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwi9kqe9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpwh6vujlo.js:22:10)\n    at Object.<anonymous> (/tmp/tmpwh6vujlo.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = (numbers[1] - numbers[0]);\n    var new_min\
    \ = (numbers[0] - min) / range;\n    var new_max = (numbers[1] - min) / range;\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * new_range + new_min);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpqxlo2akf.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqxlo2akf.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = (max\
    \ - min);\n\tvar scale = (range == 0) ? 0 : ((range / min) * 100);\n\treturn [min,\
    \ scale];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2395\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppx478ixl.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmppx478ixl.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2395\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : 1 / (range + 1);\n    var new_numbers\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        new_numbers.push(numbers[i]\
    \ * scale);\n    }\n    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.0408997955010225,\n\
    \  1.0204498977505112\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpr03_k3hh.js:22:10)\n    at Object.<anonymous> (/tmp/tmpr03_k3hh.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.0408997955010225,\
    \ 1.0204498977505112 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value){\n            min_value = numbers[i];\n  \
    \      }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n    }\n    var scale = (max_value - min_value) / (numbers.length -\
    \ 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpxcg4ijdq.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxcg4ijdq.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / (max - min)) *\
    \ 0.5);\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.5,\n  50.4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpcvld2poc.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcvld2poc.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.5, 50.4\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.0417536534446765,\n\
    \  50.94175365344468\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp5eqtgesu.js:22:10)\n    at Object.<anonymous> (/tmp/tmp5eqtgesu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.0417536534446765,\
    \ 50.94175365344468 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  return [min, max];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9geslynj.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9geslynj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / (max - min)) *\
    \ 100);\n    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min;\n \
    \   new_numbers[1] = numbers[1] - min;\n    new_numbers[2] = numbers[2] - min;\n\
    \    new_numbers[3] = numbers[3] - min;\n    new_numbers[4] = numbers[4] - min;\n\
    \    new_numbers[5] = numbers[5] - min;\n    new_numbers[6] = numbers[6] - min;\n\
    \    new_numbers[7] = numbers[7] - min;\n    new_numbers[8] = numbers[8] - min;\n\
    \    new_numbers[9] = numbers[9] - min;\n    new_numbers[10] = numbers[10] - min;\n\
    \    new_numbers[11] = numbers[11] - min;\n    new_numbers[12] = numbers[12] -\
    \ min;\n    new_numbers[13] = numbers[13] - min;\n    new_numbers[14] = numbers[14]\
    \ - min;\n    new_numbers[15] = numbers[15] - min;\n    new_numbers[16] = numbers[16]\
    \ - min;\n    new_numbers[17] = numbers[17] - min;\n    new_numbers[18] = numbers[18]\
    \ - min;\n    new_numbers[19] = numbers[19] - min;\n    new_numbers[20] = numbers[20]\
    \ - min;\n    new_numbers[21] = numbers[21] - min;\n    new_numbers[22] = numbers[22]\
    \ - min;\n    new_numbers[23] = numbers[23] - min;\n    new_numbers[24] = numbers[24]\
    \ - min;\n    new_numbers[25] = numbers[25] - min;\n    new_numbers[26] = numbers[26]\
    \ - min;\n    new_numbers[27] = numbers[27] - min;\n    new_numbers[28] = numbers[28]\
    \ - min;\n    new_numbers[29] = numbers[29] - min;\n    new_numbers[30] = numbers[30]\
    \ - min;\n    new_numbers[31] = numbers[31] - min;\n    new_numbers[32] = numbers[32]\
    \ - min;\n    new_numbers[33] = numbers[33] - min;\n    new_numbers[34] = numbers[34]\
    \ - min;\n    new_numbers[35] = numbers[35] - min;\n    new_numbers[36] = numbers[36]\
    \ - min;\n    new_numbers[37] = numbers[37] - min;\n    new_numbers[38] = numbers[38]\
    \ - min;\n    new_numbers[39] = number\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4n3b_eeh.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmptjsqepk7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmptjsqepk7.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.0417536534446765,\n\
    \  50.94175365344468\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp5eqtgesu.js:22:10)\n    at Object.<anonymous> (/tmp/tmp5eqtgesu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.0417536534446765,\
    \ 50.94175365344468 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppwi9kqe9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwi9kqe9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var range = (max - min);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] - min);\n    }\n    new_numbers.push(range);\n\
    \    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9,\n\
    \  49.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvcqckjzq.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvcqckjzq.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9,\
    \ 49.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n    }\n    var scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9sjn28d0.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9sjn28d0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    var scale = (max_value - min_value)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfi6hc1bc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6hc1bc.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    var scale = (max_value - min_value)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfi6hc1bc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6hc1bc.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppwi9kqe9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwi9kqe9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpju2xmgqw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpju2xmgqw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var scale = (max - min)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  99.8,\n \
    \ 2490.0099999999998\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpdih6q3a2.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdih6q3a2.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 99.8, 2490.0099999999998\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var rescaled = [];\n    rescaled[0] = numbers[0] * scale;\n    rescaled[1]\
    \ = numbers[1] * scale;\n    return rescaled;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp_5ubdqz1.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_5ubdqz1.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        scaled_numbers.push(numbers[i] * scale);\n    }\n    return scaled_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmphmmrvg6q.js:22:10)\n    at Object.<anonymous> (/tmp/tmphmmrvg6q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : 1 / (range + 1);\n    var rescaled\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        rescaled.push(numbers[i]\
    \ * scale);\n    }\n    return rescaled;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.0408997955010225,\n\
    \  1.0204498977505112\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpdwqjnjum.js:22:10)\n    at Object.<anonymous> (/tmp/tmpdwqjnjum.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.0408997955010225,\
    \ 1.0204498977505112 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    var scale = (max_value - min_value)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfi6hc1bc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6hc1bc.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i]/range);\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446765\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp83_hzo92.js:21:10)\n    at Object.<anonymous> (/tmp/tmp83_hzo92.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446765 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1.0) / range);\n\
    \    var new_numbers = [];\n    new_numbers[0] = (numbers[0] - min) * scale;\n\
    \    new_numbers[1] = (numbers[1] - min) * scale;\n    return new_numbers;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  48.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmps_9zf6s1.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmps_9zf6s1.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 48.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n    }\n    var scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9sjn28d0.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9sjn28d0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n        else if(numbers[i] > max_number){\n            max_number\
    \ = numbers[i];\n        }\n    }\n    var scale = (max_number - min_number) /\
    \ (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n      \
    \  numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpzxwrlztz.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzxwrlztz.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i]/range);\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446765\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp83_hzo92.js:21:10)\n    at Object.<anonymous> (/tmp/tmp83_hzo92.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446765 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0])\
    \ / range);\n    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min\
    \ * scale;\n    new_numbers[1] = numbers[1] + min * scale;\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  51.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvxf16493.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvxf16493.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 51.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min * scale;\n \
    \   new_numbers[1] = numbers[1] - min * scale;\n    return new_numbers;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -0.04175365344467652,\n\
    \  47.85824634655532\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpnfoeci8j.js:21:10)\n    at Object.<anonymous> (/tmp/tmpnfoeci8j.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -0.04175365344467652,\
    \ 47.85824634655532 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] < min) min = numbers[i];\n        if(numbers[i] > max) max\
    \ = numbers[i];\n    }\n    var range = (max - min);\n    var new_range = range/numbers.length;\n\
    \    var new_min = min - range/2;\n    var new_max = max + range/2;\n    var new_numbers\
    \ = [];\n    for(var i = 0; i <= numbers.length; i++){\n        new_numbers.push(new_min\
    \ + new_range * i);\n    }\n    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  2,\n  25.95\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test\
    \ (/tmp/tmprt99gk6f.js:28:10)\n    at Object.<anonymous> (/tmp/tmprt99gk6f.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 2, 25.95 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.0417536534446765,\n\
    \  50.94175365344468\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp5eqtgesu.js:22:10)\n    at Object.<anonymous> (/tmp/tmp5eqtgesu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.0417536534446765,\
    \ 50.94175365344468 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var scale =\
    \ (range == 0) ? 0 : 1 / (range + 1);\n    return numbers.map(function(n){\n \
    \       return Math.round((n - min) * scale);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9p3j4cho.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9p3j4cho.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (max_number -\
    \ min_number) / range;\n    return numbers.map(function(number){\n        return\
    \ number - min_number * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnbjlfvri.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnbjlfvri.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i]/range);\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446765\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp83_hzo92.js:21:10)\n    at Object.<anonymous> (/tmp/tmp83_hzo92.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446765 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = max\
    \ - min;\n\tvar new_min = min - range * 0.5;\n\tvar new_max = max + range * 0.5;\n\
    \treturn [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpa6z7am9z.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa6z7am9z.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n      \
    \  rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpodzk950q.js:22:10)\n    at Object.<anonymous> (/tmp/tmpodzk950q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_array = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_array[i] = (numbers[i] - min) / range;\n    }\n    return\
    \ new_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  0.25,\n  0.5,\n\
    \  0.75,\n  1\n]\n    at test (/tmp/tmpd4recwti.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4recwti.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 0, 0.25, 0.5, 0.75, 1 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var scaled_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        scaled_numbers.push(numbers[i] * scale);\n    }\n    return scaled_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmphmmrvg6q.js:22:10)\n    at Object.<anonymous> (/tmp/tmphmmrvg6q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp2p_fzhgi.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2p_fzhgi.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.0417536534446765,\n\
    \  50.94175365344468\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp5eqtgesu.js:22:10)\n    at Object.<anonymous> (/tmp/tmp5eqtgesu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.0417536534446765,\
    \ 50.94175365344468 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  return [min, max];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9geslynj.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9geslynj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppwi9kqe9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwi9kqe9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = max\
    \ - min;\n\tvar scale = (range == 0) ? 0 : ((numbers[1] - numbers[0]) / range);\n\
    \treturn [min, max * scale];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp3qrcq1yy.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3qrcq1yy.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0]) /\
    \ range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpgt6sqnn7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgt6sqnn7.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n    }\n    var scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9sjn28d0.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9sjn28d0.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9164926931106472,\n\
    \  47.816492693110646\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpwh6vujlo.js:22:10)\n    at Object.<anonymous> (/tmp/tmpwh6vujlo.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9164926931106472,\
    \ 47.816492693110646 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var new_numbers = [];\n    for(var i = 0; i\
    \ < numbers.length; i++){\n        new_numbers.push(numbers[i] - min_number);\n\
    \    }\n    var new_min_number = Math.min.apply(null, new_numbers);\n    var new_max_number\
    \ = Math.max.apply(null, new_numbers);\n    var new_range = new_max_number - new_min_number;\n\
    \    var new_min_number = new_min_number - new_range * 0.5;\n    var new_max_number\
    \ = new_max_number + new_range * 0.5;\n    var new_range = new_max_number - new_min_number;\n\
    \    new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ new_numbers.push(numbers[i] + new_min_number);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  25.95\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpgzqv4oiz.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgzqv4oiz.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 25.95 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmptjsqepk7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmptjsqepk7.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value){\n            min_value = numbers[i];\n  \
    \      }\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n    }\n    var scale = (max_value - min_value) / (numbers.length -\
    \ 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpxcg4ijdq.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxcg4ijdq.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n    }\n    var range = (max_number - min_number);\n    var scale =\
    \ (range == 0) ? 0 : (1 / range);\n    for(var i = 1; i < numbers.length; i++){\n\
    \        numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1.0417536534446763\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9zo6ymek.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9zo6ymek.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1.0417536534446763\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpaej1omz3.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaej1omz3.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  return [min, max];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9geslynj.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9geslynj.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value){\n            min_value = numbers[i];\n  \
    \      }\n        else if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n    }\n    var range = (max_value - min_value);\n    return function(x){\n\
    \        return (x - min_value) / range;\n    };\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[Function (anonymous)]\n\
    \nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpab2svwog.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpab2svwog.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [Function\
    \ (anonymous)],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / min) * 0.5) + 0.5;\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  24.95,\n\
    \  622.5024999999999\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpqhrj82xx.js:22:10)\n    at Object.<anonymous> (/tmp/tmpqhrj82xx.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 24.95, 622.5024999999999\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled_numbers = [];\n    for(var i=0;\
    \ i<numbers.length; i++){\n        rescaled_numbers.push(numbers[i] - min_number);\n\
    \    }\n    rescaled_numbers = rescaled_numbers.map(function(x){\n        return\
    \ x / range;\n    });\n    return rescaled_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0])\
    \ / range);\n    var new_numbers = [];\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmputas7h5j.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmputas7h5j.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0])\
    \ / range);\n    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min\
    \ * scale;\n    new_numbers[1] = numbers[1] + min * scale;\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  51.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp_nv3yw55.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_nv3yw55.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 51.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i]/range);\n    }\n    return rescaled;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446765\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp83_hzo92.js:21:10)\n    at Object.<anonymous> (/tmp/tmp83_hzo92.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446765 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var range = (max - min);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i]/range);\n    }\n    return new_numbers;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04008016032064128,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpega5ikk5.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpega5ikk5.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04008016032064128,\
    \ 1 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0])\
    \ / range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppwi9kqe9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwi9kqe9.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled_numbers = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        rescaled_numbers.push(numbers[i] - min_number);\n\
    \    }\n    rescaled_numbers = rescaled_numbers.map(function(number){\n      \
    \  return number / range;\n    });\n    return rescaled_numbers;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = numbers[0];\n\
    \    var max_number = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max_number){\n            max_number = numbers[i];\n\
    \        }\n        if(numbers[i] < min_number){\n            min_number = numbers[i];\n\
    \        }\n    }\n    var scale = (max_number - min_number) / (numbers.length\
    \ - 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpt7ilftin.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt7ilftin.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = max\
    \ - min;\n\tvar new_range = range / 2;\n\tvar new_min = min - new_range;\n\tvar\
    \ new_max = max + new_range;\n\tvar new_numbers = [new_min, new_max];\n\treturn\
    \ new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpv1s7phzn.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv1s7phzn.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 0
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled_numbers = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        rescaled_numbers.push(numbers[i] - min_number);\n\
    \    }\n    return rescaled_numbers.map(function(x){\n        return x / range;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : (numbers[1] - numbers[0]) /\
    \ range;\n    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min * scale;\n\
    \    new_numbers[1] = numbers[1] + min * scale;\n    return new_numbers;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  51.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpgz17zzf2.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgz17zzf2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 51.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var new_min = min - range * 0.5;\n    var new_max = max +\
    \ range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp0hzak2im.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0hzak2im.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / min) * 0.5) + 0.5;\n\
    \    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min;\n    new_numbers[1]\
    \ = numbers[1] - min;\n    new_numbers[2] = numbers[2] - min;\n    new_numbers[3]\
    \ = numbers[3] - min;\n    new_numbers[4] = numbers[4] - min;\n    new_numbers[5]\
    \ = numbers[5] - min;\n    new_numbers[6] = numbers[6] - min;\n    new_numbers[7]\
    \ = numbers[7] - min;\n    new_numbers[8] = numbers[8] - min;\n    new_numbers[9]\
    \ = numbers[9] - min;\n    new_numbers[10] = numbers[10] - min;\n    new_numbers[11]\
    \ = numbers[11] - min;\n    new_numbers[12] = numbers[12] - min;\n    new_numbers[13]\
    \ = numbers[13] - min;\n    new_numbers[14] = numbers[14] - min;\n    new_numbers[15]\
    \ = numbers[15] - min;\n    new_numbers[16] = numbers[16] - min;\n    new_numbers[17]\
    \ = numbers[17] - min;\n    new_numbers[18] = numbers[18] - min;\n    new_numbers[19]\
    \ = numbers[19] - min;\n    new_numbers[20] = numbers[20] - min;\n    new_numbers[21]\
    \ = numbers[21] - min;\n    new_numbers[22] = numbers[22] - min;\n    new_numbers[23]\
    \ = numbers[23] - min;\n    new_numbers[24] = numbers[24] - min;\n    new_numbers[25]\
    \ = numbers[25] - min;\n    new_numbers[26] = numbers[26] - min;\n    new_numbers[27]\
    \ = numbers[27] - min;\n    new_numbers[28] = numbers[28] - min;\n    new_numbers[29]\
    \ = numbers[29] - min;\n    new_numbers[30] = numbers[30] - min;\n    new_numbers[31]\
    \ = numbers[31] - min;\n    new_numbers[32] = numbers[32] - min;\n    new_numbers[33]\
    \ = numbers[33] - min;\n    new_numbers[34] = numbers[34] - min;\n    new_numbers[35]\
    \ = numbers[35] - min;\n    new_numbers[36] = numbers[36] - min;\n    new_numbers[37]\
    \ = numbers[37] - min;\n    new_numbers[38] = numbers[38] - min;\n    new_numbers[39\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8ho810o1.js:51\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 0; i < numbers.length; i++){\n        var\
    \ n = numbers[i];\n        if(n < min) min = n;\n        if(n > max) max = n;\n\
    \    }\n    var scale = (max - min) / (numbers.length - 1);\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        var n = numbers[i];\n        numbers[i] =\
    \ n*scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  99.8,\n \
    \ 2490.0099999999998\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp1e1f90ew.js:26:10)\n    at Object.<anonymous> (/tmp/tmp1e1f90ew.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 99.8, 2490.0099999999998\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((max - min) / range);\n  \
    \  var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   new_numbers.push(numbers[i] + scale);\n    }\n    return new_numbers;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  50.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpw0sljyvq.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw0sljyvq.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 50.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var scale =\
    \ (range == 0) ? 0 : 1 / (max - min);\n    return numbers.map(function(n){\n \
    \       return Math.round(n * scale);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmplzgkv4qq.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmplzgkv4qq.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range + 1.0) / range);\n\
    \    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n      \
    \  rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.0417536534446765,\n\
    \  50.94175365344468\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp7sstocse.js:22:10)\n    at Object.<anonymous> (/tmp/tmp7sstocse.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.0417536534446765,\
    \ 50.94175365344468 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    return numbers.map(function(n){\n        return Math.round((n - min) * scale);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  49\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpefwffqg7.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpefwffqg7.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 49 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var range = (max - min);\n\
    \    var new_numbers = [];\n    for(var i = 0; i < (numbers.length - 1); i++){\n\
    \        new_numbers.push(numbers[i] - min);\n    }\n    new_numbers.push(1);\n\
    \    new_numbers.push(0);\n    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmprvh_gn4q.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmprvh_gn4q.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 0\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var scale = (max - min)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  99.8,\n \
    \ 2490.0099999999998\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpi0h1c8w2.js:28:10)\n    at Object.<anonymous> (/tmp/tmpi0h1c8w2.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 99.8, 2490.0099999999998\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(function(number){\n        return number - min_number\
    \ * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1.9582463465553235,\n\
    \  49.85824634655532\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpr0y1jtt6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpr0y1jtt6.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1.9582463465553235,\
    \ 49.85824634655532 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] < min) min = numbers[i];\n        if(numbers[i] > max) max\
    \ = numbers[i];\n    }\n    var range = (max - min);\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvxpxwqbu.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvxpxwqbu.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range - min) / range);\n\
    \    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min * scale;\n \
    \   new_numbers[1] = numbers[1] - min * scale;\n    return new_numbers;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.08350730688935282,\n\
    \  47.98350730688935\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpyrfrg1s_.js:21:10)\n    at Object.<anonymous> (/tmp/tmpyrfrg1s_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.08350730688935282,\
    \ 47.98350730688935 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ < min) min = numbers[i];\n        if(numbers[i] > max) max = numbers[i];\n \
    \   }\n    var scale = (max - min) / (numbers.length - 1);\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        numbers[i] *= scale;\n    }\n    return numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  99.8,\n \
    \ 2490.0099999999998\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmpvqk0j0q8.js:24:10)\n    at Object.<anonymous> (/tmp/tmpvqk0j0q8.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 99.8, 2490.0099999999998\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var rescaled = [];\n    for(var i = 0; i < numbers.length; i++){\n      \
    \  rescaled.push(numbers[i] * scale);\n    }\n    return rescaled;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvqz6u5x8.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvqz6u5x8.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : 1 / (range +\
    \ 1);\n    return numbers.map(function(number){\n        return number * scale;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.0408997955010225,\n\
    \  1.0204498977505112\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmpbjewcljh.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbjewcljh.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.0408997955010225,\
    \ 1.0204498977505112 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = (max\
    \ - min);\n\tvar new_min = min - range * 0.5;\n\tvar new_max = max + range * 0.5;\n\
    \tvar new_numbers = [new_min, new_max];\n\treturn new_numbers;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpxi2t_95l.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxi2t_95l.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = (max - min);\n    var scale\
    \ = (range == 0) ? 0 : ((range + 1) / (max - min));\n    return numbers.map(function(n){\n\
    \        return (n * scale) + min;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp0kwyo904.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0kwyo904.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (max_number -\
    \ min_number) / range;\n    return numbers.map(function(number){\n        return\
    \ number - min_number * scale;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnbjlfvri.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnbjlfvri.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = numbers[0];\n\
    \tvar max = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < min) min = numbers[i];\n\t\tif(numbers[i] > max) max = numbers[i];\n\t}\n\t\
    var diff = (max - min);\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tnumbers[i]\
    \ = (numbers[i] - min) / diff;\n\t}\n\treturn numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpt8_0jkuk.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt8_0jkuk.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    return [min_value, max_value];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpns5zs7ov.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpns5zs7ov.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpju2xmgqw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpju2xmgqw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpju2xmgqw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpju2xmgqw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value){\n            min_value = numbers[i];\n  \
    \      }\n        else if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n    }\n    var range = (max_value - min_value);\n    return function(x){\n\
    \        return (x - min_value) / range;\n    };\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[Function (anonymous)]\n\
    \nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpab2svwog.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpab2svwog.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [Function\
    \ (anonymous)],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpaej1omz3.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaej1omz3.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = (max\
    \ - min);\n\tvar new_min = min - range * 0.5;\n\tvar new_max = max + range * 0.5;\n\
    \tvar new_range = new_max - new_min;\n\tvar new_numbers = [];\n\tnew_numbers[0]\
    \ = new_min;\n\tnew_numbers[1] = new_max;\n\tnew_numbers[2] = new_range;\n\treturn\
    \ new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85,\n  95.8\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test\
    \ (/tmp/tmpgbhhiaty.js:24:10)\n    at Object.<anonymous> (/tmp/tmpgbhhiaty.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85, 95.8 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2.0417536534446765,\n\
    \  50.94175365344468\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at\
    \ test (/tmp/tmp5eqtgesu.js:22:10)\n    at Object.<anonymous> (/tmp/tmp5eqtgesu.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2.0417536534446765,\
    \ 50.94175365344468 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn2v7so_i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2v7so_i.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range + 1) / (max - min));\n\
    \    return numbers.map(function(n){\n        return Math.round((n - min) * scale);\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  49\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpefwffqg7.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpefwffqg7.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 49 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(function(number){\n        return number * scale;\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446763\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp0p14eofw.js:20:10)\n    at Object.<anonymous> (/tmp/tmp0p14eofw.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446763 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = _.min(numbers);\n\
    \    var max = _.max(numbers);\n    var range = (max - min);\n    var new_range\
    \ = (range / numbers.length);\n    var new_min = min - new_range;\n    var new_max\
    \ = max + new_range;\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(new_min + (new_numbers[i] * new_range));\n \
    \   }\n    return new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp57i54typ.js:6\n    var min = _.min(numbers);\n              ^\n\
    \nReferenceError: _ is not defined\n    at rescale_to_unit (/tmp/tmp57i54typ.js:6:15)\n\
    \    at test (/tmp/tmp57i54typ.js:24:20)\n    at Object.<anonymous> (/tmp/tmp57i54typ.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((numbers[1] - numbers[0])\
    \ / range);\n    return numbers.map(function(n){\n        return Math.round((n\
    \ - min) * scale);\n    });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  48\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp9aoiq21f.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9aoiq21f.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 48 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var scale = (range == 0) ? 0 : (1 / range);\n\
    \    return numbers.map(function(number){\n        return number * scale;\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04175365344467641,\n\
    \  1.0417536534446763\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n   \
    \ at test (/tmp/tmp0p14eofw.js:20:10)\n    at Object.<anonymous> (/tmp/tmp0p14eofw.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04175365344467641,\
    \ 1.0417536534446763 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var rescaled = [];\n    for(var i=0; i<numbers.length; i++){\n\
    \        rescaled.push(numbers[i] - min);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp65fiyrtg.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp65fiyrtg.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min * scale;\n \
    \   new_numbers[1] = numbers[1] - min * scale;\n    return new_numbers;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp8mb6ep4g.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8mb6ep4g.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_array = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_array[i] = (numbers[i] - min) / range;\n    }\n    return\
    \ new_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  0.25,\n  0.5,\n\
    \  0.75,\n  1\n]\n    at test (/tmp/tmpd4recwti.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4recwti.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 0, 0.25, 0.5, 0.75, 1 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var scale =\
    \ (range == 0) ? 0 : 1 / (range + 1);\n    var rescaled = [];\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        rescaled.push(numbers[i] * scale);\n \
    \   }\n    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp7374glqj.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7374glqj.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = numbers[0];\n\
    \    var max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n   \
    \     if(numbers[i] > max){\n            max = numbers[i];\n        }\n      \
    \  if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n  \
    \  var range = (max - min);\n    for(var i = 1; i < numbers.length; i++){\n  \
    \      numbers[i] = (numbers[i] - min) / range;\n    }\n    return numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpbmuczb6o.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbmuczb6o.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp2p_fzhgi.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2p_fzhgi.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] > max_value){\n            max_value = numbers[i];\n  \
    \      }\n        if(numbers[i] < min_value){\n            min_value = numbers[i];\n\
    \        }\n    }\n    var scale = (max_value - min_value) / (numbers.length -\
    \ 1);\n    for(var i = 0; i < numbers.length; i++){\n        numbers[i] *= scale;\n\
    \    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmph60azykb.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmph60azykb.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = max\
    \ - min;\n\tvar new_range = range / 2;\n\tvar new_min = min - new_range;\n\tvar\
    \ new_max = max + new_range;\n\tvar new_numbers = [new_min, new_max, new_min,\
    \ new_max];\n\treturn new_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85,\n  -21.95,\n  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n\
    ]\n    at test (/tmp/tmp2jbhftt_.js:21:10)\n    at Object.<anonymous> (/tmp/tmp2jbhftt_.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85, -21.95, 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = (max - min);\n    var scale\
    \ = (range == 0) ? 0 : ((range + 1) / (max - min));\n    var rescaled = [];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        rescaled.push(numbers[i]\
    \ * scale);\n    }\n    return rescaled;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmplyr34uij.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplyr34uij.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    var new_range = new_max - new_min;\n    return [new_min,\
    \ new_max, new_range];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85,\n  95.8\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test\
    \ (/tmp/tmpztcplmx5.js:20:10)\n    at Object.<anonymous> (/tmp/tmpztcplmx5.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85, 95.8 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = (max\
    \ - min);\n\tvar scale = (range == 0) ? 0 : ((range / max) + 1);\n\treturn [min,\
    \ scale];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1.9599198396793587\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp6z1e6rlu.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6z1e6rlu.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1.9599198396793587\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var new_min = min - range * 0.5;\n    var new_max = max +\
    \ range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp0hzak2im.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0hzak2im.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_min = min - range * 0.5;\n    var new_max = max\
    \ + range * 0.5;\n    return [new_min, new_max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn2v7so_i.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn2v7so_i.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    var rescaled_min\
    \ = Math.min.apply(null, rescaled);\n    var rescaled_max = Math.max.apply(null,\
    \ rescaled);\n    var rescaled_range = rescaled_max - rescaled_min;\n    var new_min\
    \ = rescaled_min - range * 0.5;\n    var new_max = rescaled_max + range * 0.5;\n\
    \    var new_range = new_max - new_min;\n    var new_rescaled = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        new_rescaled.push(numbers[i] + new_min);\n\
    \    }\n    return new_rescaled;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  25.95\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmph_92hv7z.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmph_92hv7z.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 25.95 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = max - min;\n    var scale = (range == 0) ? 0 : ((range == 1) ? 1 : (range\
    \ / (max - min)));\n    var new_numbers = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpz398_cao.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz398_cao.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers);\n\
    \    var max = Math.max(numbers);\n    var range = max - min;\n    var new_min\
    \ = min - range * 0.5;\n    var new_max = max + range * 0.5;\n    var new_numbers\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        new_numbers.push(new_min\
    \ + (new_max - new_min) * numbers[i] / range);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpvt5sjzib.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvt5sjzib.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var new_range = range / 2;\n    var new_min = min - new_range;\n\
    \    var new_max = max + new_range;\n    return [new_min, new_max];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rescale_to_unit;\n\
    \  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0,\
    \ 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpnqhfzdkt.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnqhfzdkt.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = 0;\n    var\
    \ max = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i]\
    \ > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n\
    \            min = numbers[i];\n        }\n    }\n    var range = (max - min);\n\
    \    var new_numbers = [];\n    for(var i = 0; i <= numbers.length; i++){\n  \
    \      new_numbers.push(min + (numbers[i] - min) / range);\n    }\n    return\
    \ new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0,\
    \ 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.04008016032064128,\n\
    \  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfo_sszg6.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfo_sszg6.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.04008016032064128,\
    \ 1, NaN ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpju2xmgqw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpju2xmgqw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : ((range / min) * 0.5) + 0.5;\n\
    \    var new_numbers = [];\n    new_numbers[0] = numbers[0] - min;\n    new_numbers[1]\
    \ = numbers[1] - min;\n    new_numbers[2] = numbers[2] - min;\n    new_numbers[3]\
    \ = numbers[3] - min;\n    new_numbers[4] = numbers[4] - min;\n    new_numbers[5]\
    \ = numbers[5] - min;\n    new_numbers[6] = numbers[6] - min;\n    new_numbers[7]\
    \ = numbers[7] - min;\n    new_numbers[8] = numbers[8] - min;\n    new_numbers[9]\
    \ = numbers[9] - min;\n    new_numbers[10] = numbers[10] - min;\n    new_numbers[11]\
    \ = numbers[11] - min;\n    new_numbers[12] = numbers[12] - min;\n    new_numbers[13]\
    \ = numbers[13] - min;\n    new_numbers[14] = numbers[14] - min;\n    new_numbers[15]\
    \ = numbers[15] - min;\n    new_numbers[16] = numbers[16] - min;\n    new_numbers[17]\
    \ = numbers[17] - min;\n    new_numbers[18] = numbers[18] - min;\n    new_numbers[19]\
    \ = numbers[19] - min;\n    new_numbers[20] = numbers[20] - min;\n    new_numbers[21]\
    \ = numbers[21] - min;\n    new_numbers[22] = numbers[22] - min;\n    new_numbers[23]\
    \ = numbers[23] - min;\n    new_numbers[24] = numbers[24] - min;\n    new_numbers[25]\
    \ = numbers[25] - min;\n    new_numbers[26] = numbers[26] - min;\n    new_numbers[27]\
    \ = numbers[27] - min;\n    new_numbers[28] = numbers[28] - min;\n    new_numbers[29]\
    \ = numbers[29] - min;\n    new_numbers[30] = numbers[30] - min;\n    new_numbers[31]\
    \ = numbers[31] - min;\n    new_numbers[32] = numbers[32] - min;\n    new_numbers[33]\
    \ = numbers[33] - min;\n    new_numbers[34] = numbers[34] - min;\n    new_numbers[35]\
    \ = numbers[35] - min;\n    new_numbers[36] = numbers[36] - min;\n    new_numbers[37]\
    \ = numbers[37] - min;\n    new_numbers[38] = numbers[38] - min;\n    new_numbers[39\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8ho810o1.js:51\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min = Math.min(numbers[0],\
    \ numbers[1]);\n    var max = Math.max(numbers[0], numbers[1]);\n    var range\
    \ = (max - min);\n    var scale = (range == 0) ? 0 : (range / (max - min));\n\
    \    var new_numbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     new_numbers.push(numbers[i] * scale);\n    }\n    return new_numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rescale_to_unit;\n  assert.deepEqual(candidate([2.0, 49.9]),[0.0, 1.0]);\n\
    \  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n  assert.deepEqual(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75, 1.0]);\n  assert.deepEqual(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]),[0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  49.9\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpju2xmgqw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpju2xmgqw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 49.9\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_value = numbers[0];\n\
    \    var max_value = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n\
    \        if(numbers[i] < min_value) min_value = numbers[i];\n        if(numbers[i]\
    \ > max_value) max_value = numbers[i];\n    }\n    var scale = (max_value - min_value)\
    \ / (numbers.length - 1);\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    numbers[i] *= scale;\n    }\n    return numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  95.8,\n \
    \ 2390.21\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpfi6hc1bc.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6hc1bc.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 95.8, 2390.21\
    \ ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748818
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n\tvar min = Math.min(numbers[0],\
    \ numbers[1]);\n\tvar max = Math.max(numbers[0], numbers[1]);\n\tvar range = (max\
    \ - min);\n\tvar new_min = min - range * 0.5;\n\tvar new_max = max + range * 0.5;\n\
    \tvar new_range = new_max - new_min;\n\tvar new_numbers = [new_min, new_max, new_range];\n\
    \treturn new_numbers;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -21.95,\n\
    \  73.85,\n  95.8\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test\
    \ (/tmp/tmp4c0zni07.js:21:10)\n    at Object.<anonymous> (/tmp/tmp4c0zni07.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -21.95,\
    \ 73.85, 95.8 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659748819
- exit_code: 1
  program: "//Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n    var min_number = Math.min.apply(null,\
    \ numbers);\n    var max_number = Math.max.apply(null, numbers);\n    var range\
    \ = max_number - min_number;\n    var rescaled = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rescaled.push(numbers[i] - min_number);\n    }\n    rescaled.push(range);\n\
    \    return rescaled;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rescale_to_unit;\n  assert.deepEqual(candidate([2.0,\
    \ 49.9]),[0.0, 1.0]);\n  assert.deepEqual(candidate([100.0, 49.9]),[1.0, 0.0]);\n\
    \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0]),[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]);\n  assert.deepEqual(candidate([2.0, 1.0, 5.0, 3.0, 4.0]),[0.25, 0.0,\
    \ 1.0, 0.5, 0.75]);\n  assert.deepEqual(candidate([12.0, 11.0, 15.0, 13.0, 14.0]),[0.25,\
    \ 0.0, 1.0, 0.5, 0.75]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  47.9,\n\
    \  47.9\n]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp2p_fzhgi.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2p_fzhgi.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 47.9,\
    \ 47.9 ],\n  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
