name: HumanEval_87_get_row
language: js
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst,\
  \ x){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
  \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
  \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n\
  \  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["  if(lst.length == 0){\n    return [];\n  }\n  var result = [];\n \
    \ var row = [];\n  for(var i = 0, len = lst.length; i < len; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      row.push(i);\n    }\n  }\n  if(row.length > 0){\n    result.push(row);\n\
    \  }\n  for(var i = 0, len = lst.length; i < len; i++){\n    if(lst[i].indexOf(x)\
    \ == -1){\n      row.push(i);\n    }\n  }\n  if(row.length > 0){\n    result.push(row);\n\
    \  }\n  return result;\n}\n", "    var result = [];\n    for(var i = 0, len =\
    \ lst.length; i < len; i++){\n        var row = lst[i];\n        if(row.indexOf(x)\
    \ !== -1){\n            result.push([i, row.indexOf(x)]);\n        }\n    }\n\
    \    result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    result.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    return result;\n}\n", "    var\
    \ result = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n        }\n    }\n\
    \    result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    result.sort(function(a,\
    \ b){\n        return b[0] - a[0];\n    });\n    return result;\n}\n", "    var\
    \ result = [];\n    for(var i = 0, len = lst.length; i < len; i++){\n        var\
    \ row = lst[i];\n        if(row.indexOf(x) !== -1){\n            result.push([i,\
    \ row.indexOf(x)]);\n        }\n    }\n    result.sort(function(a, b){\n     \
    \   return a[1] - b[1];\n    });\n    result.sort(function(a, b){\n        return\
    \ b[0] - a[0];\n    });\n    return result;\n}\n", "    if(!lst.length) return\
    \ [];\n    var result = [];\n    var row = [];\n    var row_len = 0;\n    for(var\
    \ i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x) !== -1){\n\
    \            row.push(i);\n            row_len++;\n        }\n    }\n    result.push(row);\n\
    \    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(i);\n            row_len++;\n        }\n    }\n\
    \    result.push(row);\n    for(var i = 0, len = lst.length; i < len; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            row.push(i);\n           \
    \ row_len++;\n        }\n    }\n    result.push(row);\n    for(var i = 0, len\
    \ = lst.length; i < len; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      row.push(i);\n            row_len++;\n        }\n    }\n    result.push(row);\n\
    \    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(i);\n            row_len++;\n        }\n    }\n\
    \    result.push(row);\n    for(var i = 0, len = lst.length; i < len; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            row.push(i);\n           \
    \ row_len++;\n        }\n    }\n    result.push(row);\n    for(var i = 0, len\
    \ = lst.length; i < len; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      row.push(i);\n            row_len++;\n        }\n    }\n    result.push(row);\n\
    \    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(i);\n            row_len++;\n        }\n    }\n\
    \    result.push(row);\n    for(var i = 0, len = lst.length; i < len; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            row.push(i);\n           \
    \ row_len++;\n        }\n    }\n    result.push(row);\n    for(var i = 0, len\
    \ = lst.length; i < len; i++){\n        if(lst[i].indexOf(x) !== -1){\n      \
    \      row.push(i);\n            row_len++;\n        }\n    }\n    result.push(row);\n\
    \    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(i);\n            row_len++;\n        }\n    }\n\
    \    result.push(row);\n    for(var i = 0, len = lst.length; i < len; i++){\n\
    \        if(lst[i].indexOf(x) !== -1){\n            row.push(i);\n           \
    \ row_len++;\n        }\n    }\n    result.push(row);\n    for(var i = 0, len\
    \ = lst.length; i < len; i++){\n        if(", "    var res = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        var row = lst[i];\n        var row_x =\
    \ row[x];\n        for(var j = 0; j < row.length; j++){\n            if(row_x\
    \ == row[j]){\n                res.push([i, j]);\n            }\n        }\n \
    \   }\n    res.sort(function(a, b){\n        return a[0] - b[0];\n    });\n  \
    \  res.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    return\
    \ res;\n}\n", "    var result = [];\n    for(var i=0; i<lst.length; i++){\n  \
    \      if(lst[i].indexOf(x) !== -1){\n            result.push([i, lst[i].indexOf(x)]);\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[1] - b[1];\n\
    \    });\n    result.sort(function(a, b){\n        return b[0] - a[0];\n    });\n\
    \    return result;\n}\n", "    let result = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let row = [];\n        for(let j = 0; j < lst[i].length; j++){\n\
    \            if(j === x){\n                row.push([i, j]);\n            }\n\
    \        }\n        result.push(row);\n    }\n    result.sort((a, b) => a[0] -\
    \ b[0]);\n    result.sort((a, b) => a[1] - b[1], (a, b) => a[0] - b[0]);\n   \
    \ return result;\n}\n", "    var result = [];\n    for(var i=0; i<lst.length;\
    \ i++){\n        var row = [];\n        for(var j=0; j<lst[i].length; j++){\n\
    \            if(lst[i][j] == x){\n                row.push([i, j]);\n        \
    \    }\n        }\n        result.push(row);\n    }\n    result.sort(function(a,\
    \ b){\n        return a[0]-b[0];\n    });\n    result.sort(function(a, b){\n \
    \       return a[1]-b[1];\n    });\n    return result;\n}\n", "    var result\
    \ = [];\n    for(var i=0; i<lst.length; i++){\n        var row = [];\n       \
    \ for(var j=0; j<lst[i].length; j++){\n            if(lst[i][j] == x){\n     \
    \           row.push([i, j]);\n            }\n        }\n        result.push(row);\n\
    \    }\n    result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\
    \    result.sort(function(a, b){\n        return a[1] - b[1];\n    });\n    return\
    \ result;\n}\n", "  var res = [];\n  for(var i=0; i<lst.length; i++){\n    var\
    \ row = lst[i];\n    if(row.indexOf(x) !== -1){\n      res.push([i, row.indexOf(x)]);\n\
    \    }\n  }\n  res.sort(function(a, b){\n    return a[1] - b[1];\n  });\n  res.sort(function(a,\
    \ b){\n    return b[0] - a[0];\n  });\n  return res;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    if(lst.length == 1){\n        return\
    \ [[0, lst[0].length]];\n    }\n    var row = [];\n    var rows = [];\n    var\
    \ row_index = 0;\n    for(var i = 0, len = lst.length; i < len; i++){\n      \
    \  if(lst[i].indexOf(x) != -1){\n            row.push(i);\n        }\n       \
    \ if(row.length == x){\n            rows.push(row);\n            row = [];\n \
    \       }\n    }\n    rows.push(row);\n    return rows;\n}\n", "  var result =\
    \ [];\n  for(var i=0; i<lst.length; i++){\n    var row = lst[i];\n    var rowResult\
    \ = [];\n    for(var j=0; j<row.length; j++){\n      if(row[j] == x){\n      \
    \  rowResult.push([i, j]);\n      }\n    }\n    result.push(rowResult);\n  }\n\
    \  result.sort(function(a, b){\n    return a[0] - b[0];\n  });\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  return result;\n}\n", "  var row = [];\n\
    \  var rows = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      row.push(i);\n      rows.push(row);\n      row = [];\n    }\n\
    \  }\n  if(row.length){\n    rows.push(row);\n  }\n  rows.sort(function(a, b){\n\
    \    return b[0]-a[0] || b[1]-a[1];\n  });\n  var result = [];\n  for(var i=0;\
    \ i<rows.length; i++){\n    var row = rows[i];\n    row.sort(function(a, b){\n\
    \      return b[0]-a[0] || b[1]-a[1];\n    });\n    for(var j=0; j<row.length;\
    \ j++){\n      result.push([row[j], i]);\n    }\n  }\n  return result;\n}\n",
  "    if(!lst.length) return [];\n    var result = [];\n    var row = [];\n    var\
    \ col = [];\n    for(var i = 0, len = lst.length; i < len; i++){\n        if(lst[i].indexOf(x)\
    \ !== -1){\n            row.push(i);\n            col.push(lst[i].indexOf(x));\n\
    \        }\n    }\n    result.push(row);\n    result.push(col);\n    result.sort(function(a,\
    \ b){\n        return b[1] - a[1];\n    });\n    result.sort(function(a, b){\n\
    \        return b[2] - a[2];\n    });\n    return result;\n}\n", "  if(lst.length\
    \ == 0){\n    return [];\n  }\n  var row = [];\n  var row_index = 0;\n  var col_index\
    \ = 0;\n  while(row_index < lst.length){\n    if(lst[row_index][col_index] ==\
    \ x){\n      row.push([row_index, col_index]);\n      row_index++;\n      col_index++;\n\
    \      if(col_index == lst[row_index].length){\n        row_index++;\n       \
    \ col_index = 0;\n      }\n    }else{\n      col_index = 0;\n    }\n  }\n  row.sort(function(a,\
    \ b){\n    return b[0] - a[0];\n  });\n  row.sort(function(a, b){\n    return\
    \ b[1] - a[1];\n  });\n  return row;\n}\n", "  var result = [];\n  var row = [];\n\
    \  var rows = [];\n  var cols = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i].indexOf(x)\
    \ != -1){\n      row.push(i);\n      rows.push(row);\n      cols.push(lst[i].indexOf(x));\n\
    \    }\n  }\n  for(var i=0; i<rows.length; i++){\n    for(var j=0; j<cols.length;\
    \ j++){\n      result.push([rows[i], cols[j]]);\n    }\n  }\n  result.sort(function(a,\
    \ b){\n    return b[1] - a[1];\n  });\n  return result;\n}\n", "    var result\
    \ = [];\n    for(var i = 0, len = lst.length; i < len; i++){\n        var row\
    \ = lst[i];\n        if(row.indexOf(x) !== -1){\n            result.push([i, row.indexOf(x)]);\n\
    \        }\n    }\n    result.sort(function(a, b){\n        return a[1] - b[1];\n\
    \    });\n    result.sort(function(a, b){\n        return b[0] - a[0];\n    });\n\
    \    return result;\n}\n", "  if(lst.length < 1) return [];\n  if(lst.length ==\
    \ 1) return [lst[0]];\n  var row = [];\n  var row_index = 0;\n  var column_index\
    \ = 0;\n  var row_indexes = [];\n  var column_indexes = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i] == x){\n      row.push([row_index, column_index]);\n  \
    \    row_indexes.push(row_index);\n      column_indexes.push(column_index);\n\
    \      row_index++;\n      column_index = 0;\n    }else{\n      column_index++;\n\
    \    }\n  }\n  row.push([row_index, column_index]);\n  row_indexes.push(row_index);\n\
    \  column_indexes.push(column_index);\n  row_indexes.sort(function(a, b){return\
    \ b-a});\n  column_indexes.sort(function(a, b){return b-a});\n  return row;\n\
    }\n", "  if(lst.length < 1){\n    return [];\n  }\n  var result = [];\n  var row\
    \ = [];\n  var rows = [];\n  var cols = [];\n  for(var i = 0, len = lst.length;\
    \ i < len; i++){\n    var item = lst[i];\n    if(item === x){\n      result.push(row);\n\
    \      row = [];\n      rows.push(row);\n      cols.push(item);\n    }else{\n\
    \      row.push(item);\n    }\n  }\n  result.push(row);\n  rows = rows.reverse();\n\
    \  for(var i = 0, len = rows.length; i < len; i++){\n    for(var j = 0, len2 =\
    \ rows[i].length; j < len2; j++){\n      cols.push(rows[i][j]);\n    }\n  }\n\
    \  cols = cols.reverse();\n  for(var i = 0, len = cols.length; i < len; i++){\n\
    \    result.push([i, cols[i]]);\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
