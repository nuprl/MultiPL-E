name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["  var a = [1,1];\n  for(var i=2; i<=n; i++){\n    a.push(a[i-1]+a[i-2]);\n\
    \  }\n  return a[n];\n}\n", "    if (n < 2){\n        return 1;\n    }\n    if\
    \ (n < 3){\n        return n;\n    }\n    if (n % 2 == 0){\n        return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n    }\n    return prime_fib(n - 3) + prime_fib(n -\
    \ 2);\n}\n", "    var a = [1,1];\n    for(var i=2; i<=n; i++){\n        a.push(Math.pow(a,i)+a[i-1]);\n\
    \    }\n    return a[n-1];\n}\n", "    var i, fib_n, prime_fib;\n    prime_fib\
    \ = 0;\n    fib_n = 0;\n    for(i = 1; i <= n; i++){\n        fib_n = fib_n +\
    \ i;\n        if(fib_n === n){\n            prime_fib = i;\n            break;\n\
    \        }\n        if(fib_n % i === 0){\n            prime_fib = i;\n       \
    \     break;\n        }\n    }\n    return prime_fib;\n}\n", "  if (n < 2) return\
    \ 1;\n  if (n < 3) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 ==\
    \ 0) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 3 == 0) return prime_fib(n\
    \ - 3) + prime_fib(n - 5);\n  return prime_fib(n - 3) + prime_fib(n - 5) + prime_fib(n\
    \ - 7);\n}\n", "  var a = 0, b = 1, c;\n  for(var i = 0; i < n; i++){\n    c =\
    \ a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}\n", "  var prime_fib_cache\
    \ = {};\n  prime_fib_cache[1] = 0;\n  prime_fib_cache[2] = 1;\n  for(var i = 2;\
    \ i < n; i++){\n    var prime_fib_cache_i = prime_fib_cache[i];\n    if(prime_fib_cache_i\
    \ === undefined){\n      prime_fib_cache_i = prime_fib_cache[i-1] + prime_fib_cache[i-2];\n\
    \      prime_fib_cache[i] = prime_fib_cache_i;\n    }\n  }\n  return prime_fib_cache[n];\n\
    }\n", "  var i, fib_number, fib;\n  fib_number = 1;\n  fib = 0;\n  for(i = 2;\
    \ i <= n; i++){\n    fib = fib_number + fib;\n    fib_number = fib;\n  }\n  return\
    \ fib;\n}\n", "  var a = 0, b = 1, c;\n  for(var i = 0; i < n; i++){\n    c =\
    \ a + b;\n    a = b;\n    b = c;\n  }\n  return b;\n}\n", "  if(n<=1){\n    return\
    \ n;\n  }\n  if(n%2===0){\n    return prime_fib(n-1);\n  }\n  if(n%3===0){\n \
    \   return prime_fib(n-2);\n  }\n  if(n%5===0){\n    return prime_fib(n-4);\n\
    \  }\n  return prime_fib(n-6);\n}\n", "    var i = 1;\n    var primes = [];\n\
    \    while(true){\n        if(n % i == 0){\n            primes.push(i);\n    \
    \        i += 2;\n        }else{\n            i += 1;\n        }\n        if(i\
    \ > n){\n            break;\n        }\n    }\n    return primes[primes.length\
    \ - 1];\n}\n", "  var primes = [];\n  var fibs = [];\n  var fib;\n  var i;\n \
    \ for(i=1;i<=n;i++){\n    fib = i;\n    while(fib<n){\n      fib+=fib;\n     \
    \ primes.push(fib);\n    }\n  }\n  for(i=1;i<primes.length;i++){\n    fib = primes[i];\n\
    \    while(fib<n){\n      fib+=fib;\n      fibs.push(fib);\n    }\n  }\n  return\
    \ fibs;\n}\n", "  if(n<2){\n    return 1;\n  }\n  if(n<3){\n    return n;\n  }\n\
    \  if(n%2==0){\n    return prime_fib(n-1);\n  }\n  if(n%3==0){\n    return prime_fib(n-2);\n\
    \  }\n  if(n%5==0){\n    return prime_fib(n-4);\n  }\n  return prime_fib(n-6);\n\
    }\n", "  var i, fib;\n  fib = 0;\n  for(i=1;i<=n;i++){\n    fib = fib + i;\n \
    \   if(fib > n){\n      break;\n    }\n  }\n  return fib;\n}\n", "  var a = 0,\
    \ b = 1, c;\n  for(var i = 0; i < n; i++){\n    c = a + b;\n    a = b;\n    b\
    \ = c;\n  }\n  return b;\n}\n", "  var primes = [2,3,5,7,11,13,17,19];\n  var\
    \ fibs = [];\n  var fib = 0;\n  var i = 1;\n  while(fib < n){\n    fibs.push(fib);\n\
    \    fib = fib + primes[i];\n    i++;\n  }\n  return fibs[fibs.length-1];\n}\n",
  "    var i = 1,\n        primes = [],\n        fib = 1,\n        fib2 = 1;\n   \
    \ while(fib2 < n){\n        fib = fib2;\n        fib2 = fib + i;\n        i++;\n\
    \    }\n    primes.push(fib2);\n    while(i < n){\n        fib = fib2;\n     \
    \   fib2 = fib + i;\n        i++;\n        primes.push(fib2);\n    }\n    return\
    \ primes[primes.length - 1];\n}", "    if(n < 2){\n        return 2;\n    }\n\
    \    if(n < 3){\n        return 3;\n    }\n    if(n % 2 == 0){\n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n    }\n    if(n % 3 == 0){\n        return\
    \ prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3);\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4);\n}\n", "  if\
    \ (n < 2) return 1;\n  if (n < 3) return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  if (n % 2 == 0) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 3 ==\
    \ 0) return prime_fib(n - 3) + prime_fib(n - 4);\n  return prime_fib(n - 5) +\
    \ prime_fib(n - 6);\n}\n", "  if (n < 2) return 1;\n  if (n < 3) return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return prime_fib(n / 2) + 1;\n \
    \ else return prime_fib(n / 3) + 1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
