name: HumanEval_119_match_parens
language: js
prompt: "//You are given an array of two strings, both strings consist of open\n//\
  \ parentheses '(' or close parentheses ')' only.\n// Your job is to check if it\
  \ is possible to concatenate the two strings in\n// some order, that the resulting\
  \ string will be good.\n// A string S is considered to be good if and only if all\
  \ parentheses in S\n// are balanced. For example: the string '(())()' is good, while\
  \ the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\"\
  , \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction\
  \ match_parens(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  )\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"\
  No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  (())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"\
  ]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  ((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"\
  No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n\
  }\n\ntest();"
completions: ["  var stack = [];\n  var index = 0;\n  var result = \"No\";\n  while(index\
    \ < lst.length){\n    if(lst[index] === \"(\"){\n      stack.push(index);\n  \
    \  }\n    else if(lst[index] === \")\"){\n      if(stack.length === 0){\n    \
    \    result = \"No\";\n        break;\n      }\n      else{\n        index = stack.pop();\n\
    \      }\n    }\n    index++;\n  }\n  return result;\n}\n", "\tlet stack = [];\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\t}\n\twhile(stack.length\
    \ > 0){\n\t\tlet top = stack.pop();\n\t\tlet next = stack.pop();\n\t\tif(top ==\
    \ \"(\"){\n\t\t\tif(next == \"(\"){\n\t\t\t\tstack.push(\"(\");\n\t\t\t}\n\t\t\
    \telse if(next == \")\"){\n\t\t\t\tstack.push(\")\");\n\t\t\t}\n\t\t\telse{\n\t\
    \t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\telse if(top == \")\"){\n\t\t\tif(next\
    \ == \"(\"){\n\t\t\t\tstack.push(\"(\");\n\t\t\t}\n\t\t\telse if(next == \")\"\
    ){\n\t\t\t\tstack.push(\")\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn \"No\";\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\"\
    ;\n}\n", "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i] == \")\"){\n            var index = stack.pop();\n            if(index\
    \ == -1){\n                return \"No\";\n            }\n            else{\n\
    \                lst[index] = lst[i] + lst[index];\n            }\n        }\n\
    \    }\n    return \"Yes\";\n}\n", "    var stack = [];\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i]==\"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i]==\")\"){\n            var len = stack.length;\n            while(len){\n\
    \                if(stack[len-1]==i){\n                    stack.pop();\n    \
    \                len--;\n                }\n                else{\n          \
    \          break;\n                }\n            }\n        }\n    }\n    if(stack.length==0){\n\
    \        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n",
  "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            var len = stack.pop();\n            if(len == i){\n   \
    \             return \"Yes\";\n            }\n        }\n    }\n    return \"\
    No\";\n}\n", "  var stack = [];\n  var open = 0;\n  var close = 0;\n  var i =\
    \ 0;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] == \"(\"){\n      open++;\n\
    \      stack.push(lst[i]);\n    }\n    else if(lst[i] == \")\"){\n      close++;\n\
    \      if(open > close){\n        return \"No\";\n      }\n      else{\n     \
    \   open--;\n      }\n    }\n  }\n  if(open > close){\n    return \"No\";\n  }\n\
    \  else{\n    return \"Yes\";\n  }\n}\n", "  var stack = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]==\"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"\
    ){\n      if(stack.length>0){\n        var top = stack.pop();\n        if(top==i){\n\
    \          return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";\n\
    }\n", "  var stack = [];\n  var open = 0;\n  var close = 0;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i]==\"(\"){\n      open++;\n      stack.push(lst[i]);\n  \
    \  }\n    else if(lst[i]==\")\"){\n      close++;\n      if(open>close){\n   \
    \     return \"No\";\n      }\n      else{\n        open--;\n      }\n    }\n\
    \  }\n  return \"Yes\";\n}\n", "\tlet stack = [];\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i]\
    \ == \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\tif(top < i){\n\t\t\t\t\treturn\
    \ \"No\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstack.push(i);\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n", "  var stack = [];\n  var str = \"\"\
    ;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i] == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        var top = stack.pop();\n        if(top\
    \ != i){\n          return \"No\";\n        }\n      }\n    }\n  }\n  if(stack.length\
    \ != 0){\n    return \"No\";\n  }\n  else{\n    return \"Yes\";\n  }\n}\n", "\t\
    let stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \"\
    )\"){\n\t\t\tlet index = stack.pop();\n\t\t\tif(index == -1){\n\t\t\t\tresult\
    \ = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(index != i){\n\t\
    \t\t\t\tresult = \"No\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\n", "  var stack = [];\n  var str = \"\";\n  for(var i = 0;\
    \ i < lst.length; i++){\n    var c = lst[i];\n    if(c == \"(\"){\n      stack.push(c);\n\
    \    }\n    else if(c == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        str = stack.pop() + str;\n      }\n \
    \   }\n  }\n  if(stack.length != 0){\n    return \"No\";\n  }\n  return \"Yes\"\
    ;\n}\n", "  var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] ==\
    \ \")\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n   \
    \   else{\n        var top = stack.pop();\n        if(top != i){\n          return\
    \ \"No\";\n        }\n      }\n    }\n  }\n  if(stack.length != 0){\n    return\
    \ \"No\";\n  }\n  else{\n    return \"Yes\";\n  }\n}\n", "  var stack = [];\n\
    \  var open = 0;\n  var close = 0;\n  var i = 0;\n  while(i < lst.length){\n \
    \   if(lst[i] == \"(\"){\n      stack.push(lst[i]);\n      open++;\n    }else\
    \ if(lst[i] == \")\"){\n      close++;\n      if(open > close){\n        return\
    \ \"No\";\n      }else{\n        open--;\n      }\n    }else if(lst[i] == \")\"\
    \ && open > close){\n      close--;\n    }\n    i++;\n  }\n  if(open > close){\n\
    \    return \"No\";\n  }else{\n    return \"Yes\";\n  }\n}\n", "    var stack\
    \ = [];\n    var result = \"No\";\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] === \"(\"){\n            stack.push(\"(\");\n        }else\
    \ if(lst[i] === \")\"){\n            if(stack.length === 0){\n               \
    \ result = \"No\";\n                break;\n            }\n            else{\n\
    \                stack.pop();\n            }\n        }\n    }\n    if(result\
    \ === \"No\"){\n        result = \"Yes\";\n    }\n    return result;\n}\n", " \
    \ var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n   \
    \ if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \"\
    )\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n      else{\n\
    \        var top = stack.pop();\n        if(top != i){\n          return \"No\"\
    ;\n        }\n      }\n    }\n  }\n  if(stack.length != 0){\n    return \"No\"\
    ;\n  }\n  return \"Yes\";\n}\n", "    let stack = [];\n    let res = \"No\";\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n    \
    \        stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n      \
    \      if(stack.length == 0){\n                res = \"No\";\n               \
    \ break;\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top < i){\n                    res = \"No\";\n           \
    \         break;\n                }\n                else{\n                 \
    \   res = \"Yes\";\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"\
    (\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"){\n      if(stack.length==0){\n\
    \        return \"No\";\n      }\n      var top = stack.pop();\n      if(top!=i){\n\
    \        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet\
    \ stack = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"\
    ){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(stack.length\
    \ == 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\
    \t\t\t\tif(lst[top] == \")\"){\n\t\t\t\t\tstack.push(top);\n\t\t\t\t}\n\t\t\t\t\
    else{\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\"\
    ;\n}\n", "    var stack = [];\n    var open = 0;\n    var close = 0;\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i]==\"(\"){\n            open++;\n\
    \            stack.push(lst[i]);\n        }\n        else if(lst[i]==\")\"){\n\
    \            close++;\n            while(stack.length && close>stack[stack.length-1]){\n\
    \                stack.pop();\n                close--;\n            }\n     \
    \   }\n    }\n    return stack.length ? \"Yes\" : \"No\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
