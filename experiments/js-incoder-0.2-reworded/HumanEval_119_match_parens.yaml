name: HumanEval_119_match_parens
language: js
prompt: "//You are given an array of two strings, both strings consist of open\n//\
  \ parentheses '(' or close parentheses ')' only.\n// Your job is to check if it\
  \ is possible to concatenate the two strings in\n// some order, that the resulting\
  \ string will be good.\n// A string S is considered to be good if and only if all\
  \ parentheses in S\n// are balanced. For example: the string '(())()' is good, while\
  \ the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\"\
  , \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction\
  \ match_parens(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = match_parens;\n  assert.deepEqual(candidate([\"()(\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  )\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"(()(())\", \"())())\"]),\"\
  No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  (())))\", \"(()())((\"]),\"Yes\");\n  assert.deepEqual(candidate([\"()\", \"())\"\
  ]),\"No\");\n  assert.deepEqual(candidate([\"(()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"\
  ((((\", \"((())\"]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"\
  No\");\n  assert.deepEqual(candidate([\")(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (\", \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n\
  }\n\ntest();"
completions: ["  var stack = [];\n  var index = 0;\n  var result = \"No\";\n  while(index\
    \ < lst.length){\n    if(lst[index] === \"(\"){\n      stack.push(index);\n  \
    \  }\n    else if(lst[index] === \")\"){\n      if(stack.length === 0){\n    \
    \    result = \"No\";\n        break;\n      }\n      else{\n        index = stack.pop();\n\
    \      }\n    }\n    index++;\n  }\n  return result;\n}\n", "\tlet stack = [];\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\t}\n\twhile(stack.length\
    \ > 0){\n\t\tlet top = stack.pop();\n\t\tlet next = stack.pop();\n\t\tif(top ==\
    \ \"(\"){\n\t\t\tif(next == \"(\"){\n\t\t\t\tstack.push(\"(\");\n\t\t\t}\n\t\t\
    \telse if(next == \")\"){\n\t\t\t\tstack.push(\")\");\n\t\t\t}\n\t\t\telse{\n\t\
    \t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\telse if(top == \")\"){\n\t\t\tif(next\
    \ == \"(\"){\n\t\t\t\tstack.push(\"(\");\n\t\t\t}\n\t\t\telse if(next == \")\"\
    ){\n\t\t\t\tstack.push(\")\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn \"No\";\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\"\
    ;\n}\n", "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i] == \")\"){\n            var index = stack.pop();\n            if(index\
    \ == -1){\n                return \"No\";\n            }\n            else{\n\
    \                lst[index] = lst[i] + lst[index];\n            }\n        }\n\
    \    }\n    return \"Yes\";\n}\n", "    var stack = [];\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i]==\"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i]==\")\"){\n            var len = stack.length;\n            while(len){\n\
    \                if(stack[len-1]==i){\n                    stack.pop();\n    \
    \                len--;\n                }\n                else{\n          \
    \          break;\n                }\n            }\n        }\n    }\n    if(stack.length==0){\n\
    \        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n",
  "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            var len = stack.pop();\n            if(len == i){\n   \
    \             return \"Yes\";\n            }\n        }\n    }\n    return \"\
    No\";\n}\n", "  var stack = [];\n  var open = 0;\n  var close = 0;\n  var i =\
    \ 0;\n  for(i = 0; i < lst.length; i++){\n    if(lst[i] == \"(\"){\n      open++;\n\
    \      stack.push(lst[i]);\n    }\n    else if(lst[i] == \")\"){\n      close++;\n\
    \      if(open > close){\n        return \"No\";\n      }\n      else{\n     \
    \   open--;\n      }\n    }\n  }\n  if(open > close){\n    return \"No\";\n  }\n\
    \  else{\n    return \"Yes\";\n  }\n}\n", "  var stack = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]==\"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"\
    ){\n      if(stack.length>0){\n        var top = stack.pop();\n        if(top==i){\n\
    \          return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";\n\
    }\n", "  var stack = [];\n  var open = 0;\n  var close = 0;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i]==\"(\"){\n      open++;\n      stack.push(lst[i]);\n  \
    \  }\n    else if(lst[i]==\")\"){\n      close++;\n      if(open>close){\n   \
    \     return \"No\";\n      }\n      else{\n        open--;\n      }\n    }\n\
    \  }\n  return \"Yes\";\n}\n", "\tlet stack = [];\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i]\
    \ == \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\tif(top < i){\n\t\t\t\t\treturn\
    \ \"No\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstack.push(i);\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n", "  var stack = [];\n  var str = \"\"\
    ;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i] == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        var top = stack.pop();\n        if(top\
    \ != i){\n          return \"No\";\n        }\n      }\n    }\n  }\n  if(stack.length\
    \ != 0){\n    return \"No\";\n  }\n  else{\n    return \"Yes\";\n  }\n}\n", "\t\
    let stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \"\
    )\"){\n\t\t\tlet index = stack.pop();\n\t\t\tif(index == -1){\n\t\t\t\tresult\
    \ = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(index != i){\n\t\
    \t\t\t\tresult = \"No\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\n", "  var stack = [];\n  var str = \"\";\n  for(var i = 0;\
    \ i < lst.length; i++){\n    var c = lst[i];\n    if(c == \"(\"){\n      stack.push(c);\n\
    \    }\n    else if(c == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        str = stack.pop() + str;\n      }\n \
    \   }\n  }\n  if(stack.length != 0){\n    return \"No\";\n  }\n  return \"Yes\"\
    ;\n}\n", "  var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] ==\
    \ \")\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n   \
    \   else{\n        var top = stack.pop();\n        if(top != i){\n          return\
    \ \"No\";\n        }\n      }\n    }\n  }\n  if(stack.length != 0){\n    return\
    \ \"No\";\n  }\n  else{\n    return \"Yes\";\n  }\n}\n", "  var stack = [];\n\
    \  var open = 0;\n  var close = 0;\n  var i = 0;\n  while(i < lst.length){\n \
    \   if(lst[i] == \"(\"){\n      stack.push(lst[i]);\n      open++;\n    }else\
    \ if(lst[i] == \")\"){\n      close++;\n      if(open > close){\n        return\
    \ \"No\";\n      }else{\n        open--;\n      }\n    }else if(lst[i] == \")\"\
    \ && open > close){\n      close--;\n    }\n    i++;\n  }\n  if(open > close){\n\
    \    return \"No\";\n  }else{\n    return \"Yes\";\n  }\n}\n", "    var stack\
    \ = [];\n    var result = \"No\";\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(lst[i] === \"(\"){\n            stack.push(\"(\");\n        }else\
    \ if(lst[i] === \")\"){\n            if(stack.length === 0){\n               \
    \ result = \"No\";\n                break;\n            }\n            else{\n\
    \                stack.pop();\n            }\n        }\n    }\n    if(result\
    \ === \"No\"){\n        result = \"Yes\";\n    }\n    return result;\n}\n", " \
    \ var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n   \
    \ if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \"\
    )\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n      else{\n\
    \        var top = stack.pop();\n        if(top != i){\n          return \"No\"\
    ;\n        }\n      }\n    }\n  }\n  if(stack.length != 0){\n    return \"No\"\
    ;\n  }\n  return \"Yes\";\n}\n", "    let stack = [];\n    let res = \"No\";\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n    \
    \        stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n      \
    \      if(stack.length == 0){\n                res = \"No\";\n               \
    \ break;\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top < i){\n                    res = \"No\";\n           \
    \         break;\n                }\n                else{\n                 \
    \   res = \"Yes\";\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"\
    (\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"){\n      if(stack.length==0){\n\
    \        return \"No\";\n      }\n      var top = stack.pop();\n      if(top!=i){\n\
    \        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet\
    \ stack = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"\
    ){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(stack.length\
    \ == 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\
    \t\t\t\tif(lst[top] == \")\"){\n\t\t\t\t\tstack.push(top);\n\t\t\t\t}\n\t\t\t\t\
    else{\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\"\
    ;\n}\n", "    var stack = [];\n    var open = 0;\n    var close = 0;\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i]==\"(\"){\n            open++;\n\
    \            stack.push(lst[i]);\n        }\n        else if(lst[i]==\")\"){\n\
    \            close++;\n            while(stack.length && close>stack[stack.length-1]){\n\
    \                stack.pop();\n                close--;\n            }\n     \
    \   }\n    }\n    return stack.length ? \"Yes\" : \"No\";\n}\n", "    var stack\
    \ = [];\n    var open = 0;\n    var close = 0;\n    var i = 0;\n    var j = 0;\n\
    \    var len = lst.length;\n    var str = \"\";\n    for(i = 0; i < len; i++){\n\
    \        if(lst[i] == \"(\"){\n            open++;\n        }else if(lst[i] ==\
    \ \")\"){\n            close++;\n        }else{\n            stack.push(lst[i]);\n\
    \        }\n    }\n    while(open > close && stack.length > 0){\n        str =\
    \ stack.pop() + str;\n        open--;\n        close--;\n    }\n    if(open >\
    \ close && stack.length > 0){\n        return \"No\";\n    }\n    return \"Yes\"\
    ;\n}\n", "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] == \"(\"){\n            stack.push(lst[i]);\n        }\n      \
    \  else if(lst[i] == \")\"){\n            if(stack.length == 0){\n           \
    \     return \"No\";\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    if(stack.length != 0){\n        return \"\
    No\";\n    }\n    else{\n        return \"Yes\";\n    }\n}\n", "  var stack =\
    \ [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] ==\
    \ \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \")\"){\n      if(stack.length\
    \ == 0){\n        return \"No\";\n      }\n      else{\n        var top = stack.pop();\n\
    \        if(top != i){\n          return \"No\";\n        }\n      }\n    }\n\
    \  }\n  return \"Yes\";\n}\n", "  var stack = [];\n  for(var i = 0; i < lst.length;\
    \ i++){\n    var str = lst[i];\n    if(str == \"(\"){\n      stack.push(str);\n\
    \    }else if(str == \")\"){\n      if(stack.length == 0){\n        return \"\
    No\";\n      }else{\n        var top = stack.pop();\n        if(top != \"(\"){\n\
    \          return \"No\";\n        }\n      }\n    }\n  }\n  return \"Yes\";\n\
    }\n", "  var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i]==\"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"\
    ){\n      if(stack.length>0){\n        var top = stack.pop();\n        if(top==i){\n\
    \          str += lst[i];\n        }\n      }\n      else{\n        return \"\
    No\";\n      }\n    }\n  }\n  return str==\"\"? \"Yes\": \"No\";\n}\n", "    var\
    \ stack = [];\n    var open = 0;\n    var close = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            open++;\n            stack.push(lst[i]);\n\
    \        }\n        else if(lst[i] == \")\"){\n            close++;\n        \
    \    while(open > 0 && close > 0 && open > close){\n                open--;\n\
    \                close--;\n            }\n            if(open > close){\n    \
    \            return \"No\";\n            }\n            else{\n              \
    \  open--;\n                close--;\n            }\n        }\n    }\n    return\
    \ \"Yes\";\n}\n", "\tlet stack = [];\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tlet char = lst[i];\n\t\tif(char === '('){\n\t\t\tstack.push(char);\n\t\t}\n\
    \t\telse if(char === ')'){\n\t\t\twhile(stack.length && stack[stack.length - 1]\
    \ !== '('){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tif(stack.length){\n\t\t\t\t\
    stack.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n", "    var\
    \ stack = [];\n    var curr = lst[0];\n    for(var i = 1; i < lst.length; i++){\n\
    \        if(curr === lst[i]){\n            stack.push(curr);\n        }else if(stack.length){\n\
    \            while(stack.length){\n                if(curr === lst[i]){\n    \
    \                stack.push(curr);\n                    break;\n             \
    \   }\n                curr = stack.pop();\n            }\n        }else{\n  \
    \          return \"No\";\n        }\n    }\n    return stack.length === 0 ? \"\
    Yes\" : \"No\";\n}\n", "\tlet stack = [];\n\tlet stackSize = 0;\n\tlet index =\
    \ 0;\n\tlet result = \"No\";\n\twhile(index < lst.length){\n\t\tif(lst[index]\
    \ === \"(\"){\n\t\t\tstack.push(lst[index]);\n\t\t\tstackSize++;\n\t\t}\n\t\t\
    else if(lst[index] === \")\"){\n\t\t\tstackSize--;\n\t\t\tif(stackSize === 0){\n\
    \t\t\t\tresult = result === \"Yes\" ? \"Yes\" : \"No\";\n\t\t\t\tbreak;\n\t\t\t\
    }\n\t\t}\n\t\tindex++;\n\t}\n\treturn result;\n}\n", "  var res = \"No\";\n  for(var\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] == \"(\"){\n      if(lst[i+1] ==\
    \ \"(\"){\n        res = \"Yes\";\n        break;\n      }\n    }\n    if(lst[i]\
    \ == \")\"){\n      if(lst[i+1] == \")\"){\n        res = \"Yes\";\n        break;\n\
    \      }\n    }\n  }\n  return res;\n}\n", "    let stack = [];\n    let open\
    \ = 0;\n    let close = 0;\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] == \"(\"){\n            open++;\n            stack.push(lst[i]);\n\
    \        }\n        else if(lst[i] == \")\"){\n            close++;\n        \
    \    while(open > 0 && close > 0){\n                if(stack[open-1] == \"(\"\
    ){\n                    open--;\n                }\n                else if(stack[close-1]\
    \ == \")\"){\n                    close--;\n                }\n              \
    \  else{\n                    break;\n                }\n            }\n     \
    \       if(open > 0 && close == 0){\n                return \"Yes\";\n       \
    \     }\n            else{\n                return \"No\";\n            }\n  \
    \      }\n    }\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i]==\"(\"){\n      stack.push(lst[i]);\n    }\n    else if(lst[i]==\"\
    )\"){\n      if(stack.length>0){\n        var top = stack.pop();\n        if(top!=\"\
    (\"){\n          return \"No\";\n        }\n      }\n      else{\n        return\
    \ \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet stack = [];\n\t\
    let index = 0;\n\tlet result = false;\n\twhile(index < lst.length){\n\t\tlet char\
    \ = lst[index];\n\t\tif(char === \"(\"){\n\t\t\tstack.push(char);\n\t\t}\n\t\t\
    else if(char === \")\"){\n\t\t\tif(stack.length === 0){\n\t\t\t\tresult = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\
    \tindex++;\n\t}\n\treturn result;\n}\n", "  let stack = [];\n  let result = \"\
    No\";\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] === \"(\"){\n   \
    \   stack.push(lst[i]);\n    }\n    else if(lst[i] === \")\"){\n      if(stack.length\
    \ === 0){\n        result = \"No\";\n        break;\n      }\n      else if(stack.pop()\
    \ !== lst[i]){\n        result = \"No\";\n        break;\n      }\n    }\n  }\n\
    \  return result;\n}\n", "    let stack = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n\
    \        else if(lst[i] == \")\"){\n            if(stack.length == 0){\n     \
    \           return \"No\";\n            }\n            else{\n               \
    \ let top = stack.pop();\n                if(top != i){\n                    return\
    \ \"No\";\n                }\n            }\n        }\n    }\n    return \"Yes\"\
    ;\n}\n", "    var stack = [];\n    var str = \"\";\n    for(var i=0;i<lst.length;i++){\n\
    \        if(lst[i]==\"(\"){\n            stack.push(lst[i]);\n        }\n    \
    \    else if(lst[i]==\")\"){\n            while(stack.length>0 && lst[stack.length-1]!=lst[i]){\n\
    \                stack.pop();\n            }\n            if(stack.length==0){\n\
    \                return \"No\";\n            }\n        }\n        else{\n   \
    \         str += lst[i];\n        }\n    }\n    return \"Yes\";\n}\n", "    var\
    \ stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] ==\
    \ \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] == \"\
    )\"){\n            if(stack.length == 0){\n                return \"No\";\n  \
    \          }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if(stack.length != 0){\n        return \"No\";\n    }\n\
    \    else{\n        return \"Yes\";\n    }\n}\n", "    var stack = [];\n    var\
    \ res = \"No\";\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"(\"\
    ){\n            stack.push(lst[i]);\n        }\n        else if(lst[i]==\")\"\
    ){\n            while(stack.length && lst[stack.length-1]!=lst[i]){\n        \
    \        stack.pop();\n            }\n            if(stack.length){\n        \
    \        res=lst[i];\n            }\n            else{\n                res=\"\
    No\";\n            }\n        }\n    }\n    return res;\n}\n", "    var stack\
    \ = [];\n    var stackSize = 0;\n    var stackStr = \"\";\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] === \"(\"){\n            stack.push(lst[i]);\n\
    \            stackSize++;\n        }\n        else if(lst[i] === \")\"){\n   \
    \         stackSize--;\n            while(stackSize > 0){\n                stackStr\
    \ += stack.pop();\n                stackSize--;\n            }\n        }\n  \
    \  }\n    return stackStr;\n}\n", "  var stack = [];\n  var open = 0;\n  var close\
    \ = 0;\n  var ret = \"No\";\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]==\"\
    (\"){\n      open++;\n      stack.push(lst[i]);\n    }\n    else if(lst[i]==\"\
    )\"){\n      close++;\n      if(open>close){\n        ret = \"Yes\";\n       \
    \ break;\n      }\n      else{\n        open--;\n      }\n    }\n  }\n  return\
    \ ret;\n}\n", "\tlet stack = [];\n\tlet stackCount = 0;\n\tfor(let i = 0; i <\
    \ lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(lst[i]);\n\t\t\
    \tstackCount++;\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tstackCount--;\n\t\
    \t\tif(stackCount == 0){\n\t\t\t\tif(stack.length == 0){\n\t\t\t\t\treturn \"\
    Yes\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlet last = stack.pop();\n\t\t\t\t\t\
    if(last == \"(\"){\n\t\t\t\t\t\treturn \"Yes\";\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\
    \t\t\t\t\t\treturn \"No\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ \"No\";\n}\n", "    let stack = [];\n    let res = \"No\";\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            if(stack.length ==\
    \ 0){\n                res = \"No\";\n                break;\n            }\n\
    \            else{\n                let top = stack.pop();\n                if(top\
    \ < i){\n                    res = \"No\";\n                    break;\n     \
    \           }\n                else{\n                    res = \"Yes\";\n   \
    \             }\n            }\n        }\n    }\n    return res;\n}\n", "   \
    \ let stack = [];\n    let open = 0;\n    let close = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] == \"(\"){\n            open++;\n   \
    \         stack.push(lst[i]);\n        }\n        else if(lst[i] == \")\"){\n\
    \            close++;\n            open--;\n        }\n        else if(open >\
    \ close){\n            return false;\n        }\n        else if(open < 0){\n\
    \            return false;\n        }\n    }\n    if(open > close){\n        return\
    \ true;\n    }\n    return false;\n}\n", "  var stack = [];\n  var str = \"\"\
    ;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(lst[i]);\n\
    \    }\n    else if(lst[i] == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        str = stack.pop() + str;\n      }\n \
    \   }\n  }\n  if(stack.length == 0){\n    return \"Yes\";\n  }\n  else{\n    return\
    \ \"No\";\n  }\n}\n", "    var stack = [];\n    var res = \"No\";\n    for(var\
    \ i=0; i<lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            while(stack.length\
    \ && lst[stack[stack.length-1]] == \")\"){\n                stack.pop();\n   \
    \         }\n            if(stack.length){\n                res = lst[i] + lst[stack[stack.length-1]];\n\
    \            }\n            else{\n                res = lst[i];\n           \
    \ }\n        }\n    }\n    return res;\n}\n", "  var stack = [];\n  var result\
    \ = \"No\";\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"(\"){\n  \
    \    stack.push(lst[i]);\n    }\n    else if(lst[i] == \")\"){\n      if(stack.length\
    \ == 0){\n        result = \"Yes\";\n        break;\n      }\n      else{\n  \
    \      stack.pop();\n      }\n    }\n  }\n  return result;\n}\n", "  let stack\
    \ = [];\n  let result = \"No\";\n  for (let i = 0; i < lst.length; i++){\n   \
    \ if (lst[i] == \"(\"){\n      stack.push(i);\n    } else if (lst[i] == \")\"\
    ){\n      if (stack.length == 0){\n        result = \"Yes\";\n        break;\n\
    \      } else {\n        stack.pop();\n      }\n    }\n  }\n  return result;\n\
    }\n", "    let stack = [];\n    let res = \"No\";\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n\
    \        else if(lst[i] == \")\"){\n            while(stack.length > 0 && lst[stack[stack.length\
    \ - 1]] == \")\"){\n                stack.pop();\n            }\n            if(stack.length\
    \ == 0){\n                res = \"Yes\";\n                break;\n           \
    \ }\n        }\n    }\n    return res;\n}\n", "\tlet stack = [];\n\tlet stackLen\
    \ = 0;\n\tlet isOpen = false;\n\tlet isClosed = false;\n\tlet isOpened = false;\n\
    \tlet isClosed = false;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet char\
    \ = lst[i];\n\t\tif(char === '('){\n\t\t\tif(!isOpened){\n\t\t\t\tisOpened = true;\n\
    \t\t\t\tstack.push(char);\n\t\t\t\tstackLen++;\n\t\t\t}\n\t\t\telse if(isOpen){\n\
    \t\t\t\tisOpen = false;\n\t\t\t\tisClosed = true;\n\t\t\t\tisOpened = false;\n\
    \t\t\t\tstackLen--;\n\t\t\t}\n\t\t}\n\t\telse if(char === ')'){\n\t\t\tif(!isClosed){\n\
    \t\t\t\tisClosed = true;\n\t\t\t\tisOpened = false;\n\t\t\t\tstackLen--;\n\t\t\
    \t}\n\t\t\telse if(isClosed){\n\t\t\t\tisClosed = false;\n\t\t\t\tisOpened = false;\n\
    \t\t\t\tstackLen--;\n\t\t\t}\n\t\t}\n\t\telse if(char === ','){\n\t\t\tif(!isOpened){\n\
    \t\t\t\tisOpened = true;\n\t\t\t\tstack.push(char);\n\t\t\t\tstackLen++;\n\t\t\
    \t}\n\t\t\telse if(isOpen){\n\t\t\t\tisOpen = false;\n\t\t\t\tisClosed = true;\n\
    \t\t\t\tisOpened = false;\n\t\t\t\tstackLen--;\n\t\t\t}\n\t\t}\n\t\telse if(char\
    \ === ' ' || char === '\\t' || char === '\\n'){\n\t\t\tif(!isOpened){\n\t\t\t\t\
    isOpened = true;\n\t\t\t\tstack.push(char);\n\t\t\t\tstackLen++;\n\t\t\t}\n\t\t\
    \telse if(isOpen){\n\t\t\t\tisOpen = false;\n\t\t\t\tisClosed = true;\n\t\t\t\t\
    isOpened = false;\n\t\t\t\tstackLen--;\n\t\t\t}\n\t\t}\n\t\telse if(char === '('\
    \ || char === '{' || char === '['){\n\t\t\tisOpen = true;\n\t\t\tisClosed = false;\n\
    \t\t\tisOpened = false;\n\t\t\tstackLen++;\n\t\t}\n\t\telse if(char === ')' ||\
    \ char === '}' || char === ']'){\n\t\t\tisOpen = false;\n\t\t\tisClosed = true;\n\
    \t\t\tisOpened = false;\n\t\t\tstackLen--;\n\t\t}\n\t}\n\tlet result = stackLen\
    \ === 0;\n\treturn result;\n}\n", "\tlet stack = [];\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i]\
    \ == \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\tif(top < i){\n\t\t\t\t\treturn\
    \ \"No\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstack.push(top);\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n", "  var str = lst[0]\n  var lst2 =\
    \ lst[1]\n  var i = 0\n  var j = 0\n  var k = 0\n  var result = \"No\"\n  while(i\
    \ < str.length && j < lst2.length){\n    if(str[i] === '('){\n      i++\n    \
    \  j++\n      k++\n    }\n    else if(str[i] === ')'){\n      i++\n      k++\n\
    \    }\n    else if(str[i] === ')' && str[j] === ')'){\n      i++\n      k++\n\
    \    }\n    else if(str[i] === '(' && str[j] === '('){\n      i++\n      j++\n\
    \      k++\n    }\n    else if(str[i] === '(' && str[j] !== '('){\n      result\
    \ = \"No\"\n    }\n    else if(str[i] !== '(' && str[j] !== '('){\n      result\
    \ = \"Yes\"\n    }\n    i++\n    j++\n    k++\n  }\n  return result\n}\n", " \
    \ let stack = [];\n  let stackSize = 0;\n  let isOpen = false;\n  for(let i =\
    \ 0; i < lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(lst[i]);\n\
    \      stackSize++;\n    }\n    else if(lst[i] == \")\"){\n      if(stackSize\
    \ == 0){\n        return \"No\";\n      }\n      else{\n        stackSize--;\n\
    \      }\n    }\n    else if(stackSize > 0){\n      if(lst[i] == \")\"){\n   \
    \     stackSize--;\n      }\n      else{\n        stackSize++;\n      }\n    }\n\
    \    else if(stackSize == 0){\n      if(lst[i] == \"(\"){\n        stackSize++;\n\
    \      }\n      else{\n        return \"No\";\n      }\n    }\n  }\n  if(stackSize\
    \ == 0){\n    return \"Yes\";\n  }\n  else{\n    return \"No\";\n  }\n}\n", " \
    \   var stack = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"\
    (\"){\n            stack.push(lst[i]);\n        }\n        else if(lst[i]==\"\
    )\"){\n            if(stack.length==0){\n                return \"No\";\n    \
    \        }\n            else{\n                stack.pop();\n            }\n \
    \       }\n    }\n    if(stack.length==0){\n        return \"Yes\";\n    }\n \
    \   else{\n        return \"No\";\n    }\n}\n", "    var stack = [];\n    var\
    \ stackSize = 0;\n    var stackStr = \"\";\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            stack.push(lst[i]);\n            stackSize++;\n\
    \        }\n        else if(lst[i] == \")\"){\n            stackSize--;\n    \
    \        if(stackSize == 0){\n                stackStr = stackStr + stack.pop();\n\
    \            }\n        }\n        else{\n            stackStr += lst[i];\n  \
    \      }\n    }\n    return stackStr.length == 0;\n}\n", "  var stack = [];\n\
    \  var str = \"\";\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] == \"\
    (\"){\n      stack.push(lst[i]);\n    }\n    else if(lst[i] == \")\"){\n     \
    \ if(stack.length == 0){\n        return \"No\";\n      }\n      else{\n     \
    \   str = stack.pop() + str;\n      }\n    }\n  }\n  if(stack.length == 0){\n\
    \    return \"Yes\";\n  }\n  else{\n    return \"No\";\n  }\n}\n", "  var stack\
    \ = [];\n  var open = 0;\n  var close = 0;\n  var i = 0;\n  while(i < lst.length){\n\
    \    if(lst[i] == \"(\"){\n      open++;\n    }else if(lst[i] == \")\"){\n   \
    \   close++;\n    }\n    i++;\n  }\n  if(open > close){\n    return \"No\";\n\
    \  }\n  while(open > 0 && close > 0){\n    if(lst[i] == \"(\"){\n      open--;\n\
    \    }else if(lst[i] == \")\"){\n      close--;\n    }\n    i++;\n  }\n  if(open\
    \ > 0){\n    return \"Yes\";\n  }\n  while(open < close && close > 0){\n    if(lst[i]\
    \ == \"(\"){\n      open++;\n    }else if(lst[i] == \")\"){\n      close--;\n\
    \    }\n    i++;\n  }\n  if(open > 0){\n    return \"Yes\";\n  }\n  while(open\
    \ < close && close < 0){\n    if(lst[i] == \"(\"){\n      open++;\n    }else if(lst[i]\
    \ == \")\"){\n      close++;\n    }\n    i++;\n  }\n  if(open < 0){\n    return\
    \ \"No\";\n  }\n}\n", "    let stack = [];\n    let res = \"No\";\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            while(stack.length\
    \ > 0 && lst[stack[stack.length - 1]] == \")\"){\n                stack.pop();\n\
    \            }\n            if(stack.length == 0){\n                res = \"Yes\"\
    ;\n                break;\n            }\n        }\n    }\n    return res;\n\
    }\n", "    var stack = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"\
    (\"){\n            stack.push(i);\n        }\n        else if(lst[i]==\")\"){\n\
    \            var index = stack.pop();\n            if(index==-1){\n          \
    \      return \"No\";\n            }\n            else{\n                lst[index]\
    \ = lst[i] + lst[index];\n            }\n        }\n    }\n    return \"Yes\"\
    ;\n}\n", "    let stack = [];\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i] == \")\"){\n            if(stack.length == 0){\n                return\
    \ \"No\";\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top != i){\n                    return \"No\";\n         \
    \       }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "  let\
    \ stack = [];\n  let open = 0;\n  let close = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] == \"(\"){\n      open++;\n      stack.push(lst[i]);\n\
    \    }else if(lst[i] == \")\"){\n      close++;\n      if(open > close){\n   \
    \     return \"No\";\n      }else{\n        open--;\n      }\n    }else{\n   \
    \   if(open > close){\n        return \"No\";\n      }else{\n        stack.push(lst[i]);\n\
    \      }\n    }\n  }\n  return \"Yes\";\n}\n", "  var stack = [];\n  var result\
    \ = \"No\";\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]==\"(\"){\n      stack.push(i);\n\
    \    }\n    if(lst[i]==\")\"){\n      var len = stack.length;\n      if(len==0){\n\
    \        result = \"No\";\n        break;\n      }\n      var top = stack[len-1];\n\
    \      if(top==i){\n        stack.pop();\n      }\n      else{\n        result\
    \ = \"No\";\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "  let\
    \ stack = [];\n  let res = \"No\";\n  for(let i = 0; i < lst.length; i++){\n \
    \   if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \"\
    )\"){\n      if(stack.length == 0){\n        res = \"Yes\";\n        break;\n\
    \      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return res;\n\
    }\n", "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i]\
    \ == \")\"){\n            var j = stack.pop();\n            if(j == -1){\n   \
    \             return \"No\";\n            }\n            else{\n             \
    \   lst[j] += lst[i];\n            }\n        }\n    }\n    return \"Yes\";\n\
    }\n", "    var stack = [];\n    var str = \"\";\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(lst[i]);\n     \
    \   }\n        else if(lst[i] == \")\"){\n            var open = stack.pop();\n\
    \            if(open != \"(\"){\n                return \"No\";\n            }\n\
    \        }\n        else{\n            str += lst[i];\n        }\n    }\n    if(stack.length\
    \ != 0){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    var stack\
    \ = [];\n    var ret = \"No\";\n    for(var i = 0; i < lst.length; i++){\n   \
    \     if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i] == \")\"){\n            while(stack.length > 0 && lst[stack[stack.length\
    \ - 1]] == \")\"){\n                stack.pop();\n            }\n            if(stack.length\
    \ == 0){\n                ret == \"Yes\";\n                break;\n          \
    \  }\n        }\n    }\n    return ret;\n}\n", "    var stack = [];\n    var open\
    \ = 0;\n    var close = 0;\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] == \"(\"){\n            open++;\n        }else if(lst[i] == \")\"\
    ){\n            close++;\n        }\n        if(open > close){\n            return\
    \ \"No\";\n        }\n        else if(open < close){\n            stack.push(lst[i]);\n\
    \        }\n    }\n    return \"Yes\";\n}\n", "\tlet stack = [];\n\tlet str =\
    \ \"\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet char = lst[i];\n\t\t\
    if(char == \"(\"){\n\t\t\tstack.push(char);\n\t\t}\n\t\telse if(char == \")\"\
    ){\n\t\t\tif(!stack.length){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\
    \t\t\tlet top = stack.pop();\n\t\t\t\tif(top != \"(\"){\n\t\t\t\t\treturn \"No\"\
    ;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tstr += char;\n\t\t}\n\t}\n\tif(stack.length){\n\
    \t\treturn \"No\";\n\t}\n\telse{\n\t\treturn \"Yes\";\n\t}\n}\n", "    var stack\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"\
    ){\n            stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n\
    \            var len = stack.pop();\n            if(len == i){\n             \
    \   return \"Yes\";\n            }\n        }\n    }\n    return \"No\";\n}\n",
  "\tlet stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \"\
    )\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top != -1){\n\t\t\t\tif(stack.length\
    \ == 0){\n\t\t\t\t\tresult = \"Yes\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\
    \ if(stack[stack.length-1] != top){\n\t\t\t\t\tresult = \"No\";\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "\tlet stack = [];\n\t\
    let result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet char = lst[i];\n\
    \t\tif(char == \"(\"){\n\t\t\tstack.push(char);\n\t\t}\n\t\telse if(char == \"\
    )\"){\n\t\t\tif(!stack.length){\n\t\t\t\tresult = \"Yes\";\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif(top != \"(\"){\n\t\t\t\tresult =\
    \ \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "  let\
    \ stack = [];\n  let str = \"\";\n  for(let i = 0; i < lst.length; i++){\n   \
    \ if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \"\
    )\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n      else{\n\
    \        stack.pop();\n      }\n    }\n  }\n  if(stack.length == 0){\n    return\
    \ \"Yes\";\n  }\n  else{\n    return \"No\";\n  }\n}\n", "    let stack = [];\n\
    \    let res = \"No\";\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            if(stack.length == 0){\n                res = \"No\";\n\
    \                break;\n            }\n            else{\n                let\
    \ top = stack.pop();\n                if(top < i){\n                    res =\
    \ \"No\";\n                    break;\n                }\n                else{\n\
    \                    res = \"Yes\";\n                }\n            }\n      \
    \  }\n    }\n    return res;\n}\n", "    var stack = [];\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            var open = stack.pop();\n\
    \            if(open != -1){\n                if(open != i){\n               \
    \     return \"No\";\n                }\n            }\n        }\n    }\n   \
    \ return \"Yes\";\n}\n", "  var re = new RegExp(\"\\\\(|\\\\)\");\n  var s = lst[0];\n\
    \  var l = lst.length;\n  for(var i = 1; i < l; i++){\n    if(re.test(s)){\n \
    \     s = s.replace(re.exec(s), \"\");\n    }else{\n      return false;\n    }\n\
    \  }\n  return s !== \"\";\n}\n", "    var stack = [];\n    for(var i = 0; i <\
    \ lst.length; i++){\n        var p = lst[i];\n        if(p.match(/[()]/)){\n \
    \           stack.push(p);\n        }\n        else if(stack.length){\n      \
    \      var top = stack.pop();\n            if(top.match(/[()]/)){\n          \
    \      stack.push(top);\n            }\n            else{\n                return\
    \ \"No\";\n            }\n        }\n    }\n    if(stack.length){\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\n", "  var stack = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]==\"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"\
    ){\n      var len = stack.length;\n      if(len==0){\n        return \"No\";\n\
    \      }\n      var top = stack[len-1];\n      if(top==i){\n        stack.pop();\n\
    \      }\n      else{\n        return \"No\";\n      }\n    }\n  }\n  return \"\
    Yes\";\n}\n", "    var stack = [];\n    var res = \"No\";\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n\
    \        else if(lst[i] == \")\"){\n            var len = stack.length;\n    \
    \        if(len == 0){\n                res = \"No\";\n                break;\n\
    \            }\n            var top = stack[len-1];\n            if(lst[top+1]\
    \ == \"(\"){\n                stack.push(top+1);\n            }\n            else{\n\
    \                res = \"No\";\n                break;\n            }\n      \
    \  }\n    }\n    return res;\n}\n", "    var stack = [];\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            var open = stack.pop();\n\
    \            if(open === undefined){\n                return \"No\";\n       \
    \     }\n            else if(open < i){\n                return \"No\";\n    \
    \        }\n        }\n    }\n    return \"Yes\";\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n    \
    \        stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n      \
    \      if(stack.length == 0){\n                return \"No\";\n            }\n\
    \            else{\n                stack.pop();\n            }\n        }\n \
    \   }\n    return \"Yes\";\n}\n", "    let stack = [];\n    let result = \"No\"\
    ;\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] == \"(\"){\n\
    \            stack.push(i);\n        }\n        if (lst[i] == \")\"){\n      \
    \      if (stack.length == 0){\n                result = \"No\";\n           \
    \     break;\n            }\n            stack.pop();\n        }\n    }\n    if\
    \ (result == \"No\"){\n        result = \"Yes\";\n    }\n    return result;\n\
    }\n", "\tlet stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet curr = lst[i];\n\t\tif(curr == \"(\"){\n\t\t\tstack.push(curr);\n\
    \t\t}\n\t\telse if(curr == \")\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top\
    \ == \"(\"){\n\t\t\t\tresult += \"Yes\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult\
    \ += \"No\";\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "  let stack = [];\n\
    \  let res = \"No\";\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] ==\
    \ \"(\"){\n      stack.push(i);\n    }\n    if(lst[i] == \")\"){\n      if(stack.length\
    \ == 0){\n        res = \"Yes\";\n        break;\n      }\n      if(stack.pop()\
    \ == i){\n        res = \"Yes\";\n        break;\n      }\n    }\n  }\n  return\
    \ res;\n}\n", "    var stack = [];\n    for(var i=0; i<lst.length; i++){\n   \
    \     if(lst[i]==\"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i]==\")\"){\n            var top = stack.pop();\n            if(top==-1){\n\
    \                return \"No\";\n            }\n            else{\n          \
    \      if(top!=i){\n                    return \"No\";\n                }\n  \
    \          }\n        }\n    }\n    return \"Yes\";\n}\n", "\tlet stack = [];\n\
    \tlet result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i]\
    \ == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\
    \tlet top = stack.pop();\n\t\t\tif(top == -1){\n\t\t\t\tresult = \"No\";\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(stack.length == 0){\n\t\t\t\t\tresult\
    \ = \"Yes\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(stack[stack.length-1]\
    \ != top){\n\t\t\t\t\t\tresult = \"No\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "  let stack = [];\n  for(let\
    \ i = 0; i < lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i] == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        let top = stack.pop();\n        if(top\
    \ < i){\n          return \"No\";\n        }\n        else{\n          stack.push(top);\n\
    \        }\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet stack = [];\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\t}\n\twhile(stack.length\
    \ > 0){\n\t\tlet top = stack.pop();\n\t\tif(top == \"(\"){\n\t\t\tstack.push(\"\
    (\");\n\t\t}else if(top == \")\"){\n\t\t\tstack.push(\")\");\n\t\t}else{\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var stack = [];\n    var\
    \ open = 0;\n    var close = 0;\n    for(var i=0; i<lst.length; i++){\n      \
    \  if(lst[i]==\"(\"){\n            open++;\n            stack.push(lst[i]);\n\
    \        }\n        else if(lst[i]==\")\"){\n            close++;\n          \
    \  while(stack.length>0 && close>stack[stack.length-1]){\n                stack.pop();\n\
    \                close--;\n            }\n        }\n    }\n    return stack.length==0\
    \ && open==close;\n}\n", "  var stack = [];\n  var index = 0;\n  var result =\
    \ \"No\";\n  while(index < lst.length){\n    if(lst[index] === \"(\"){\n     \
    \ stack.push(index);\n    }\n    else if(lst[index] === \")\"){\n      if(stack.length\
    \ === 0){\n        result = \"Yes\";\n        break;\n      }\n      else{\n \
    \       index = stack.pop();\n      }\n    }\n    index++;\n  }\n  return result;\n\
    }\n", "  var re = new RegExp(\"\\\\(|\\\\)\");\n  var res = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    if(re.test(lst[i])){\n      res.push(lst[i]);\n    }\n  }\n  return res.join('');\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i]\
    \ == \")\"){\n            if(stack.length == 0){\n                return \"No\"\
    ;\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top < i){\n                    return \"No\";\n          \
    \      }\n                else{\n                    return \"Yes\";\n       \
    \         }\n            }\n        }\n    }\n}\n", "  var stack = [];\n  var\
    \ open = 0;\n  var close = 0;\n  var result = \"No\";\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i] == \"(\"){\n      open++;\n      stack.push(lst[i]);\n\
    \    }\n    else if(lst[i] == \")\"){\n      close++;\n      if(open > close){\n\
    \        result += \"Yes\";\n        break;\n      }\n      else{\n        stack.pop();\n\
    \      }\n    }\n  }\n  return result;\n}\n", "\tlet stack = [];\n\tlet result\
    \ = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet char = lst[i];\n\t\
    \tif(char == \"(\"){\n\t\t\tstack.push(char);\n\t\t}\n\t\telse if(char == \")\"\
    ){\n\t\t\tlet open = stack.pop();\n\t\t\tif(open != \"(\"){\n\t\t\t\tresult =\
    \ \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(result == \"No\"){\n\t\t\
    result = \"Yes\";\n\t}\n\treturn result;\n}\n", "    var stack = [];\n    var\
    \ index = 0;\n    var len = lst.length;\n    while(index < len){\n        if(lst[index]\
    \ === '('){\n            stack.push(lst[index]);\n            index++;\n     \
    \   }\n        else if(lst[index] === ')'){\n            var open = stack.pop();\n\
    \            if(open === '('){\n                index++;\n            }\n    \
    \        else{\n                return false;\n            }\n        }\n    \
    \    else{\n            index++;\n        }\n    }\n    if(stack.length !== 0){\n\
    \        return false;\n    }\n    return true;\n}\n", "    var stack = [];\n\
    \    var stackSize = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n\
    \    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\"\
    ;\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize =\
    \ 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr =\
    \ \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStrSize\
    \ = 0;\n    var stackStr = \"\";\n    var stackStrSize = 0;\n    var stackStr\
    \ = \"\";\n    var stackStrSize = 0;\n    var stackStr = \"\";\n    var stackStr",
  "  var stack = [];\n  var index = 0;\n  var result = \"No\";\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]==\"(\"){\n      stack.push(lst[i]);\n    }\n    else if(lst[i]==\"\
    )\"){\n      if(stack.length>0){\n        var temp = stack.pop();\n        if(temp==\"\
    (\"){\n          stack.push(temp);\n        }\n        else{\n          result\
    \ = \"Yes\";\n          break;\n        }\n      }\n      else{\n        result\
    \ = \"No\";\n        break;\n      }\n    }\n  }\n  return result;\n}\n", "  \
    \  var stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            var open = stack.pop();\n            if(open != -1){\n\
    \                if(open != i){\n                    return \"No\";\n        \
    \        }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "    let\
    \ stack = [];\n    let res = \"No\";\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            stack.push(\"(\");\n        }\n   \
    \     else if(lst[i] == \")\"){\n            while(stack.length > 0 && stack[stack.length-1]\
    \ != \"(\"){\n                stack.pop();\n            }\n            if(stack.length\
    \ == 0){\n                res = \"Yes\";\n                break;\n           \
    \ }\n            else{\n                stack.pop();\n            }\n        }\n\
    \    }\n    return res;\n}\n", "    var stack = [];\n    var ret = \"No\";\n \
    \   for(var i=0;i<lst.length;i++){\n        if(lst[i]==\"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i]==\")\"){\n            var start = stack.pop();\n\
    \            if(start==i){\n                ret = \"Yes\";\n                break;\n\
    \            }\n        }\n    }\n    return ret;\n}\n", "  var stack = [];\n\
    \  var res = \"No\";\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"\
    (\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \")\"){\n      if(stack.length\
    \ == 0){\n        res = \"No\";\n        break;\n      }\n      var top = stack.pop();\n\
    \      if(top != i){\n        res = \"No\";\n        break;\n      }\n    }\n\
    \  }\n  return res;\n}\n", "\tlet stack = [];\n\tlet index = 0;\n\tlet result\
    \ = \"No\";\n\twhile(index < lst.length){\n\t\tif(lst[index] === \"(\"){\n\t\t\
    \tstack.push(index);\n\t\t\tindex++;\n\t\t}\n\t\telse if(lst[index] === \")\"\
    ){\n\t\t\twhile(stack.length > 0 && lst[stack.pop()] !== \"(\"){\n\t\t\t\tindex++;\n\
    \t\t\t}\n\t\t\tif(stack.length === 0){\n\t\t\t\tresult = \"Yes\";\n\t\t\t}\n\t\
    \t\telse{\n\t\t\t\tresult = \"No\";\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\t\telse{\n\
    \t\t\tindex++;\n\t\t}\n\t}\n\treturn result;\n}\n", "    var stack = [];\n   \
    \ var cur = lst[0];\n    stack.push(cur);\n    for(var i = 1; i < lst.length;\
    \ i++){\n        if(lst[i] === \"(\"){\n            stack.push(cur);\n       \
    \     cur = lst[i];\n        }\n        else if(lst[i] === \")\"){\n         \
    \   var cur2 = stack.pop();\n            if(cur2 !== cur){\n                return\
    \ \"No\";\n            }\n            cur = lst[i];\n        }\n    }\n    return\
    \ \"Yes\";\n}\n", "\tlet stack = [];\n\tlet open = 0;\n\tlet close = 0;\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\topen++;\n\t\t\
    }\n\t\telse if(lst[i] == \")\"){\n\t\t\tclose++;\n\t\t}\n\t\telse if(open > close){\n\
    \t\t\tstack.push(lst[i]);\n\t\t}\n\t\telse if(open < close){\n\t\t\twhile(open\
    \ > close){\n\t\t\t\tif(stack.length == 0){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t\
    }\n\t\t\t\telse if(stack.pop() == \"(\"){\n\t\t\t\t\topen--;\n\t\t\t\t}\n\t\t\t\
    \telse if(stack.pop() == \")\"){\n\t\t\t\t\tclose--;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn \"Yes\";\n}\n", "    let stack = [];\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            if(stack.length ==\
    \ 0){\n                return \"No\";\n            }\n            else{\n    \
    \            let top = stack.pop();\n                if(top != i){\n         \
    \           return \"No\";\n                }\n            }\n        }\n    }\n\
    \    return \"Yes\";\n}\n", "  var stack = [];\n  var res = \"No\";\n  for(var\
    \ i=0; i<lst.length; i++){\n    if(lst[i]==\"(\"){\n      stack.push(i);\n   \
    \ }\n    else if(lst[i]==\")\"){\n      if(stack.length==0){\n        res = \"\
    Yes\";\n        break;\n      }\n      var top = stack.pop();\n      if(top==i){\n\
    \        res = \"Yes\";\n        break;\n      }\n    }\n  }\n  return res;\n\
    }\n", "\tvar stack = [];\n\tvar res = \"No\";\n\tfor(var i=0; i<lst.length; i++){\n\
    \t\tstack.push(lst[i]);\n\t\twhile(stack.length){\n\t\t\tvar str = stack.pop();\n\
    \t\t\tif(str == \"(\"){\n\t\t\t\tstack.push(str);\n\t\t\t}else if(str == \")\"\
    ){\n\t\t\t\tif(stack.length){\n\t\t\t\t\tres = stack.pop() + res;\n\t\t\t\t}\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n", "  var stack = [];\n\
    \  for(var i=0;i<lst.length;i++){\n    if(lst[i]==\"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i]==\")\"){\n      var start = stack.pop();\n      if(stack.length==0){\n\
    \        return \"Yes\";\n      }\n      else{\n        if(lst[start+1]==\"(\"\
    ){\n          return \"Yes\";\n        }\n        else{\n          return \"No\"\
    ;\n        }\n      }\n    }\n  }\n  return \"No\";\n}\n", "  var stack = [];\n\
    \  var open = 0;\n  var close = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"\
    (\"){\n      stack.push(lst[i]);\n      open++;\n    }\n    else if(lst[i]==\"\
    )\"){\n      close++;\n      if(close==open){\n        stack.push(lst[i]);\n \
    \       open--;\n      }\n      else{\n        close--;\n      }\n    }\n  }\n\
    \  if(open==close && open>0){\n    return \"Yes\";\n  }\n  else{\n    return \"\
    No\";\n  }\n}\n", "\tvar stack = [];\n\tfor(var i=0; i<lst.length; i++){\n\t\t\
    if(lst[i]==\"(\"){\n\t\t\tstack.push(lst[i]);\n\t\t}\n\t\telse if(lst[i]==\")\"\
    ){\n\t\t\tif(stack.length>0){\n\t\t\t\tvar top = stack.pop();\n\t\t\t\tif(top!=\"\
    (\"){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length>0){\n\
    \t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            if(stack.length ==\
    \ 0){\n                return \"No\";\n            }\n            else{\n    \
    \            let top = stack.pop();\n                if(top < i){\n          \
    \          return \"No\";\n                }\n                else{\n        \
    \            return \"Yes\";\n                }\n            }\n        }\n  \
    \  }\n    return \"No\";\n}\n", "    let stack = [];\n    let open = 0;\n    let\
    \ close = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == \"\
    (\"){\n            open++;\n            stack.push(lst[i]);\n        }\n     \
    \   else if(lst[i] == \")\"){\n            close++;\n            open--;\n   \
    \     }\n        else if(open > close){\n            return false;\n        }\n\
    \        else if(open < close){\n            stack.push(lst[i]);\n        }\n\
    \    }\n    return stack.length == 0;\n}\n", "  var stack = [];\n  for(var i=0;\
    \ i<lst.length; i++){\n    if(lst[i]==\"(\"){\n      stack.push(lst[i]);\n   \
    \ }\n    else if(lst[i]==\")\"){\n      if(stack.length==0){\n        return \"\
    No\";\n      }\n      else{\n        var top = stack.pop();\n        if(top!=lst[i]){\n\
    \          return \"No\";\n        }\n      }\n    }\n  }\n  if(stack.length!=0){\n\
    \    return \"No\";\n  }\n  return \"Yes\";\n}\n", "  var stack = [];\n  var res\
    \ = \"No\";\n  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"(\"){\n  \
    \    stack.push(lst[i]);\n    }\n    else if(lst[i] == \")\"){\n      if(stack.length\
    \ == 0){\n        res = \"Yes\";\n        break;\n      }\n      else{\n     \
    \   stack.pop();\n      }\n    }\n  }\n  return res;\n}\n", "    let stack = [];\n\
    \    let open = 0;\n    let close = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            open++;\n            stack.push(lst[i]);\n\
    \        }\n        else if(lst[i] == \")\"){\n            close++;\n        \
    \    while(open > 0 && close > 0 && stack.length > 0){\n                if(open\
    \ > close){\n                    if(stack[stack.length-1] == \"(\"){\n       \
    \                 open--;\n                    }\n                    else if(stack[stack.length-1]\
    \ == \")\"){\n                        close--;\n                    }\n      \
    \              else{\n                        break;\n                    }\n\
    \                }\n                else{\n                    if(stack[stack.length-1]\
    \ == \"(\"){\n                        open--;\n                    }\n       \
    \             else if(stack[stack.length-1] == \")\"){\n                     \
    \   close--;\n                    }\n                    else{\n             \
    \           break;\n                    }\n                }\n            }\n\
    \            if(open > close){\n                return \"No\";\n            }\n\
    \            else{\n                return \"Yes\";\n            }\n        }\n\
    \    }\n    return \"No\";\n}\n", "\tlet stack = [];\n\tlet result = \"No\";\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\t\tif(stack.length\
    \ == 1){\n\t\t\tresult = result == \"Yes\" ? \"Yes\" : \"No\";\n\t\t\tbreak;\n\
    \t\t}\n\t\tlet open = stack.pop();\n\t\tlet close = stack.pop();\n\t\tlet openIndex\
    \ = lst.indexOf(open);\n\t\tlet closeIndex = lst.indexOf(close);\n\t\tif(openIndex\
    \ < closeIndex){\n\t\t\tresult = result == \"Yes\" ? \"Yes\" : \"No\";\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn result;\n}\n", "    var stack = [];\n    var str\
    \ = \"\";\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == \"(\"){\n\
    \            stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n  \
    \          while(stack.length && lst[stack[stack.length-1]] == \")\"){\n     \
    \           stack.pop();\n            }\n            if(stack.length){\n     \
    \           str += lst[i];\n            }\n            else{\n               \
    \ return \"No\";\n            }\n        }\n    }\n    if(stack.length){\n   \
    \     return \"No\";\n    }\n    else{\n        return \"Yes\";\n    }\n}\n",
  "\tvar stack = [];\n\tfor(var i=0; i<lst.length; i++){\n\t\tif(lst[i]==\"(\")\n\t\
    \t\tstack.push(i);\n\t\telse if(lst[i]==\")\")\n\t\t\tif(!stack.length || stack.pop()\
    \ != i)\n\t\t\t\treturn \"No\";\n\t}\n\treturn stack.length ? \"Yes\" : \"No\"\
    ;\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"\
    (\"){\n      stack.push(lst[i]);\n    }\n    else if(lst[i]==\")\"){\n      if(stack.length>0){\n\
    \        var top = stack.pop();\n        if(top!=lst[i]){\n          return \"\
    No\";\n        }\n      }\n      else{\n        return \"No\";\n      }\n    }\n\
    \  }\n  return \"Yes\";\n}\n", "    let stack = [];\n    let result = \"No\";\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n    \
    \        stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n      \
    \      if(stack.length == 0){\n                result = \"No\";\n            \
    \    break;\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top != i){\n                    result = \"No\";\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ if(result == \"No\"){\n        result = \"Yes\";\n    }\n    return result;\n\
    }\n", "  var stack = [];\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]==\"\
    (\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"){\n      var len\
    \ = stack.length;\n      if(len==0){\n        return \"No\";\n      }\n      else\
    \ if(len==1){\n        if(stack[len-1]==i){\n          return \"Yes\";\n     \
    \   }\n      }\n      else{\n        var top = stack.pop();\n        if(stack[len-1]==top){\n\
    \          return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";\n\
    }\n", "  let stack = [];\n  let result = \"No\";\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]\
    \ == \")\"){\n      if(stack.length == 0){\n        result = \"No\";\n       \
    \ break;\n      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"\
    (\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\")\"){\n      if(stack.length==0){\n\
    \        return \"No\";\n      }\n      var top = stack.pop();\n      if(top!=i){\n\
    \        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "    var\
    \ stack = [];\n    var open = 0;\n    var close = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            open++;\n        }else if(lst[i]\
    \ == \")\"){\n            close++;\n        }\n        if(open > close){\n   \
    \         return \"No\";\n        }\n        else if(open < close){\n        \
    \    stack.push(lst[i]);\n        }\n    }\n    return \"Yes\";\n}\n", "\tlet\
    \ stack = [];\n\tlet stackSize = 0;\n\tlet isBalanced = true;\n\tfor(let i = 0;\
    \ i < lst.length; i++){\n\t\tlet char = lst[i];\n\t\tif(char === \"(\"){\n\t\t\
    \tstack.push(char);\n\t\t\tstackSize++;\n\t\t}\n\t\telse if(char === \")\"){\n\
    \t\t\tstackSize--;\n\t\t\tif(stackSize === 0){\n\t\t\t\tif(stack.length === 0){\n\
    \t\t\t\t\tisBalanced = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\
    \t\t\tstack.pop();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isBalanced;\n}\n",
  "\tlet stack = [];\n\tlet open = 0;\n\tlet close = 0;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tif(lst[i] === \"(\"){\n\t\t\topen++;\n\t\t}\n\t\telse if(lst[i] ===\
    \ \")\"){\n\t\t\tclose++;\n\t\t}\n\t\telse if(open > close){\n\t\t\tstack.push(lst[i]);\n\
    \t\t}\n\t\telse if(open < close){\n\t\t\twhile(open > close && stack.length >\
    \ 0){\n\t\t\t\tlet temp = stack.pop();\n\t\t\t\tif(temp === \"(\"){\n\t\t\t\t\t\
    open--;\n\t\t\t\t}\n\t\t\t\telse if(temp === \")\"){\n\t\t\t\t\tclose--;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(open > close){\n\t\treturn \"No\";\n\t}\n\telse{\n\
    \t\treturn \"Yes\";\n\t}\n}\n", "  var re = new RegExp(\"\\\\(\", \"g\");\n  var\
    \ re2 = new RegExp(\"\\\\)\", \"g\");\n  var re3 = new RegExp(\"\\\\)\\\\)\",\
    \ \"g\");\n  var re4 = new RegExp(\"\\\\(\\\\)\", \"g\");\n  var re5 = new RegExp(\"\
    \\\\(()\", \"g\");\n  var re6 = new RegExp(\"\\\\)()\", \"g\");\n  var re7 = new\
    \ RegExp(\"\\\\(()()\", \"g\");\n  var re8 = new RegExp(\"\\\\)()()\", \"g\");\n\
    \  var re9 = new RegExp(\"\\\\(()()()\", \"g\");\n  var re10 = new RegExp(\"\\\
    \\)()()()\", \"g\");\n  var re11 = new RegExp(\"\\\\(()()()()\", \"g\");\n  var\
    \ re12 = new RegExp(\"\\\\)()()()()\", \"g\");\n  var re13 = new RegExp(\"\\\\\
    (()()()()()\", \"g\");\n  var re14 = new RegExp(\"\\\\)()()()()()\", \"g\");\n\
    \  var re15 = new RegExp(\"\\\\(()()()()()()\", \"g\");\n  var re16 = new RegExp(\"\
    \\\\)()()()()()()\", \"g\");\n  var re17 = new RegExp(\"\\\\(()()()()()()()\"\
    , \"g\");\n  var re18 = new RegExp(\"\\\\)()()()()()()()\", \"g\");\n  var re19\
    \ = new RegExp(\"\\\\(()()()()()()()()\", \"g\");\n  var re20 = new RegExp(\"\\\
    \\)()()()()()()()()\", \"g\");\n  var re21 = new RegExp(\"\\\\(()()()()()()()()()\"\
    , \"g\");\n  var re22 = new RegExp(\"\\\\)()()()()()()()()()\", \"g\");\n  var\
    \ re23 = new RegExp(\"\\\\(()()()()()()()()()()\", \"g\");\n  var re24 = new RegExp(\"\
    \\\\)()()()()()()()()()()\", \"g\");\n  var re25 = new RegExp(\"\\\\(()()()()()()()()()()()\"\
    , \"g\");\n  var re26 = new RegExp(\"\\\\)()()()()()()()()()()()\", \"g\");\n\
    \  var re27 = new RegExp(\"\\\\(()()()()()()()()()()()()\", \"g\");\n  var re28\
    \ = new RegExp(\"\\\\)()()()()()()()()()()()()\", \"g\");\n  var re29 = new RegExp(\"\
    \\\\(()()()()()()()()()()()()()\", \"g\");\n  var re30 = new RegExp(\"\\\\)()()()()()()()()()()()()()\"\
    , \"g\");\n  var re31 = new RegExp(\"\\\\(()()()()()()()()()()()()()()\", \"g\"\
    );\n  var ", "    let stack = [];\n    let res = \"No\";\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i] == \")\"){\n            if(stack.length ==\
    \ 0){\n                res = \"Yes\";\n                break;\n            }\n\
    \            else{\n                let top = stack.pop();\n                if(top\
    \ < i){\n                    res = \"No\";\n                    break;\n     \
    \           }\n                else{\n                    stack.push(top);\n \
    \               }\n            }\n        }\n    }\n    return res;\n}\n", "\t\
    var stack = [];\n\tvar result = \"No\";\n\tfor(var i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(lst[i]);\n\t\t}\n\t\telse if(lst[i]\
    \ == \")\"){\n\t\t\twhile(stack.length && lst[stack[stack.length - 1]] != \"(\"\
    ){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tif(stack.length){\n\t\t\t\tresult +=\
    \ \"Yes\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult += \"No\";\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result;\n}\n", "    var stack = [];\n    var str = \"\";\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n            stack.push(lst[i]);\n\
    \        }\n        else if(lst[i] == \")\"){\n            while(stack.length\
    \ && stack[stack.length - 1] != \"(\"){\n                str += stack.pop();\n\
    \            }\n            if(!stack.length){\n                return \"No\"\
    ;\n            }\n            else{\n                stack.pop();\n          \
    \  }\n        }\n    }\n    while(stack.length){\n        str += stack.pop();\n\
    \    }\n    return \"Yes\";\n}\n", "  var stack = [];\n  var open = 0;\n  var\
    \ close = 0;\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]\
    \ == \"(\"){\n      open++;\n      stack.push(lst[i]);\n    }\n    else if(lst[i]\
    \ == \")\"){\n      close++;\n      if(open > close){\n        str = stack.pop()\
    \ + str;\n      }\n      else{\n        str = str + stack.pop();\n      }\n  \
    \  }\n    else{\n      str = str + lst[i];\n    }\n  }\n  if(open > close){\n\
    \    return \"No\";\n  }\n  else{\n    return \"Yes\";\n  }\n}\n", "    let stack\
    \ = [];\n    let str = \"\";\n    for(let i = 0; i < lst.length; i++){\n     \
    \   if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i] == \")\"){\n            if(stack.length == 0){\n                return\
    \ \"No\";\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top < i){\n                    return \"No\";\n          \
    \      }\n                else{\n                    str = str.substring(0, top)\
    \ + str.substring(top+1, i);\n                }\n            }\n        }\n  \
    \  }\n    return \"Yes\";\n}\n", "\tlet stack = [];\n\tlet str = \"\";\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tif(lst[i] === \"(\"){\n\t\t\tstack.push(i);\n\
    \t\t}\n\t\telse if(lst[i] === \")\"){\n\t\t\tif(stack.length === 0){\n\t\t\t\t\
    return \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\t\
    if(top === i){\n\t\t\t\t\tstr += lst[i];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t\
    str += lst[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length === 0){\n\t\t\
    return \"Yes\";\n\t}\n\telse{\n\t\treturn \"No\";\n\t}\n}\n", "    let stack =\
    \ [];\n    let res = \"No\";\n    for(let i = 0; i < lst.length; i++){\n     \
    \   if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else\
    \ if(lst[i] == \")\"){\n            if(stack.length == 0){\n                res\
    \ = \"No\";\n                break;\n            }\n            else{\n      \
    \          let top = stack.pop();\n                if(top < i){\n            \
    \        res = \"No\";\n                    break;\n                }\n      \
    \          else{\n                    stack.push(i);\n                }\n    \
    \        }\n        }\n    }\n    return res;\n}\n", "\tlet stack = [];\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\t}\n\twhile(stack.length\
    \ > 0){\n\t\tlet top = stack.pop();\n\t\tif(top == \"(\"){\n\t\t\tstack.push(\"\
    )\");\n\t\t}else if(top == \")\"){\n\t\t\tstack.push(\"(\");\n\t\t}else{\n\t\t\
    \tstack.push(top);\n\t\t}\n\t}\n\treturn stack.length == 0;\n}\n", "    var stack\
    \ = [];\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]==\"(\"){\n    \
    \        stack.push(i);\n        }\n        else if(lst[i]==\")\"){\n        \
    \    var start = stack.pop();\n            if(stack.length==0){\n            \
    \    return \"Yes\";\n            }\n            else{\n                if(lst[start+1]==\"\
    (\"){\n                    return \"Yes\";\n                }\n              \
    \  else{\n                    return \"No\";\n                }\n            }\n\
    \        }\n    }\n    return \"No\";\n}\n", "\tlet stack = [];\n\tlet res = \"\
    No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\t\
    stack.push(i);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tlet top = stack.pop();\n\
    \t\t\tif(top != -1){\n\t\t\t\tif(stack.length == 0){\n\t\t\t\t\tres = \"Yes\"\
    ;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(stack[stack.length - 1] != top){\n\
    \t\t\t\t\tres = \"No\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return res;\n}\n", "\tlet stack = [];\n\tlet res = \"No\";\n\tfor(let i = 0; i\
    \ < lst.length; i++){\n\t\tlet cur = lst[i];\n\t\tif(cur == \"(\"){\n\t\t\tstack.push(cur);\n\
    \t\t}else if(cur == \")\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top != \"\
    (\"){\n\t\t\t\tres = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n\
    }\n", "    var stack = [];\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]==\"\
    (\"){\n            stack.push(i);\n        }\n        else if(lst[i]==\")\"){\n\
    \            var start = stack.pop();\n            if(start==i){\n           \
    \     return \"Yes\";\n            }\n        }\n    }\n    return \"No\";\n}\n",
  "\tlet stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\
    \t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \"\
    )\"){\n\t\t\twhile(stack.length && lst[stack[stack.length - 1]] == \")\"){\n\t\
    \t\t\tstack.pop();\n\t\t\t}\n\t\t\tif(stack.length){\n\t\t\t\tresult = result\
    \ == \"Yes\" ? \"Yes\" : \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "    var stack = [];\n    var open = 0;\n    var close = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n    \
    \        open++;\n            stack.push(lst[i]);\n        }\n        else if(lst[i]\
    \ == \")\"){\n            close++;\n            if(open > close){\n          \
    \      return \"No\";\n            }\n            else{\n                open--;\n\
    \            }\n        }\n    }\n    return \"Yes\";\n}\n", "\tlet stack = [];\n\
    \tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\t}\n\twhile(stack.length\
    \ > 0){\n\t\tlet top = stack.pop();\n\t\tif(top == \"(\"){\n\t\t\tstack.push(\"\
    (\");\n\t\t}\n\t\telse if(top == \")\"){\n\t\t\tstack.push(\")\");\n\t\t}\n\t\t\
    else{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  var stack = [];\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i] == \"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i] == \")\"){\n      if(stack.length == 0){\n        return\
    \ \"No\";\n      }\n      else{\n        var top = stack.pop();\n        if(top\
    \ < i){\n          return \"No\";\n        }\n        else{\n          stack.push(top);\n\
    \        }\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet stack = [];\n\
    \tlet stackSize = 0;\n\tlet isParenthesisOpen = false;\n\tlet isParenthesisClosed\
    \ = false;\n\tfor (let i = 0; i < lst.length; i++){\n\t\tif (lst[i] == \"(\"){\n\
    \t\t\tisParenthesisOpen = true;\n\t\t\tstack.push(lst[i]);\n\t\t\tstackSize++;\n\
    \t\t} else if (lst[i] == \")\"){\n\t\t\tisParenthesisClosed = true;\n\t\t\tstackSize--;\n\
    \t\t\tif (isParenthesisOpen == isParenthesisClosed && stackSize == 0){\n\t\t\t\
    \treturn \"Yes\";\n\t\t\t}\n\t\t} else if (isParenthesisOpen == isParenthesisClosed\
    \ && stackSize == 0){\n\t\t\treturn \"No\";\n\t\t}\n\t}\n}\n", "  var stack =\
    \ [];\n  var open = 0;\n  var close = 0;\n  var i = 0;\n  for(i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] == \"(\"){\n      open++;\n      stack.push(lst[i]);\n\
    \    }else if(lst[i] == \")\"){\n      close++;\n      if(open > close){\n   \
    \     return \"No\";\n      }\n      open--;\n    }\n  }\n  if(open > close){\n\
    \    return \"No\";\n  }\n  while(open > 0){\n    stack.pop();\n    open--;\n\
    \  }\n  while(close > 0){\n    if(stack[stack.length - 1] == \"(\"){\n      close--;\n\
    \    }else{\n      stack.pop();\n    }\n  }\n  return \"Yes\";\n}\n", "    var\
    \ stack = [];\n    var result = \"No\";\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n       \
    \ else if(lst[i] == \")\"){\n            if(stack.length == 0){\n            \
    \    result = \"Yes\";\n                break;\n            }\n            else{\n\
    \                stack.pop();\n            }\n        }\n    }\n    return result;\n\
    }\n", "\tlet stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char == \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t}else if(char == \")\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top != \"\
    (\"){\n\t\t\t\tresult = \"No\";\n\t\t\t\tbreak;\n\t\t\t}else{\n\t\t\t\tresult\
    \ = \"Yes\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", " \
    \ var stack = [];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] == \"\
    (\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \")\"){\n      if(stack.length\
    \ == 0){\n        return \"No\";\n      }\n      else{\n        var top = stack.pop();\n\
    \        if(top != i){\n          return \"No\";\n        }\n      }\n    }\n\
    \  }\n  return \"Yes\";\n}\n", "  var str = lst[0];\n  var lst2 = lst[1];\n  var\
    \ stack = [];\n  for(var i=0; i<str.length; i++){\n    if(str[i] == '('){\n  \
    \    stack.push(str[i]);\n    }\n    else if(str[i] == ')'){\n      if(stack.length\
    \ == 0){\n        return \"No\";\n      }\n      else{\n        var top = stack.pop();\n\
    \        if(top != str[i]){\n          return \"No\";\n        }\n      }\n  \
    \  }\n  }\n  if(stack.length != 0){\n    return \"No\";\n  }\n  else{\n    return\
    \ \"Yes\";\n  }\n}\n", "\tlet stack = [];\n\tlet str = \"\";\n\tfor(let i = 0;\
    \ i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(lst[i]);\n\
    \t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\twhile(stack.length > 0 && stack[stack.length\
    \ - 1] != \"(\"){\n\t\t\t\tstr = stack.pop() + str;\n\t\t\t}\n\t\t\tstack.splice(stack.length\
    \ - 1, 1);\n\t\t}\n\t}\n\tif(stack.length == 0){\n\t\treturn \"Yes\";\n\t}\n\t\
    else{\n\t\treturn \"No\";\n\t}\n}\n", "    var stack = [];\n    var open = 0;\n\
    \    var close = 0;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"\
    (\"){\n            stack.push(lst[i]);\n            open++;\n        }\n     \
    \   else if(lst[i]==\")\"){\n            close++;\n        }\n        else if(close>open\
    \ && close==stack.length){\n            return \"Yes\";\n        }\n    }\n  \
    \  return \"No\";\n}\n", "    let stack = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n\
    \        else if(lst[i] == \")\"){\n            if(stack.length == 0){\n     \
    \           return \"No\";\n            }\n            else{\n               \
    \ let top = stack.pop();\n                if(top != i){\n                    return\
    \ \"No\";\n                }\n            }\n        }\n    }\n    return \"Yes\"\
    ;\n}\n", "  var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i] == \"(\"){\n      stack.push(lst[i]);\n    }\n    else if(lst[i]\
    \ == \")\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n\
    \      else{\n        str = stack.pop();\n        if(str == lst[i]){\n       \
    \   return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";\n}\n", " \
    \   var stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            var open = stack.pop();\n            if(open != -1){\n\
    \                if(open != i){\n                    return \"No\";\n        \
    \        }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "    var\
    \ stack = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i] == \"(\"\
    ){\n            stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n\
    \            while(stack.length && lst[stack[stack.length-1]-1] != \"(\"){\n \
    \               stack.pop();\n            }\n            if(stack.length){\n \
    \               stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ ? \"Yes\" : \"No\";\n}\n", "  var str = lst[0]\n  var lst2 = lst[1]\n  var res\
    \ = []\n  for(var i=0; i<str.length; i++){\n    if(str[i] == \"(\"){\n      if(lst2.indexOf(str.slice(i+1))\
    \ == -1){\n        res.push(\"No\")\n        break\n      }\n    }\n    if(str[i]\
    \ == \")\"){\n      if(lst2.indexOf(str.slice(i+1)) == -1){\n        res.push(\"\
    No\")\n        break\n      }\n    }\n  }\n  if(res.indexOf(\"Yes\") == -1){\n\
    \    return \"No\"\n  }\n  return \"Yes\"\n}\n", "\tlet stack = [];\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\
    \t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn\
    \ \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\tif(top\
    \ != i){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\
    Yes\";\n}\n", "\tlet stack = [];\n\tlet str = \"\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char === \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t}\n\t\telse if(char === \")\"){\n\t\t\twhile(stack.length && stack[stack.length\
    \ - 1] !== \"(\"){\n\t\t\t\tstr = stack.pop() + str;\n\t\t\t}\n\t\t\tif(!stack.length){\n\
    \t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstr = stack.pop() + str;\n\
    \t\t\t}\n\t\t}\n\t\telse{\n\t\t\tstr = char + str;\n\t\t}\n\t}\n\treturn \"Yes\"\
    ;\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n    var str =\
    \ lst[i];\n    if(str == \"(\"){\n      stack.push(str);\n    }else if(str ==\
    \ \")\"){\n      if(stack.length == 0){\n        return \"No\";\n      }else{\n\
    \        var top = stack.pop();\n        if(top != \"(\"){\n          return \"\
    No\";\n        }\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet stack =\
    \ [];\n\tlet res = \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet char\
    \ = lst[i];\n\t\tif(char == \"(\"){\n\t\t\tstack.push(char);\n\t\t}\n\t\telse\
    \ if(char == \")\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top != \"(\"){\n\t\
    \t\t\tres = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n",
  "\tlet stack = [];\n\tlet str = \"\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\
    \tlet char = lst[i];\n\t\tif(char == \"(\"){\n\t\t\tstack.push(char);\n\t\t}\n\
    \t\telse if(char == \")\"){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top != \"\
    (\"){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tstr += char;\n\
    \t\t}\n\t}\n\tif(stack.length != 0){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\"\
    ;\n}\n", "    var stack = [];\n    var str = \"\";\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(lst[i]);\n     \
    \   }\n        else if(lst[i] == \")\"){\n            while(stack.length && stack[stack.length-1]\
    \ != \"(\"){\n                str += stack.pop();\n            }\n           \
    \ if(!stack.length){\n                return \"No\";\n            }\n        \
    \    else{\n                stack.pop();\n            }\n        }\n        else{\n\
    \            str += lst[i];\n        }\n    }\n    return str == \"()\";\n}\n",
  "\tlet stack = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\
    \t}\n\twhile(stack.length){\n\t\tlet str = stack.pop();\n\t\tlet open = str.indexOf(\"\
    (\");\n\t\tlet close = str.indexOf(\")\");\n\t\tif(open < 0 || close < 0){\n\t\
    \t\treturn \"No\";\n\t\t}\n\t\tif(open > close){\n\t\t\treturn \"No\";\n\t\t}\n\
    \t\tif(open === close){\n\t\t\treturn \"Yes\";\n\t\t}\n\t\tstack.push(str.slice(0,\
    \ open));\n\t\tstack.push(str.slice(open + 1, close));\n\t}\n\treturn \"No\";\n\
    }\n", "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n       \
    \ if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i]\
    \ == \")\"){\n            var open = stack.pop();\n            if(open != -1){\n\
    \                if(open != i){\n                    return \"No\";\n        \
    \        }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "\tlet\
    \ stack = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tstack.push(lst[i]);\n\
    \t\twhile(stack.length){\n\t\t\tlet top = stack.pop();\n\t\t\tif(top === \"(\"\
    ){\n\t\t\t\tstack.push(\")\");\n\t\t\t}else if(top === \")\"){\n\t\t\t\tstack.push(\"\
    (\");\n\t\t\t}else{\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\
    Yes\";\n}\n", "    var stack = [];\n    var open = 0;\n    var close = 0;\n  \
    \  for(var i=0;i<lst.length;i++){\n        if(lst[i]==\"(\"){\n            open++;\n\
    \            stack.push(lst[i]);\n        }\n        else if(lst[i]==\")\"){\n\
    \            close++;\n            if(open>close){\n                return \"\
    No\";\n            }\n            else if(open==close){\n                stack.push(lst[i]);\n\
    \            }\n        }\n    }\n    return \"Yes\";\n}\n", "  var stack = [];\n\
    \  var open = 0;\n  var close = 0;\n  var result = \"No\";\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i] == \"(\"){\n      open++;\n      stack.push(lst[i]);\n\
    \    }\n    else if(lst[i] == \")\"){\n      close++;\n      if(open > close){\n\
    \        result = \"Yes\";\n        break;\n      }\n      else{\n        stack.pop();\n\
    \      }\n    }\n  }\n  return result;\n}\n", "\tlet stack = [];\n\tfor(let i\
    \ = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\tstack.push(i);\n\
    \t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn\
    \ \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\tif(lst[top]\
    \ == \")\"){\n\t\t\t\t\tstack.push(top);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t\
    return \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n", "   \
    \ var stack = [];\n    var res = \"No\";\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n       \
    \ else if(lst[i] == \")\"){\n            if(stack.length == 0){\n            \
    \    res = \"No\";\n                break;\n            }\n            else{\n\
    \                stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ == 0){\n        res = \"Yes\";\n    }\n    return res;\n}\n", "    let stack\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"\
    ){\n            stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n\
    \            if(stack.length == 0){\n                return \"No\";\n        \
    \    }\n            else{\n                let top = stack.pop();\n          \
    \      if(top < i){\n                    return \"No\";\n                }\n \
    \               else{\n                    return \"Yes\";\n                }\n\
    \            }\n        }\n    }\n}\n", "    var stack = [];\n    var str = \"\
    \";\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n\
    \            stack.push(i);\n        }\n        else if(lst[i] == \")\"){\n  \
    \          while(stack.length > 0 && lst[stack[stack.length - 1]] == \")\"){\n\
    \                stack.pop();\n            }\n            if(stack.length == 0){\n\
    \                return \"No\";\n            }\n        }\n        else{\n   \
    \         str += lst[i];\n        }\n    }\n    return \"Yes\";\n}\n", "  var\
    \ stack = [];\n  var open = 0;\n  var close = 0;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i]==\"(\"){\n      open++;\n    }\n    if(lst[i]==\")\"){\n\
    \      close++;\n    }\n    if(open==close){\n      stack.push(lst[i]);\n    }\n\
    \  }\n  if(open!=close){\n    return \"No\";\n  }\n  while(stack.length>0){\n\
    \    var str = stack.pop();\n    if(str==\"(\"){\n      open--;\n    }\n    if(str==\"\
    )\"){\n      close--;\n    }\n    if(open==close){\n      return \"Yes\";\n  \
    \  }\n  }\n  return \"No\";\n}\n", "    let stack = [];\n    let res = \"No\"\
    ;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] === \"(\"){\n \
    \           stack.push(i);\n        }\n        else if(lst[i] === \")\"){\n  \
    \          while(stack.length > 0 && lst[stack.pop()] !== \"(\"){\n          \
    \      res = lst[stack.pop()] + res;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return res === \"Yes\";\n}\n", "    let stack = [];\n \
    \   let res = \"No\";\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            if(stack.length == 0){\n                res = \"No\";\n\
    \                break;\n            }\n            else{\n                let\
    \ top = stack.pop();\n                if(top != i){\n                    res =\
    \ \"No\";\n                    break;\n                }\n            }\n    \
    \    }\n    }\n    return res;\n}\n", "  var stack = [];\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i]==\"(\"){\n      stack.push(i);\n    }\n    else if(lst[i]==\"\
    )\"){\n      if(stack.length>0){\n        var top = stack.pop();\n        if(top==i){\n\
    \          return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";\n\
    }\n", "    var stack = [];\n    var res = \"No\";\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n\
    \        else if(lst[i] == \")\"){\n            while(stack.length && lst[stack[stack.length\
    \ - 1]] != \"(\"){\n                stack.pop();\n            }\n            if(stack.length){\n\
    \                res = lst[i] + lst[stack[stack.length - 1]];\n            }\n\
    \            else{\n                res = lst[i];\n            }\n           \
    \ stack.pop();\n        }\n    }\n    return res;\n}\n", "  var stack = [];\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"(\"){\n      stack.push(i);\n\
    \    }\n    else if(lst[i]==\")\"){\n      if(stack.length>0){\n        var top\
    \ = stack.pop();\n        if(top!=i){\n          return \"No\";\n        }\n \
    \     }\n    }\n  }\n  return \"Yes\";\n}\n", "\tlet stack = [];\n\tlet res =\
    \ \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet str = lst[i];\n\t\t\
    if(str == \"(\"){\n\t\t\tstack.push(str);\n\t\t}\n\t\telse if(str == \")\"){\n\
    \t\t\tif(stack.length == 0){\n\t\t\t\tres = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\t\t\t\tif(top != \"(\"){\n\t\t\t\
    \t\tres = \"No\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "    var stack = [];\n    var open = 0;\n    var close = 0;\n  \
    \  for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \"(\"){\n      \
    \      stack.push(lst[i]);\n            open++;\n        }else if(lst[i] == \"\
    )\"){\n            close++;\n        }else{\n            close--;\n          \
    \  if(open > close){\n                return \"No\";\n            }\n        }\n\
    \    }\n    return \"Yes\";\n}\n", "  var stack = [];\n  var open = 0;\n  var\
    \ close = 0;\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"(\"){\n   \
    \   open++;\n      stack.push(lst[i]);\n    }else if(lst[i]==\")\"){\n      close++;\n\
    \      if(open>close){\n        return \"No\";\n      }else{\n        open--;\n\
    \      }\n    }\n  }\n  if(open==close){\n    return \"Yes\";\n  }else{\n    return\
    \ \"No\";\n  }\n}\n", "    var stack = [];\n    for(var i=0; i<lst.length; i++){\n\
    \        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n       \
    \ else if(lst[i] == \")\"){\n            if(stack.length == 0){\n            \
    \    return \"No\";\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    if(stack.length != 0){\n        return \"\
    No\";\n    }\n    else{\n        return \"Yes\";\n    }\n}\n", "\tlet stack =\
    \ [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\t\
    stack.push(i);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(stack.length ==\
    \ 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\
    \t\t\t\tif(top < i){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\
    \t\t\tstack.push(top);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n",
  "    var stack = [];\n    var open = 0;\n    var close = 0;\n    var result = \"\
    No\";\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"(\"){\n    \
    \        open++;\n            stack.push(lst[i]);\n        }\n        else if(lst[i]==\"\
    )\"){\n            close++;\n            while(close>open && stack.length>0){\n\
    \                stack.shift();\n                close--;\n            }\n   \
    \         if(close>open){\n                result = \"Yes\";\n               \
    \ break;\n            }\n        }\n    }\n    return result;\n}\n", "    var\
    \ stack = [];\n    var str = \"\";\n    for(var i=0; i<lst.length; i++){\n   \
    \     var ch = lst[i];\n        if(ch==\"(\"){\n            stack.push(ch);\n\
    \        }\n        else if(ch==\")\"){\n            if(!stack.length){\n    \
    \            return \"No\";\n            }\n            var top = stack.pop();\n\
    \            if(top!=\"(\"){\n                return \"No\";\n            }\n\
    \        }\n        else{\n            str += ch;\n        }\n    }\n    if(stack.length){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    var stack = [];\n\
    \    var open = 0;\n    var close = 0;\n    var i = 0;\n    var j = 0;\n    var\
    \ len = lst.length;\n    var str = \"\";\n    while(i < len){\n        if(lst[i]\
    \ == \"(\"){\n            open++;\n            stack.push(lst[i]);\n        }\n\
    \        else if(lst[i] == \")\"){\n            close++;\n            if(open\
    \ > close){\n                return \"No\";\n            }\n            else if(open\
    \ < close){\n                open--;\n            }\n        }\n        else{\n\
    \            str += lst[i];\n        }\n        i++;\n    }\n    while(open >\
    \ close){\n        str = stack.pop() + str;\n    }\n    return str;\n}\n", " \
    \ var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n   \
    \ if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] == \"\
    )\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n      else{\n\
    \        var top = stack.pop();\n        if(top != i){\n          return \"No\"\
    ;\n        }\n      }\n    }\n  }\n  return \"Yes\";\n}\n", "    var stack = [];\n\
    \    var res = \"Yes\";\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]==\"\
    (\"){\n            stack.push(i);\n        }\n        else if(lst[i]==\")\"){\n\
    \            var top = stack.pop();\n            if(top==-1){\n              \
    \  res = \"No\";\n                break;\n            }\n            else{\n \
    \               if(top!=i){\n                    res = \"No\";\n             \
    \       break;\n                }\n            }\n        }\n    }\n    return\
    \ res;\n}\n", "    var stack = [];\n    var result = \"No\";\n    for(var i=0;\
    \ i<lst.length; i++){\n        if(lst[i]==\"(\"){\n            stack.push(i);\n\
    \        }\n        else if(lst[i]==\")\"){\n            var start = stack.pop();\n\
    \            if(stack.length>0){\n                var end = stack.pop();\n   \
    \             var diff = lst[start]==lst[end];\n                result += \"Yes\"\
    ;\n                for(var j=start+1; j<end; j++){\n                    if(lst[j]!=lst[j]){\n\
    \                        diff |= lst[j]==lst[j+1];\n                    }\n  \
    \              }\n                if(diff){\n                    result += \"\
    No\";\n                }\n            }\n        }\n    }\n    return result;\n\
    }\n", "  var stack = [];\n  var str = \"\";\n  for(var i=0; i<lst.length; i++){\n\
    \    if(lst[i] == \"(\"){\n      stack.push(lst[i]);\n    }\n    else if(lst[i]\
    \ == \")\"){\n      if(stack.length == 0){\n        return \"No\";\n      }\n\
    \      else{\n        str = stack.pop();\n        if(str == lst[i]){\n       \
    \   return \"Yes\";\n        }\n      }\n    }\n  }\n  return \"No\";\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ === \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ===\
    \ \")\"){\n            if(stack.length === 0){\n                return \"No\"\
    ;\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top === i){\n                    return \"Yes\";\n       \
    \         }\n                else{\n                    return \"No\";\n     \
    \           }\n            }\n        }\n    }\n    return \"No\";\n}\n", "  \
    \  var stack = [];\n    var open = 0;\n    var close = 0;\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(lst[i]==\"(\"){\n            open++;\n            stack.push(lst[i]);\n\
    \        }\n        else if(lst[i]==\")\"){\n            close++;\n          \
    \  while(open>0 && close>0 && stack.length>0){\n                if(stack[stack.length-1]==lst[i]){\n\
    \                    stack.pop();\n                    close--;\n            \
    \    }\n                else{\n                    open--;\n                }\n\
    \            }\n            if(open>close){\n                return \"No\";\n\
    \            }\n            else{\n                return \"Yes\";\n         \
    \   }\n        }\n    }\n    return \"No\";\n}\n", "  var stack = [];\n  for(var\
    \ i=0; i<lst.length; i++){\n    var ch = lst[i];\n    if(ch==\"(\") stack.push(i);\n\
    \    else if(ch==\")\") stack.pop();\n    else return false;\n  }\n  return stack.length==0;\n\
    }\n", "\tlet stack = [];\n\tlet result = \"No\";\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tlet char = lst[i];\n\t\tif(char === \"(\"){\n\t\t\tstack.push(char);\n\
    \t\t}\n\t\telse if(char === \")\"){\n\t\t\tif(!stack.length){\n\t\t\t\tresult\
    \ = \"Yes\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet top = stack.pop();\n\t\t\tif(top\
    \ !== \"(\"){\n\t\t\t\tresult = \"No\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn result;\n}\n", "    let stack = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == \"(\"){\n            stack.push(i);\n        }\n\
    \        else if(lst[i] == \")\"){\n            if(stack.length == 0){\n     \
    \           return \"No\";\n            }\n            else{\n               \
    \ let top = stack.pop();\n                if(top != i){\n                    return\
    \ \"No\";\n                }\n            }\n        }\n    }\n    return \"Yes\"\
    ;\n}\n", "  var stack = [];\n  var open = 0;\n  var close = 0;\n  for(var i=0;\
    \ i<lst.length; i++){\n    if(lst[i]==\"(\"){\n      stack.push(lst[i]);\n   \
    \   open++;\n    }\n    else if(lst[i]==\")\"){\n      close++;\n      if(close==open){\n\
    \        stack.push(lst[i]);\n        open++;\n        close = 0;\n      }\n \
    \     else{\n        close--;\n      }\n    }\n  }\n  if(open!=close){\n    return\
    \ \"No\";\n  }\n  else{\n    return \"Yes\";\n  }\n}\n", "  var stack = [];\n\
    \  var open = 0;\n  var close = 0;\n  var i = 0;\n  var j = 0;\n  var len = lst.length;\n\
    \  var str = \"\";\n  while(i < len){\n    if(lst[i] === \"(\"){\n      open++;\n\
    \      stack.push(lst[i]);\n      i++;\n    }else if(lst[i] === \")\"){\n    \
    \  close++;\n      if(open > close){\n        str = stack.pop() + str;\n     \
    \ }else{\n        str = str + stack.pop();\n      }\n      i++;\n    }else{\n\
    \      str += lst[i];\n      i++;\n    }\n  }\n  return str === \"()\";\n}\n",
  "    var stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ == \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] ==\
    \ \")\"){\n            if(stack.length == 0){\n                return \"No\";\n\
    \            }\n            else{\n                var top = stack.pop();\n  \
    \              if(top != i){\n                    return \"No\";\n           \
    \     }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "    var\
    \ stack = [];\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] ==\
    \ \"(\"){\n            stack.push(i);\n        }\n        else if(lst[i] == \"\
    )\"){\n            var open = stack.pop();\n            if(open != -1){\n    \
    \            if(open != i){\n                    return \"No\";\n            \
    \    }\n            }\n        }\n    }\n    return \"Yes\";\n}\n", "\tlet stack\
    \ = [];\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] == \"(\"){\n\t\t\
    \tstack.push(i);\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(stack.length\
    \ == 0){\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet top = stack.pop();\n\
    \t\t\t\tif(top < i){\n\t\t\t\t\treturn \"No\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\
    \t\t\tstack.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n",
  "  var stack = [];\n  var res = \"No\";\n  for(var i = 0; i < lst.length; i++){\n\
    \    if(lst[i] == \"(\"){\n      stack.push(i);\n    }\n    else if(lst[i] ==\
    \ \")\"){\n      if(stack.length == 0){\n        res = \"Yes\";\n        break;\n\
    \      }\n      else{\n        stack.pop();\n      }\n    }\n  }\n  return res;\n\
    }\n", "  var stack = [];\n  for(var i=0; i<lst.length; i++){\n    if(lst[i]==\"\
    (\") stack.push(i);\n    else if(lst[i]==\")\") stack.pop();\n    if(stack.length==0)\
    \ return true;\n  }\n  return false;\n}\n", "\tlet stack = [];\n\tlet result =\
    \ \"No\";\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet curr = lst[i];\n\t\t\
    if(curr == \"(\"){\n\t\t\tstack.push(curr);\n\t\t}else if(curr == \")\"){\n\t\t\
    \twhile(stack.length && stack[stack.length - 1] != \"(\"){\n\t\t\t\tresult = result\
    \ + \"(\" + stack.pop() + \")\";\n\t\t\t}\n\t\t\tif(!stack.length){\n\t\t\t\t\
    result = \"Yes\";\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
