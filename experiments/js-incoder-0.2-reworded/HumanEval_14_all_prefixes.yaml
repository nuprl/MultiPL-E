name: HumanEval_14_all_prefixes
language: js
prompt: "//Return array of all prefixes from shortest to longest of the input string\n\
  // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
  asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
  WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
completions: ["  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n \
    \   prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n", "  var\
    \ prefixes = [];\n  var prefix;\n  for(var i=0;i<string.length;i++){\n    prefix\
    \ = string.substr(0,i);\n    if(prefixes.indexOf(prefix)<0){\n      prefixes.push(prefix);\n\
    \    }\n  }\n  return prefixes;\n}\n", "  var prefixes = [];\n  for(var i = 0;\
    \ i < string.length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return\
    \ prefixes;\n}\n", "  var prefixes = [];\n  var prefix;\n  for(var i=0;i<string.length;i++){\n\
    \    prefix = string.substr(0,i);\n    if(prefixes.indexOf(prefix)<0){\n     \
    \ prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n}\n", "  var prefixes\
    \ = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.substring(0,\
    \ i));\n  }\n  return prefixes;\n}\n", "  var prefixes = [];\n  var i = 0;\n \
    \ while(i < string.length){\n    prefixes.push(string.substr(i, string.length));\n\
    \    i++;\n  }\n  return prefixes;\n}\n", "  var prefixes = [];\n  for(var i =\
    \ 0; i < string.length; i++){\n    prefixes.push(string.substring(0, i));\n  }\n\
    \  return prefixes;\n}\n", "    var prefixes = [];\n    var len = string.length;\n\
    \    for(var i=0;i<len;i++){\n        prefixes.push(string.substr(0,i));\n   \
    \ }\n    return prefixes;\n}\n", "  var prefixes = [];\n  var prefix;\n  for(var\
    \ i = 0; i < string.length; i++){\n    prefix = string.substr(0, i);\n    if(prefixes.indexOf(prefix)\
    \ === -1){\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n}\n",
  "  var prefixes = [];\n  var len = string.length;\n  for(var i = 0; i<len; i++){\n\
    \    prefixes.push(string.substr(0,i));\n  }\n  return prefixes;\n}\n", "  var\
    \ prefixes = [];\n  var prefix = '';\n  for(var i = 0; i < string.length; i++){\n\
    \    prefix += string[i];\n    if(string[i] != string[0]){\n      prefixes.push(prefix);\n\
    \      prefix = '';\n    }\n  }\n  prefixes.push(prefix);\n  return prefixes;\n\
    }\n", "  var prefixes = [];\n  for(var i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0,\
    \ i));\n  }\n  return prefixes;\n}\n", "  var prefixes = [];\n  for(var i=0;i<string.length;i++){\n\
    \    prefixes.push(string.substr(0,i));\n  }\n  return prefixes;\n}\n", "    var\
    \ prefixes = [];\n    var len = string.length;\n    var i = 0;\n    while(i <\
    \ len){\n        prefixes.push(string.substr(i, len));\n        i += len;\n  \
    \  }\n    return prefixes;\n}\n", "  var prefixes = [];\n  for(var i = 0; i<string.length;\
    \ i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n}\n",
  "  var prefixes = [];\n  var prefix;\n  for(var i=0;i<string.length;i++){\n    prefix\
    \ = string.substr(0,i);\n    if(prefixes.indexOf(prefix)==-1){\n      prefixes.push(prefix);\n\
    \    }\n  }\n  return prefixes;\n}\n", "  var prefixes = [];\n  var length = string.length;\n\
    \  for(var i = 0; i<length; i++){\n    prefixes.push(string.slice(0, i));\n  }\n\
    \  return prefixes;\n}\n", "  var prefixes = [];\n  var prefix;\n  for(var i=0;\
    \ i<string.length; i++){\n    prefix = string.slice(0, i);\n    if(prefixes.indexOf(prefix)\
    \ == -1){\n      prefixes.push(prefix);\n    }\n  }\n  return prefixes;\n}\n",
  "    var prefixes = [];\n    var prefix;\n    var i;\n    for(i = 0; i < string.length;\
    \ i++){\n        prefix = string.substr(0, i);\n        if(prefixes.indexOf(prefix)\
    \ === -1){\n            prefixes.push(prefix);\n        }\n    }\n    return prefixes;\n\
    }\n", "  var prefixes = [];\n  var len = string.length;\n  for(var i = 0; i <\
    \ len; i++){\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
