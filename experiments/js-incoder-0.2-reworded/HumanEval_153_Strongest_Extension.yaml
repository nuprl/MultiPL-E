name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var class_name = class_name + extension;\n       \
    \ var class_name_lower = class_name.toLowerCase();\n        var class_name_upper\
    \ = class_name.toUpperCase();\n        var class_name_length = class_name.length;\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_length;\n        \n        if(class_name_upper\
    \ == class_name_lower){\n            strongest_extension = class_name + extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \       else if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        ", "\t\
    let strength = 0;\n\tlet strongest_extension = null;\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\t", "    var strongest_extension\
    \ = extensions[0];\n    var strongest_extension_strength = -1;\n    for(var i\
    \ = 1; i < extensions.length; i++){\n        var extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_object = eval(class_name);\n\t\tlet strength = class_object.strength;\n\
    \t\tif (strength > max_strength){\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n    let sml_extensions\
    \ = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count =\
    \ cap_extensions.length;\n    let sml_extensions_count = sml_extensions.length;\n\
    \    let strength = cap_extensions_count - sml_extensions_count;\n    if (strength\
    \ > 0){\n        let index = cap_extensions.indexOf(extensions[cap_extensions_count-1]);\n\
    \        return `${class_name}.${extensions[index]}`;\n    }\n    else{\n    \
    \    let index = sml_extensions.indexOf(extensions[sml_extensions_count-1]);\n\
    \        return `${class_name}.${extensions[index]}`;\n    }\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - extension_strength(extension);\n\t\tif (extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet current_extension\
    \ = extensions[i];\n\t\tlet current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n\t\tif (current_extension_strength\
    \ > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = current_extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;\n}\n", "    \n    // Your code here\n    \n}\n",
  "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extensions_length\
    \ = extensions.length;\n    var class_name_length = class_name.length;\n    \n\
    \    for(var i=0; i<extensions_length; i++){\n        var extension = extensions[i];\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    var strongest_extension_strength_counter = 0;\n    for(var i = 1;\
    \ i < extensions.length; i++){\n        var extension_strength = extensions[i].length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n        else if(extension_strength == strongest_extension_strength){\n\
    \            strongest_extension_strength_counter++;\n        }\n    }\n    if(strongest_extension_strength_counter\
    \ > 1){\n        return class_name + \".\" + strongest_extension;\n    }\n   \
    \ else{\n        return class_name;\n    }\n}\n", "\tlet strongest_extension =\
    \ extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_extension\
    \ = \"\";\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var class_name_extension = class_name + \".\" + extension;\n\
    \        var class_name_extension_length = class_name_extension.length;\n    \
    \    var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_extension_length;\n        if(extension_strength\
    \ > strongest){\n            strongest = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((acc, letter)\
    \ => acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0), 0);\n\t\t\
    if (extension_strength > strongest_extension.split(\"\").reduce((acc, letter)\
    \ => acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0), 0)){\n\t\
    \t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \"\
    .\" + strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - extension_strength(extension);\n\t\tif (extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\
    \tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest = -1;\n    var strongest_name = \"\";\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_name =\
    \ extension.substring(0,1).toUpperCase() + extension.substring(1);\n        var\
    \ extension_strength = extension.substring(1).toLowerCase().charCodeAt(0) - 65;\n\
    \        \n        if(extension_strength > strongest){\n            strongest\
    \ = extension_strength;\n            strongest_name = extension_name;\n      \
    \  }\n    }\n    \n    return class_name + \".\" + strongest_name;\n}\n", "  \
    \  \n    // Write your code here\n    \n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\
    \t\tlet strength = cap - sm;\n\t\tif((strength > 0) && (strength < strongest_extension.strength)){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
