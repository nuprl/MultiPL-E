name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and an array of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ array.\n// For example, if you are given \"Slices\" as the class and an array\
  \ of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var class_name = class_name + extension;\n       \
    \ var class_name_lower = class_name.toLowerCase();\n        var class_name_upper\
    \ = class_name.toUpperCase();\n        var class_name_length = class_name.length;\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_length;\n        \n        if(class_name_upper\
    \ == class_name_lower){\n            strongest_extension = class_name + extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \       else if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        else\
    \ if(class_name_upper == class_name_length){\n            strongest_extension\
    \ = class_name_upper + extension;\n            strongest_extension_strength =\
    \ extension_strength;\n        }\n        else if(class_name_lower == class_name_length){\n\
    \            strongest_extension = class_name_lower + extension;\n           \
    \ strongest_extension_strength = extension_strength;\n        }\n        ", "\t\
    let strength = 0;\n\tlet strongest_extension = null;\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet diff = cap -\
    \ sm;\n\t\tif (diff > 0){\n\t\t\tstrength += diff;\n\t\t}\n\t});\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\t", "    var strongest_extension\
    \ = extensions[0];\n    var strongest_extension_strength = -1;\n    for(var i\
    \ = 1; i < extensions.length; i++){\n        var extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_object = eval(class_name);\n\t\tlet strength = class_object.strength;\n\
    \t\tif (strength > max_strength){\n\t\t\tmax_strength = strength;\n\t\t\tmax_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n",
  "    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n    let sml_extensions\
    \ = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count =\
    \ cap_extensions.length;\n    let sml_extensions_count = sml_extensions.length;\n\
    \    let strength = cap_extensions_count - sml_extensions_count;\n    if (strength\
    \ > 0){\n        let index = cap_extensions.indexOf(extensions[cap_extensions_count-1]);\n\
    \        return `${class_name}.${extensions[index]}`;\n    }\n    else{\n    \
    \    let index = sml_extensions.indexOf(extensions[sml_extensions_count-1]);\n\
    \        return `${class_name}.${extensions[index]}`;\n    }\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - extension_strength(extension);\n\t\tif (extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet current_extension\
    \ = extensions[i];\n\t\tlet current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n\t\tif (current_extension_strength\
    \ > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = current_extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;\n}\n", "    \n    // Your code here\n    \n}\n",
  "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extensions_length\
    \ = extensions.length;\n    var class_name_length = class_name.length;\n    \n\
    \    for(var i=0; i<extensions_length; i++){\n        var extension = extensions[i];\n\
    \        var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    var strongest_extension_strength_counter = 0;\n    for(var i = 1;\
    \ i < extensions.length; i++){\n        var extension_strength = extensions[i].length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n        else if(extension_strength == strongest_extension_strength){\n\
    \            strongest_extension_strength_counter++;\n        }\n    }\n    if(strongest_extension_strength_counter\
    \ > 1){\n        return class_name + \".\" + strongest_extension;\n    }\n   \
    \ else{\n        return class_name;\n    }\n}\n", "\tlet strongest_extension =\
    \ extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_extension\
    \ = \"\";\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var class_name_extension = class_name + \".\" + extension;\n\
    \        var class_name_extension_length = class_name_extension.length;\n    \
    \    var extension_length = extension.length;\n        var extension_strength\
    \ = extension_length - class_name_extension_length;\n        if(extension_strength\
    \ > strongest){\n            strongest = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((acc, letter)\
    \ => acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0), 0);\n\t\t\
    if (extension_strength > strongest_extension.split(\"\").reduce((acc, letter)\
    \ => acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0), 0)){\n\t\
    \t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \"\
    .\" + strongest_extension;\n}\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - extension_strength(extension);\n\t\tif (extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\
    \tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest = -1;\n    var strongest_name = \"\";\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_name =\
    \ extension.substring(0,1).toUpperCase() + extension.substring(1);\n        var\
    \ extension_strength = extension.substring(1).toLowerCase().charCodeAt(0) - 65;\n\
    \        \n        if(extension_strength > strongest){\n            strongest\
    \ = extension_strength;\n            strongest_name = extension_name;\n      \
    \  }\n    }\n    \n    return class_name + \".\" + strongest_name;\n}\n", "  \
    \  \n    // Write your code here\n    \n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\
    \t\tlet strength = cap - sm;\n\t\tif((strength > 0) && (strength < strongest_extension.strength)){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = 0;\n    var class_name_length = class_name.length;\n\
    \    var extensions_length = extensions.length;\n    for(var i = 0; i < extensions_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_length\
    \ = extension.length;\n        var extension_strength = extension_length - class_name_length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = \"\";\n    var extensions_count = extensions.length;\n\
    \    var class_name_length = class_name.length;\n    var class_name_upper = class_name.split(\"\
    \").map(function(letter){\n        return letter.toUpperCase();\n    });\n   \
    \ var class_name_lower = class_name.split(\"\").map(function(letter){\n      \
    \  return letter.toLowerCase();\n    });\n    var class_name_upper_count = class_name_upper.length;\n\
    \    var class_name_lower_count = class_name_lower.length;\n    var extension_strength\
    \ = 0;\n    var extension_strength_count = 0;\n    \n    for(var i=0; i<extensions_count;\
    \ i++){\n        var extension = extensions[i];\n        var extension_length\
    \ = extension.length;\n        var extension_upper = extension.split(\"\").map(function(letter){\n\
    \            return letter.toUpperCase();\n        });\n        var extension_lower\
    \ = extension.split(\"\").map(function(letter){\n            return letter.toLowerCase();\n\
    \        });\n        var extension_upper_count = extension_upper.length;\n  \
    \      var extension_lower_count = extension_lower.length;\n        var extension_strength_sum\
    \ = 0;\n        var extension_strength_count_sum = 0;\n        \n        for(var\
    \ j=0; j<extension_length; j++){\n            var letter = extension[j];\n   \
    \         var letter_upper = letter.toUpperCase();\n            var letter_lower\
    \ = letter.toLowerCase();\n            var letter_upper_count = letter_upper.length;\n\
    \            var letter_lower_count = letter_lower.length;\n            \n   \
    \         extension_strength_sum += letter_upper_count - letter_lower_count;\n\
    \            extension_strength_count_sum += letter_upper_count + letter_lower_count;\n\
    \        }\n        \n        if(extension_strength_sum > extension_strength){\n\
    \            strongest_extension = extension;\n            extension_strength\
    \ = extension_strength_sum;\n        }\n        else if(extension_strength_sum\
    \ == extension_strength){\n            if(extension_strength_count_sum > extension_strength_count){\n\
    \                strongest_extension = extension;\n                extension_strength\
    \ = extension_strength_sum;\n            }\n        }\n    }\n    \n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_length = extension.length;\n\t\tlet extension_strength\
    \ = extension_length - CAP_SM_RE.exec(extension)[0].length;\n\t\tif (extension_strength\
    \ > strongest_extension.length){\n\t\t\tstrongest_extension = extension;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "  var max_strength\
    \ = -1;\n  var max_extension = \"\";\n  for(var i=0;i<extensions.length;i++){\n\
    \    var extension = extensions[i];\n    var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if(strength > max_strength){\n    \
    \  max_strength = strength;\n      max_extension = extension;\n    }\n  }\n  return\
    \ class_name + \".\" + max_extension;\n}\n", "    \n    // Your code here\n  \
    \  \n}\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string and returns\
    \ the number of characters in that string. \nThe function should ignore all non-alphabetic\
    \ characters (i.e. punctuation).\n\nExample:\n>>> count_characters(\"Hello World!\"\
    )\n11\n\n</text>\n<cell>\n# Problem 7\ndef count_characters(string):\n    \n \
    \   # Your code here\n    \n</cell>\n<text>\nProblem 8\nWrite a function that\
    \ takes a string and returns the number of words in that string.\n\nThe function\
    \ should ignore all non-alphabetic characters (i.e. punctuation).\n\nExample:\n\
    >>> count_words(\"Hello World!\")\n2\n\n</text>\n<cell>\n# Problem 8\ndef count_words(string):\n\
    \    \n    # Your code here\n    \n</cell>\n<text>\nProblem 9\nWrite a function\
    \ that takes a string and returns the number of sentences in that string.\n\n\
    The function should ignore all non-alphabetic characters (i.e. punctuation).\n\
    \nExample:\n>>> count_sentences(\"Hello World!\")\n1\n\n</text>\n<cell>\n# Problem\
    \ 9\ndef count_sentences(string):\n    \n    # Your code here\n    \n</cell>\n\
    <text>\nProblem 10\nWrite a function that takes a string and returns the number\
    \ of words in that string that are greater than or equal to 5 characters.\n\n\
    The function should ignore all non-alphabetic characters (i.e. punctuation).\n\
    \nExample:\n>>> count_words_greater_than_five(\"Hello World!\")\n1\n\n</text>\n\
    <cell>\n# Problem 10\ndef count_words_greater_than_five(string):\n    \n    #\
    \ Your code here\n    \n</cell>\n<text>\nProblem 11\nWrite a function that takes\
    \ a string and returns the number of words in that string that are greater than\
    \ or equal to 5 characters.\n\nThe function should ignore all non-alphabetic characters\
    \ (i.e. punctuation).\n\nExample:\n>>> count_words_greater_than_five(\"Hello World!\"\
    )\n1\n\n</text>\n<cell>\n# Problem 11\ndef count_words_greater_than_five(string):\n\
    \    \n    # Your code here\n    \n</cell>\n<text>\nProblem 12\nWrite a function\
    \ that takes a string and returns the number of words in that string that are\
    \ greater than or equal to 5 characters.\n\nThe function should ignore all non-alphabetic\
    \ characters (i.e. punctuation).\n\nExample:\n>>> count_words_greater_than_five(\"\
    Hello World!\")\n1\n\n</text>\n<cell>\n# Problem 12\ndef count_words_greater_than_five(string):\n\
    \    \n    # Your code here", "\tlet strongest_extension = extensions[0];\n\t\
    for (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension_strength(extension);\n\t\tif (extension_strength > strongest_extension.length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    let class_name_array = class_name.split(\"\
    \").map(function(x){return x.toUpperCase()});\n    let extensions_array = extensions.map(function(x){return\
    \ x.toUpperCase()});\n    let max_extension_strength = 0;\n    let max_extension_extension\
    \ = \"\";\n    for(let i = 0; i < extensions_array.length; i++){\n        let\
    \ extension_strength = extensions_array[i].split(\"\").reduce(function(a, b){return\
    \ a + b.charCodeAt(0) - b.charCodeAt(0).toLowerCase()}, 0);\n        if(extension_strength\
    \ > max_extension_strength){\n            max_extension_strength = extension_strength;\n\
    \            max_extension_extension = extensions_array[i];\n        }\n    }\n\
    \    return class_name + \".\" + max_extension_extension;\n}\n", "\tlet strength\
    \ = 0;\n\tlet strongest_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet cap_diff = class_name_length\
    \ - extension_length;\n\t\tlet sm_diff = class_name_length - extension_length\
    \ - 1;\n\t\tlet cap_diff_sm = cap_diff - sm_diff;\n\t\tlet cap_diff_cap = cap_diff\
    \ - cap_diff_sm;\n\t\tlet sm_diff_cap = sm_diff - cap_diff_sm;\n\t\tlet sm_diff_sm\
    \ = sm_diff - cap_diff_cap;\n\t\tlet cap_diff_cap_sm = cap_diff_cap - sm_diff_sm;\n\
    \t\tlet cap_diff_cap_cap = cap_diff_cap - cap_diff_cap_sm;\n\t\tlet sm_diff_cap_sm\
    \ = sm_diff_cap - cap_diff_cap_sm;\n\t\tlet sm_diff_cap_cap = sm_diff_cap - cap_diff_cap_sm;\n\
    \t\tlet cap_diff_cap_sm_sm = cap_diff_cap_sm - sm_diff_cap_sm;\n\t\tlet cap_diff_cap_cap_sm\
    \ = cap_diff_cap_sm - cap_diff_cap_cap_sm;\n\t\tlet sm_diff_cap_cap_sm_sm = sm_diff_cap_cap_sm\
    \ - cap_diff_cap_cap_sm;\n\t\tlet sm_diff_cap_cap_sm_sm = sm_diff_cap_cap_sm -\
    \ cap_diff_cap_cap_sm;\n\t\tlet cap_diff_cap_cap_sm_sm = cap_diff_cap_cap_sm -\
    \ sm_diff_cap_cap_sm;\n\t\tlet sm_diff_cap_cap_sm_sm = sm_diff_cap_cap_sm - cap_diff_cap_cap_sm;\n\
    \t\tlet sm_diff_cap_cap_sm_sm = sm_diff_cap_cap_sm - cap_diff_cap_cap_sm;\n\t\t\
    let cap_diff_cap_cap_sm_sm = cap_diff_cap_cap_sm - sm_diff_cap_cap_sm;\n\t\tlet\
    \ sm_diff_cap_cap_sm_sm = sm_diff_cap_cap_sm - cap_diff_cap_cap_sm;\n\t\tlet sm_diff_cap_cap_sm_sm\
    \ = sm_diff_cap_cap_sm - cap_diff_cap_cap_sm;\n\t\tlet cap_diff_cap_cap_sm_sm\
    \ = cap_diff_cap_cap_sm - sm_diff_cap_cap_sm;\n\t\tlet sm_diff_cap_cap_sm_sm =\
    \ sm_diff_cap_cap_sm - cap_diff_cap_cap_sm;\n\t\tlet sm_diff_cap_cap_sm_sm = sm_diff_cap_cap_sm\
    \ - cap_diff", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let extension_strengths = {};\n    extensions.forEach(function(extension){\n\
    \        let extension_str = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        let extension_strength = extension_strengths[extension_str];\n      \
    \  if(extension_strength === undefined){\n            extension_strengths[extension_str]\
    \ = 1;\n        }else{\n            extension_strengths[extension_str] += 1;\n\
    \        }\n    });\n    let max_strength = -1;\n    let max_extension;\n    for(let\
    \ extension_str in extension_strengths){\n        let extension_strength = extension_strengths[extension_str];\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_extension = extension_str;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    \n    // Your code here\n    \n}\n", " \
    \   var strongest_extension = \"\";\n    var cap_extensions = extensions.map(function(e){\n\
    \        return e.match(/[A-Z]/)[0].length;\n    });\n    var sm_extensions =\
    \ extensions.map(function(e){\n        return e.match(/[a-z]/)[0].length;\n  \
    \  });\n    var strength = cap_extensions - sm_extensions;\n    extensions.forEach(function(e){\n\
    \        if(e.match(/[A-Z]/)[0].length == cap_extensions && e.match(/[a-z]/)[0].length\
    \ == sm_extensions){\n            strongest_extension = e;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n", "    var strongest\
    \ = -1;\n    var strongest_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_length\
    \ = class_name.length;\n        var extension_length = extension.length;\n   \
    \     var extension_strength = extension_length - class_name_length;\n       \
    \ var extension_strength_frac = extension_strength / class_name_length;\n    \
    \    if(extension_strength_frac > strongest){\n            strongest = extension_strength_frac;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].length - extensions[i].toLowerCase().replace(/[^a-z]/g,'');\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t\
    }\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = -1;\n    var extensions_length\
    \ = extensions.length;\n    for(var i=0; i<extensions_length; i++){\n        var\
    \ extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var\
    \ strongest = null;\n    var strongest_strength = -1;\n    for(var i = 0; i <\
    \ extensions.length; i++){\n        var extension = extensions[i];\n        var\
    \ extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_strength){\n            strongest =\
    \ extension;\n            strongest_strength = extension_strength;\n        }\n\
    \    }\n    return class_name + \".\" + strongest;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var strongest_extension_strength_found = false;\n    var strongest_extension_strength_found\
    \ = false;\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_length = extension.length;\n       \
    \ var extension_strength = extension_length - CAP_SM_LENGTH;\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \        if(extension_strength == strongest_extension_strength){\n           \
    \ strongest_extension_strength_found = true;\n        }\n    }\n    if(strongest_extension_strength_found\
    \ == false){\n        for(var i = 0; i < extensions.length; i++){\n          \
    \  var extension = extensions[i];\n            var extension_length = extension.length;\n\
    \            var extension_strength = extension_length - CAP_SM_LENGTH;\n    \
    \        if(extension_strength < strongest_extension_strength){\n            \
    \    strongest_extension_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n    }\n    return class_name + \".\"\
    \ + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for(let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].split(\"\").reduce((acc,\
    \ letter)=>{\n            return acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0)\
    \ - 1;\n        }, 0);\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension[0].toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension[0].toLowerCase().charCodeAt(0);\n\t\tlet strength = cap\
    \ - sm;\n\t\tif (strength > strongest_extension.strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var capitals = 0;\n    var lowercases\
    \ = 0;\n    var total_capitals = 0;\n    var total_lowercases = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var cap = extension.charAt(0).toUpperCase();\n        var lower = extension.charAt(0).toLowerCase();\n\
    \        capitals += cap.length;\n        lowercases += lower.length;\n      \
    \  total_capitals += cap.length;\n        total_lowercases += lower.length;\n\
    \    }\n    var strength = capitals - lowercases;\n    if(strength > 0){\n   \
    \     for(var i = 0; i < extensions.length; i++){\n            var extension =\
    \ extensions[i];\n            var cap = extension.charAt(0).toUpperCase();\n \
    \           var lower = extension.charAt(0).toLowerCase();\n            if(cap\
    \ == lower){\n                strength += cap.length;\n            }\n       \
    \ }\n    }\n    strongest_extension = class_name + \".\" + extensions[Math.max(strength,\
    \ -1)];\n    return strongest_extension;\n}\n", "\tlet strongest_extension = \"\
    \";\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet extension_counter = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\
    \t\textension_counter++;\n\t\tlet extension_counter_string = extension_counter.toString();\n\
    \t\tlet extension_counter_string_capital = extension_counter_string.toUpperCase();\n\
    \t\tlet extension_counter_string_small = extension_counter_string.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps = extension_counter_string_small.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps = extension_counter_string_capital.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps_caps = extension_counter_string_small_caps.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps_caps = extension_counter_string_capital_caps.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps_caps_caps = extension_counter_string_small_caps_caps.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps_caps_caps = extension_counter_string_capital_caps_caps.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps_caps_caps_caps = extension_counter_string_small_caps_caps_caps.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps_caps_caps_caps = extension_counter_string_capital_caps_caps_caps.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps_caps_caps_caps_caps = extension_counter_string_small_caps_caps_caps_caps_caps.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps_caps_caps_caps_caps = extension_counter_string_capital_caps_caps_caps_caps_caps.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps_caps_caps_caps_caps_caps = extension_counter_string_small_caps_caps_caps_caps_caps_caps_caps.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps_caps_caps_caps_caps_caps = extension_counter_string_capital_caps_caps_caps_caps_caps_caps.toLowerCase();\n\
    \t\tlet extension_counter_string_small_caps_caps_caps_caps_caps_caps_caps = extension_counter_string_small_caps_caps_caps_caps_caps_caps_caps_caps.toUpperCase();\n\
    \t\tlet extension_counter_string_capital_caps_cap", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var extension_strengths = {};\n   \
    \ extensions.forEach(function(extension){\n        var class_name = extension.substr(0,\
    \ extension.lastIndexOf('.'));\n        var extension_name = extension.substr(extension.lastIndexOf('.')+1);\n\
    \        var extension_strength = extension_strengths[extension_name];\n     \
    \   if(extension_strength === undefined){\n            extension_strengths[extension_name]\
    \ = extension_strength = -1;\n        }\n        extension_strengths[extension_name]\
    \ = extension_strength+1;\n    });\n    var max_strength = -1;\n    var max_extension;\n\
    \    for(var extension in extension_strengths){\n        if(extension_strengths[extension]\
    \ > max_strength){\n            max_strength = extension_strengths[extension];\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    var strongest_extension = null;\n    var\
    \ strongest_extension_strength = 0;\n    var extension_length = extensions.length;\n\
    \    var class_length = class_name.length;\n    for(var i = 0; i < extension_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_class_name\
    \ = extension.substr(0, class_length);\n        var extension_class_name_length\
    \ = extension_class_name.length;\n        for(var j = 0; j < class_length; j++){\n\
    \            if(extension_class_name_length == class_length){\n              \
    \  if(extension_class_name == class_name){\n                    strongest_extension\
    \ = extension;\n                    strongest_extension_strength = -1;\n     \
    \               break;\n                }\n            }\n            else if(extension_class_name_length\
    \ < class_length){\n                if(extension_class_name.substr(j, 1) == class_name.substr(j,\
    \ 1)){\n                    strongest_extension = extension;\n               \
    \     strongest_extension_strength = -1;\n                    break;\n       \
    \         }\n            }\n        }\n    }\n    if(strongest_extension_strength\
    \ == -1){\n        for(var i = 0; i < extension_length; i++){\n            var\
    \ extension = extensions[i];\n            var extension_class_name = extension.substr(0,\
    \ class_length);\n            var extension_class_name_length = extension_class_name.length;\n\
    \            for(var j = 0; j < class_length; j++){\n                if(extension_class_name_length\
    \ == class_length){\n                    if(extension_class_name == class_name){\n\
    \                        strongest_extension = extension;\n                  \
    \      strongest_extension_strength = -1;\n                        break;\n  \
    \                  }\n                }\n                else if(extension_class_name_length\
    \ < class_length){\n                    if(extension_class_name.substr(j, 1) ==\
    \ class_name.substr(j, 1)){\n                        strongest_extension = extension;\n\
    \                        strongest_extension_strength = -1;\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = extensions[0];\n  \
    \  var strength = -1;\n    for(var i = 1; i < extensions.length; i++){\n     \
    \   var extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase();\n\
    \        var sm = extension.charAt(0).toLowerCase();\n        var diff = cap -\
    \ sm;\n        if(diff > strength){\n            strongest = extension;\n    \
    \        strength = diff;\n        }\n    }\n    return class_name + \".\" + strongest;\n\
    }\n", "\tlet strength = 0;\n\tlet strongest_extension = \"\";\n\tfor (let i =\
    \ 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet\
    \ class_name_length = class_name.length;\n\t\tlet extension_length = extension.length;\n\
    \t\tlet extension_strength = extension_length - class_name_length;\n\t\tlet extension_class_name\
    \ = extension.substr(0, extension_length);\n\t\tlet extension_class_name_length\
    \ = extension_class_name.length;\n\t\tlet extension_class_name_strength = extension_class_name_length\
    \ - class_name_length;\n\t\tlet extension_class_name_strength_percentage = extension_class_name_strength\
    \ / extension_length;\n\t\tlet extension_strength_percentage = extension_strength\
    \ / extensions.length;\n\t\tlet extension_strength_percentage_rounded = Math.round(extension_strength_percentage*100)/100;\n\
    \t\tlet extension_strength_rounded = Math.round(extension_strength*100)/100;\n\
    \t\tif (extension_strength_percentage > strength){\n\t\t\tstrength = extension_strength_percentage_rounded;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn strongest_extension;\n\
    }\n", "    var strongest = null;\n    var strongest_strength = 0;\n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n  \
    \      var extension_strength = extension.match(/[A-Z]/g).length;\n        var\
    \ extension_strength_lower = extension.match(/[a-z]/g).length;\n        var extension_strength_upper\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     var extension_strength_total = extension_strength + extension_strength_lower\
    \ + extension_strength_upper;\n        if(extension_strength_total > strongest_strength){\n\
    \            strongest = extension;\n            strongest_strength = extension_strength_total;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n\t\tif (extension_strength > strongest_extension.charCodeAt(0)){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].split(\"\").reduce((acc, letter)=>{\n            return acc\
    \ + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0) - 1;\n        },\
    \ 0);\n        if (extension_strength > strongest_extension.split(\"\").reduce((acc,\
    \ letter)=>{\n            return acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0)\
    \ - 1;\n        }, 0)){\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", " \
    \   let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_str = extensions[i];\n        let extension_cap\
    \ = extension_str.length;\n        let extension_sm = 0;\n        for (let j =\
    \ 0; j < extension_cap; j++){\n            if (extension_str.charAt(j) == extension_str.charAt(j).toUpperCase()){\n\
    \                extension_sm++;\n            }\n        }\n        let extension_strength\
    \ = extension_cap - extension_sm;\n        if (extension_strength > strongest_extension.strength){\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest = extensions[0];\n\
    \tlet counter = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase();\n\t\tif(cap != sm){\n\t\t\tcounter +=\
    \ 1;\n\t\t}\n\t\tif(cap == sm && counter > strongest.charAt(0).toLowerCase()){\n\
    \t\t\tstrongest = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = \"\";\n    let max_strength = -1;\n    let\
    \ max_extension = \"\";\n    for(let i = 0; i < extensions.length; i++){\n   \
    \     let extension = extensions[i];\n        let strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(strength > max_strength){\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "   \
    \ let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for(let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = null;\n    var strongest_extension_strength_fraction =  null;\n    var strongest_extension_strength_fraction_length\
    \ = null;\n    var strongest_extension_strength_fraction_length_strongest_extension\
    \ = null;\n    var strongest_extension_strength_fraction_length_strongest_extension_strength\
    \ = null;\n    var strongest_extension_strength_fraction_length_strongest_extension_strength_fraction\
    \ = null;\n    var strongest_extension_strength_fraction_length_strongest_extension_strength_fraction_length\
    \ = null;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_length = extension.length;\n       \
    \ var extension_strength = extension.match(/[A-Z]/g).length;\n        var extension_strength_fraction\
    \ = extension_strength/extension_length;\n        var extension_strength_fraction_length\
    \ = extension_strength_fraction.toString().length;\n        var extension_strength_fraction_length_strongest_extension\
    \ = extension_strength_fraction_length/strongest_extension_strength_fraction_length_strongest_extension_strength;\n\
    \        var extension_strength_fraction_length_strongest_extension_strength =\
    \ extension_strength_fraction_length/strongest_extension_strength_fraction_length_strongest_extension_strength_fraction;\n\
    \        var extension_strength_fraction_length_strongest_extension_strength_fraction\
    \ = extension_strength_fraction_length/strongest_extension_strength_fraction_length_strongest_extension_strength_fraction_length;\n\
    \        if(extension_strength_fraction_length_strongest_extension_strength <\
    \ strongest_extension_strength_fraction_length_strongest_extension){\n       \
    \     strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension_strength_fraction = extension_strength_fraction;\n\
    \            strongest_extension_strength_fraction_length = extension_strength_fraction_length;\n\
    \            strongest_extension_strength_fraction_length_strongest_extension\
    \ = extension_strength_fraction_length_strongest_extension;\n            strongest_extension_strength_fraction_length_strongest_extension_strength\
    \ = extension_strength_fraction_length_strongest_extension_strength;\n       \
    \     strongest_extension_strength_fraction_length_strongest_extension_strength_fraction\
    \ = extension_strength_fraction_length_strongest_extension_strength_fraction;\n\
    \            strongest_extension", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++){\n       \
    \ let extension = extensions[i];\n        let extension_length = extension.length;\n\
    \        let extension_strength = extension_length - extension_strength;\n   \
    \     if (extension_strength > strongest_extension.length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    \n    // Your code here\n    \n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\
    \tif (extension_strength > strongest_extension.split(\"\").reduce((a, b) => a\
    \ + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0)){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for(let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].split(\"\").reduce((acc, letter)=>{\n            return acc\
    \ + letter.toUpperCase().charCodeAt(0) - letter.toLowerCase().charCodeAt(0);\n\
    \        }, 0);\n        if(strongest_extension_strength < extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_class\
    \ = class_name + extension;\n\t\tlet extension_strength = Extension_Strength(extension_class);\n\
    \t\tif(extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + max_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tlet strongest_extension_strength =\
    \ -1;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = extensions[0];\n    var strongest_extension_strength = -1;\n    for(var i\
    \ = 1; i < extensions.length; i++){\n        var extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if(strongest_extension_strength\
    \ < extension_strength){\n            strongest_extension = extensions[i];\n \
    \           strongest_extension_strength = extension_strength;\n        }\n  \
    \  }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_extension\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_length = extension.length;\n       \
    \ var extension_strength = extension_length - CAP_SM_LENGTH;\n        if(extension_strength\
    \ > strongest){\n            strongest = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest = extensions[0];\n\tlet strength = -1;\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet frac = cap - sm;\n\t\tstrength = Math.max(strength, frac);\n\t});\n\t\
    return class_name + \".\" + strongest + extensions[extensions.indexOf(strongest)\
    \ + 1];\n}\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet cap_extensions\
    \ = extensions.map(e => e.toUpperCase()).sort((a,b) => b.length - a.length);\n\
    \tlet sm_extensions = extensions.map(e => e.toLowerCase()).sort((a,b) => a.length\
    \ - b.length);\n\tlet strength = cap_extensions.length - sm_extensions.length;\n\
    \treturn class_name + cap_extensions[strength];\n}\n", "    let strongest = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n        let\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        let strength\
    \ = cap - sm;\n        if (strength > strongest.strength){\n            strongest\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest;\n\
    }\n", "\tlet cap_extensions = extensions.filter(x => x.match(/[A-Z]/));\n\tlet\
    \ sm_extensions = extensions.filter(x => x.match(/[a-z]/));\n\tlet cap_extensions_count\
    \ = cap_extensions.length;\n\tlet sm_extensions_count = sm_extensions.length;\n\
    \tlet cap_extension_strength = cap_extensions_count - sm_extensions_count;\n\t\
    let sm_extension_strength = sm_extensions_count - cap_extensions_count;\n\tlet\
    \ strongest_extension = extensions[Math.max(cap_extension_strength, sm_extension_strength)];\n\
    \treturn class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = extensions[0];\n    for(var i = 1; i < extensions.length; i++){\n        var\
    \ extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        var sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var\
    \ strength = cap - sm;\n        if(strength > strongest_extension.strength){\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "\tlet max_strength = -1\n\tlet max_extension\
    \ = \"\"\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i]\n\t\tlet class_name = class_name + extension\n\t\tlet class_object\
    \ = eval(class_name)\n\t\tlet strength = class_object.strength\n\t\tif (strength\
    \ > max_strength){\n\t\t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\
    \t\t}\n\t}\n\treturn class_name + max_extension\n}\n", "    var strongest_extension\
    \ = extensions[0];\n    var strongest_extension_strength = -1;\n    for(var i\
    \ = 1; i < extensions.length; i++){\n        var extension_strength = extensions[i].toUpperCase().charCodeAt(0)\
    \ - extensions[i].toLowerCase().charCodeAt(0);\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].charCodeAt(0) - extensions[i].charCodeAt(0).toLowerCase();\n\
    \t\tif (extension_strength > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0).toLowerCase()){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var max_strength = -1;\n    var max_extension\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\
    \t\tif (strength > strongest_extension.strength){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        let sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        let\
    \ strength = cap - sm;\n        if (strength > strongest_extension.strength){\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].split(\"\").reduce((sum,\
    \ letter)=>{\n            return sum + letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase();\n\
    \        }, 0);\n        if (extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((a, b)\
    \ => a + b.toUpperCase().charCodeAt(0) - b.toLowerCase().charCodeAt(0), 0);\n\t\
    \tif (extension_strength > strongest_extension.split(\"\").reduce((a, b) => a\
    \ + b.toUpperCase().charCodeAt(0) - b.toLowerCase().charCodeAt(0), 0)){\n\t\t\t\
    strongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    var strongest_extension = \"\";\n    var\
    \ strongest_extension_strength = 0;\n    var class_name_length = class_name.length;\n\
    \    var extensions_length = extensions.length;\n    \n    for(var i = 0; i <\
    \ extensions_length; i++){\n        var extension_length = extensions[i].length;\n\
    \        var extension_strength = extensions[i].charCodeAt(0) - class_name_length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet class_name_array = class_name.split('');\n\
    \tlet class_name_array_length = class_name_array.length;\n\tlet extensions_length\
    \ = extensions.length;\n\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\tlet extensions_array = [];\n\tlet extensions_array_length = extensions_array.length;\n\
    \tlet extensions_array_length_counter = 0;\n\tlet extensions_array_length_counter2\
    \ = 0;\n\tlet extensions_array_length_counter3 = 0;\n\tlet extensions_array_length_counter4\
    \ = 0;\n\tlet extensions_array_length_counter5 = 0;\n\tlet extensions_array_length_counter6\
    \ = 0;\n\tlet extensions_array_length_counter7 = 0;\n\tlet extensions_array_length_counter8\
    \ = 0;\n\tlet extensions_array_length_counter9 = 0;\n\tlet extensions_array_length_counter10\
    \ = 0;\n\tlet extensions_array_length_counter11 = 0;\n\tlet extensions_array_length_counter12\
    \ = 0;\n\tlet extensions_array_length_counter13 = 0;\n\tlet extensions_array_length_counter14\
    \ = 0;\n\tlet extensions_array_length_counter15 = 0;\n\tlet extensions_array_length_counter16\
    \ = 0;\n\tlet extensions_array_length_counter17 = 0;\n\tlet extensions_array_length_counter18\
    \ = 0;\n\tlet extensions_array_length_counter19 = 0;\n\tlet extensions_array_length_counter20\
    \ = 0;\n\tlet extensions_array_length_counter21 = 0;\n\tlet extensions_array_length_counter22\
    \ = 0;\n\tlet extensions_array_length_counter23 = 0;\n\tlet extensions_array_length_counter24\
    \ = 0;\n\tlet extensions_array_length_counter25 = 0;\n\tlet extensions_array_length_counter26\
    \ = 0;\n\tlet extensions_array_length_counter27 = 0;\n\tlet extensions_array_length_counter28\
    \ = 0;\n\tlet extensions_array_length_counter29 = 0;\n\tlet extensions_array_length_counter30\
    \ = 0;\n\tlet extensions_array_length_counter31 = 0;\n\tlet extensions_array_length_counter32\
    \ = 0;\n\tlet extensions_array_length_counter33 = 0;\n\tlet extensions_array_length_counter34\
    \ = 0;\n\tlet extensions_array_length_counter35 = 0;\n\tlet extensions_array_length_counter36\
    \ = 0;\n\tlet extensions_array_length_counter37 = 0;\n\tlet extensions_array_length_counter38\
    \ = 0;\n\tlet extensions_array_length_counter39 = 0;\n\tlet extensions_array_length_counter40\
    \ = 0;\n\tlet extensions_array_length_counter41 = 0;\n\tlet extensions_array_length_counter42\
    \ = 0;\n\tlet extensions_array_length_counter43 = 0;\n\tlet extensions_array_length_counter44\
    \ = 0;\n\tlet extensions_array_length_counter45 = 0;\n\tlet ", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = null;\n    for(let i = 0; i\
    \ < extensions.length; i++){\n        let extension = extensions[i];\n       \
    \ let class_name_extension = class_name + extension;\n        let class_name_extension_strength\
    \ = extension_strength(class_name_extension);\n        if(strongest_extension_strength\
    \ == null || class_name_extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = class_name_extension_strength;\n \
    \           strongest_extension = class_name_extension;\n        }\n    }\n  \
    \  return strongest_extension;\n}\n", "    var strongest_extension = null;\n \
    \   var strongest_extension_strength = 0;\n    var extension_length = extensions.length;\n\
    \    for(var i=0; i<extension_length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i].toLowerCase();\n\t\tlet class_name_length\
    \ = class_name.length;\n\t\tlet extension_length = extension.length;\n\t\tlet\
    \ strength = class_name_length - extension_length;\n\t\tif (strength > max_strength){\n\
    \t\t\tmax_strength = strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\
    \treturn class_name + \".\" + max_extension;\n}\n", "\tlet max_strength = -1;\n\
    \tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length; i++){\n\t\
    \tlet extension = extensions[i];\n\t\tlet class_name = class_name + extension;\n\
    \t\tlet class_object = eval(class_name);\n\t\tlet class_strength = class_object.strength;\n\
    \t\tif (class_strength > max_strength){\n\t\t\tmax_strength = class_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > strongest_extension.strength){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest = null;\n    var max_strength = 0;\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var class_name = class_name + extension;\n        var class_object = eval(class_name);\n\
    \        var strength = class_object.Strength;\n        if(strength > max_strength){\n\
    \            max_strength = strength;\n            strongest = class_name;\n \
    \       }\n    }\n    return strongest;\n}\n", "    var strongest = -1;\n    var\
    \ strongest_extension = null;\n    for(var i = 0; i < extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_class = class_name\
    \ + extension;\n        var extension_class_name = extension_class.substring(class_name.lastIndexOf('.')\
    \ + 1);\n        var extension_class_name_length = extension_class_name.length;\n\
    \        var extension_class_name_upper = extension_class_name.substring(0,extension_class_name_length-1);\n\
    \        var extension_class_name_lower = extension_class_name.substring(0,extension_class_name_length-1);\n\
    \        var extension_class_name_strength = extension_class_name_upper.length\
    \ - extension_class_name_lower.length;\n        if(strongest < 0 || strongest\
    \ > extension_class_name_strength){\n            strongest = extension_class_name_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + strongest_extension;\n}\n", "    var max_strength = 0;\n    var strongest_extension\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var cap = extension.charAt(0).toUpperCase();\n   \
    \     var sm = extension.charAt(0).toLowerCase();\n        var strength = cap\
    \ - sm;\n        if(strength > max_strength){\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    var strongest_extension = null;\n\
    \    var strongest_extension_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 0; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strength = 0;\n\tlet strongest_extension = null;\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap\
    \ = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet diff = cap - sm;\n\t\tstrength += diff;\n\t\tif(strength > 0){\n\t\t\t\
    strongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var max_strength = -1;\n    var best_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(strength > max_strength){\n\
    \            max_strength = strength;\n            best_extension = extension;\n\
    \        }\n    }\n    return class_name + best_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n\t\tif (extension_strength > strongest_extension.split(\"\").reduce((a,\
    \ b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0)){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let max_strength = -1;\n    let max_extension = \"\";\n    for(let\
    \ i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "  var strongest_extension = extensions[0];\n\
    \  for(var i = 1; i < extensions.length; i++){\n    var extension = extensions[i];\n\
    \    var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n    var sm =\
    \ extension.charAt(0).toLowerCase().charCodeAt(0);\n    var strength = cap - sm;\n\
    \    if(strength > strongest_extension.strength){\n      strongest_extension =\
    \ extension;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i\
    \ = 1; i < extensions.length; i++){\n        let extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n        if (extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = extensions[0];\n    for(var i = 1; i < extensions.length; i++){\n        var\
    \ extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        var sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var\
    \ strength = cap - sm;\n        if(strength > strongest_extension.strength){\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "  var strongest_extension = null;\n \
    \ var strongest_extension_strength = -1;\n  for (var i = 0; i < extensions.length;\
    \ i++){\n    var extension = extensions[i];\n    var extension_strength = extension.match(/[A-Z]+/g).length\
    \ - extension.match(/[a-z]+/g).length;\n    if (extension_strength > strongest_extension_strength){\n\
    \      strongest_extension = extension;\n      strongest_extension_strength =\
    \ extension_strength;\n    }\n  }\n  return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor(let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = \"\";\n\tlet\
    \ strongest_extension_strength = 0;\n\tlet strongest_extension_counter = 0;\n\t\
    for(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_counter = 0;\n\t\tfor(let j = 0; j < class_name.length; j++){\n\
    \t\t\tif(class_name[j] === extension){\n\t\t\t\textension_counter++;\n\t\t\t}\n\
    \t\t}\n\t\tif(extension_counter > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_counter;\n\t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_counter\
    \ = extension_counter;\n\t\t}\n\t\telse if(extension_counter === strongest_extension_strength){\n\
    \t\t\tstrongest_extension_counter++;\n\t\t}\n\t}\n\treturn class_name + \".\"\
    \ + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    let strongest_extension_strength = -1;\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_class_name = class_name;\n\tlet strongest_extension_class_name_length\
    \ = class_name.length;\n\tlet strongest_extension_extension_length = extensions.length;\n\
    \tlet strongest_extension_extension_length_counter = 0;\n\tlet strongest_extension_extension_length_counter_max\
    \ = 0;\n\tlet strongest_extension_extension_length_counter_min = 0;\n\tlet strongest_extension_extension_length_counter_sum\
    \ = 0;\n\tlet strongest_extension_extension_length_counter_average = 0;\n\tlet\
    \ strongest_extension_extension_length_counter_sum_squares = 0;\n\tlet strongest_extension_extension_length_counter_average_squares\
    \ = 0;\n\tlet strongest_extension_extension_length_counter_max = extensions.length;\n\
    \tlet strongest_extension_extension_length_counter_min = extensions.length;\n\t\
    let strongest_extension_extension_length_counter_sum = 0;\n\tlet strongest_extension_extension_length_counter_sum_squares\
    \ = 0;\n\tlet strongest_extension_extension_length_counter_average = 0;\n\tlet\
    \ strongest_extension_extension_length_counter_average_squares = 0;\n\tfor (let\
    \ i = 0; i < extensions.length; i++){\n\t\tstrongest_extension_extension_length_counter_sum\
    \ += extensions[i].length;\n\t\tstrongest_extension_extension_length_counter_sum_squares\
    \ += extensions[i].length * extensions[i].length;\n\t\tstrongest_extension_extension_length_counter_average\
    \ += extensions[i].length;\n\t\tstrongest_extension_extension_length_counter_average_squares\
    \ += extensions[i].length * extensions[i].length;\n\t\tif (extensions[i].length\
    \ > strongest_extension_extension_length_counter_max){\n\t\t\tstrongest_extension_extension_length_counter_max\
    \ = extensions[i].length;\n\t\t}\n\t\tif (extensions[i].length < strongest_extension_extension_length_counter_min){\n\
    \t\t\tstrongest_extension_extension_length_counter_min = extensions[i].length;\n\
    \t\t}\n\t}\n\tstrongest_extension_extension_length_counter_average = strongest_extension_extension_length_counter_average\
    \ / strongest_extension_extension_length_counter_sum;\n\tstrongest_extension_extension_length_counter_average_squares\
    \ = strongest_extension_extension_length_counter_average_squares / strongest_extension_extension_length_counter_sum_squares;\n\
    \tstrongest_extension_extension_length_counter_max = strongest_extension_extension_length_counter_max\
    \ / strongest_extension_extension_length_counter_sum;\n\tstrongest_extension_extension_length_",
  "\tlet strongest_extension = null;\n\tlet strongest_extension_strength = 0;\n\t\
    for (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + \".\" + strongest_extension;\n}\n", "\tlet class_name_split\
    \ = class_name.split('.');\n\tlet class_name = class_name_split[class_name_split.length-1];\n\
    \tlet extension_strengths = [];\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension_split = extensions[i].split('');\n\t\tlet extension_letters\
    \ = extension_split[extension_split.length-1];\n\t\tlet extension_strength = extension_letters.split('').map(letter\
    \ => letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase()).reduce((a, b)\
    \ => a + b);\n\t\textension_strengths.push(extension_strength);\n\t}\n\tlet max_strength\
    \ = extension_strengths.reduce((a, b) => a > b ? a : b);\n\tlet max_index = extension_strengths.indexOf(max_strength);\n\
    \treturn class_name + extensions[max_index];\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].length\
    \ - extensions[i].toLowerCase().replace(/[^a-z]/g,\"\").length;\n\t\tif (extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    var extension_length\
    \ = extensions.length;\n    for(var i=0; i<extension_length; i++){\n        var\
    \ extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength =\
    \ null;\n\tlet strongest_extension_strength_counter = 0;\n\tfor (let i = 0; i\
    \ < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_length\
    \ = extension.length;\n\t\tlet extension_counter = 0;\n\t\tfor (let j = 0; j <\
    \ extension_length; j++){\n\t\t\tlet letter = extension[j];\n\t\t\tlet letter_counter\
    \ = 0;\n\t\t\tfor (let k = 0; k < class_name.length; k++){\n\t\t\t\tlet letter_to_check\
    \ = class_name[k];\n\t\t\t\tif (letter == letter_to_check){\n\t\t\t\t\tletter_counter++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (letter_counter == extension_counter){\n\t\t\t\t\
    extension_counter++;\n\t\t\t}\n\t\t}\n\t\tif (extension_counter > strongest_extension_strength_counter){\n\
    \t\t\tstrongest_extension_strength = extension;\n\t\t\tstrongest_extension_strength_counter\
    \ = extension_counter;\n\t\t}\n\t}\n\treturn strongest_extension;\n}\n", "   \
    \ var max_strength = -1;\n    var max_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet current_extension = extensions[i];\n\
    \t\tlet current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n\t\tlet current_extension_strength_percentage\
    \ = current_extension_strength / extensions.length;\n\t\tif (current_extension_strength_percentage\
    \ > strongest_extension_strength_percentage){\n\t\t\tstrongest_extension = current_extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_extension = class_name\
    \ + extension;\n\t\tlet class_name_extension_length = class_name_extension.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_extension_length\
    \ - extension_length;\n\t\tif (strength > max_strength){\n\t\t\tmax_strength =\
    \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i\
    \ = 1; i < extensions.length; i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > strongest_extension.strength){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var strongest_extension_strength\
    \ = 0;\n    var strongest_extension_strength_index = 0;\n    \n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension_strength_index = i;\n\
    \        }\n    }\n    \n    strongest_extension = class_name + extensions[strongest_extension_strength_index];\n\
    \    return strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((acc, letter)=>{\n\
    \t\t\treturn acc + letter.toUpperCase().charCodeAt(0) - letter.charCodeAt(0) -\
    \ 1;\n\t\t}, 0);\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n\t\tif (extension_strength > strongest_extension_strength){\n\t\t\
    \tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension_strength\
    \ = extensions[i].split(\"\").reduce(function(prev, cur){\n            return\
    \ prev + cur.toUpperCase().charCodeAt(0) - cur.toLowerCase().charCodeAt(0);\n\
    \        }, 0);\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    let class_name_length = class_name.length;\n    let extensions_length\
    \ = extensions.length;\n    let strongest_extension = extensions[0];\n    let\
    \ strongest_extension_length = strongest_extension.length;\n    for(let i = 1;\
    \ i < extensions_length; i++){\n        let extension_length = extensions[i].length;\n\
    \        let extension_strength = extension_length - strongest_extension_length;\n\
    \        if(extension_strength > 0){\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_length = extension_length;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tlet strongest_extension_strength = -1;\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\
    \tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "    \n\
    \    var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "  \
    \  let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase();\n\
    \        let sm = extension.charAt(0).toLowerCase();\n        let strength = cap\
    \ - sm;\n        if (strength > strongest_extension.strength){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var strongest_extension_class_name = class_name;\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_class_name = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class_name);\n        if(extension_strength >\
    \ strongest_extension_strength){\n            strongest_extension_strength = extension_strength;\n\
    \            strongest_extension = extension_class_name;\n        }\n    }\n \
    \   return strongest_extension;\n}\n", "\tlet max_strength = -1;\n\tlet max_extension\
    \ = \"\";\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "\tlet max_strength\
    \ = -1;\n\tlet max_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + \".\" + max_extension;\n}\n", "    var max_strength\
    \ = -1;\n    var max_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + max_extension;\n}\n", "    let strongest_extension = null;\n    let\
    \ strongest_extension_strength = null;\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet\
    \ class_name_array = class_name.split(\"\");\n\tlet extension_array = extensions.split(\"\
    \");\n\tlet max_extension_strength = 0;\n\tlet max_extension_array = [];\n\tfor(let\
    \ i = 0; i < extension_array.length; i++){\n\t\tlet extension_strength = extension_array[i].toUpperCase().charCodeAt(0)\
    \ - extension_array[i].toLowerCase().charCodeAt(0);\n\t\tif(extension_strength\
    \ > max_extension_strength){\n\t\t\tmax_extension_strength = extension_strength;\n\
    \t\t\tmax_extension_array = extension_array;\n\t\t}\n\t}\n\treturn class_name_array.concat(max_extension_array).join(\"\
    \");\n}\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for(let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].split(\"\").reduce((sum, letter) => {\n            return sum\
    \ + letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase();\n        }, 0);\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extensions[i];\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet strongest_extension = null;\n\tlet strongest_extension_strength = 0;\n\t\
    for (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\t\t\
    }\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n\t\tif (extension_strength > strongest_extension.split(\"\").reduce((a,\
    \ b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0)){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var max_strength = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension_class;\n        }\n    }\n    return strongest_extension;\n}\n",
  "    var strongest_extension = \"\";\n    var strongest_extension_strength = 0;\n\
    \    var class_name_length = class_name.length;\n    var extensions_length = extensions.length;\n\
    \    \n    for(var i = 0; i < extensions_length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_length = extension.length;\n       \
    \ var extension_strength = extension_length - class_name_length;\n        \n \
    \       if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var max_strength = 0;\n    var max_extension\
    \ = \"\";\n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "\tlet\
    \ strongest_extension = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet\
    \ strongest_extension_class_name = \"\";\n\tlet strongest_extension_class_name_strength\
    \ = 0;\n\t\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet class_name_extension = class_name + \".\" + extension;\n\
    \t\tlet class_name_extension_strength = extension_strength(class_name_extension);\n\
    \t\t\n\t\tif(strongest_extension_strength < class_name_extension_strength){\n\t\
    \t\tstrongest_extension_strength = class_name_extension_strength;\n\t\t\tstrongest_extension\
    \ = class_name_extension;\n\t\t\tstrongest_extension_class_name = class_name;\n\
    \t\t\tstrongest_extension_class_name_strength = class_name_extension_strength;\n\
    \t\t}\n\t\telse if(strongest_extension_strength == class_name_extension_strength){\n\
    \t\t\tstrongest_extension_class_name += \".\" + extension;\n\t\t\tstrongest_extension_class_name_strength\
    \ += extension_strength(class_name_extension);\n\t\t}\n\t}\n\t\n\tif(strongest_extension_strength\
    \ == 0){\n\t\tstrongest_extension_strength = extension_strength(strongest_extension);\n\
    \t\tstrongest_extension = strongest_extension;\n\t\tstrongest_extension_class_name\
    \ = strongest_extension_class_name;\n\t\tstrongest_extension_class_name_strength\
    \ = strongest_extension_class_name_strength;\n\t}\n\t\n\treturn strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var cap = extension.charAt(0).toUpperCase();\n        var sm = extension.charAt(0).toLowerCase();\n\
    \        var strength = cap - sm;\n        if(strength > strongest){\n       \
    \     strongest = strength;\n            strongest_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_name;\n}\n", "    var strongest\
    \ = null;\n    var max_strength = 0;\n    var max_extension = null;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + max_extension;\n}\n", "\tlet class_name_array\
    \ = class_name.split(\"\");\n\tlet extensions_array = extensions.map(e => e.split(\"\
    \"));\n\tlet max_extension_strength = -1;\n\tlet max_extension_array = [];\n\t\
    for(let i = 0; i < extensions_array.length; i++){\n\t\tlet extension_strength\
    \ = extensions_array[i].filter(e => e.length > 0).length;\n\t\tif(extension_strength\
    \ > max_extension_strength){\n\t\t\tmax_extension_strength = extension_strength;\n\
    \t\t\tmax_extension_array = extensions_array[i];\n\t\t}\n\t}\n\tlet max_extension_strength_str\
    \ = max_extension_strength.toString();\n\treturn class_name_array.concat(max_extension_array).join(\"\
    \") + \".\" + max_extension_strength_str;\n}\n", "    var extension_strength =\
    \ {};\n    extensions.forEach(function(extension){\n        var extension_class_name\
    \ = extension.substring(0,1).toUpperCase() + extension.substring(1);\n       \
    \ var extension_strength_class = extension_strength[extension_class_name];\n \
    \       if(extension_strength_class === undefined){\n            extension_strength[extension_class_name]\
    \ = extension.charCodeAt(0) - extension.charCodeAt(extension.length-1);\n    \
    \    }else{\n            extension_strength[extension_class_name] = extension_strength_class;\n\
    \        }\n    });\n    var strongest_extension = Object.keys(extension_strength).sort(function(a,\
    \ b){\n        return extension_strength[b] - extension_strength[a];\n    })[0];\n\
    \    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet strongest_extension_strength_counter\
    \ = 0;\n\tlet strongest_extension_counter = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_counter = 0;\n\
    \t\tfor (let j = 0; j < extension_length; j++){\n\t\t\tlet char = extension[j];\n\
    \t\t\tif (char.toUpperCase() === char){\n\t\t\t\textension_counter++;\n\t\t\t\
    }\n\t\t}\n\t\tlet class_name_counter = 0;\n\t\tfor (let j = 0; j < class_name_length;\
    \ j++){\n\t\t\tlet char = class_name[j];\n\t\t\tif (char.toUpperCase() === char){\n\
    \t\t\t\tclass_name_counter++;\n\t\t\t}\n\t\t}\n\t\tlet strength = extension_counter\
    \ - class_name_counter;\n\t\tif (strength > strongest_extension_strength){\n\t\
    \t\tstrongest_extension_strength = strength;\n\t\t\tstrongest_extension = extension;\n\
    \t\t}\n\t\tstrongest_extension_strength_counter = strongest_extension_strength_counter\
    \ + extension_counter;\n\t\tstrongest_extension_counter = strongest_extension_counter\
    \ + extension_counter;\n\t}\n\tif (strongest_extension_strength_counter > strongest_extension_strength){\n\
    \t\tstrongest_extension = strongest_extension;\n\t}\n\treturn strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if(extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet current_extension = extensions[i];\n\t\tlet current_extension_strength\
    \ = current_extension.match(/[A-Z]/g).length - current_extension.match(/[a-z]/g).length;\n\
    \t\tif (current_extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ current_extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var extension_counter = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_counter\
    \ = extension_counter + 1;\n        var extension_strength = extension_counter;\n\
    \        var class_name_length = class_name.length;\n        var extension_length\
    \ = extension.length;\n        for(var j=0; j<extension_length; j++){\n      \
    \      var char = extension[j];\n            var char_counter = char_counter +\
    \ 1;\n            var char_strength = char_counter;\n            var char_class_name\
    \ = class_name.substr(0, char_counter);\n            var char_extension = extension.substr(0,\
    \ char_counter);\n            if(char_strength > strongest_extension_strength){\n\
    \                strongest_extension = char_class_name + char_extension;\n   \
    \             strongest_extension_strength = char_strength;\n            }\n \
    \       }\n    }\n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = extensions[0];\n    for(var i = 1; i < extensions.length;\
    \ i++){\n        var extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n", "\t\
    let class_name_split = class_name.split('.');\n\tlet class_name = class_name_split[class_name_split.length\
    \ - 1];\n\tlet extension_strengths = [];\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension_split = extensions[i].split('');\n\t\tlet extension\
    \ = extension_split[extension_split.length - 1];\n\t\tlet extension_strength =\
    \ extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\textension_strengths.push(extension_strength);\n\
    \t}\n\tlet max_strength = extension_strengths.reduce((a, b) => Math.max(a, b));\n\
    \tlet max_index = extension_strengths.indexOf(max_strength);\n\treturn class_name\
    \ + '.' + extensions[max_index];\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet current_extension = extensions[i];\n\
    \t\tlet current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n\t\tlet current_extension_strength_percentage\
    \ = current_extension_strength / extensions.length;\n\t\tlet current_extension_strength_percentage_rounded\
    \ = Math.round(current_extension_strength_percentage*100)/100;\n\t\tif (current_extension_strength_percentage\
    \ > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = current_extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let class_name_split = class_name.split('.');\n\
    \    let class_name = class_name_split[class_name_split.length-1];\n    let extensions_sorted\
    \ = extensions.sort((a,b) => {\n        let a_name = a.split('').map(x => x.toUpperCase()).join('');\n\
    \        let b_name = b.split('').map(x => x.toUpperCase()).join('');\n      \
    \  return a_name > b_name;\n    });\n    let strongest_extension = extensions_sorted[0];\n\
    \    for (let i = 1; i < extensions_sorted.length; i++){\n        let extension_strength\
    \ = extensions_sorted[i].split('').map(x => x.toUpperCase()).join('').charCodeAt(0)\
    \ - extensions_sorted[i-1].split('').map(x => x.toUpperCase()).join('').charCodeAt(0);\n\
    \        if (extension_strength > 0){\n            strongest_extension = extensions_sorted[i];\n\
    \            break;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((sum, letter)\
    \ => {\n\t\t\treturn sum + letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase();\n\
    \t\t}, 0);\n\t\tif (extension_strength > strongest_extension.split(\"\").reduce((sum,\
    \ letter) => {\n\t\t\treturn sum + letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase();\n\
    \t\t}, 0)){\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = \"\";\n\tlet strongest_extension_strength =\
    \ 0;\n\tlet strongest_extension_class_name = \"\";\n\tlet strongest_extension_class_name_strength\
    \ = 0;\n\t\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_class_name = class_name + extension;\n\t\t\
    let extension_class_name_strength = extension_class_name.match(/[A-Z]/g).length\
    \ - extension_class_name.match(/[a-z]/g).length;\n\t\t\n\t\tif(extension_class_name_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension_strength = extension_class_name_strength;\n\
    \t\t\tstrongest_extension_class_name = extension_class_name;\n\t\t}\n\t\t\n\t\t\
    if(extension_class_name_strength == strongest_extension_strength){\n\t\t\tif(extension_class_name_strength\
    \ > strongest_extension_class_name_strength){\n\t\t\t\tstrongest_extension_class_name_strength\
    \ = extension_class_name_strength;\n\t\t\t\tstrongest_extension_class_name = extension_class_name;\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn strongest_extension_class_name;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\
    \t\tif (strength > strongest_extension.strength){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = \"\";\n    var max_strength = 0;\n    var\
    \ max_strength_extension = \"\";\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_strength_extension\
    \ = extension;\n        }\n    }\n    strongest_extension = class_name + \".\"\
    \ + max_strength_extension;\n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = extensions[0];\n    var strongest_extension_strength = -1;\n    for(var i\
    \ = 1; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = null;\n\tlet strongest_extension_strength =\
    \ 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name_split = class_name.split(\".\");\n\t\tlet extension_split =\
    \ extension.split(\".\");\n\t\tlet extension_length = extension_split.length;\n\
    \t\tlet class_name_length = class_name_split.length;\n\t\tlet extension_strength\
    \ = extension_length - class_name_length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var max_strength = 0;\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_extension\
    \ = \"\";\n    var class_name_length = class_name.length;\n    var extensions_length\
    \ = extensions.length;\n    for(var i = 0; i < extensions_length; i++){\n    \
    \    var extension = extensions[i];\n        var extension_length = extension.length;\n\
    \        var extension_strength = extension_length - class_name_length;\n    \
    \    if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for(let i = 1; i < extensions.length; i++){\n        let current_extension\
    \ = extensions[i];\n        let current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n        if(current_extension_strength\
    \ > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \            strongest_extension = current_extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = \"\";\n\tlet strongest_extension_strength = 0;\n\tlet strongest_extension_counter\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_counter = 0;\n\t\tfor (let j = 0; j < class_name.length; j++){\n\
    \t\t\tif (class_name[j] == extension){\n\t\t\t\textension_counter++;\n\t\t\t}\n\
    \t\t}\n\t\tif (extension_counter > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_counter;\n\t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_counter\
    \ = extension_counter;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strength = 0;\n\tlet strongest_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name\
    \ = class_name + extension;\n\t\tlet class_name_lower = class_name.toLowerCase();\n\
    \t\tlet class_name_upper = class_name.toUpperCase();\n\t\tlet class_name_length\
    \ = class_name_lower.length;\n\t\tlet class_name_length_upper = class_name_upper.length;\n\
    \t\tlet class_name_length_diff = class_name_length - class_name_length_upper;\n\
    \t\tlet class_name_length_diff_upper = class_name_length_upper - class_name_length_diff;\n\
    \t\tlet class_name_length_diff_lower = class_name_length_diff - class_name_length_lower;\n\
    \t\tlet class_name_length_diff_diff_upper = class_name_length_diff_upper - class_name_length_diff_lower;\n\
    \t\tlet class_name_length_diff_diff_lower = class_name_length_diff_lower - class_name_length_diff_upper;\n\
    \t\tlet class_name_length_diff_diff_diff_upper = class_name_length_diff_diff_upper\
    \ - class_name_length_diff_diff_lower;\n\t\tlet class_name_length_diff_diff_diff_lower\
    \ = class_name_length_diff_diff_lower - class_name_length_diff_diff_upper;\n\t\
    \tlet class_name_length_diff_diff_diff_upper = class_name_length_diff_diff_diff_upper\
    \ - class_name_length_diff_diff_diff_lower;\n\t\tlet class_name_length_diff_diff_diff_lower\
    \ = class_name_length_diff_diff_lower - class_name_length_diff_diff_upper;\n\t\
    \tlet class_name_length_diff_diff_diff_upper = class_name_length_diff_diff_diff_upper\
    \ - class_name_length_diff_diff_diff_lower;\n\t\tlet class_name_length_diff_diff_diff_lower\
    \ = class_name_length_diff_diff_diff_lower - class_name_length_diff_diff_diff_upper;\n\
    \t\tlet class_name_length_diff_diff_diff_diff_upper = class_name_length_diff_diff_diff_diff_upper\
    \ - class_name_length_diff_diff_diff_diff_lower;\n\t\tlet class_name_length_diff_diff_diff_diff_lower\
    \ = class_name_length_diff_diff_diff_diff_lower - class_name_length_diff_diff_diff_diff_upper;\n\
    \t\tlet class_name_length_diff_diff_diff_diff_diff_upper = class_name_length_diff_diff_diff_diff_diff_upper\
    \ - class_name_length_diff_diff_diff_diff_diff_lower;\n\t\tlet class_name_length_diff_diff_diff_diff_lower\
    \ = class_name_length_diff_diff_diff_diff_lower - class_name_length_diff_diff_diff_diff_diff_upper;\n\
    \t\tlet class_name_length_diff_diff_diff_diff_diff_upper = class_name_length_diff_diff_diff_diff_diff_upper\
    \ - class_name_length_diff_diff_diff_diff_diff_diff_lower;\n\t\tlet class_name_length_diff_diff_diff_diff_diff_lower\
    \ = class_name_length_diff_diff_diff_diff_", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for(let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].split(\"\").reduce((sum, letter)=>{\n            return sum\
    \ + letter.charCodeAt(0) - letter.charCodeAt(0).toLowerCase();\n        }, 0);\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", " \
    \   var max_strength = -1;\n    var max_extension = \"\";\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(strength > max_strength){\n\
    \            max_strength = strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension;\n}\n", "   \
    \ let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\
    \t\tif (strength > strongest.strength){\n\t\t\tstrongest = extension;\n\t\t}\n\
    \t}\n\treturn class_name + \".\" + strongest;\n}\n", "\tlet max_strength = 0;\n\
    \tlet max_extension = \"\";\n\tfor(let i = 0; i < extensions.length; i++){\n\t\
    \tlet extension = extensions[i];\n\t\tlet class_name = class_name + extension;\n\
    \t\tlet class_object = eval(class_name);\n\t\tlet class_strength = class_object.strength;\n\
    \t\tif(class_strength > max_strength){\n\t\t\tmax_strength = class_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = \"\";\n\tfor(let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if(extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + max_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((acc, cur) => acc + cur, 0);\n\t\tif(extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "    var max_strength = -1;\n\
    \    var max_extension = \"\";\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length;\n\
    \        var extension_strength_lower = extension.match(/[a-z]/g).length;\n  \
    \      var extension_strength_upper = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        var extension_strength_total = extension_strength + extension_strength_lower\
    \ + extension_strength_upper;\n        if(extension_strength_total > max_strength){\n\
    \            max_strength = extension_strength_total;\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + max_extension;\n\
    }\n", "\tlet class_name_split = class_name.split('.');\n\tlet class_name_length\
    \ = class_name_split.length;\n\tlet extension_length = extensions.length;\n\t\
    let strongest_extension = '';\n\tlet max_extension_strength = 0;\n\tlet max_extension_length\
    \ = 0;\n\tlet max_extension_class = '';\n\tlet max_extension_class_length = 0;\n\
    \tlet max_extension_class_split = '';\n\tlet max_extension_class_split_length\
    \ = 0;\n\tlet max_extension_class_split_index = 0;\n\tlet max_extension_class_split_index2\
    \ = 0;\n\tlet max_extension_class_split_index3 = 0;\n\tlet max_extension_class_split_index4\
    \ = 0;\n\tlet max_extension_class_split_index5 = 0;\n\tlet max_extension_class_split_index6\
    \ = 0;\n\tlet max_extension_class_split_index7 = 0;\n\tlet max_extension_class_split_index8\
    \ = 0;\n\tlet max_extension_class_split_index9 = 0;\n\tlet max_extension_class_split_index10\
    \ = 0;\n\tlet max_extension_class_split_index11 = 0;\n\tlet max_extension_class_split_index12\
    \ = 0;\n\tlet max_extension_class_split_index13 = 0;\n\tlet max_extension_class_split_index14\
    \ = 0;\n\tlet max_extension_class_split_index15 = 0;\n\tlet max_extension_class_split_index16\
    \ = 0;\n\tlet max_extension_class_split_index17 = 0;\n\tlet max_extension_class_split_index18\
    \ = 0;\n\tlet max_extension_class_split_index19 = 0;\n\tlet max_extension_class_split_index20\
    \ = 0;\n\tlet max_extension_class_split_index21 = 0;\n\tlet max_extension_class_split_index22\
    \ = 0;\n\tlet max_extension_class_split_index23 = 0;\n\tlet max_extension_class_split_index24\
    \ = 0;\n\tlet max_extension_class_split_index25 = 0;\n\tlet max_extension_class_split_index26\
    \ = 0;\n\tlet max_extension_class_split_index27 = 0;\n\tlet max_extension_class_split_index28\
    \ = 0;\n\tlet max_extension_class_split_index29 = 0;\n\tlet max_extension_class_split_index30\
    \ = 0;\n\tlet max_extension_class_split_index31 = 0;\n\tlet max_extension_class_split_index32\
    \ = 0;\n\tlet max_extension_class_split_index33 = 0;\n\tlet max_extension_class_split_index34\
    \ = 0;\n\tlet max_extension_class_split_index35 = 0;\n\tlet max_extension_class_split_index36\
    \ = 0;\n\tlet max_extension_class_split_index37 = 0;\n\tlet max_extension_class_split_index38\
    \ = 0;\n\tlet max_extension_class_split_index39 = 0;", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "    var strongest_extension = extensions[0];\n\
    \    var strongest_extension_strength = -1;\n    for(var i = 1; i < extensions.length;\
    \ i++){\n        var extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extensions[i];\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "\tlet strength = 0;\n\tlet strongest_extension = \"\";\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet class_name_letters = class_name.split(\"\
    \").length;\n\t\tlet extension_letters = extension.split(\"\").length;\n\t\tlet\
    \ cap_diff = class_name_letters - extension_letters;\n\t\tlet sm_diff = class_name_letters\
    \ - extension_letters;\n\t\tlet cap_strength = cap_diff / class_name_length;\n\
    \t\tlet sm_strength = sm_diff / class_name_length;\n\t\tif (cap_strength > strength){\n\
    \t\t\tstrength = cap_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\
    \t\tif (sm_strength > strength){\n\t\t\tstrength = sm_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split(\"\").reduce((a, b)\
    \ => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\tif (extension_strength\
    \ > strongest_extension.split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0)){\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n", "    let cap_extensions = extensions.filter(e\
    \ => e.match(/[A-Z]/));\n    let sml_extensions = extensions.filter(e => e.match(/[a-z]/));\n\
    \    let cap_extensions_length = cap_extensions.length;\n    let sml_extensions_length\
    \ = sml_extensions.length;\n    let max_extension_strength = -1;\n    let max_extension_name\
    \ = \"\";\n    for(let i = 0; i < cap_extensions_length; i++){\n        let cap_extension\
    \ = cap_extensions[i];\n        let sml_extension = sml_extensions[i];\n     \
    \   let cap_extension_strength = cap_extension.length - sml_extension.length;\n\
    \        if(cap_extension_strength > max_extension_strength){\n            max_extension_strength\
    \ = cap_extension_strength;\n            max_extension_name = cap_extension;\n\
    \        }\n    }\n    return class_name + \".\" + max_extension_name;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif(extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
