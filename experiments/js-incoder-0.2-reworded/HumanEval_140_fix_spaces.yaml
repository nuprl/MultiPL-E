name: HumanEval_140_fix_spaces
language: js
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"),\"Example\");\n  assert.deepEqual(candidate(\"\
  Mudasir Hanif \"),\"Mudasir_Hanif_\");\n  assert.deepEqual(candidate(\"Yellow Yellow\
  \  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\");\n  assert.deepEqual(candidate(\"\
  Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"   Exa 1 2 2 mple\"\
  ),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["\treturn text.replace(/\\s+/g,function(m){\n\t\treturn m.replace(/\
    \ /g,\"_\");\n\t});\n}\n", "\tvar spaces = text.match(/ /g);\n\tif(!spaces ||\
    \ spaces.length < 2){\n\t\treturn text;\n\t}\n\telse{\n\t\tvar new_spaces = \"\
    \";\n\t\tfor(var i = 0; i < spaces.length; i++){\n\t\t\tnew_spaces += \"_\";\n\
    \t\t}\n\t\treturn text.replace(/ /g, new_spaces);\n\t}\n}\n", "\treturn text.replace(/\
    \ /g, \"_\").replace(/  +/g, \"-\").replace(/  +$/g,\"\");\n}\n", "  return text.replace(/\\\
    s+/g,function(m){\n    return m.replace(/ /g,\"_\");\n  }).replace(/\\s{2,}/g,function(m){\n\
    \    return m.replace(/ /g,\"_\");\n  });\n}\n", "\tvar spaces = text.replace(/\
    \ /g, \"_\");\n\tvar spaces_count = spaces.match(/ /g).length;\n\tif (spaces_count\
    \ > 2){\n\t\tspaces = spaces.replace(/ +/g, \"-\");\n\t}\n\treturn spaces;\n}\n",
  "\treturn text.replace(/ /g,\"_\").replace(/  /g,\"-\").replace(/  +/g,\"-\")\n\
    }\n", "\treturn text.replace(/ /g, \"_\").replace(/  +/g, \"-\").replace(/^-+/,\
    \ \"\");\n}\n", "\tvar spaces = text.match(/ /g);\n\tif(spaces && spaces.length\
    \ > 2){\n\t\tspaces = spaces.map(function(s){\n\t\t\treturn s.replace(/\\s+/g,\
    \ \"-\");\n\t\t});\n\t\ttext = text.replace(/ /g, \"_\");\n\t\ttext = text.replace(/-{2,}/g,\
    \ \"-\");\n\t\ttext = text.replace(/_{2,}/g, \"_\");\n\t\ttext = text.replace(/_{2,}/g,\
    \ \"_\");\n\t}\n\treturn text;\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/\
    \  +/g, \"-\").replace(/  +$/g,\"\");\n}\n", "\treturn text.replace(/ /g, \"_\"\
    ).replace(/  +/g, \"-\").replace(/  +$/g,\"\");\n}\n", "\tvar spaces = text.match(/\
    \ /g);\n\tif (spaces.length > 2){\n\t\tspaces = spaces.map(function(space){\n\t\
    \t\treturn space.replace(/\\s+/g, \"-\");\n\t\t});\n\t\ttext = text.replace(/\
    \ {2,}/g, \"-\");\n\t}\n\treturn text;\n}\n", "  return text.replace(/ /g,\"_\"\
    ).replace(/  /g,\"-\")\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/  +/g,\
    \ \"-\").replace(/  +$/g,\"\");\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/\\\
    s{2,}/g, \"-\");\n}\n", "  return text.replace(/ /g, \"_\").replace(/  +/g, \"\
    -\").replace(/  +$/g,\"\");\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/\
    \  +/g, \"-\").replace(/  +$/g,\"\");\n}\n", "    return text.replace(/ /g, \"\
    _\").replace(/  +/g, \"-\").replace(/  +$/g,\"\");\n}\n", "\treturn text.replace(/\
    \ /g,\"_\").replace(/  +/g,\"-\").replace(/  +$/g,\"\");\n}\n", "\treturn text.replace(/\
    \ /g,\"_\").replace(/  /g,\"-\")\n}\n", "\treturn text.replace(/ /g,\"_\").replace(/\
    \  /g,\"-\")\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
