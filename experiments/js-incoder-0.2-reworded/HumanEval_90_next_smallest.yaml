name: HumanEval_90_next_smallest
language: js
prompt: "//You are given an array of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n// Return undefined if there\
  \ is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5,\
  \ 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1,\
  \ 1])\n// undefined\nfunction next_smallest(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = next_smallest;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),2);\n  assert.deepEqual(candidate([5,\
  \ 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([1,\
  \ 1]),undefined);\n  assert.deepEqual(candidate([1, 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1,\
  \ 1]),undefined);\n  assert.deepEqual(candidate([-35, 34, 12, -45]),-35);\n}\n\n\
  test();"
completions: ["  if(lst.length < 2){\n    return undefined;\n  }\n  var smallest =\
    \ lst[0];\n  var second_smallest = lst[1];\n  for(var i = 2; i < lst.length; i++){\n\
    \    if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest\
    \ = lst[i];\n    }else if(lst[i] < second_smallest){\n      second_smallest =\
    \ lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "  if(lst.length < 2){\n\
    \    return undefined;\n  }\n  var smallest = lst[0];\n  var second_smallest =\
    \ lst[1];\n  for(var i = 2; i < lst.length; i++){\n    if(lst[i] < smallest){\n\
    \      second_smallest = smallest;\n      smallest = lst[i];\n    }else if(lst[i]\
    \ < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n\
    }\n", "  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n\
    \  let secondSmallest = lst[1];\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i]\
    \ < smallest){\n      secondSmallest = smallest;\n      smallest = lst[i];\n \
    \   }else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n    }\n\
    \  }\n  return secondSmallest;\n}\n", "  if(lst.length < 2){\n    return undefined;\n\
    \  }\n  if(lst.length == 2){\n    return lst[1];\n  }\n  if(lst.length == 1){\n\
    \    return lst[0];\n  }\n  if(lst[0] < lst[1]){\n    return lst[1];\n  }\n  return\
    \ lst[0];\n}\n", "  if(lst.length < 2){\n    return undefined;\n  }\n  if(lst.length\
    \ == 2){\n    return lst[1];\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i] < smallest){\n\
    \      secondSmallest = smallest;\n      smallest = lst[i];\n    }else if(lst[i]\
    \ < secondSmallest){\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n\
    }\n", "  if(lst.length < 2){\n    return undefined;\n  }\n  if(lst.length == 2){\n\
    \    return lst[1];\n  }\n  if(lst.length == 1){\n    return lst[0];\n  }\n  var\
    \ smallest = lst[0];\n  var secondSmallest = lst[1];\n  for(var i = 2; i < lst.length;\
    \ i++){\n    if(lst[i] < smallest){\n      secondSmallest = smallest;\n      smallest\
    \ = lst[i];\n    }else if(lst[i] > smallest){\n      secondSmallest = lst[i];\n\
    \    }\n  }\n  return secondSmallest;\n}\n", "  if(lst.length == 0){\n    return\
    \ undefined;\n  }\n  if(lst.length == 1){\n    return lst[0];\n  }\n  if(lst.length\
    \ == 2){\n    return lst[1];\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i] < smallest){\n\
    \      secondSmallest = smallest;\n      smallest = lst[i];\n    }\n    else if(lst[i]\
    \ < secondSmallest){\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n\
    }\n", "  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest = lst[0];\n\
    \  let secondSmallest = lst[1];\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i]\
    \ < smallest){\n      secondSmallest = smallest;\n      smallest = lst[i];\n \
    \   }else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n    }\n\
    \  }\n  return secondSmallest;\n}\n", "  if(lst.length < 2){\n    return undefined;\n\
    \  }\n  if(lst.length == 2){\n    return lst[1];\n  }\n  if(lst.length == 1){\n\
    \    return lst[0];\n  }\n  if(lst[0] < lst[1]){\n    return lst[1];\n  }\n  return\
    \ lst[0];\n}\n", "  if(lst.length < 2){\n    return undefined;\n  }\n  let smallest\
    \ = lst[0];\n  let secondSmallest = lst[1];\n  for(let i = 2; i < lst.length;\
    \ i++){\n    if(lst[i] < smallest){\n      secondSmallest = smallest;\n      smallest\
    \ = lst[i];\n    }else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n\
    \    }\n  }\n  return secondSmallest;\n}\n", "  if(lst.length == 0){\n    return\
    \ undefined;\n  }\n  if(lst.length == 1){\n    return lst[0];\n  }\n  if(lst.length\
    \ == 2){\n    return lst[1];\n  }\n  if(lst.length == 3){\n    return lst[2];\n\
    \  }\n  if(lst.length == 4){\n    return lst[3];\n  }\n  if(lst.length == 5){\n\
    \    return lst[4];\n  }\n  if(lst.length == 6){\n    return lst[5];\n  }\n  if(lst.length\
    \ == 7){\n    return lst[6];\n  }\n  if(lst.length == 8){\n    return lst[7];\n\
    \  }\n  if(lst.length == 9){\n    return lst[8];\n  }\n  if(lst.length == 10){\n\
    \    return lst[9];\n  }\n  if(lst.length == 11){\n    return lst[10];\n  }\n\
    \  if(lst.length == 12){\n    return lst[11];\n  }\n  if(lst.length == 13){\n\
    \    return lst[12];\n  }\n  if(lst.length == 14){\n    return lst[13];\n  }\n\
    \  if(lst.length == 15){\n    return lst[14];\n  }\n  if(lst.length == 16){\n\
    \    return lst[15];\n  }\n  if(lst.length == 17){\n    return lst[16];\n  }\n\
    \  if(lst.length == 18){\n    return lst[17];\n  }\n  if(lst.length == 19){\n\
    \    return lst[18];\n  }\n  if(lst.length == 20){\n    return lst[19];\n  }\n\
    \  if(lst.length == 21){\n    return lst[20];\n  }\n  if(lst.length == 22){\n\
    \    return lst[21];\n  }\n  if(lst.length == 23){\n    return lst[22];\n  }\n\
    \  if(lst.length == 24){\n    return lst[23];\n  }\n  if(lst.length == 25){\n\
    \    return lst[24];\n  }\n  if(lst.length == 26){\n    return lst[25];\n  }\n\
    \  if(lst.length == 27){\n    return lst[26];\n  }\n  if(lst.length == 28){\n\
    \    return lst[27];\n  }\n  if(lst.length == 29){\n    return lst[28];\n  }\n\
    \  if(lst.length == 30){\n    return lst[29];\n  }\n  if(lst.length == 31){\n\
    \    return lst[30];\n  }\n  if(lst.length == 32){\n    return lst[31];\n  }\n\
    \  if(lst.length == 33){\n    return lst[32];\n", "  if(lst.length == 0){\n  \
    \  return undefined;\n  }\n  if(lst.length == 1){\n    return lst[0];\n  }\n \
    \ if(lst.length == 2){\n    return lst[1];\n  }\n  var smallest = lst[0];\n  var\
    \ secondSmallest = lst[1];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i]\
    \ < smallest){\n      secondSmallest = smallest;\n      smallest = lst[i];\n \
    \   }else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n    }\n\
    \  }\n  return secondSmallest;\n}\n", "  if(lst.length < 2){\n    return undefined;\n\
    \  }\n  if(lst.length == 2){\n    return lst[1];\n  }\n  var smallest = lst[0];\n\
    \  var secondSmallest = lst[1];\n  for(var i = 2; i < lst.length; i++){\n    if(lst[i]\
    \ < smallest){\n      secondSmallest = smallest;\n      smallest = lst[i];\n \
    \   }else if(lst[i] > smallest){\n      secondSmallest = lst[i];\n    }\n  }\n\
    \  return secondSmallest;\n}\n", "  var smallest = lst[0];\n  var second_smallest\
    \ = lst[1];\n  for(var i=2;i<lst.length;i++){\n    if(smallest>lst[i]){\n    \
    \  second_smallest = smallest;\n      smallest = lst[i];\n    }\n    else{\n \
    \     second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n}\n",
  "  if(lst.length == 0){\n    return undefined;\n  }\n  var smallest = lst[0];\n\
    \  var second_smallest = lst[1];\n  for(var i = 2; i < lst.length; i++){\n   \
    \ if(lst[i] < smallest){\n      second_smallest = smallest;\n      smallest =\
    \ lst[i];\n    }\n    else if(lst[i] < second_smallest){\n      second_smallest\
    \ = lst[i];\n    }\n  }\n  return second_smallest;\n}\n", "  if(lst.length < 2)\
    \ return undefined;\n  if(lst.length == 2) return lst[1];\n  if(lst.length ==\
    \ 1) return lst[0];\n  if(lst[0] < lst[1]){\n    return lst[1];\n  }\n  return\
    \ lst[0];\n}\n", "  if(lst.length < 2) return undefined;\n  var smallest = lst[0];\n\
    \  var secondSmallest = lst[1];\n  for(var i = 2; i < lst.length; i++){\n    if(lst[i]\
    \ < smallest){\n      secondSmallest = smallest;\n      smallest = lst[i];\n \
    \   }else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n    }\n\
    \  }\n  return secondSmallest;\n}\n", "  if(lst.length < 2){\n    return undefined;\n\
    \  }\n  let smallest = lst[0];\n  let secondSmallest = lst[1];\n  for(let i=2;i<lst.length;i++){\n\
    \    if(lst[i] < smallest){\n      secondSmallest = smallest;\n      smallest\
    \ = lst[i];\n    }else if(lst[i] < secondSmallest){\n      secondSmallest = lst[i];\n\
    \    }\n  }\n  return secondSmallest;\n}\n", "  if(lst.length < 2){\n    return\
    \ undefined;\n  }\n  if(lst.length == 2){\n    return lst[1];\n  }\n  if(lst.length\
    \ == 1){\n    return lst[0];\n  }\n  let smallest = lst[0];\n  let secondSmallest\
    \ = lst[1];\n  for(let i = 2; i < lst.length; i++){\n    if(lst[i] < smallest){\n\
    \      secondSmallest = smallest;\n      smallest = lst[i];\n    }\n    else if(lst[i]\
    \ > smallest){\n      secondSmallest = lst[i];\n    }\n  }\n  return secondSmallest;\n\
    }\n", "  if(lst.length == 0){\n    return undefined;\n  }\n  if(lst.length ==\
    \ 1){\n    return lst[0];\n  }\n  var smallest = lst[0];\n  var second_smallest\
    \ = lst[1];\n  for(var i=2;i<lst.length;i++){\n    if(lst[i] < smallest){\n  \
    \    second_smallest = smallest;\n      smallest = lst[i];\n    }else if(lst[i]\
    \ < second_smallest){\n      second_smallest = lst[i];\n    }\n  }\n  return second_smallest;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
