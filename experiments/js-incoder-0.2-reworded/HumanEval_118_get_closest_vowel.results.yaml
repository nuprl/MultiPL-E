language: js
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_counter = 0;\n    let vowel_found = false;\n    let vowel_counter2\
    \ = 0;\n    let vowel_found2 = false;\n    let vowel_counter3 = 0;\n    let vowel_found3\
    \ = false;\n    let vowel_counter4 = 0;\n    let vowel_found4 = false;\n    let\
    \ vowel_counter5 = 0;\n    let vowel_found5 = false;\n    let vowel_counter6 =\
    \ 0;\n    let vowel_found6 = false;\n    let vowel_counter7 = 0;\n    let vowel_found7\
    \ = false;\n    let vowel_counter8 = 0;\n    let vowel_found8 = false;\n    let\
    \ vowel_counter9 = 0;\n    let vowel_found9 = false;\n    let vowel_counter10\
    \ = 0;\n    let vowel_found10 = false;\n    let vowel_counter11 = 0;\n    let\
    \ vowel_found11 = false;\n    let vowel_counter12 = 0;\n    let vowel_found12\
    \ = false;\n    let vowel_counter13 = 0;\n    let vowel_found13 = false;\n   \
    \ let vowel_counter14 = 0;\n    let vowel_found14 = false;\n    let vowel_counter15\
    \ = 0;\n    let vowel_found15 = false;\n    let vowel_counter16 = 0;\n    let\
    \ vowel_found16 = false;\n    let vowel_counter17 = 0;\n    let vowel_found17\
    \ = false;\n    let vowel_counter18 = 0;\n    let vowel_found18 = false;\n   \
    \ let vowel_counter19 = 0;\n    let vowel_found19 = false;\n    let vowel_counter20\
    \ = 0;\n    let vowel_found20 = false;\n    let vowel_counter21 = 0;\n    let\
    \ vowel_found21 = false;\n    let vowel_counter22 = 0;\n    let vowel_found22\
    \ = false;\n    let vowel_counter23 = 0;\n    let vowel_found23 = false;\n   \
    \ let vowel_counter24 = 0;\n    let vowel_found24 = false;\n    let vowel_counter25\
    \ = 0;\n    let vowel_found25 = false;\n    let vowel_counter26 = 0;\n    let\
    \ vowel_found26 = false;\n    let vowel_counter27 = 0;\n    let vowel_found27\
    \ = false;\n    let vowel_counter28 = 0;\n    let vowel_found28 = false;\n   \
    \ let vowel_counter29 = 0;\n    let vowel_found29 = false;\n    let vowel_counter30\
    \ = 0;\n    let vowel_found30 = false;\n    let vowel_counter31 = 0;\n    let\
    \ vowel_found31 = false;\n    let vowel_counter32 = 0;\n    let vowel_found32\
    \ = false;\n    let vowel_counter33 = 0;\n    let vowel_found33 = false;\n   \
    \ let vowel_counter34 = 0;\n    let vowel_found34 = false;\n    let vowel_counter35\
    \ = 0;\n    let vowel_found35 = false;\n    let vowel_counter36\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2fiwqwdp.js:109\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowel_positions = [];\n    let vowel_positions_count\
    \ = vowel_positions.length;\n    let vowel_positions_count_max = Math.max(...vowel_positions);\n\
    \    let vowel_positions_count_min = Math.min(...vowel_positions);\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv7bmakt1.js:26\n    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \        ^\n\nSyntaxError: Identifier 'vowel_positions_count_max_index' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2\n\
    \    let vowelsCount4 = vowelsCount-3\n    let vowelsCount5 = vowelsCount-4\n\
    \    let vowelsCount6 = vowelsCount-5\n    let vowelsCount7 = vowelsCount-6\n\
    \    let vowelsCount8 = vowelsCount-7\n    let vowelsCount9 = vowelsCount-8\n\
    \    let vowelsCount10 = vowelsCount-9\n    let vowelsCount11 = vowelsCount-10\n\
    \    let vowelsCount12 = vowelsCount-11\n    let vowelsCount13 = vowelsCount-12\n\
    \    let vowelsCount14 = vowelsCount-13\n    let vowelsCount15 = vowelsCount-14\n\
    \    let vowelsCount16 = vowelsCount-15\n    let vowelsCount17 = vowelsCount-16\n\
    \    let vowelsCount18 = vowelsCount-17\n    let vowelsCount19 = vowelsCount-18\n\
    \    let vowelsCount20 = vowelsCount-19\n    let vowelsCount21 = vowelsCount-20\n\
    \    let vowelsCount22 = vowelsCount-21\n    let vowelsCount23 = vowelsCount-22\n\
    \    let vowelsCount24 = vowelsCount-23\n    let vowelsCount25 = vowelsCount-24\n\
    \    let vowelsCount26 = vowelsCount-25\n    let vowelsCount27 = vowelsCount-26\n\
    \    let vowelsCount28 = vowelsCount-27\n    let vowelsCount29 = vowelsCount-28\n\
    \    let vowelsCount30 = vowelsCount-29\n    let vowelsCount31 = vowelsCount-30\n\
    \    let vowelsCount32 = vowelsCount-31\n    let vowelsCount33 = vowelsCount-32\n\
    \    let vowelsCount34 = vowelsCount-33\n    let vowelsCount35 = vowelsCount-34\n\
    \    let vowelsCount36 = vowelsCount-35\n    let vowelsCount37 = vowelsCount-36\n\
    \    let vowelsCount38 = vowelsCount-37\n    let vowelsCount39 = vowelsCount-38\n\
    \    let vowelsCount40 = vowelsCount-39\n    let vowelsCount41 = vowelsCount-40\n\
    \    let vowelsCount42 = vowelsCount-41\n    let vowelsCount43 = vowelsCount-42\n\
    \    let vowelsCount44 = vowelsCount-43\n    let vowelsCount45 = vowel\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb1n0aa2j.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n  \
    \  let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountSum = 0;\n    let vowelsCountSumIndex = 0;\n    let vowelsCountSumMin\
    \ = vowelsCountSum;\n    let vowelsCountSumMax = vowelsCountSum;\n    let vowelsCountSumSum\
    \ = 0;\n    let vowelsCountSumSumIndex = 0;\n    let vowelsCountSumSumMin = vowelsCountSumSum;\n\
    \    let vowelsCountSumSumMax = vowelsCountSumSum;\n    let vowelsCountSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumIndex = 0;\n    let vowelsCountSumSumSumMin\
    \ = vowelsCountSumSumSum;\n    let vowelsCountSumSumSumMax = vowelsCountSumSumSum;\n\
    \    let vowelsCountSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumIndex =\
    \ 0;\n    let vowelsCountSumSumSumSumMin = vowelsCountSumSumSumSum;\n    let vowelsCountSumSumSumSumMax\
    \ = vowelsCountSumSumSumSum;\n    let vowelsCountSumSumSumSumSum = 0;\n    let\
    \ vowelsCountSumSumSumSumSumIndex = 0;\n    let vowelsCountSumSumSumSumSumMin\
    \ = vowelsCountSumSumSumSumSum;\n    let vowelsCountSumSumSumSumSumMax = vowelsCountSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSum;\n \
    \   let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin = vowelsCount\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkx_izw1i.js:51\n    let vowelsCountSumSumSumSumSumSumSumIndex =\
    \ 0;\n        ^\n\nSyntaxError: Identifier 'vowelsCountSumSumSumSumSumSumSumIndex'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        if(word.indexOf(vowels[i]) > -1){\n        \
    \    vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n    }\n\
    \    let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin2 =\
    \ vowelsIndexMin + 1;\n    let vowelsIndexMax2 = vowelsIndexMax + 1;\n    let\
    \ vowelsIndexMin3 = vowelsIndexMin + 2;\n    let vowelsIndexMax3 = vowelsIndexMax\
    \ + 2;\n    let vowelsIndexMin4 = vowelsIndexMin + 3;\n    let vowelsIndexMax4\
    \ = vowelsIndexMax + 3;\n    let vowelsIndexMin5 = vowelsIndexMin + 4;\n    let\
    \ vowelsIndexMax5 = vowelsIndexMax + 4;\n    let vowelsIndexMin6 = vowelsIndexMin\
    \ + 5;\n    let vowelsIndexMax6 = vowelsIndexMax + 5;\n    let vowelsIndexMin7\
    \ = vowelsIndexMin + 6;\n    let vowelsIndexMax7 = vowelsIndexMax + 6;\n    let\
    \ vowelsIndexMin8 = vowelsIndexMin + 7;\n    let vowelsIndexMax8 = vowelsIndexMax\
    \ + 7;\n    let vowelsIndexMin9 = vowelsIndexMin + 8;\n    let vowelsIndexMax9\
    \ = vowelsIndexMax + 8;\n    let vowelsIndexMin10 = vowelsIndexMin + 9;\n    let\
    \ vowelsIndexMax10 = vowelsIndexMax + 9;\n    let vowelsIndexMin11 = vowelsIndexMin\
    \ + 10;\n    let vowelsIndexMax11 = vowelsIndexMax + 10;\n    let vowelsIndexMin12\
    \ = vowelsIndexMin + 11;\n    let vowelsIndexMax12 = vowelsIndexMax + 11;\n  \
    \  let vowelsIndexMin13 = vowelsIndexMin + 12;\n    let vowelsIndexMax13 = vowelsIndexMax\
    \ + 12;\n    let vowelsIndexMin14 = vowelsIndexMin + 13;\n    let vowelsIndexMax14\
    \ = vowelsIndexMax + 13;\n    let vowelsIndexMin15 = vowelsIndexMin + 14;\n  \
    \  let vowelsIndexMax15 = vowelsIndexMax + 14;\n    let vowelsIndexMin16 = vowelsIndexMin\
    \ + 15;\n    let vowelsIndexMax16 = vowelsIndexMax + 15;\n    let vowelsIndexMin17\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsuuzd8z8.js:26\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexCount' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(word[i]));\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexSum =\
    \ vowelsIndexMax + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum\
    \ / 2;\n    let vowelsIndexSumCountIndex = vowelsIndexSumCount - vowelsIndexMin;\n\
    \    let vowelsIndexSumCountIndex2 = vowelsIndexSumCountIndex - 1;\n    let vowelsIndexSumCountIndex3\
    \ = vowelsIndexSumCountIndex - 2;\n    let vowelsIndexSumCountIndex4 = vowelsIndexSumCountIndex\
    \ - 3;\n    let vowelsIndexSumCountIndex5 = vowelsIndexSumCountIndex - 4;\n  \
    \  let vowelsIndexSumCountIndex6 = vowelsIndexSumCountIndex - 5;\n    let vowelsIndexSumCountIndex7\
    \ = vowelsIndexSumCountIndex - 6;\n    let vowelsIndexSumCountIndex8 = vowelsIndexSumCountIndex\
    \ - 7;\n    let vowelsIndexSumCountIndex9 = vowelsIndexSumCountIndex - 8;\n  \
    \  let vowelsIndexSumCountIndex10 = vowelsIndexSumCountIndex - 9;\n    let vowelsIndexSumCountIndex11\
    \ = vowelsIndexSumCountIndex - 10;\n    let vowelsIndexSumCountIndex12 = vowelsIndexSumCountIndex\
    \ - 11;\n    let vowelsIndexSumCountIndex13 = vowelsIndexSumCountIndex - 12;\n\
    \    let vowelsIndexSumCountIndex14 = vowelsIndexSumCountIndex - 13;\n    let\
    \ vowelsIndexSumCountIndex15 = vowelsIndexSumCountIndex - 14;\n    let vowelsIndexSumCountIndex16\
    \ = vowelsIndexSumCountIndex - 15;\n    let vowelsIndexSumCountIndex17 = vowelsIndexSumCountIndex\
    \ - 16;\n    let vowelsIndexSumCountIndex18 = vowelsIndexSumCountIndex - 17;\n\
    \    let vowelsIndexSumCountIndex19 = vowelsIndexSumCountIndex - 18;\n    let\
    \ vowelsIndexSumCountIndex20 = vowelsIndexSumCountIndex - 19;\n    let vowelsIndexSumCountIndex21\
    \ = vowelsIndexSumCountIndex - 20;\n    let vowelsIndexSumCountIndex22 = vowelsIndexSumCountIndex\
    \ - 21;\n    let vowelsIndexSumCountIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvl34jmsr.js:49\n    let vowelsIndexSumCountIndex\n        ^\n\n\
    SyntaxError: Identifier 'vowelsIndexSumCountIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_index = 0;\n    let vowel_found = false;\n    for(let i = 0; i\
    \ < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowel_found\
    \ = true;\n            vowel_index = i;\n            break;\n        }\n    }\n\
    \    if(vowel_found){\n        let vowel_start = vowel_index;\n        let vowel_end\
    \ = vowel_index;\n        for(let i = vowel_index + 1; i < word.length; i++){\n\
    \            if(vowels.includes(word[i])){\n                vowel_end = i;\n \
    \               break;\n            }\n        }\n        let vowel_middle = word[vowel_start]\
    \ + word[vowel_end];\n        if(vowel_middle === 'a' || vowel_middle === 'e'\
    \ || vowel_middle === 'i' || vowel_middle === 'o' || vowel_middle === 'u'){\n\
    \            return word[vowel_start];\n        }\n    }\n    return \"\";\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpca8pm_3a.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpca8pm_3a.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    for(let i = 0; i < word.length; i++){\n\
    \        if(vowels.includes(word[i])){\n            vowels_index = i;\n      \
    \      vowels_index_count++;\n            if(vowels_index_count > vowels_index_count_max){\n\
    \                vowels_index_count_max = vowels_index_count;\n            }\n\
    \        }\n    }\n    let vowels_index_count_min = 0;\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            vowels_index\
    \ = i;\n            vowels_index_count++;\n            if(vowels_index_count <\
    \ vowels_index_count_min){\n                vowels_index_count_min = vowels_index_count;\n\
    \            }\n        }\n    }\n    if(vowels_index_count_max > vowels_index_count_min){\n\
    \        return word[vowels_index];\n    }\n    return \"\";\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpzwz1sztk.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwz1sztk.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = ['a','e','i','o','u'];\n    vowels_count\
    \ = vowels.length;\n    vowels_index = [];\n    vowels_index[0] = 0;\n    vowels_index[vowels_count-1]\
    \ = vowels_count;\n    vowels_index[vowels_count-2] = vowels_count-1;\n    vowels_index[vowels_count-3]\
    \ = vowels_count-2;\n    vowels_index[vowels_count-4] = vowels_count-3;\n    vowels_index[vowels_count-5]\
    \ = vowels_count-4;\n    vowels_index[vowels_count-6] = vowels_count-5;\n    vowels_index[vowels_count-7]\
    \ = vowels_count-6;\n    vowels_index[vowels_count-8] = vowels_count-7;\n    vowels_index[vowels_count-9]\
    \ = vowels_count-8;\n    vowels_index[vowels_count-10] = vowels_count-9;\n   \
    \ vowels_index[vowels_count-11] = vowels_count-10;\n    vowels_index[vowels_count-12]\
    \ = vowels_count-11;\n    vowels_index[vowels_count-13] = vowels_count-12;\n \
    \   vowels_index[vowels_count-14] = vowels_count-13;\n    vowels_index[vowels_count-15]\
    \ = vowels_count-14;\n    vowels_index[vowels_count-16] = vowels_count-15;\n \
    \   vowels_index[vowels_count-17] = vowels_count-16;\n    vowels_index[vowels_count-18]\
    \ = vowels_count-17;\n    vowels_index[vowels_count-19] = vowels_count-18;\n \
    \   vowels_index[vowels_count-20] = vowels_count-19;\n    vowels_index[vowels_count-21]\
    \ = vowels_count-20;\n    vowels_index[vowels_count-22] = vowels_count-21;\n \
    \   vowels_index[vowels_count-23] = vowels_count-22;\n    vowels_index[vowels_count-24]\
    \ = vowels_count-23;\n    vowels_index[vowels_count-25] = vowels_count-24;\n \
    \   vowels_index[vowels_count-26] = vowels_count-25;\n    vowels_index[vowels_count-27]\
    \ = vowels_count-26; \n    vowels_index[vowels_count-28] = vowels_count-27;\n\
    \    vowels_index[vowels_count-29] = vowels_count-\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyowq29qy.js:50\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_right_to_middle = vowels_count - 12;\n  \
    \  let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_middle\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_middle\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_middle_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_middle_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_middle_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7kqvbzs6.js:46\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_found_index = 0;\n    for(let i =\
    \ 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n         \
    \   vowel_found = true;\n            vowel_found_index = i;\n            break;\n\
    \        }\n    }\n    if(vowel_found){\n        let vowel_found_index = vowel_found_index\
    \ + 1;\n        let vowel_found = false;\n        for(let i = vowel_found_index;\
    \ i < word.length; i++){\n            if(vowels.includes(word[i])){\n        \
    \        vowel_found = true;\n                vowel_found_index = i;\n       \
    \         break;\n            }\n        }\n        if(vowel_found){\n       \
    \     let vowel_found_index = vowel_found_index + 1;\n            let vowel_found\
    \ = false;\n            for(let i = vowel_found_index; i < word.length; i++){\n\
    \                if(vowels.includes(word[i])){\n                    vowel_found\
    \ = true;\n                    vowel_found_index = i;\n                    break;\n\
    \                }\n            }\n            if(vowel_found){\n            \
    \    let vowel_found_index = vowel_found_index + 1;\n                let vowel_found\
    \ = false;\n                for(let i = vowel_found_index; i < word.length; i++){\n\
    \                    if(vowels.includes(word[i])){\n                        vowel_found\
    \ = true;\n                        vowel_found_index = i;\n                  \
    \      break;\n                    }\n                }\n                if(vowel_found){\n\
    \                    let vowel_found_index = vowel_found_index + 1;\n        \
    \            let vowel_found = false;\n                    for(let i = vowel_found_index;\
    \ i < word.length; i++){\n                        if(vowels.includes(word[i])){\n\
    \                            vowel_found = true;\n                           \
    \ vowel_found_index = i;\n                            break;\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkxdbxnkz.js:28\n        let vowel_found_index = vowel_found_index\
    \ + 1;\n                                ^\n\nReferenceError: Cannot access 'vowel_found_index'\
    \ before initialization\n    at get_closest_vowel (/tmp/tmpkxdbxnkz.js:28:33)\n\
    \    at test (/tmp/tmpkxdbxnkz.js:79:20)\n    at Object.<anonymous> (/tmp/tmpkxdbxnkz.js:94:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_counter = 0;\n    let vowel_start = 0;\n    let vowel_end = 0;\n\
    \    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowel_counter++;\n            if(vowel_counter > vowel_start){\n\
    \                vowel_start = i;\n            }\n            if(vowel_counter\
    \ > vowel_end){\n                vowel_end = i;\n            }\n        }\n  \
    \  }\n    if(vowel_counter > vowel_start && vowel_counter > vowel_end){\n    \
    \    return word[vowel_start];\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmploywj14n.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmploywj14n.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowelsCount = vowels.length;\n\
    \tlet vowelsIndex = [];\n\tlet vowelsIndexCount = 0;\n\tlet vowelsIndexCount2\
    \ = 0;\n\tlet vowelsIndexCount3 = 0;\n\tlet vowelsIndexCount4 = 0;\n\tlet vowelsIndexCount5\
    \ = 0;\n\tlet vowelsIndexCount6 = 0;\n\tlet vowelsIndexCount7 = 0;\n\tlet vowelsIndexCount8\
    \ = 0;\n\tlet vowelsIndexCount9 = 0;\n\tlet vowelsIndexCount10 = 0;\n\tlet vowelsIndexCount11\
    \ = 0;\n\tlet vowelsIndexCount12 = 0;\n\tlet vowelsIndexCount13 = 0;\n\tlet vowelsIndexCount14\
    \ = 0;\n\tlet vowelsIndexCount15 = 0;\n\tlet vowelsIndexCount16 = 0;\n\tlet vowelsIndexCount17\
    \ = 0;\n\tlet vowelsIndexCount18 = 0;\n\tlet vowelsIndexCount19 = 0;\n\tlet vowelsIndexCount20\
    \ = 0;\n\tlet vowelsIndexCount21 = 0;\n\tlet vowelsIndexCount22 = 0;\n\tlet vowelsIndexCount23\
    \ = 0;\n\tlet vowelsIndexCount24 = 0;\n\tlet vowelsIndexCount25 = 0;\n\tlet vowelsIndexCount26\
    \ = 0;\n\tlet vowelsIndexCount27 = 0;\n\tlet vowelsIndexCount28 = 0;\n\tlet vowelsIndexCount29\
    \ = 0;\n\tlet vowelsIndexCount30 = 0;\n\tlet vowelsIndexCount31 = 0;\n\tlet vowelsIndexCount32\
    \ = 0;\n\tlet vowelsIndexCount33 = 0;\n\tlet vowelsIndexCount34 = 0;\n\tlet vowelsIndexCount35\
    \ = 0;\n\tlet vowelsIndexCount36 = 0;\n\tlet vowelsIndexCount37 = 0;\n\tlet vowelsIndexCount38\
    \ = 0;\n\tlet vowelsIndexCount39 = 0;\n\tlet vowelsIndexCount40 = 0;\n\tlet vowelsIndexCount41\
    \ = 0;\n\tlet vowelsIndexCount42 = 0;\n\tlet vowelsIndexCount43 = 0;\n\tlet vowelsIndexCount44\
    \ = 0;\n\tlet vowelsIndexCount45 = 0;\n\tlet vowelsIndexCount46 = 0;\n\tlet vowelsIndexCount47\
    \ = 0;\n\tlet vowelsIndexCount48 = 0;\n\tlet vowelsIndexCount49 = 0;\n\tlet vowelsIndexCount50\
    \ = 0;\n\tlet vowelsIndexCount51 = 0;\n\tlet vowelsIndexCount52 = 0;\n\tlet vowelsIndexCount53\
    \ = 0;\n\tlet vowelsIndexCount54 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy37g2t7_.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    \n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(word[i]));\n    }\n    \n   \
    \ let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    \n    let vowelsIndexMinIndex\
    \ = 0;\n    let vowelsIndexMaxIndex = 0;\n    \n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] === vowelsIndexMin){\n            vowelsIndexMinIndex\
    \ = i;\n        }\n        if(vowelsIndex[i] === vowelsIndexMax){\n          \
    \  vowelsIndexMaxIndex = i;\n        }\n    }\n    \n    let vowelsIndexMinValue\
    \ = vowels[vowelsIndexMinIndex];\n    let vowelsIndexMaxValue = vowels[vowelsIndexMaxIndex];\n\
    \    \n    if(vowelsIndexMinValue === vowelsIndexMaxValue){\n        return vowelsIndexMinValue;\n\
    \    }\n    \n    let vowelsIndexMinIndex2 = vowelsIndexMin - 1;\n    let vowelsIndexMaxIndex2\
    \ = vowelsIndexMax + 1;\n    \n    if(vowelsIndexMinIndex2 >= 0 && vowelsIndexMaxIndex2\
    \ < vowelsCount){\n        let vowelsIndexMinValue2 = vowels[vowelsIndexMinIndex2];\n\
    \        let vowelsIndexMaxValue2 = vowels[vowelsIndexMaxIndex2];\n        \n\
    \        if(vowelsIndexMinValue2 === vowelsIndexMaxValue2){\n            return\
    \ vowelsIndexMinValue2;\n        }\n    }\n    \n    return \"\";\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmp9etedwe7.js:68:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9etedwe7.js:83:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8yx0ugcy.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8zjf4_c_.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowels_count = vowels.length;\n\
    \tlet vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\t\
    let vowels_count_from_middle2 = vowels_count_from_middle + 1;\n\tlet vowels_count_from_middle3\
    \ = vowels_count_from_middle2 + 1;\n\tlet vowels_count_from_middle4 = vowels_count_from_middle3\
    \ + 1;\n\tlet vowels_count_from_middle5 = vowels_count_from_middle4 + 1;\n\tlet\
    \ vowels_count_from_middle6 = vowels_count_from_middle5 + 1;\n\tlet vowels_count_from_middle7\
    \ = vowels_count_from_middle6 + 1;\n\tlet vowels_count_from_middle8 = vowels_count_from_middle7\
    \ + 1;\n\tlet vowels_count_from_middle9 = vowels_count_from_middle8 + 1;\n\tlet\
    \ vowels_count_from_middle10 = vowels_count_from_middle9 + 1;\n\tlet vowels_count_from_middle11\
    \ = vowels_count_from_middle10 + 1;\n\tlet vowels_count_from_middle12 = vowels_count_from_middle11\
    \ + 1;\n\tlet vowels_count_from_middle13 = vowels_count_from_middle12 + 1;\n\t\
    let vowels_count_from_middle14 = vowels_count_from_middle13 + 1;\n\tlet vowels_count_from_middle15\
    \ = vowels_count_from_middle14 + 1;\n\tlet vowels_count_from_middle16 = vowels_count_from_middle15\
    \ + 1;\n\tlet vowels_count_from_middle17 = vowels_count_from_middle16 + 1;\n\t\
    let vowels_count_from_middle18 = vowels_count_from_middle17 + 1;\n\tlet vowels_count_from_middle19\
    \ = vowels_count_from_middle18 + 1;\n\tlet vowels_count_from_middle20 = vowels_count_from_middle19\
    \ + 1;\n\tlet vowels_count_from_middle21 = vowels_count_from_middle20 + 1;\n\t\
    let vowels_count_from_middle22 = vowels_count_from_middle21 + 1;\n\tlet vowels_count_from_middle23\
    \ = vowels_count_from_middle22 + 1;\n\tlet vowels_count_from_middle24 = vowels_count_from_middle23\
    \ + 1;\n\tlet vowels_count_from_middle25 = vowels_count_from_middle24 + 1;\n\t\
    let vowels_count_from_middle26 = vowels_count_from_middle25 + 1;\n\tlet vowels_count_from_middle27\
    \ = vowels_count_from_middle26 + 1;\n\tlet vowels_count_from_middle28 = vowels_count_from_middle27\
    \ + 1;\n\t\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp86zdxwh_.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count_from_right_to_left - vowels_count_from_left_to_right;\n    let\
    \ vowels_count_from_left_to_right_to_left = vowels_count_from_left_to_right -\
    \ vowels_count_from_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right - vowels_count_from_left_to_right_to_left;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptislh9ix.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle_to_right = vowels_count_from_middle + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_to_left = vowels_count_from_middle - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count_from_middle_to_left\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left - vowels_count_from_left;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_left + vowels_count_from_middle;\n   \
    \ var vowels_count_from_middle_to_left_to_right_to_left_to_middle = vowels_count_from_middle_to_left_to_right\
    \ - vowels_count_from_middle;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left + vowels_count_from_middle_to_left_to_right_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left =\
    \ vowels_count_from_middle_to_left_to_right_to_left_to_middle - vowels_count_from_middle_to_left_to_right_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left + vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left\
    \ + vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left\
    \ + vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_right_to_middle;\n\
    \    var vowels_count_from_middle_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuas3v0sx.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowelsCount = vowels.length;\n\t\
    let vowelsIndex = [];\n\tlet vowelsIndexCount = [];\n\tlet vowelsIndexCountSum\
    \ = 0;\n\tlet vowelsIndexSum = 0;\n\tlet vowelsIndexSumCount = 0;\n\tlet vowelsIndexSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCount = 0;\n\tlet vowelsIndexSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCount = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCount = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCount = 0;\n\tlet\
    \ vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n\t\
    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum =\
    \ 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpphizi2uu.js:33\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n\t    ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowels.length;\n    let\
    \ vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowels\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkncnq8xx.js:22\n    let vowelsCount = vowels.length;\n        ^\n\
    \nSyntaxError: Identifier 'vowelsCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    var vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    var vowels_count = vowels.length;\n    var vowels_index = 0;\n\
    \    var vowels_index_count = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1y0m8y82.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    var vowels_count_from_right_to_left = vowels_count - 5;\n    var vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    var vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    var vowels_count_from_right_to_middle = vowels_count - 8;\n    var\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    var vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    var vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    var\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    var vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 15;\n    var vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    var vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    var vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 18;\n    var vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    var vowels_count_from_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    var vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    var vowels_count_from_left_to_right_to_middle_to_right_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp80gjxdp1.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp38qzqr1i.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_middle2 = vowels_count - 4;\n\
    \    var vowels_count_from_middle3 = vowels_count - 5;\n    var vowels_count_from_middle4\
    \ = vowels_count - 6;\n    var vowels_count_from_middle5 = vowels_count - 7;\n\
    \    var vowels_count_from_middle6 = vowels_count - 8;\n    var vowels_count_from_middle7\
    \ = vowels_count - 9;\n    var vowels_count_from_middle8 = vowels_count - 10;\n\
    \    var vowels_count_from_middle9 = vowels_count - 11;\n    var vowels_count_from_middle10\
    \ = vowels_count - 12;\n    var vowels_count_from_middle11 = vowels_count - 13;\n\
    \    var vowels_count_from_middle12 = vowels_count - 14;\n    var vowels_count_from_middle13\
    \ = vowels_count - 15;\n    var vowels_count_from_middle14 = vowels_count - 16;\n\
    \    var vowels_count_from_middle15 = vowels_count - 17;\n    var vowels_count_from_middle16\
    \ = vowels_count - 18;\n    var vowels_count_from_middle17 = vowels_count - 19;\n\
    \    var vowels_count_from_middle18 = vowels_count - 20;\n    var vowels_count_from_middle19\
    \ = vowels_count - 21;\n    var vowels_count_from_middle20 = vowels_count - 22;\n\
    \    var vowels_count_from_middle21 = vowels_count - 23;\n    var vowels_count_from_middle22\
    \ = vowels_count - 24;\n    var vowels_count_from_middle23 = vowels_count - 25;\n\
    \    var vowels_count_from_middle24 = vowels_count - 26;\n    var vowels_count_from_middle25\
    \ = vowels_count - 27;\n    var vowels_count_from_middle26 = vowels_count - 28;\n\
    \    var vowels_count_from_middle27 = vowels_count - 29;\n    var vowels_count_from_middle28\
    \ = vowels_count - 30;\n    var vowels_count_from_middle29 = vowels_count - 31;\n\
    \    var vowels_count_from_middle30 = vowels_count - 32;\n    var vowels_count_from_middle31\
    \ = vowels_count - 33;\n    var vowels_count_from_middle32 = vowels_count - 34;\n\
    \    var vowels_count_from_middle33 = vowels_count - 35;\n    var \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0iw0wdn7.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexArray = [];\n    for(let i = 0; i < vowelsIndexCount; i++){\n\
    \        vowelsIndexArray.push(vowelsIndex[i]);\n    }\n    let vowelsIndexArrayCount\
    \ = vowelsIndexArray.length;\n    let vowelsIndexArraySum = vowelsIndexArray.reduce((a,\
    \ b) => a + b);\n    let vowelsIndexArraySumCount = vowelsIndexArraySum;\n   \
    \ let vowelsIndexArraySumCountInv = vowelsIndexArraySumCount - 1;\n    let vowelsIndexArraySumCountInv2\
    \ = vowelsIndexArraySumCountInv - 1;\n    let vowelsIndexArraySumCountInv3 = vowelsIndexArraySumCountInv\
    \ - 2;\n    let vowelsIndexArraySumCountInv4 = vowelsIndexArraySumCountInv - 3;\n\
    \    let vowelsIndexArraySumCountInv5 = vowelsIndexArraySumCountInv - 4;\n   \
    \ let vowelsIndexArraySumCountInv6 = vowelsIndexArraySumCountInv - 5;\n    let\
    \ vowelsIndexArraySumCountInv7 = vowelsIndexArraySumCountInv - 6;\n    let vowelsIndexArraySumCountInv8\
    \ = vowelsIndexArraySumCountInv - 7;\n    let vowelsIndexArraySumCountInv9 = vowelsIndexArraySumCountInv\
    \ - 8;\n    let vowelsIndexArraySumCountInv10 = vowelsIndexArraySumCountInv -\
    \ 9;\n    let vowelsIndexArraySumCountInv11 = vowelsIndexArraySumCountInv - 10;\n\
    \    let vowelsIndexArraySumCountInv12 = vowelsIndexArraySumCountInv - 11;\n \
    \   let vowelsIndexArraySumCountInv13 = vowelsIndexArraySumCountInv - 12;\n  \
    \  let vowelsIndexArraySumCountInv14 = vowelsIndexArraySumCountInv - 13;\n   \
    \ let vowelsIndexArraySumCountInv15 = vowelsIndexArraySumCountInv - 14;\n    let\
    \ vowelsIndexArraySumCountInv16 = vowelsIndexArraySumCountInv - 15;\n    let vowelsIndexArraySumCountInv17\
    \ = vowelsIndexArraySumCountInv - 16;\n    let vowelsIndexArraySumCountInv18 =\
    \ vowelsIndexArraySumCountInv - 17;\n    let vowelsIndexArraySumCountInv19 = vowelsIndexArraySumCountInv\
    \ - 18;\n    let vowelsIndexArraySumCountInv20 = \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0_4m8quf.js:50\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word.charAt(i))){\n     \
    \       vowelsIndex[vowelsIndexCount] = i;\n            vowelsIndexCount++;\n\
    \        }\n    }\n    let vowelsIndexLength = vowelsIndex.length;\n    let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMiddle = Math.floor(vowelsIndexLength/2);\n    let vowelsIndexMiddleMax\
    \ = Math.max(...vowelsIndexMiddle);\n    let vowelsIndexMiddleMin = Math.min(...vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleMiddle = Math.floor(vowelsIndexMiddle/2);\n    let vowelsIndexMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddle);\n    let vowelsIndexMiddleMiddleMin\
    \ = Math.min(...vowelsIndexMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddleMiddle/2);\n    let vowelsIndexMiddleMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddleMin\
    \ = Math.min(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddleMiddle/2);\n    let vowelsIndexMiddleMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddleMin\
    \ = Math.min(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddleMiddle/2);\n    let vowelsIndexMiddleMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddleMin\
    \ = Math.min(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddleMiddle/2);\n    let vowelsIndexMiddleMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddleMin\
    \ = Math.min(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddleMiddle/2);\n    let vowelsIndexMiddleMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddleMin\
    \ = Math.min(...vowelsIndexMiddleMiddleMiddle);\n    let vowelsIndexMiddleMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddleMiddle/2);\n    let vowelsIndexMiddleMiddleMiddleMax\
    \ = Math.max(...vowelsIndexMiddleMiddle\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuilp80f0.js:38\n    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle/2);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMiddleMiddleMiddle' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = [];\n    let vowels_index_count = 0;\n    for(let i=0;i<word.length;i++){\n\
    \        if(vowels.includes(word[i])){\n            vowels_index.push(i);\n  \
    \          vowels_index_count++;\n        }\n    }\n    if(vowels_index_count\
    \ > vowels_count){\n        return \"\";\n    }\n    let vowels_index_sorted =\
    \ vowels_index.sort((a,b)=>a-b);\n    let vowels_index_sorted_count = vowels_index_sorted.length;\n\
    \    let vowels_index_sorted_index = vowels_index_sorted[vowels_index_sorted_count-1];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8zhvnliw.js:33\n    let vowels_index_sorted_value = vowels_index_sorted[vowels_index_sorted_count];\n\
    \        ^\n\nSyntaxError: Identifier 'vowels_index_sorted_value' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 3;\n    let vowels_count_from_middle4\
    \ = vowels_count / 4;\n    let vowels_count_from_middle5 = vowels_count / 5;\n\
    \    let vowels_count_from_middle6 = vowels_count / 6;\n    let vowels_count_from_middle7\
    \ = vowels_count / 7;\n    let vowels_count_from_middle8 = vowels_count / 8;\n\
    \    let vowels_count_from_middle9 = vowels_count / 9;\n    let vowels_count_from_middle10\
    \ = vowels_count / 10;\n    let vowels_count_from_middle11 = vowels_count / 11;\n\
    \    let vowels_count_from_middle12 = vowels_count / 12;\n    let vowels_count_from_middle13\
    \ = vowels_count / 13;\n    let vowels_count_from_middle14 = vowels_count / 14;\n\
    \    let vowels_count_from_middle15 = vowels_count / 15;\n    let vowels_count_from_middle16\
    \ = vowels_count / 16;\n    let vowels_count_from_middle17 = vowels_count / 17;\n\
    \    let vowels_count_from_middle18 = vowels_count / 18;\n    let vowels_count_from_middle19\
    \ = vowels_count / 19;\n    let vowels_count_from_middle20 = vowels_count / 20;\n\
    \    let vowels_count_from_middle21 = vowels_count / 21;\n    let vowels_count_from_middle22\
    \ = vowels_count / 22;\n    let vowels_count_from_middle23 = vowels_count / 23;\n\
    \    let vowels_count_from_middle24 = vowels_count / 24;\n    let vowels_count_from_middle25\
    \ = vowels_count / 25;\n    let vowels_count_from_middle26 = vowels_count / 26;\n\
    \    let vowels_count_from_middle27 = vowels_count / 27;\n    let vowels_count_from_middle28\
    \ = vowels_count / 28;\n    let vowels_count_from_middle29 = vowels_count / 29;\n\
    \    let vowels_count_from_middle30 = vowels_count / 30;\n    let vowels_count_from_middle31\
    \ = vowels_count / 31;\n    let vowels_count_from_middle32 = vowels_count / 32;\n\
    \    let vowels_count_from_middle33 = vowels_count / 33;\n    let vowels_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdjpjmbr4.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpte6vhviz.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax + vowelsIndexMin;\n\
    \    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let vowelsIndexSumCount2\
    \ = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3 = vowelsIndexSumCount2\
    \ / 2;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount3 / 2;\n    let vowelsIndexSumCount5\
    \ = vowelsIndexSumCount4 / 2;\n    let vowelsIndexSumCount6 = vowelsIndexSumCount5\
    \ / 2;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount6 / 2;\n    let vowelsIndexSumCount8\
    \ = vowelsIndexSumCount7 / 2;\n    let vowelsIndexSumCount9 = vowelsIndexSumCount8\
    \ / 2;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount9 / 2;\n    let vowelsIndexSumCount11\
    \ = vowelsIndexSumCount10 / 2;\n    let vowelsIndexSumCount12 = vowelsIndexSumCount11\
    \ / 2;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount12 / 2;\n    let vowelsIndexSumCount14\
    \ = vowelsIndexSumCount13 / 2;\n    let vowelsIndexSumCount15 = vowelsIndexSumCount14\
    \ / 2;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount15 / 2;\n    let vowelsIndexSumCount17\
    \ = vowelsIndexSumCount16 / 2;\n    let vowelsIndexSumCount18 = vowelsIndexSumCount17\
    \ / 2;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount18 / 2;\n    let vowelsIndexSumCount20\
    \ = vowelsIndexSumCount19 / 2;\n    let vowelsIndexSumCount21 = vowelsIndexSumCount20\
    \ / 2;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount21 / 2;\n    let vowelsIndexSumCount23\
    \ = vowelsIndexSumCount22 / 2;\n    let vowelsIndexSumCount24 = vowelsIndexSumCount23\
    \ / 2;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount24 / 2;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpozdyni6x.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp39dgugob.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(word.lastIndexOf(vowels[i]));\n    }\n    let vowelsIndex\
    \ = vowelsIndex.sort((a, b) => a - b);\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndexLast = vowelsIndex[vowelsCount - 1];\n    let vowelsIndexFirst\
    \ = vowelsIndex[0];\n    let vowelsIndexLastIndex = vowelsIndex[vowelsCount -\
    \ 2];\n    let vowelsIndexFirstIndex = vowelsIndex[1];\n    let vowelsIndexLastIndex2\
    \ = vowelsIndex[vowelsCount - 3];\n    let vowelsIndexFirstIndex2 = vowelsIndex[2];\n\
    \    let vowelsIndexLastIndex3 = vowelsIndex[vowelsCount - 4];\n    let vowelsIndexFirstIndex3\
    \ = vowelsIndex[3];\n    let vowelsIndexLastIndex4 = vowelsIndex[vowelsCount -\
    \ 5];\n    let vowelsIndexFirstIndex4 = vowelsIndex[4];\n    let vowelsIndexLastIndex5\
    \ = vowelsIndex[vowelsCount - 6];\n    let vowelsIndexFirstIndex5 = vowelsIndex[5];\n\
    \    let vowelsIndexLastIndex6 = vowelsIndex[vowelsCount - 7];\n    let vowelsIndexFirstIndex6\
    \ = vowelsIndex[6];\n    let vowelsIndexLastIndex7 = vowelsIndex[vowelsCount -\
    \ 8];\n    let vowelsIndexFirstIndex7 = vowelsIndex[7];\n    let vowelsIndexLastIndex8\
    \ = vowelsIndex[vowelsCount - 9];\n    let vowelsIndexFirstIndex8 = vowelsIndex[8];\n\
    \    let vowelsIndexLastIndex9 = vowelsIndex[vowelsCount - 10];\n    let vowelsIndexFirstIndex9\
    \ = vowelsIndex[9];\n    let vowelsIndexLastIndex10 = vowelsIndex[vowelsCount\
    \ - 11];\n    let vowelsIndexFirstIndex10 = vowelsIndex[10];\n    let vowelsIndexLastIndex11\
    \ = vowelsIndex[vowelsCount - 12];\n    let vowelsIndexFirstIndex11 = vowelsIndex[11];\n\
    \    let vowelsIndexLastIndex12 = vowelsIndex[vowelsCount - 13];\n    let vowelsIndexFirstIndex12\
    \ = vowelsIndex[12];\n    let vowelsIndexLastIndex13 = vowelsIndex[vowelsCount\
    \ - 14];\n    let vowelsIndexFirstIndex13 = vowelsIndex[13];\n    let vowelsIndexLastIndex14\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_viufa08.js:22\n    let vowelsIndex = vowelsIndex.sort((a, b) =>\
    \ a - b);\n        ^\n\nSyntaxError: Identifier 'vowelsIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8y66bl_0.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk_qc2rhg.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexMinIndex = 0;\n    let vowelsIndexMaxIndex\
    \ = 0;\n    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndexMin ===\
    \ vowelsIndex[i]){\n            vowelsIndexMinIndex = i;\n        }\n        if(vowelsIndexMax\
    \ === vowelsIndex[i]){\n            vowelsIndexMaxIndex = i;\n        }\n    }\n\
    \    let vowelsIndexMinIndex2 = vowelsIndex.indexOf(vowelsIndexMin);\n    let\
    \ vowelsIndexMaxIndex2 = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex3\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex3 = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex4 = vowelsIndex.indexOf(vowelsIndexMin);\n    let\
    \ vowelsIndexMaxIndex4 = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex5\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex5 = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex6 = vowelsIndex.indexOf(vowelsIndexMin);\n    let\
    \ vowelsIndexMaxIndex6 = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex7\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex7 = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex8 = vowelsIndex.indexOf(vowelsIndexMin);\n    let\
    \ vowelsIndexMaxIndex8 = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex9\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex9 = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex10 = vowelsIndex.indexOf(vowelsIndexMin);\n    let\
    \ vowelsIndexMaxIndex10 = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex11\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex11 = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps8xxj3s2.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle2 = vowels_count / 2;\n    var vowels_count_from_middle3\
    \ = vowels_count / 2;\n    var vowels_count_from_middle4 = vowels_count / 2;\n\
    \    var vowels_count_from_middle5 = vowels_count / 2;\n    var vowels_count_from_middle6\
    \ = vowels_count / 2;\n    var vowels_count_from_middle7 = vowels_count / 2;\n\
    \    var vowels_count_from_middle8 = vowels_count / 2;\n    var vowels_count_from_middle9\
    \ = vowels_count / 2;\n    var vowels_count_from_middle10 = vowels_count / 2;\n\
    \    var vowels_count_from_middle11 = vowels_count / 2;\n    var vowels_count_from_middle12\
    \ = vowels_count / 2;\n    var vowels_count_from_middle13 = vowels_count / 2;\n\
    \    var vowels_count_from_middle14 = vowels_count / 2;\n    var vowels_count_from_middle15\
    \ = vowels_count / 2;\n    var vowels_count_from_middle16 = vowels_count / 2;\n\
    \    var vowels_count_from_middle17 = vowels_count / 2;\n    var vowels_count_from_middle18\
    \ = vowels_count / 2;\n    var vowels_count_from_middle19 = vowels_count / 2;\n\
    \    var vowels_count_from_middle20 = vowels_count / 2;\n    var vowels_count_from_middle21\
    \ = vowels_count / 2;\n    var vowels_count_from_middle22 = vowels_count / 2;\n\
    \    var vowels_count_from_middle23 = vowels_count / 2;\n    var vowels_count_from_middle24\
    \ = vowels_count / 2;\n    var vowels_count_from_middle25 = vowels_count / 2;\n\
    \    var vowels_count_from_middle26 = vowels_count / 2;\n    var vowels_count_from_middle27\
    \ = vowels_count / 2;\n    var vowels_count_from_middle28 = vowels_count / 2;\n\
    \    var vowels_count_from_middle29 = vowels_count / 2;\n    var vowels_count_from_middle30\
    \ = vowels_count / 2;\n    var vowels_count_from_middle31 = vowels_count / 2;\n\
    \    var vowels_count_from_middle32 = vowels_count / 2;\n    var vowels_count_from_middle33\
    \ = vowels_count / 2;\n    var vowels_count_from_middle34 = vowels_count / 2;\n\
    \    var vowels_count_from_middle35\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxy0e9cfx.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelsCount =\
    \ vowels.length;\n    var vowelsIndex = [];\n    for(var i=0; i<vowelsCount; i++){\n\
    \        vowelsIndex.push(i);\n    }\n    var vowelsIndexCount = vowelsIndex.length;\n\
    \    var vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    var vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    var vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    var vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    var vowelsIndexMaxVowel\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    var vowelsIndexMinVowel = vowelsIndex[vowelsIndexMinIndex];\n\
    \    var vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    var vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    var vowelsIndexMaxVowelVowel = vowelsIndex[vowelsIndexMaxVowelIndex];\n \
    \   var vowelsIndexMinVowelVowel = vowelsIndex[vowelsIndexMinVowelIndex];\n  \
    \  var vowelsIndexMaxVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelVowel);\n\
    \    var vowelsIndexMinVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelVowel);\n\
    \    var vowelsIndexMaxVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelIndex];\n\
    \    var vowelsIndexMinVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelIndex];\n\
    \    var vowelsIndexMaxVowelVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelVowelVowel);\n\
    \    var vowelsIndexMinVowelVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelVowelVowel);\n\
    \    var vowelsIndexMaxVowelVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelVowelIndex];\n\
    \    var vowelsIndexMinVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelV\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_fmzke59.js:41\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw75zos5x.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsIndex = [];\n    var vowelsIndexCount = vowelsIndex.length;\n \
    \   \n    for(var i=0;i<word.length;i++){\n        if(vowels.indexOf(word[i])\
    \ !== -1){\n            vowelsIndex.push(i);\n        }\n    }\n    \n    for(var\
    \ i=0;i<vowelsIndex.length;i++){\n        var index = vowelsIndex[i];\n      \
    \  var vowel = vowels[i];\n        var nextVowel = vowelsIndex[i+1];\n       \
    \ \n        if(vowelsIndex[i+1] === word.length-1){\n            nextVowel = word.length;\n\
    \        }\n        \n        if(vowelsIndex[i+1] === word.length-1){\n      \
    \      nextVowel = word.length;\n        }\n        \n        if(vowelsIndex[i+1]\
    \ === word.length-1){\n            nextVowel = word.length;\n        }\n     \
    \   \n        if(vowelsIndex[i+1] === word.length-1){\n            nextVowel =\
    \ word.length;\n        }\n        \n        if(vowelsIndex[i+1] === word.length-1){\n\
    \            nextVowel = word.length;\n        }\n        \n        if(vowelsIndex[i+1]\
    \ === word.length-1){\n            nextVowel = word.length;\n        }\n     \
    \   \n        if(vowelsIndex[i+1] === word.length-1){\n            nextVowel =\
    \ word.length;\n        }\n        \n        if(vowelsIndex[i+1] === word.length-1){\n\
    \            nextVowel = word.length;\n        }\n        \n        if(vowelsIndex[i+1]\
    \ === word.length-1){\n            nextVowel = word.length;\n        }\n     \
    \   \n        if(vowelsIndex[i+1] === word.length-1){\n            nextVowel =\
    \ word.length;\n        }\n        \n        if(vowelsIndex[i+1] === word.length-1){\n\
    \            nextVowel = word.length;\n        }\n        \n        if(vowelsIndex[i+1]\
    \ === word.length-1){\n            nextVowel = word.length;\n        }\n     \
    \   \n        if(vowelsIndex[i+1] === word.length-1){\n            nextVowel =\
    \ word.length;\n        }\n        \n        if(vowelsIndex[i+1] === word.length-1){\n\
    \            nextVowel = word.length;\n        }\n        \n        if(vowelsIndex[i+1]\
    \ === word.length-1){\n            nextVowel = word.length;\n        }\n     \
    \   \n        if(vowelsIndex[i+1] === word.length-1){\n            nextVowel =\
    \ word.length;\n        }\n        \n        if(vowelsIndex[i+1] === word.length-1){\n\
    \            nextVowel = word.length;\n        }\n        \n        if(vowelsIndex[i+1]\
    \ === word.length-1)\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6fo7kv1n.js:101\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = 0;\n  let vowelsCountIndex = 0;\n  let vowelsCountMax = vowelsCount\
    \ - 1;\n  let vowelsCountMin = 0;\n  let vowelsCountMaxIndex = -1;\n  let vowelsCountMinIndex\
    \ = -1;\n  let vowelsCountMaxValue = -1;\n  let vowelsCountMinValue = -1;\n  let\
    \ vowelsCountMaxIndexValue = -1;\n  let vowelsCountMinIndexValue = -1;\n  let\
    \ vowelsCountMaxValueValue = -1;\n  let vowelsCountMinValueValue = -1;\n  let\
    \ vowelsCountMaxIndexValueValue = -1;\n  let vowelsCountMinIndexValueValue = -1;\n\
    \  let vowelsCountMaxValueValueValue = -1;\n  let vowelsCountMinValueValueValue\
    \ = -1;\n  let vowelsCountMaxIndexValueValueValue = -1;\n  let vowelsCountMinIndexValueValueValue\
    \ = -1;\n  let vowelsCountMaxValueValueValueValue = -1;\n  let vowelsCountMinValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxIndexValueValueValueValue = -1;\n  let vowelsCountMinIndexValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxValueValueValueValueValue = -1;\n  let vowelsCountMinValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxIndexValueValueValueValueValue = -1;\n  let vowelsCountMinIndexValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxValueValueValueValueValueValue = -1;\n  let vowelsCountMinValueValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxIndexValueValueValueValueValueValue = -1;\n  let\
    \ vowelsCountMinIndexValueValueValueValueValueValue = -1;\n  let vowelsCountMaxValueValueValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMinValueValueValueValueValueValueValue = -1;\n  let\
    \ vowelsCountMaxIndexValueValueValueValueValueValue = -1;\n  let vowelsCountMinIndexValueValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxValueValueValueValueValueValueValue = -1;\n  let\
    \ vowelsCountMinValueValueValueValueValueValueValue = -1;\n  let vowelsCountMaxIndexValueValueValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMinIndexValueValueValueValueValueValueValue = -1;\n\
    \  let vowelsCountMaxValueValueValueValueValueValueValueValue = -1;\n  let vowelsCountMinValueValueValueValueValueValueValueValueValue\
    \ = -1;\n  let vowelsCountMaxIndexValueValueValueValueValueValueValueValue = -1;\n\
    \  let vowelsCountMinIndexValueValueValueValueValueValueValueValueValue = -1;\n\
    \  let \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphy06y8vq.js:50\n  let vowelsCountMaxIndexValueValueValueValueValueValue\
    \ = -1;\n      ^\n\nSyntaxError: Identifier 'vowelsCountMaxIndexValueValueValueValueValueValue'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowels_count = vowels.length;\n\
    \tlet vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\t\
    let vowels_count_from_middle2 = vowels_count / 2;\n\tlet vowels_count_from_middle3\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle4 = vowels_count / 2;\n\t\
    let vowels_count_from_middle5 = vowels_count / 2;\n\tlet vowels_count_from_middle6\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle7 = vowels_count / 2;\n\t\
    let vowels_count_from_middle8 = vowels_count / 2;\n\tlet vowels_count_from_middle9\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle10 = vowels_count / 2;\n\t\
    let vowels_count_from_middle11 = vowels_count / 2;\n\tlet vowels_count_from_middle12\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle13 = vowels_count / 2;\n\t\
    let vowels_count_from_middle14 = vowels_count / 2;\n\tlet vowels_count_from_middle15\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle16 = vowels_count / 2;\n\t\
    let vowels_count_from_middle17 = vowels_count / 2;\n\tlet vowels_count_from_middle18\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle19 = vowels_count / 2;\n\t\
    let vowels_count_from_middle20 = vowels_count / 2;\n\tlet vowels_count_from_middle21\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle22 = vowels_count / 2;\n\t\
    let vowels_count_from_middle23 = vowels_count / 2;\n\tlet vowels_count_from_middle24\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle25 = vowels_count / 2;\n\t\
    let vowels_count_from_middle26 = vowels_count / 2;\n\tlet vowels_count_from_middle27\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle28 = vowels_count / 2;\n\t\
    let vowels_count_from_middle29 = vowels_count / 2;\n\tlet vowels_count_from_middle30\
    \ = vowels_count / 2;\n\tlet vowels_count_from_middle31 = vowels_count / 2;\n\t\
    let vowels_count_from_middle32 = vowels_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsg2emci7.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_min_index\
    \ = 0;\n    var vowels_index_count_max_index = 0;\n    var vowels_index_count_min_index2\
    \ = 0;\n    var vowels_index_count_max_index2 = 0;\n    var vowels_index_count_min_index3\
    \ = 0;\n    var vowels_index_count_max_index3 = 0;\n    var vowels_index_count_min_index4\
    \ = 0;\n    var vowels_index_count_max_index4 = 0;\n    var vowels_index_count_min_index5\
    \ = 0;\n    var vowels_index_count_max_index5 = 0;\n    var vowels_index_count_min_index6\
    \ = 0;\n    var vowels_index_count_max_index6 = 0;\n    var vowels_index_count_min_index7\
    \ = 0;\n    var vowels_index_count_max_index7 = 0;\n    var vowels_index_count_min_index8\
    \ = 0;\n    var vowels_index_count_max_index8 = 0;\n    var vowels_index_count_min_index9\
    \ = 0;\n    var vowels_index_count_max_index9 = 0;\n    var vowels_index_count_min_index10\
    \ = 0;\n    var vowels_index_count_max_index10 = 0;\n    var vowels_index_count_min_index11\
    \ = 0;\n    var vowels_index_count_max_index11 = 0;\n    var vowels_index_count_min_index12\
    \ = 0;\n    var vowels_index_count_max_index12 = 0;\n    var vowels_index_count_min_index13\
    \ = 0;\n    var vowels_index_count_max_index13 = 0;\n    var vowels_index_count_min_index14\
    \ = 0;\n    var vowels_index_count_max_index14 = 0;\n    var vowels_index_count_min_index15\
    \ = 0;\n    var vowels_index_count_max_index15 = 0;\n    var vowels_index_count_min_index16\
    \ = 0;\n    var vowels_index_count_max_index16 = 0;\n    var vowels_index_count_min_index17\
    \ = 0;\n    var vowels_index_count_max_index17 = 0;\n    var vowels_index_count_min_index18\
    \ = 0;\n    var vowels_index_count_max_index18 = 0;\n    var vowels_index_count_min_index19\
    \ = 0;\n    var vowels_index_count_max_index19 = 0;\n    var vowels_index_count_min_index20\
    \ = 0;\n    var vowels_index_count_max_index20 = 0;\n    var vowels_index_count_min_index21\
    \ = 0;\n    var vowels_index_count_max_index21 = 0;\n    var vowels_index_count_min_index22\
    \ = 0;\n    var vowels_index_count_max_index22 = 0;\n    var vowels_index_count_min_index23\
    \ = 0;\n    var vowels_index_count_max_index23 = 0;\n    var vowels_index_count_min_index24\
    \ = 0;\n    var vowels_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4802n7p9.js:90\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_middle_to_left = vowels_count_from_middle\
    \ - vowels_count_from_left;\n    let vowels_count_from_middle_to_right = vowels_count_from_middle\
    \ - vowels_count_from_right;\n    let vowels_count_from_left_to_middle = vowels_count_from_left\
    \ - vowels_count_from_middle;\n    let vowels_count_from_right_to_middle = vowels_count_from_right\
    \ - vowels_count_from_middle;\n    let vowels_count_from_middle_to_middle = vowels_count_from_middle\
    \ - vowels_count_from_middle;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count_from_left_to_right - vowels_count_from_middle_to_middle;\n  \
    \  let vowels_count_from_right_to_left_to_middle = vowels_count_from_right_to_left\
    \ - vowels_count_from_middle_to_middle;\n    let vowels_count_from_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left - vowels_count_from_right_to_middle;\n  \
    \  let vowels_count_from_middle_to_right_to_left = vowels_count_from_middle_to_right\
    \ - vowels_count_from_left_to_middle;\n    let vowels_count_from_left_to_middle_to_right\
    \ = vowels_count_from_left_to_middle - vowels_count_from_right_to_middle;\n  \
    \  let vowels_count_from_right_to_middle_to_left = vowels_count_from_right_to_middle\
    \ - vowels_count_from_left_to_middle;\n    let vowels_count_from_middle_to_left_to_middle_to_right\
    \ = vowels_count_from_middle_to_left_to_right - vowels_count_from_right_to_left_to_middle;\n\
    \    let vowels_count_from_middle_to_right_to_middle_to_left = vowels_count_from_middle_to_right_to_middle\
    \ - vowels_count_from_left_to_middle_to_middle;\n    let vowels_count_from_left_to_right_to_middle_to_middle\
    \ = vowels_count_from_left_to_right_to_middle - vowels_count_from_middle_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_middle = vowels_count_from_right_to_left_to_middle\
    \ - vowels_count_from_middle_to_right_to_left;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_right_to_middle \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfbokg_j8.js:59\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowel_positions = [];\n    for(var i=word.length-1;i>=0;i--){\n        var\
    \ char = word.charAt(i);\n        if(vowels.indexOf(char) !== -1){\n         \
    \   vowel_positions.push(i);\n        }\n    }\n    if(vowel_positions.length\
    \ == 0){\n        return \"\";\n    }\n    var vowel_positions_count = vowel_positions.length;\n\
    \    var closest_vowel_position = 0;\n    var closest_vowel_distance = Number.MAX_VALUE;\n\
    \    for(var i=0;i<vowel_positions_count;i++){\n        var position = vowel_positions[i];\n\
    \        var distance = vowel_positions[i] - position;\n        if(distance <\
    \ closest_vowel_distance){\n            closest_vowel_distance = distance;\n \
    \           closest_vowel_position = position;\n        }\n    }\n    return word.charAt(closest_vowel_position);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmp6efhlv4m.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6efhlv4m.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = word.length -\
    \ vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = word.length\
    \ - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var vowels_count_from_left_to_right\
    \ = vowels_count - vowels_count_from_right_to_left;\n    var vowels_count_from_right_to_left\
    \ = word.length - vowels_count_from_left_to_right;\n    var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppai107dr.js:46\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2\n\
    \    let vowelsCount4 = vowelsCount-3\n    let vowelsCount5 = vowelsCount-4\n\
    \    let vowelsCount6 = vowelsCount-5\n    let vowelsCount7 = vowelsCount-6\n\
    \    let vowelsCount8 = vowelsCount-7\n    let vowelsCount9 = vowelsCount-8\n\
    \    let vowelsCount10 = vowelsCount-9\n    let vowelsCount11 = vowelsCount-10\n\
    \    let vowelsCount12 = vowelsCount-11\n    let vowelsCount13 = vowelsCount-12\n\
    \    let vowelsCount14 = vowelsCount-13\n    let vowelsCount15 = vowelsCount-14\n\
    \    let vowelsCount16 = vowelsCount-15\n    let vowelsCount17 = vowelsCount-16\n\
    \    let vowelsCount18 = vowelsCount-17\n    let vowelsCount19 = vowelsCount-18\n\
    \    let vowelsCount20 = vowelsCount-19\n    let vowelsCount21 = vowelsCount-20\n\
    \    let vowelsCount22 = vowelsCount-21\n    let vowelsCount23 = vowelsCount-22\n\
    \    let vowelsCount24 = vowelsCount-23\n    let vowelsCount25 = vowelsCount-24\n\
    \    let vowelsCount26 = vowelsCount-25\n    let vowelsCount27 = vowelsCount-26\n\
    \    let vowelsCount28 = vowelsCount-27\n    let vowelsCount29 = vowelsCount-28\n\
    \    let vowelsCount30 = vowelsCount-29\n    let vowelsCount31 = vowelsCount-30\n\
    \    let vowelsCount32 = vowelsCount-31\n    let vowelsCount33 = vowelsCount-32\n\
    \    let vowelsCount34 = vowelsCount-33\n    let vowelsCount35 = vowelsCount-34\n\
    \    let vowelsCount36 = vowelsCount-35\n    let vowelsCount37 = vowelsCount-36\n\
    \    let vowelsCount38 = vowelsCount-37\n    let vowelsCount39 = vowelsCount-38\n\
    \    let vowelsCount40 = vowelsCount-39\n    let vowelsCount41 = vowelsCount-40\n\
    \    let vowelsCount42 = vowelsCount-41\n    let vowelsCount43 = vowelsCount-42\n\
    \    let vowelsCount44 = vowelsCount-43\n    let vowelsCount45 = vowel\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb1n0aa2j.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 2;\n    let vowels_count_from_middle4 = vowels_count / 2;\n\
    \    let vowels_count_from_middle5 = vowels_count / 2;\n    let vowels_count_from_middle6\
    \ = vowels_count / 2;\n    let vowels_count_from_middle7 = vowels_count / 2;\n\
    \    let vowels_count_from_middle8 = vowels_count / 2;\n    let vowels_count_from_middle9\
    \ = vowels_count / 2;\n    let vowels_count_from_middle10 = vowels_count / 2;\n\
    \    let vowels_count_from_middle11 = vowels_count / 2;\n    let vowels_count_from_middle12\
    \ = vowels_count / 2;\n    let vowels_count_from_middle13 = vowels_count / 2;\n\
    \    let vowels_count_from_middle14 = vowels_count / 2;\n    let vowels_count_from_middle15\
    \ = vowels_count / 2;\n    let vowels_count_from_middle16 = vowels_count / 2;\n\
    \    let vowels_count_from_middle17 = vowels_count / 2;\n    let vowels_count_from_middle18\
    \ = vowels_count / 2;\n    let vowels_count_from_middle19 = vowels_count / 2;\n\
    \    let vowels_count_from_middle20 = vowels_count / 2;\n    let vowels_count_from_middle21\
    \ = vowels_count / 2;\n    let vowels_count_from_middle22 = vowels_count / 2;\n\
    \    let vowels_count_from_middle23 = vowels_count / 2;\n    let vowels_count_from_middle24\
    \ = vowels_count / 2;\n    let vowels_count_from_middle25 = vowels_count / 2;\n\
    \    let vowels_count_from_middle26 = vowels_count / 2;\n    let vowels_count_from_middle27\
    \ = vowels_count / 2;\n    let vowels_count_from_middle28 = vowels_count / 2;\n\
    \    let vowels_count_from_middle29 = vowels_count / 2;\n    let vowels_count_from_middle30\
    \ = vowels_count / 2;\n    let vowels_count_from_middle31 = vowels_count / 2;\n\
    \    let vowels_count_from_middle32 = vowels_count / 2;\n    let vowels_count_from_middle33\
    \ = vowels_count / 2;\n    let vowels_count_from_middle34 = vowels_count / 2;\n\
    \    let vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphgtigfy7.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max2 =\
    \ 0;\n    let vowels_index_count_min2 = 0;\n    let vowels_index_count_max3 =\
    \ 0;\n    let vowels_index_count_min3 = 0;\n    let vowels_index_count_max4 =\
    \ 0;\n    let vowels_index_count_min4 = 0;\n    let vowels_index_count_max5 =\
    \ 0;\n    let vowels_index_count_min5 = 0;\n    let vowels_index_count_max6 =\
    \ 0;\n    let vowels_index_count_min6 = 0;\n    let vowels_index_count_max7 =\
    \ 0;\n    let vowels_index_count_min7 = 0;\n    let vowels_index_count_max8 =\
    \ 0;\n    let vowels_index_count_min8 = 0;\n    let vowels_index_count_max9 =\
    \ 0;\n    let vowels_index_count_min9 = 0;\n    let vowels_index_count_max10 =\
    \ 0;\n    let vowels_index_count_min10 = 0;\n    let vowels_index_count_max11\
    \ = 0;\n    let vowels_index_count_min11 = 0;\n    let vowels_index_count_max12\
    \ = 0;\n    let vowels_index_count_min12 = 0;\n    let vowels_index_count_max13\
    \ = 0;\n    let vowels_index_count_min13 = 0;\n    let vowels_index_count_max14\
    \ = 0;\n    let vowels_index_count_min14 = 0;\n    let vowels_index_count_max15\
    \ = 0;\n    let vowels_index_count_min15 = 0;\n    let vowels_index_count_max16\
    \ = 0;\n    let vowels_index_count_min16 = 0;\n    let vowels_index_count_max17\
    \ = 0;\n    let vowels_index_count_min17 = 0;\n    let vowels_index_count_max18\
    \ = 0;\n    let vowels_index_count_min18 = 0;\n    let vowels_index_count_max19\
    \ = 0;\n    let vowels_index_count_min19 = 0;\n    let vowels_index_count_max20\
    \ = 0;\n    let vowels_index_count_min20 = 0;\n    let vowels_index_count_max21\
    \ = 0;\n    let vowels_index_count_min21 = 0;\n    let vowels_index_count_max22\
    \ = 0;\n    let vowels_index_count_min22 = 0;\n    let vowels_index_count_max23\
    \ = 0;\n    let vowels_index_count_min23 = 0;\n    let vowels_index_count_max24\
    \ = 0;\n    let vowels_index_count_min24 = 0;\n    let vowels_index_count_max25\
    \ = 0;\n    let vowels_index_count_min25 = 0;\n    let vowels_index_count_max26\
    \ = 0;\n    let vowels_index_count_min26 = 0;\n    let vowels_index_count_max27\
    \ = 0;\n    let vowels_index_count_min27 = 0;\n    let vowels_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphc19mnvs.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCount2 = vowelsIndexCount-1;\n    let vowelsIndexCount3 =\
    \ vowelsIndexCount-2; \n    let vowelsIndexCount4 = vowelsIndexCount-3;\n    let\
    \ vowelsIndexCount5 = vowelsIndexCount-4; \n    let vowelsIndexCount6 = vowelsIndexCount-5;\
    \ \n    let vowelsIndexCount7 = vowelsIndexCount-6; \n    let vowelsIndexCount8\
    \ = vowelsIndexCount-7; \n    let vowelsIndexCount9 = vowelsIndexCount-8; \n \
    \   let vowelsIndexCount10 = vowelsIndexCount-9; \n    let vowelsIndexCount11\
    \ = vowelsIndexCount-10; \n    let vowelsIndexCount12 = vowelsIndexCount-11; \n\
    \    let vowelsIndexCount13 = vowelsIndexCount-12; \n    let vowelsIndexCount14\
    \ = vowelsIndexCount-13; \n    let vowelsIndexCount15 = vowelsIndexCount-14; \n\
    \    let vowelsIndexCount16 = vowelsIndexCount-15; \n    let vowelsIndexCount17\
    \ = vowelsIndexCount-16; \n    let vowelsIndexCount18 = vowelsIndexCount-17; \n\
    \    let vowelsIndexCount19 = vowelsIndexCount-18; \n    let vowelsIndexCount20\
    \ = vowelsIndexCount-19; \n    let vowelsIndexCount21 = vowelsIndexCount-20; \n\
    \    let vowelsIndexCount22 = vowelsIndexCount-21; \n    let vowelsIndexCount23\
    \ = vowelsIndexCount-22; \n    let vowelsIndexCount24 = vowelsIndexCount-23; \n\
    \    let vowelsIndexCount25 = vowelsIndexCount-24; \n    let vowelsIndexCount26\
    \ = vowelsIndexCount-25; \n    let vowelsIndexCount27 = vowelsIndexCount-26; \n\
    \    let vowelsIndexCount28 = vowelsIndexCount-27; \n    let vowelsIndexCount29\
    \ = vowelsIndexCount-28; \n    let vowelsIndexCount30 = vowelsIndexCount-29; \n\
    \    let vowelsIndexCount31 = vowelsIndexCount-30; \n    let vowelsIndexCount32\
    \ = vowelsIndexCount-31; \n    let vowelsIndexCount33 = vowelsIndexCount-32; \n\
    \    let vowelsIndexCount34 = vowels\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps8nhbse_.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2\
    \ = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5\
    \ = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8\
    \ = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11\
    \ = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14\
    \ = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17\
    \ = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20\
    \ = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23\
    \ = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26\
    \ = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29\
    \ = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32\
    \ = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35\
    \ = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38\
    \ = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41\
    \ = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44\
    \ = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47\
    \ = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50\
    \ = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53\
    \ = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56\
    \ = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59\
    \ = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5fzbs42m.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsCountLeft = word.length - vowelsCount;\n    var vowelsCountRight\
    \ = word.length - vowelsCount;\n    var vowelsCountRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightRight = word.length - vowelsCount;\n    var vowelsCountRightLeftRight\
    \ = word.length - vowelsCount;\n    var vowelsCountLeftRight = word.length - vowelsCount;\n\
    \    var vowelsCountLeftLeftRight = word.length - vowelsCount;\n    var vowelsCountLeftRightLeft\
    \ = word.length - vowelsCount;\n    var vowelsCountLeftLeftRightLeft = word.length\
    \ - vowelsCount;\n    var vowelsCountRightLeftRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightLeftLeftRight = word.length - vowelsCount;\n    var vowelsCountRightRightLeftRight\
    \ = word.length - vowelsCount;\n    var vowelsCountRightRightRightLeft = word.length\
    \ - vowelsCount;\n    var vowelsCountRightRightRightRight = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightLeft = word.length - vowelsCount;\n  \
    \  var vowelsCountRightRightRightRightRight = word.length - vowelsCount;\n   \
    \ var vowelsCountRightRightRightRightRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRight = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRight = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightRight = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightRight = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightLeft = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightRight = word.length - vowelsCount;\n\
    \    var vowelsCountRightRightRightRightRightRightRightRightLeft = word.length\
    \ - vowelsCount;\n    var vowelsCountRightRightRightRightRightRightRightRightRight\
    \ = word.length - vowelsCount;\n    var vowelsCountRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - vowelsCount;\n    var vowelsCount\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3pfh61h2.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw75zos5x.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2\
    \ = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5\
    \ = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8\
    \ = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11\
    \ = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14\
    \ = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17\
    \ = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20\
    \ = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23\
    \ = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26\
    \ = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29\
    \ = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32\
    \ = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35\
    \ = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38\
    \ = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41\
    \ = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44\
    \ = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47\
    \ = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50\
    \ = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53\
    \ = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56\
    \ = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59\
    \ = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5fzbs42m.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: -1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_positions = [];\n    let vowel_positions_count = vowel_positions.length;\n\
    \    let vowel_positions_count_max = Math.max(...vowel_positions);\n    let vowel_positions_count_min\
    \ = Math.min(...vowel_positions);\n    \n    for(let i = 0; i < vowels_count -\
    \ 1; i++){\n        if(word.charAt(vowel_positions[i] + vowels_count - 1) ===\
    \ vowels[i]){\n            vowel_positions_count_max++;\n        }\n        if(word.charAt(vowel_positions[i]\
    \ + vowels_count - 1) === vowels[vowels_count - 1]){\n            vowel_positions_count_min--;\n\
    \        }\n    }\n    \n    for(let i = 0; i < vowel_positions_count - 1; i++){\n\
    \        if(word.charAt(vowel_positions[i] + vowels_count - 1) === vowels[i]){\n\
    \            vowel_positions.push(vowel_positions[i] + vowels_count - 1);\n  \
    \      }\n        if(word.charAt(vowel_positions[i] + vowels_count - 1) === vowels[vowels_count\
    \ - 1]){\n            vowel_positions.push(vowel_positions[i] + vowels_count -\
    \ 1);\n        }\n    }\n    \n    for(let i = 0; i < vowel_positions_count_max;\
    \ i++){\n        if(word.charAt(vowel_positions[i] + vowels_count - 1) === vowels[i]){\n\
    \            return vowels[i];\n        }\n    }\n    \n    for(let i = 0; i <\
    \ vowel_positions_count_min; i++){\n        if(word.charAt(vowel_positions[i]\
    \ + vowels_count - 1) === vowels[i]){\n            return vowels[vowels_count\
    \ - 1];\n        }\n    }\n    \n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748668
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_2 = 0;\n    let vowels_index_count_3 = 0;\n    let\
    \ vowels_index_count_4 = 0;\n    let vowels_index_count_5 = 0;\n    let vowels_index_count_6\
    \ = 0;\n    let vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n\
    \    let vowels_index_count_9 = 0;\n    let vowels_index_count_10 = 0;\n    let\
    \ vowels_index_count_11 = 0;\n    let vowels_index_count_12 = 0;\n    let vowels_index_count_13\
    \ = 0;\n    let vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n\
    \    let vowels_index_count_16 = 0;\n    let vowels_index_count_17 = 0;\n    let\
    \ vowels_index_count_18 = 0;\n    let vowels_index_count_19 = 0;\n    let vowels_index_count_20\
    \ = 0;\n    let vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n\
    \    let vowels_index_count_23 = 0;\n    let vowels_index_count_24 = 0;\n    let\
    \ vowels_index_count_25 = 0;\n    let vowels_index_count_26 = 0;\n    let vowels_index_count_27\
    \ = 0;\n    let vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n\
    \    let vowels_index_count_30 = 0;\n    let vowels_index_count_31 = 0;\n    let\
    \ vowels_index_count_32 = 0;\n    let vowels_index_count_33 = 0;\n    let vowels_index_count_34\
    \ = 0;\n    let vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n\
    \    let vowels_index_count_37 = 0;\n    let vowels_index_count_38 = 0;\n    let\
    \ vowels_index_count_39 = 0;\n    let vowels_index_count_40 = 0;\n    let vowels_index_count_41\
    \ = 0;\n    let vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n\
    \    let vowels_index_count_44 = 0;\n    let vowels_index_count_45 = 0;\n    let\
    \ vowels_index_count_46 = 0;\n    let vowels_index_count_47 = 0;\n    let vowels_index_count_48\
    \ = 0;\n    let vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n\
    \    let vowels_index_count_51 = 0;\n    let vowels_index_count_52 = 0;\n    let\
    \ vowels_index_count_53 = 0;\n    let vowels_index_count_54 = 0;\n    let vowels_index_count_55\
    \ = 0;\n    let vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n\
    \    let vowels_index_count_58 = 0;\n    let vowels_index_count_59 = 0;\n    let\
    \ vowels_index_count_60 = 0;\n    let vowels_index_count_61 = 0;\n    let vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxo162sfc.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw75zos5x.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountLeft = vowelsCount\
    \ - 2;\n    let vowelsCountBoth = vowelsCount - 3;\n    let vowelsCountBothRight\
    \ = vowelsCountBoth - 1;\n    let vowelsCountBothLeft = vowelsCountBoth - 2;\n\
    \    let vowelsCountBothBoth = vowelsCountBoth - 3;\n    let vowelsCountBothBothRight\
    \ = vowelsCountBothBoth - 1;\n    let vowelsCountBothBothLeft = vowelsCountBothBoth\
    \ - 2;\n    let vowelsCountBothBothBoth = vowelsCountBothBoth - 3;\n    let vowelsCountBothBothBothRight\
    \ = vowelsCountBothBothBoth - 1;\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth\
    \ - 2;\n    let vowelsCountBothBothBothBoth = vowelsCountBothBothBoth - 3;\n \
    \   let vowelsCountBothBothBothBothRight = vowelsCountBothBothBothBoth - 1;\n\
    \    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth - 2;\n    let vowelsCountBothBothBothBoth\
    \ = vowelsCountBothBothBoth - 3;\n    let vowelsCountBothBothBothBothRight = vowelsCountBothBothBothBoth\
    \ - 1;\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth - 2;\n \
    \   let vowelsCountBothBothBothBoth = vowelsCountBothBothBoth - 3;\n    let vowelsCountBothBothBothBothRight\
    \ = vowelsCountBothBothBothBoth - 1;\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth\
    \ - 2;\n    let vowelsCountBothBothBothBoth = vowelsCountBothBothBoth - 3;\n \
    \   let vowelsCountBothBothBothBothRight = vowelsCountBothBothBothBoth - 1;\n\
    \    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth - 2;\n    let vowelsCountBothBothBothBoth\
    \ = vowelsCountBothBothBoth - 3;\n    let vowelsCountBothBothBothBothRight = vowelsCountBothBothBothBoth\
    \ - 1;\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth - 2;\n \
    \   let vowelsCountBothBothBothBoth = vowelsCountBothBothBoth - 3;\n    let vowelsCountBothBothBothBothRight\
    \ = vowelsCountBothBothBothBoth - 1;\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth\
    \ - 2;\n    let vowels\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnebwhkkw.js:31\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth\
    \ - 2;\n        ^\n\nSyntaxError: Identifier 'vowelsCountBothBothBothLeft' has\
    \ already been declared\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n\
    \    }\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexMinCount = vowelsIndex.filter(x\
    \ => x == vowelsIndexMin).length;\n    let vowelsIndexMaxCount = vowelsIndex.filter(x\
    \ => x == vowelsIndexMax).length;\n    if(vowelsIndexMinCount >= vowelsIndexMaxCount){\n\
    \        return \"\";\n    }\n    let vowelsIndexMinIndex = vowelsIndex.filter(x\
    \ => x == vowelsIndexMin)[0];\n    let vowelsIndexMaxIndex = vowelsIndex.filter(x\
    \ => x == vowelsIndexMax)[0];\n    let vowelsIndexMinIndexCount = vowelsIndex.filter(x\
    \ => x == vowelsIndexMinIndex).length;\n    let vowelsIndexMaxIndexCount = vowelsIndex.filter(x\
    \ => x == vowelsIndexMaxIndex).length;\n    if(vowelsIndexMinIndexCount >= vowelsIndexMaxIndexCount){\n\
    \        return \"\";\n    }\n    let vowelsIndexMinIndexVowel = vowelsIndex.filter(x\
    \ => x == vowelsIndexMinIndex)[0];\n    let vowelsIndexMaxIndexVowel = vowelsIndex.filter(x\
    \ => x == vowelsIndexMaxIndex)[0];\n    let vowelsIndexMinIndexVowelCount = vowelsIndex.filter(x\
    \ => x == vowelsIndexMinIndexVowel).length;\n    let vowelsIndexMaxIndexVowelCount\
    \ = vowelsIndex.filter(x => x == vowelsIndexMaxIndexVowel).length;\n    if(vowelsIndexMinIndexVowelCount\
    \ >= vowelsIndexMaxIndexVowelCount){\n        return \"\";\n    }\n    let vowelsIndexMinIndexVowelVowel\
    \ = vowelsIndex.filter(x => x == vowelsIndexMinIndexVowel)[0];\n    let vowelsIndexMaxIndexVowelVowel\
    \ = vowelsIndex.filter(x => x == vowelsIndexMaxIndexVowel)[0];\n    let vowelsIndexMinIndexVowelVowelCount\
    \ = vowelsIndex.filter(x => x == vowelsIndexMinIndexVowelVowel).length;\n    let\
    \ vowelsIndexMaxIndexVowelVowel\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg3q69eji.js:50\n    let vowelsIndexMaxIndexVowelVowel\n       \
    \ ^\n\nSyntaxError: Identifier 'vowelsIndexMaxIndexVowelVowel' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_index = 0;\n    let vowel_found = false;\n    let consonant_index\
    \ = 0;\n    let consonant_found = false;\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            vowel_found = true;\n\
    \            vowel_index = i;\n            break;\n        }\n    }\n    if(vowel_found){\n\
    \        for(let i = word.length-1; i >= 0; i--){\n            if(vowels.includes(word[i])){\n\
    \                vowel_found = true;\n                vowel_index = i;\n     \
    \           break;\n            }\n        }\n    }\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(consonants.includes(word[i])){\n            consonant_found\
    \ = true;\n            consonant_index = i;\n            break;\n        }\n \
    \   }\n    if(consonant_found){\n        for(let i = word.length-1; i >= 0; i--){\n\
    \            if(consonants.includes(word[i])){\n                consonant_found\
    \ = true;\n                consonant_index = i;\n                break;\n    \
    \        }\n        }\n    }\n    if(vowel_found && consonant_found){\n      \
    \  let vowel_distance = vowel_index - consonant_index;\n        if(vowel_distance\
    \ < 0){\n            return \"\";\n        }\n        else if(vowel_distance >\
    \ 0){\n            return vowels[vowel_distance];\n        }\n        else{\n\
    \            return \"\";\n        }\n    }\n    else{\n        return \"\";\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpi5f17qnz.js:39\n        if(consonants.includes(word[i])){\n   \
    \     ^\n\nReferenceError: consonants is not defined\n    at get_closest_vowel\
    \ (/tmp/tmpi5f17qnz.js:39:9)\n    at test (/tmp/tmpi5f17qnz.js:75:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpi5f17qnz.js:90:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex2\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 1);\n    let vowelsIndexMinIndex2\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 1);\n    let vowelsIndexMaxIndex3\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 2);\n    let vowelsIndexMinIndex3\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 2);\n    let vowelsIndexMaxIndex4\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 3);\n    let vowelsIndexMinIndex4\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 3);\n    let vowelsIndexMaxIndex5\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 4);\n    let vowelsIndexMinIndex5\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 4);\n    let vowelsIndexMaxIndex6\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 5);\n    let vowelsIndexMinIndex6\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 5);\n    let vowelsIndexMaxIndex7\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 6);\n    let vowelsIndexMinIndex7\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 6);\n    let vowelsIndexMaxIndex8\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 7);\n    let vowelsIndexMinIndex8\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 7);\n    let vowelsIndexMaxIndex9\
    \ = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex + 8);\n    let vowelsIndexMinIndex9\
    \ = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex + 8);\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp14jtriuk.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n  \
    \  let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnlahcr8c.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex + vowelsCount;\n\
    \    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let vowelsIndex4 = vowelsIndex3\
    \ + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4 + vowelsCount;\n    let\
    \ vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let vowelsIndex7 = vowelsIndex6\
    \ + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7 + vowelsCount;\n    let\
    \ vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let vowelsIndex10 = vowelsIndex9\
    \ + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10 + vowelsCount;\n    let\
    \ vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let vowelsIndex13 = vowelsIndex12\
    \ + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13 + vowelsCount;\n    let\
    \ vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let vowelsIndex16 = vowelsIndex15\
    \ + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16 + vowelsCount;\n    let\
    \ vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let vowelsIndex19 = vowelsIndex18\
    \ + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19 + vowelsCount;\n    let\
    \ vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let vowelsIndex22 = vowelsIndex21\
    \ + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22 + vowelsCount;\n    let\
    \ vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let vowelsIndex25 = vowelsIndex24\
    \ + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25 + vowelsCount;\n    let\
    \ vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let vowelsIndex28 = vowelsIndex27\
    \ + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28 + vowelsCount;\n    let\
    \ vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let vowelsIndex31 = vowelsIndex30\
    \ + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31 + vowelsCount;\n    let\
    \ vowelsIndex\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphjb53kkg.js:50\n    let vowelsIndex\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n    let vowelsIndexCountMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMin = 0;\n    let vowelsIndexCountMinMax\
    \ = vowelsCount - 2;\n    let vowelsIndexCountMaxMin = vowelsCount - 3;\n    let\
    \ vowelsIndexCountMaxMinMax = vowelsCount - 4;\n    \n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            vowelsIndexCount++;\n\
    \            if(vowelsIndexCount >= vowelsIndexCountMax){\n                vowelsIndexCountMax\
    \ = vowelsIndexCount;\n            }\n            if(vowelsIndexCount <= vowelsIndexCountMin){\n\
    \                vowelsIndexCountMin = vowelsIndexCount;\n            }\n    \
    \        if(vowelsIndexCount >= vowelsIndexCountMinMax && vowelsIndexCount <=\
    \ vowelsIndexCountMaxMin){\n                vowelsIndexCountMaxMin = vowelsIndexCount;\n\
    \            }\n            if(vowelsIndexCount >= vowelsIndexCountMaxMinMax &&\
    \ vowelsIndexCount <= vowelsIndexCountMaxMinMax){\n                vowelsIndexCountMaxMinMax\
    \ = vowelsIndexCount;\n            }\n        }\n    }\n    \n    if(vowelsIndexCountMax\
    \ >= vowelsIndexCountMin){\n        return vowels[vowelsIndexCountMaxMin];\n \
    \   }\n    if(vowelsIndexCountMax >= vowelsIndexCountMinMax && vowelsIndexCountMax\
    \ <= vowelsIndexCountMaxMin){\n        return vowels[vowelsIndexCountMaxMinMax];\n\
    \    }\n    if(vowelsIndexCountMax >= vowelsIndexCountMinMax && vowelsIndexCountMax\
    \ <= vowelsIndexCountMaxMinMax && vowelsIndexCountMin >= vowelsIndexCountMaxMin){\n\
    \        return vowels[vowelsIndexCountMaxMinMax];\n    }\n    if(vowelsIndexCountMax\
    \ >= vowelsIndexCountMinMax && vowelsIndexCountMax <= vowelsIndexCountMaxMinMax\
    \ && vowelsIndexCountMin >= vowelsIndexCountMax){\n        return vowels[vowelsIndexCountMaxMinMax];\n\
    \    }\n    if(vowelsIndexCountMax >= vowelsIndexCountMinMax && vowelsIndexCountMax\
    \ <= vowelsIndexCountMaxMinMax && vowelsIndexCountMin <= vowelsIndexCountMax){\n\
    \        return vowels[vowelsIndexCountMaxMinMax];\n    }\n    if(vowels\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6ft7migc.js:60\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_min_index = 0;\n    let vowels_index_count_max_index\
    \ = 0;\n    let vowels_index_count_max_index = 0;\n    let vowels_index_count_min_index2\
    \ = 0;\n    let vowels_index_count_max_index2 = 0;\n    let vowels_index_count_max_index2\
    \ = 0;\n    let vowels_index_count_min_index3 = 0;\n    let vowels_index_count_max_index3\
    \ = 0;\n    let vowels_index_count_max_index3 = 0;\n    let vowels_index_count_min_index4\
    \ = 0;\n    let vowels_index_count_max_index4 = 0;\n    let vowels_index_count_max_index4\
    \ = 0;\n    let vowels_index_count_min_index5 = 0;\n    let vowels_index_count_max_index5\
    \ = 0;\n    let vowels_index_count_max_index5 = 0;\n    let vowels_index_count_min_index6\
    \ = 0;\n    let vowels_index_count_max_index6 = 0;\n    let vowels_index_count_max_index6\
    \ = 0;\n    let vowels_index_count_min_index7 = 0;\n    let vowels_index_count_max_index7\
    \ = 0;\n    let vowels_index_count_max_index7 = 0;\n    let vowels_index_count_min_index8\
    \ = 0;\n    let vowels_index_count_max_index8 = 0;\n    let vowels_index_count_max_index8\
    \ = 0;\n    let vowels_index_count_min_index9 = 0;\n    let vowels_index_count_max_index9\
    \ = 0;\n    let vowels_index_count_max_index9 = 0;\n    let vowels_index_count_min_index10\
    \ = 0;\n    let vowels_index_count_max_index10 = 0;\n    let vowels_index_count_max_index10\
    \ = 0;\n    let vowels_index_count_min_index11 = 0;\n    let vowels_index_count_max_index11\
    \ = 0;\n    let vowels_index_count_max_index11 = 0;\n    let vowels_index_count_min_index12\
    \ = 0;\n    let vowels_index_count_max_index12 = 0;\n    let vowels_index_count_max_index12\
    \ = 0;\n    let vowels_index_count_min_index13 = 0;\n    let vowels_index_count_max_index13\
    \ = 0;\n    let vowels_index_count_max_index13 = 0;\n    let vowels_index_count_min_index14\
    \ = 0;\n    let vowels_index_count_max_index14 = 0;\n    let vowels_index_count_max_index14\
    \ = 0;\n    let vowels_index_count_min_index15 = 0;\n    let vowels_index_count_max_index15\
    \ = 0;\n    let vowels_index_count_max_index15 = 0;\n    let vowels_index_count_min_index16\
    \ = 0;\n    let vowels_index_count_max_index16 = 0;\n    let vowels_index_count_max_index16\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfuwvaw8l.js:24\n    let vowels_index_count_max_index = 0;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowels_index_count_max_index' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle_right = vowels_count_from_middle + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_left = vowels_count_from_middle - vowels_count_from_left;\n\
    \    let vowels_count_from_middle_left_right = vowels_count_from_middle_left +\
    \ vowels_count_from_right;\n    let vowels_count_from_middle_right_left = vowels_count_from_middle_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left\
    \ = vowels_count_from_middle_left_right + vowels_count_from_left;\n    let vowels_count_from_middle_right_left_right\
    \ = vowels_count_from_middle_right_left + vowels_count_from_right;\n    let vowels_count_from_middle_left_right_left_right\
    \ = vowels_count_from_middle_left_right_left + vowels_count_from_right;\n    let\
    \ vowels_count_from_middle_right_left_right_left = vowels_count_from_middle_right_left_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left_right_left\
    \ = vowels_count_from_middle_left_right_left_right + vowels_count_from_left;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left = vowels_count_from_middle_right_left_right_left_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left_right_left\
    \ = vowels_count_from_middle_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left_right_left_right_left\
    \ = vowels_count_from_middle_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = vowels_count_from_middle_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_right_left_right_left_right_left + \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsuvfdg13.js:38\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinV\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjq8guifw.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex2\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex2 = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex3 = vowelsIndex.indexOf(vowelsIndexMax);\n    let\
    \ vowelsIndexMinIndex3 = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex4\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex4 = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex5 = vowelsIndex.indexOf(vowelsIndexMax);\n    let\
    \ vowelsIndexMinIndex5 = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex6\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex6 = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex7 = vowelsIndex.indexOf(vowelsIndexMax);\n    let\
    \ vowelsIndexMinIndex7 = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex8\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex8 = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex9 = vowelsIndex.indexOf(vowelsIndexMax);\n    let\
    \ vowelsIndexMinIndex9 = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex10\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex10 = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex11 = vowelsIndex.indexOf(vowelsIndexMax);\n    let\
    \ vowelsIndexMinIndex11 = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex12\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex12 = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp0s2_cy7.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(Math, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(Math, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyrao2jx4.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = word.length - vowel_count;\n    let vowel_count_from_left\
    \ = vowel_count - word.length;\n    let vowel_count_from_middle = word.length\
    \ - vowel_count_from_right;\n    let vowel_count_from_middle2 = word.length -\
    \ vowel_count_from_left;\n    let vowel_count_from_middle3 = word.length - vowel_count_from_right;\n\
    \    let vowel_count_from_middle4 = word.length - vowel_count_from_left;\n   \
    \ let vowel_count_from_middle5 = word.length - vowel_count_from_right;\n    let\
    \ vowel_count_from_middle6 = word.length - vowel_count_from_left;\n    let vowel_count_from_middle7\
    \ = word.length - vowel_count_from_right;\n    let vowel_count_from_middle8 =\
    \ word.length - vowel_count_from_left;\n    let vowel_count_from_middle9 = word.length\
    \ - vowel_count_from_right;\n    let vowel_count_from_middle10 = word.length -\
    \ vowel_count_from_left;\n    let vowel_count_from_middle11 = word.length - vowel_count_from_right;\n\
    \    let vowel_count_from_middle12 = word.length - vowel_count_from_left;\n  \
    \  let vowel_count_from_middle13 = word.length - vowel_count_from_right;\n   \
    \ let vowel_count_from_middle14 = word.length - vowel_count_from_left;\n    let\
    \ vowel_count_from_middle15 = word.length - vowel_count_from_right;\n    let vowel_count_from_middle16\
    \ = word.length - vowel_count_from_left;\n    let vowel_count_from_middle17 =\
    \ word.length - vowel_count_from_right;\n    let vowel_count_from_middle18 = word.length\
    \ - vowel_count_from_left;\n    let vowel_count_from_middle19 = word.length -\
    \ vowel_count_from_right;\n    let vowel_count_from_middle20 = word.length - vowel_count_from_left;\n\
    \    let vowel_count_from_middle21 = word.length - vowel_count_from_right;\n \
    \   let vowel_count_from_middle22 = word.length - vowel_count_from_left;\n   \
    \ let vowel_count_from_middle23 = word.length - vowel_count_from_right;\n    let\
    \ vowel_count_from_middle24 = word.length - vowel_count_from_left;\n    let vowel_count_from_middle25\
    \ = word.length - vowel_count_from_right;\n    let vowel_count_from_middle26 =\
    \ word.length - vowel_count_from_left;\n    let vowel_count_from_middle27 = word.length\
    \ - vowel_count_from_right;\n    let vowel_count_from_middle28 = word.length -\
    \ vowel_count_from_left;\n    let vowel_count_from_middle29 = word.length - vowel_count_from_right;\n\
    \    let vowel_count_from_middle30 = word.length - vowel_count_from_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6m0nittc.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count_from_middle + 1;\n    let vowels_count_from_middle3\
    \ = vowels_count_from_middle2 + 1;\n    let vowels_count_from_middle4 = vowels_count_from_middle3\
    \ + 1;\n    let vowels_count_from_middle5 = vowels_count_from_middle4 + 1;\n \
    \   let vowels_count_from_middle6 = vowels_count_from_middle5 + 1;\n    let vowels_count_from_middle7\
    \ = vowels_count_from_middle6 + 1;\n    let vowels_count_from_middle8 = vowels_count_from_middle7\
    \ + 1;\n    let vowels_count_from_middle9 = vowels_count_from_middle8 + 1;\n \
    \   let vowels_count_from_middle10 = vowels_count_from_middle9 + 1;\n    let vowels_count_from_middle11\
    \ = vowels_count_from_middle10 + 1;\n    let vowels_count_from_middle12 = vowels_count_from_middle11\
    \ + 1;\n    let vowels_count_from_middle13 = vowels_count_from_middle12 + 1;\n\
    \    let vowels_count_from_middle14 = vowels_count_from_middle13 + 1;\n    let\
    \ vowels_count_from_middle15 = vowels_count_from_middle14 + 1;\n    let vowels_count_from_middle16\
    \ = vowels_count_from_middle15 + 1;\n    let vowels_count_from_middle17 = vowels_count_from_middle16\
    \ + 1;\n    let vowels_count_from_middle18 = vowels_count_from_middle17 + 1;\n\
    \    let vowels_count_from_middle19 = vowels_count_from_middle18 + 1;\n    let\
    \ vowels_count_from_middle20 = vowels_count_from_middle19 + 1;\n    let vowels_count_from_middle21\
    \ = vowels_count_from_middle20 + 1;\n    let vowels_count_from_middle22 = vowels_count_from_middle21\
    \ + 1;\n    let vowels_count_from_middle23 = vowels_count_from_middle22 + 1;\n\
    \    let vowels_count_from_middle24 = vowels_count_from_middle23 + 1;\n    let\
    \ vowels_count_from_middle25 = vowels_count_from_middle24 + 1;\n    let vowels_count_from_middle26\
    \ = vowels_count_from_middle25 + 1;\n    let vowels_count_from_middle27 = vowels_count_from_middle26\
    \ + 1;\n    let vowels_count_from_middle28 = vowels_count_from_middle27 + 1;\n\
    \    let vowels_count_from_middle29 = vowels_count_from_middle28 + 1;\n    let\
    \ vowels_count_from_middle30 = vowels_count_from_middle29 + 1;\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphzjvukkg.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels_count = vowels.length;\n    \n    for(var i = 0; i < word.length;\
    \ i++){\n        if(word[i] === \"a\"){\n            if(i+1 < word.length && word[i+1]\
    \ === \"e\"){\n                return word[i];\n            }\n        }\n   \
    \     if(word[i] === \"e\"){\n            if(i+1 < word.length && word[i+1] ===\
    \ \"i\"){\n                return word[i];\n            }\n        }\n       \
    \ if(word[i] === \"i\"){\n            if(i+1 < word.length && word[i+1] === \"\
    o\"){\n                return word[i];\n            }\n        }\n        if(word[i]\
    \ === \"o\"){\n            if(i+1 < word.length && word[i+1] === \"u\"){\n   \
    \             return word[i];\n            }\n        }\n        if(word[i] ===\
    \ \"u\"){\n            if(i+1 < word.length && word[i+1] === \"a\"){\n       \
    \         return word[i];\n            }\n        }\n    }\n    return \"\";\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpim7dgkn6.js:55:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpim7dgkn6.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpte6vhviz.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxVowel = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel\
    \ = vowels[vowelsIndexMin];\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowel\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp09dqyh_7.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_array = vowels.split(\"\");\n\
    \    let vowels_array_length = vowels_array.length;\n    let vowels_array_index\
    \ = word.lastIndexOf(\"e\");\n    let vowels_array_index_2 = word.lastIndexOf(\"\
    i\");\n    let vowels_array_index_3 = word.lastIndexOf(\"o\");\n    let vowels_array_index_4\
    \ = word.lastIndexOf(\"u\");\n    let vowels_array_index_5 = word.lastIndexOf(\"\
    A\");\n    let vowels_array_index_6 = word.lastIndexOf(\"E\");\n    let vowels_array_index_7\
    \ = word.lastIndexOf(\"I\");\n    let vowels_array_index_8 = word.lastIndexOf(\"\
    O\");\n    let vowels_array_index_9 = word.lastIndexOf(\"U\");\n    let vowels_array_index_10\
    \ = word.lastIndexOf(\"a\");\n    let vowels_array_index_11 = word.lastIndexOf(\"\
    e\");\n    let vowels_array_index_12 = word.lastIndexOf(\"i\");\n    let vowels_array_index_13\
    \ = word.lastIndexOf(\"o\");\n    let vowels_array_index_14 = word.lastIndexOf(\"\
    u\");\n    let vowels_array_index_15 = word.lastIndexOf(\"A\");\n    let vowels_array_index_16\
    \ = word.lastIndexOf(\"E\");\n    let vowels_array_index_17 = word.lastIndexOf(\"\
    I\");\n    let vowels_array_index_18 = word.lastIndexOf(\"O\");\n    let vowels_array_index_19\
    \ = word.lastIndexOf(\"U\");\n    let vowels_array_index_20 = word.lastIndexOf(\"\
    a\");\n    let vowels_array_index_21 = word.lastIndexOf(\"e\");\n    let vowels_array_index_22\
    \ = word.lastIndexOf(\"i\");\n    let vowels_array_index_23 = word.lastIndexOf(\"\
    o\");\n    let vowels_array_index_24 = word.lastIndexOf(\"u\");\n    let vowels_array_index_25\
    \ = word.lastIndexOf(\"A\");\n    let vowels_array_index_26 = word.lastIndexOf(\"\
    E\");\n    let vowels_array_index_27 = word.lastIndexOf(\"I\");\n    let vowels_array_index_28\
    \ = word.lastIndexOf(\"O\");\n    let vowels_array_index_29 = word.lastIndexOf(\"\
    U\");\n    let vowels_array_index_30 = word.lastIndexOf(\"a\");\n    let vowels_array_index_31\
    \ = word.lastIndexOf(\"e\");\n    let vowels_array_index_32 = word.lastIndexOf(\"\
    i\");\n    let vowels_array_index_33 = word.lastIndexOf(\"o\");\n    let vowels_array_index_34\
    \ = word.lastIndexOf(\"u\");\n    let vowels_array_index_35 = word.lastIndexOf(\"\
    A\");\n    let vowels_array_index_36 = word.lastIndexOf\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc1qquo1y.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle2 = vowels_count / 2;\n    var vowels_count_from_middle3\
    \ = vowels_count / 3;\n    var vowels_count_from_middle4 = vowels_count / 4;\n\
    \    var vowels_count_from_middle5 = vowels_count / 5;\n    var vowels_count_from_middle6\
    \ = vowels_count / 6;\n    var vowels_count_from_middle7 = vowels_count / 7;\n\
    \    var vowels_count_from_middle8 = vowels_count / 8;\n    var vowels_count_from_middle9\
    \ = vowels_count / 9;\n    var vowels_count_from_middle10 = vowels_count / 10;\n\
    \    var vowels_count_from_middle11 = vowels_count / 11;\n    var vowels_count_from_middle12\
    \ = vowels_count / 12;\n    var vowels_count_from_middle13 = vowels_count / 13;\n\
    \    var vowels_count_from_middle14 = vowels_count / 14;\n    var vowels_count_from_middle15\
    \ = vowels_count / 15;\n    var vowels_count_from_middle16 = vowels_count / 16;\n\
    \    var vowels_count_from_middle17 = vowels_count / 17;\n    var vowels_count_from_middle18\
    \ = vowels_count / 18;\n    var vowels_count_from_middle19 = vowels_count / 19;\n\
    \    var vowels_count_from_middle20 = vowels_count / 20;\n    var vowels_count_from_middle21\
    \ = vowels_count / 21;\n    var vowels_count_from_middle22 = vowels_count / 22;\n\
    \    var vowels_count_from_middle23 = vowels_count / 23;\n    var vowels_count_from_middle24\
    \ = vowels_count / 24;\n    var vowels_count_from_middle25 = vowels_count / 25;\n\
    \    var vowels_count_from_middle26 = vowels_count / 26;\n    var vowels_count_from_middle27\
    \ = vowels_count / 27;\n    var vowels_count_from_middle28 = vowels_count / 28;\n\
    \    var vowels_count_from_middle29 = vowels_count / 29;\n    var vowels_count_from_middle30\
    \ = vowels_count / 30;\n    var vowels_count_from_middle31 = vowels_count / 31;\n\
    \    var vowels_count_from_middle32 = vowels_count / 32;\n    var vowels_count_from_middle33\
    \ = vowels_count / 33;\n    var vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyr9r1lmk.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = 0;\n\tlet vowels_count_from_middle = 0;\n\tlet vowels_count_from_middle2 =\
    \ 0;\n\tlet vowels_count_from_middle3 = 0;\n\tlet vowels_count_from_middle4 =\
    \ 0;\n\tlet vowels_count_from_middle5 = 0;\n\tlet vowels_count_from_middle6 =\
    \ 0;\n\tlet vowels_count_from_middle7 = 0;\n\tlet vowels_count_from_middle8 =\
    \ 0;\n\tlet vowels_count_from_middle9 = 0;\n\tlet vowels_count_from_middle10 =\
    \ 0;\n\tlet vowels_count_from_middle11 = 0;\n\tlet vowels_count_from_middle12\
    \ = 0;\n\tlet vowels_count_from_middle13 = 0;\n\tlet vowels_count_from_middle14\
    \ = 0;\n\tlet vowels_count_from_middle15 = 0;\n\tlet vowels_count_from_middle16\
    \ = 0;\n\tlet vowels_count_from_middle17 = 0;\n\tlet vowels_count_from_middle18\
    \ = 0;\n\tlet vowels_count_from_middle19 = 0;\n\tlet vowels_count_from_middle20\
    \ = 0;\n\tlet vowels_count_from_middle21 = 0;\n\tlet vowels_count_from_middle22\
    \ = 0;\n\tlet vowels_count_from_middle23 = 0;\n\tlet vowels_count_from_middle24\
    \ = 0;\n\tlet vowels_count_from_middle25 = 0;\n\tlet vowels_count_from_middle26\
    \ = 0;\n\tlet vowels_count_from_middle27 = 0;\n\tlet vowels_count_from_middle28\
    \ = 0;\n\tlet vowels_count_from_middle29 = 0;\n\tlet vowels_count_from_middle30\
    \ = 0;\n\tlet vowels_count_from_middle31 = 0;\n\tlet vowels_count_from_middle32\
    \ = 0;\n\tlet vowels_count_from_middle33 = 0;\n\tlet vowels_count_from_middle34\
    \ = 0;\n\tlet vowels_count_from_middle35 = 0;\n\tlet vowels_count_from_middle36\
    \ = 0;\n\tlet vowels_count_from_middle37 = 0;\n\tlet vowels_count_from_middle38\
    \ = 0;\n\tlet vowels_count_from_middle39 = 0;\n\tlet vowels_count_from_middle40\
    \ = 0;\n\tlet vowels_count_from_middle41 = 0;\n\tlet vowels_count_from_middle42\
    \ = 0;\n\tlet vowels_count_from_middle43 = 0;\n\tlet vowels_count_from_middle44\
    \ = 0;\n\tlet vowels_count_from_middle45 = 0;\n\tlet vowels_count_from_middle46\
    \ = 0;\n\tlet vowels_count_from_middle47 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpud7usf0j.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndex\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_xoz9022.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpanzqya61.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n\
    \  let vowelsCountRight = vowelsCount - 1;\n  let vowelsCountLeft = vowelsCount\
    \ - 2;\n  let vowelsCountRightLeft = vowelsCount - 3;\n  let vowelsCountRightRight\
    \ = vowelsCount - 4;\n  let vowelsCountLeftRight = vowelsCount - 5;\n  let vowelsCountLeftLeft\
    \ = vowelsCount - 6;\n  let vowelsCountLeftRightLeft = vowelsCount - 7;\n  let\
    \ vowelsCountRightLeftLeft = vowelsCount - 8;\n  let vowelsCountRightRightLeft\
    \ = vowelsCount - 9;\n  let vowelsCountLeftLeftRight = vowelsCount - 10;\n  let\
    \ vowelsCountLeftRightLeftRight = vowelsCount - 11;\n  let vowelsCountRightLeftLeftRight\
    \ = vowelsCount - 12;\n  let vowelsCountRightRightLeftRight = vowelsCount - 13;\n\
    \  let vowelsCountLeftLeftRightLeftRight = vowelsCount - 14;\n  let vowelsCountLeftRightLeftRightLeftRight\
    \ = vowelsCount - 15;\n  let vowelsCountRightLeftLeftRightLeftRight = vowelsCount\
    \ - 16;\n  let vowelsCountRightRightLeftRightLeftRight = vowelsCount - 17;\n \
    \ let vowelsCountLeftLeftRightLeftRightLeftRight = vowelsCount - 18;\n  let vowelsCountLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 19;\n  let vowelsCountRightLeftLeftRightLeftRightLeftRight =\
    \ vowelsCount - 20;\n  let vowelsCountRightRightLeftRightLeftRightLeftRightRight\
    \ = vowelsCount - 21;\n  let vowelsCountLeftLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 22;\n  let vowelsCountLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 23;\n  let vowelsCountRightLeftLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 24;\n  let vowelsCountRightRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 25;\n  let vowelsCountLeftLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 26;\n  let vowelsCountLeftRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 27;\n  let vowelsCountRightLeftLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 28;\n  let vowelsCountRightRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdmg1973e.js:47\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_count = vowels.length;\n\
    \  let vowels_count_from_right = vowels_count - 1;\n  let vowels_count_from_left\
    \ = vowels_count - 1;\n  let vowels_count_from_middle = vowels_count - 1;\n  let\
    \ vowels_count_from_left_to_right = vowels_count - 1;\n  let vowels_count_from_right_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_middle_to_right = vowels_count\
    \ - 1;\n  let vowels_count_from_left_to_middle = vowels_count - 1;\n  let vowels_count_from_right_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_middle_to_left = vowels_count -\
    \ 1;\n  let vowels_count_from_left_to_right_to_middle = vowels_count - 1;\n  let\
    \ vowels_count_from_right_to_left_to_middle = vowels_count - 1;\n  let vowels_count_from_middle_to_right_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - 1;\n  let vowels_count_from_right_to_middle_to_left = vowels_count - 1;\n\
    \  let vowels_count_from_middle_to_left_to_right = vowels_count - 1;\n  let vowels_count_from_left_to_right_to_middle_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_right_to_left_to_middle_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_left_to_middle_to_right_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 1;\n  let vowels_count_from_left_to_right_to_middle_to_middle_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_right_to_left_to_middle_to_middle_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_left_to_middle_to_right_to_middle_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_right_to_middle_to_left_to_middle_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count - 1;\n  let vowels_count_from_left_to_right_to_middle_to_middle_to_left_to_right\
    \ = vowels_count - 1;\n  let vowels_count_from_right_to_left_to_middle_to_middle_to_left_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd06j42rx.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max_min = 0;\n    var vowels_index_count_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min = 0;\n    var vowels_index_count_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min = 0;\n    var vowels_index_count_max_min_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min = 0;\n    var\
    \ vowels_index_count_max_min_max_min_max_min_max_min = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max = 0;\n\
    \    var vowels_index_count_max_min_max_min_max_min_max_min_max_min = 0;\n   \
    \ var vowels_index_count_max_min_max_min_max_min_max_min_max_min = 0;\n    var\
    \ vowels_index_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var\
    \ vowels_index_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var\
    \ vowels_index_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var\
    \ vowels_index_count_max_min_max_min_max_min_max_min_max_min_max = 0;\n    var\
    \ vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n  \
    \  var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n\
    \    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = 0;\n    var vowels_index_count_max_min_max_min_max_min_max_min_max_min_max_min_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn0z1y5ms.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   for(let i = 0; i < word.length; i++){\n        if(vowelsIndex.indexOf(word[i])\
    \ === -1){\n            vowelsIndex.push(word[i]);\n            vowelsIndexCount++;\n\
    \        }\n    }\n    for(let i = 0; i < vowelsIndexCount; i++){\n        if(vowelsIndex[i]\
    \ === word[vowelsIndex.length -1 -i]){\n            vowelsIndex.splice(vowelsIndex.indexOf(word[vowelsIndex.length\
    \ -1 -i]), 1);\n            vowelsIndexCount--;\n        }\n    }\n    if(vowelsIndexCount\
    \ === 0){\n        return \"\";\n    }\n    let vowelsIndexArray = vowelsIndex.sort();\n\
    \    let vowelsIndexArrayCount = vowelsIndexArray.length;\n    let vowelsIndexArrayIndex\
    \ = 0;\n    let vowelsIndexArrayIndexCount = 0;\n    for(let i = 0; i < vowelsIndexArrayCount;\
    \ i++){\n        if(vowelsIndexArray[i] === word[vowelsIndexArray.length -1 -i]){\n\
    \            vowelsIndexArrayIndex++;\n            vowelsIndexArrayIndexCount++;\n\
    \        }\n    }\n    if(vowelsIndexArrayIndexCount === 0){\n        return \"\
    \";\n    }\n    let vowelsIndexArrayIndex = vowelsIndexArrayIndex - 1;\n    let\
    \ vowelsIndexArrayIndexCount = vowelsIndexArrayIndexCount;\n    let vowelsIndexArrayIndexCount2\
    \ = vowelsIndexArrayIndexCount;\n    for(let i = 0; i < vowelsIndexArrayCount;\
    \ i++){\n        if(vowelsIndexArray[i] === word[vowelsIndexArray.length -1 -i]){\n\
    \            vowelsIndexArrayIndexCount--;\n            vowelsIndexArrayIndexCount2--;\n\
    \        }\n    }\n    if(vowelsIndexArrayIndexCount === 0){\n        return \"\
    \";\n    }\n    let vowelsIndexArrayIndex2 = vowelsIndexArrayIndex - 1;\n    let\
    \ vowelsIndexArrayIndexCount2 = vowelsIndexArrayIndexCount;\n    for(let i = 0;\
    \ i < vowelsIndexArrayCount; i++){\n        if(vowelsIndexArray[i] === word[vowelsIndexArray.length\
    \ -1 -i]){\n            vowelsIndexArrayIndexCount--;\n            vowelsIndexArrayIndexCount2--;\n\
    \        }\n    }\n    if(vowelsIndexArrayIndexCount === 0){\n        return \"\
    \";\n    }\n    let vowelsIndexArrayIndex3 = vowelsIndexArrayIndex - 1;\n    let\
    \ vowelsIndexArrayIndexCount3 = vowelsIndexArrayIndexCount;\n    \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo2cnb1f9.js:48\n    let vowelsIndexArrayIndex = vowelsIndexArrayIndex\
    \ - 1;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexArrayIndex' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max1 =\
    \ 0;\n    let vowels_index_count_min1 = 0;\n    let vowels_index_count_max2 =\
    \ 0;\n    let vowels_index_count_min2 = 0;\n    let vowels_index_count_max3 =\
    \ 0;\n    let vowels_index_count_min3 = 0;\n    let vowels_index_count_max4 =\
    \ 0;\n    let vowels_index_count_min4 = 0;\n    let vowels_index_count_max5 =\
    \ 0;\n    let vowels_index_count_min5 = 0;\n    let vowels_index_count_max6 =\
    \ 0;\n    let vowels_index_count_min6 = 0;\n    let vowels_index_count_max7 =\
    \ 0;\n    let vowels_index_count_min7 = 0;\n    let vowels_index_count_max8 =\
    \ 0;\n    let vowels_index_count_min8 = 0;\n    let vowels_index_count_max9 =\
    \ 0;\n    let vowels_index_count_min9 = 0;\n    let vowels_index_count_max10 =\
    \ 0;\n    let vowels_index_count_min10 = 0;\n    let vowels_index_count_max11\
    \ = 0;\n    let vowels_index_count_min11 = 0;\n    let vowels_index_count_max12\
    \ = 0;\n    let vowels_index_count_min12 = 0;\n    let vowels_index_count_max13\
    \ = 0;\n    let vowels_index_count_min13 = 0;\n    let vowels_index_count_max14\
    \ = 0;\n    let vowels_index_count_min14 = 0;\n    let vowels_index_count_max15\
    \ = 0;\n    let vowels_index_count_min15 = 0;\n    let vowels_index_count_max16\
    \ = 0;\n    let vowels_index_count_min16 = 0;\n    let vowels_index_count_max17\
    \ = 0;\n    let vowels_index_count_min17 = 0;\n    let vowels_index_count_max18\
    \ = 0;\n    let vowels_index_count_min18 = 0;\n    let vowels_index_count_max19\
    \ = 0;\n    let vowels_index_count_min19 = 0;\n    let vowels_index_count_max20\
    \ = 0;\n    let vowels_index_count_min20 = 0;\n    let vowels_index_count_max21\
    \ = 0;\n    let vowels_index_count_min21 = 0;\n    let vowels_index_count_max22\
    \ = 0;\n    let vowels_index_count_min22 = 0;\n    let vowels_index_count_max23\
    \ = 0;\n    let vowels_index_count_min23 = 0;\n    let vowels_index_count_max24\
    \ = 0;\n    let vowels_index_count_min24 = 0;\n    let vowels_index_count_max25\
    \ = 0;\n    let vowels_index_count_min25 = 0;\n    let vowels_index_count_max26\
    \ = 0;\n    let vowels_index_count_min26 = 0;\n    let vowels_index_count_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy2o2_unx.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpryxm7jyo.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   let vowelsIndexCountMax = vowelsCount - 1;\n    let vowelsIndexCountMin =\
    \ 0;\n    let vowelsIndexCountMinMax = vowelsCount - 2;\n    for(let i = 0; i\
    \ < vowelsCount; i++){\n        if(vowels.indexOf(word[i]) > -1){\n          \
    \  vowelsIndex.push(i);\n        }\n    }\n    for(let i = vowelsIndexCountMin;\
    \ i < vowelsIndexCountMax; i++){\n        if(vowelsIndex.indexOf(i) > -1){\n \
    \           vowelsIndexCount++;\n        }\n    }\n    for(let i = vowelsIndexCountMax;\
    \ i > vowelsIndexCountMin; i--){\n        if(vowelsIndex.indexOf(i) > -1){\n \
    \           vowelsIndexCount--;\n        }\n    }\n    for(let i = vowelsIndexCountMinMax;\
    \ i > vowelsIndexCountMin; i--){\n        if(vowelsIndex.indexOf(i) > -1){\n \
    \           vowelsIndexCount--;\n        }\n    }\n    if(vowelsIndexCount ===\
    \ 0){\n        return \"\";\n    }\n    let vowelsIndexCountMinMax = vowelsIndexCount\
    \ - 2;\n    let vowelsIndexCountMin = vowelsIndexCount - 1;\n    let vowelsIndexCountMax\
    \ = vowelsIndexCount - 1;\n    let vowelsIndexCountMaxMin = vowelsIndexCount -\
    \ 2;\n    let vowelsIndexCountMinMax = vowelsIndexCount - 3;\n    let vowelsIndexCountMinMaxMin\
    \ = vowelsIndexCount - 4;\n    let vowelsIndexCountMinMaxMinMax = vowelsIndexCount\
    \ - 5;\n    let vowelsIndexCountMinMaxMinMaxMin = vowelsIndexCount - 6;\n    let\
    \ vowelsIndexCountMinMaxMinMaxMinMax = vowelsIndexCount - 7;\n    let vowelsIndexCountMinMaxMinMaxMinMaxMin\
    \ = vowelsIndexCount - 8;\n    let vowelsIndexCountMinMaxMinMaxMinMaxMinMax =\
    \ vowelsIndexCount - 9;\n    let vowelsIndexCountMinMaxMinMaxMinMaxMinMax = vowelsIndexCount\
    \ - 10;\n    let vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMin = vowelsIndexCount\
    \ - 11;\n    let vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = vowelsIndexCount\
    \ - 12;\n    let vowelsIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = vowelsIndexCount\
    \ - \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8nrj6q9i.js:46\n    let vowelsIndexCountMinMax = vowelsIndexCount\
    \ - 2;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexCountMinMax' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = vowelsIndexCount + 1;\n    let vowelsIndexCountMin\
    \ = vowelsIndexCount - 1;\n    let vowelsIndexCountMinMax = vowelsIndexCountMin\
    \ + 1;\n    let vowelsIndexCountMaxMin = vowelsIndexCountMax + 1;\n    let vowelsIndexCountMinMaxMin\
    \ = vowelsIndexCountMinMax + 1;\n    let vowelsIndexCountMaxMinMax = vowelsIndexCountMaxMin\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMin = vowelsIndexCountMaxMinMax + 1;\n\
    \    let vowelsIndexCountMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMin + 1;\n\
    \    let vowelsIndexCountMaxMinMaxMinMaxMin = vowelsIndexCountMaxMinMaxMinMax\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMinMaxMin\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMinMaxMinMax\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMin = vowelsIndexCountMaxMinMaxMinMaxMinMaxMin\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMin = vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax;\n\
    \    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ + 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax;\n\
    \    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsIndexCountMaxMinMaxMinMax\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp96dpf7lc.js:30\n    let vowelsIndexCountMaxMinMaxMinMaxMinMax =\
    \ vowelsIndexCountMaxMinMaxMinMaxMinMax + 1;\n        ^\n\nSyntaxError: Identifier\
    \ 'vowelsIndexCountMaxMinMaxMinMaxMinMax' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2\n\
    \    let vowelsCount4 = vowelsCount-3\n    let vowelsCount5 = vowelsCount-4\n\
    \    let vowelsCount6 = vowelsCount-5\n    let vowelsCount7 = vowelsCount-6\n\
    \    let vowelsCount8 = vowelsCount-7\n    let vowelsCount9 = vowelsCount-8\n\
    \    let vowelsCount10 = vowelsCount-9\n    let vowelsCount11 = vowelsCount-10\n\
    \    let vowelsCount12 = vowelsCount-11\n    let vowelsCount13 = vowelsCount-12\n\
    \    let vowelsCount14 = vowelsCount-13\n    let vowelsCount15 = vowelsCount-14\n\
    \    let vowelsCount16 = vowelsCount-15\n    let vowelsCount17 = vowelsCount-16\n\
    \    let vowelsCount18 = vowelsCount-17\n    let vowelsCount19 = vowelsCount-18\n\
    \    let vowelsCount20 = vowelsCount-19\n    let vowelsCount21 = vowelsCount-20\n\
    \    let vowelsCount22 = vowelsCount-21\n    let vowelsCount23 = vowelsCount-22\n\
    \    let vowelsCount24 = vowelsCount-23\n    let vowelsCount25 = vowelsCount-24\n\
    \    let vowelsCount26 = vowelsCount-25\n    let vowelsCount27 = vowelsCount-26\n\
    \    let vowelsCount28 = vowelsCount-27\n    let vowelsCount29 = vowelsCount-28\n\
    \    let vowelsCount30 = vowelsCount-29\n    let vowelsCount31 = vowelsCount-30\n\
    \    let vowelsCount32 = vowelsCount-31\n    let vowelsCount33 = vowelsCount-32\n\
    \    let vowelsCount34 = vowelsCount-33\n    let vowelsCount35 = vowelsCount-34\n\
    \    let vowelsCount36 = vowelsCount-35\n    let vowelsCount37 = vowelsCount-36\n\
    \    let vowelsCount38 = vowelsCount-37\n    let vowelsCount39 = vowelsCount-38\n\
    \    let vowelsCount40 = vowelsCount-39\n    let vowelsCount41 = vowelsCount-40\n\
    \    let vowelsCount42 = vowelsCount-41\n    let vowelsCount43 = vowelsCount-42\n\
    \    let vowelsCount44 = vowelsCount-43\n    let vowelsCount45 = vowel\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb1n0aa2j.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_left_to_right = vowels_count - 4;\n\tlet vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n\tlet vowels_count_from_left_to_middle = vowels_count - 7;\n\tlet vowels_count_from_right_to_middle\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle_to_left = vowels_count -\
    \ 9;\n\tlet vowels_count_from_left_to_right_to_middle = vowels_count - 10;\n\t\
    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\tlet vowels_count_from_middle_to_right_to_left\
    \ = vowels_count - 12;\n\tlet vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - 13;\n\tlet vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n\
    \tlet vowels_count_from_middle_to_left_to_right = vowels_count - 15;\n\tlet vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n\tlet vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 18;\n\tlet vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n\tlet vowels_count_from_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n\tlet vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n\tlet vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n\tlet vowels_count_from_left_to_middle_to_right_to_left_to_right\
    \ = vowels_count - 25;\n\tlet vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n\tlet vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0cnyrtjk.js:65\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle2 = vowels_count / 2;\n    var vowels_count_from_middle3\
    \ = vowels_count / 2;\n    var vowels_count_from_middle4 = vowels_count / 2;\n\
    \    var vowels_count_from_middle5 = vowels_count / 2;\n    var vowels_count_from_middle6\
    \ = vowels_count / 2;\n    var vowels_count_from_middle7 = vowels_count / 2;\n\
    \    var vowels_count_from_middle8 = vowels_count / 2;\n    var vowels_count_from_middle9\
    \ = vowels_count / 2;\n    var vowels_count_from_middle10 = vowels_count / 2;\n\
    \    var vowels_count_from_middle11 = vowels_count / 2;\n    var vowels_count_from_middle12\
    \ = vowels_count / 2;\n    var vowels_count_from_middle13 = vowels_count / 2;\n\
    \    var vowels_count_from_middle14 = vowels_count / 2;\n    var vowels_count_from_middle15\
    \ = vowels_count / 2;\n    var vowels_count_from_middle16 = vowels_count / 2;\n\
    \    var vowels_count_from_middle17 = vowels_count / 2;\n    var vowels_count_from_middle18\
    \ = vowels_count / 2;\n    var vowels_count_from_middle19 = vowels_count / 2;\n\
    \    var vowels_count_from_middle20 = vowels_count / 2;\n    var vowels_count_from_middle21\
    \ = vowels_count / 2;\n    var vowels_count_from_middle22 = vowels_count / 2;\n\
    \    var vowels_count_from_middle23 = vowels_count / 2;\n    var vowels_count_from_middle24\
    \ = vowels_count / 2;\n    var vowels_count_from_middle25 = vowels_count / 2;\n\
    \    var vowels_count_from_middle26 = vowels_count / 2;\n    var vowels_count_from_middle27\
    \ = vowels_count / 2;\n    var vowels_count_from_middle28 = vowels_count / 2;\n\
    \    var vowels_count_from_middle29 = vowels_count / 2;\n    var vowels_count_from_middle30\
    \ = vowels_count / 2;\n    var vowels_count_from_middle31 = vowels_count / 2;\n\
    \    var vowels_count_from_middle32 = vowels_count / 2;\n    var vowels_count_from_middle33\
    \ = vowels_count / 2;\n    var vowels_count_from_middle34 = vowels_count / 2;\n\
    \    var vowels_count_from_middle35\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxy0e9cfx.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle_to_right = vowels_count_from_middle + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_to_left = vowels_count_from_middle - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count_from_middle_to_left\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left - vowels_count_from_left;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_left + vowels_count_from_middle;\n   \
    \ var vowels_count_from_middle_to_left_to_right_to_middle_to_right = vowels_count_from_middle_to_left_to_right_to_middle\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left =\
    \ vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left + vowels_count_from_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ + vowels_count_from_middle;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_left\
    \ = vowels_count_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjjmtb91c.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp39dgugob.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_max = 0;\n    var vowels_index_min = 0;\n    var vowels_index_min_index\
    \ = 0;\n    var vowels_index_max_index = 0;\n    var vowels_index_min_count =\
    \ 0;\n    var vowels_index_max_count = 0;\n    var vowels_index_min_max = 0;\n\
    \    var vowels_index_max_max = 0;\n    var vowels_index_min_max_index = 0;\n\
    \    var vowels_index_max_max_index = 0;\n    var vowels_index_min_max_count =\
    \ 0;\n    var vowels_index_max_max_count = 0;\n    var vowels_index_min_max_max\
    \ = 0;\n    var vowels_index_max_max_max = 0;\n    var vowels_index_min_max_max_index\
    \ = 0;\n    var vowels_index_max_max_max_index = 0;\n    var vowels_index_min_max_max_count\
    \ = 0;\n    var vowels_index_max_max_max_count = 0;\n    var vowels_index_min_max_max_max\
    \ = 0;\n    var vowels_index_max_max_max_max = 0;\n    var vowels_index_min_max_max_max_index\
    \ = 0;\n    var vowels_index_max_max_max_max_index = 0;\n    var vowels_index_min_max_max_max_count\
    \ = 0;\n    var vowels_index_max_max_max_max_count = 0;\n    var vowels_index_min_max_max_max_max\
    \ = 0;\n    var vowels_index_max_max_max_max_max = 0;\n    var vowels_index_min_max_max_max_max_index\
    \ = 0;\n    var vowels_index_max_max_max_max_max_index = 0;\n    var vowels_index_min_max_max_max_max_count\
    \ = 0;\n    var vowels_index_max_max_max_max_max_count = 0;\n    var vowels_index_min_max_max_max_max_max\
    \ = 0;\n    var vowels_index_max_max_max_max_max_max = 0;\n    var vowels_index_min_max_max_max_max_max_index\
    \ = 0;\n    var vowels_index_max_max_max_max_max_max_index = 0;\n    var vowels_index_min_max_max_max_max_max_count\
    \ = 0;\n    var vowels_index_max_max_max_max_max_count = 0;\n    var vowels_index_min_max_max_max_max_max\
    \ = 0;\n    var vowels_index_max_max_max_max_max_max = 0;\n    var vowels_index_min_max_max_max_max_max_index\
    \ = 0;\n    var vowels_index_max_max_max_max_max_max_index = 0;\n    var vowels_index_min_max_max_max_max_max_count\
    \ = 0;\n    var vowels_index_max_max_max_max_max_count = 0;\n    var vowels_index_min_max_max_max_max_max\
    \ = 0;\n    var vowels_index_max_max_max_max_max_max = 0;\n    var vowels_index_min_max_max_max_max_max_index\
    \ = 0;\n    var vowels_index_max_max_max_max_max_max_index = 0;\n    var vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmt22l2x4.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    var vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_left_to_right = vowels_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzdl343hm.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    let vowels_index_count_max2 =\
    \ 0;\n    let vowels_index_count_min2 = 0;\n    let vowels_index_count_max3 =\
    \ 0;\n    let vowels_index_count_min3 = 0;\n    let vowels_index_count_max4 =\
    \ 0;\n    let vowels_index_count_min4 = 0;\n    let vowels_index_count_max5 =\
    \ 0;\n    let vowels_index_count_min5 = 0;\n    let vowels_index_count_max6 =\
    \ 0;\n    let vowels_index_count_min6 = 0;\n    let vowels_index_count_max7 =\
    \ 0;\n    let vowels_index_count_min7 = 0;\n    let vowels_index_count_max8 =\
    \ 0;\n    let vowels_index_count_min8 = 0;\n    let vowels_index_count_max9 =\
    \ 0;\n    let vowels_index_count_min9 = 0;\n    let vowels_index_count_max10 =\
    \ 0;\n    let vowels_index_count_min10 = 0;\n    let vowels_index_count_max11\
    \ = 0;\n    let vowels_index_count_min11 = 0;\n    let vowels_index_count_max12\
    \ = 0;\n    let vowels_index_count_min12 = 0;\n    let vowels_index_count_max13\
    \ = 0;\n    let vowels_index_count_min13 = 0;\n    let vowels_index_count_max14\
    \ = 0;\n    let vowels_index_count_min14 = 0;\n    let vowels_index_count_max15\
    \ = 0;\n    let vowels_index_count_min15 = 0;\n    let vowels_index_count_max16\
    \ = 0;\n    let vowels_index_count_min16 = 0;\n    let vowels_index_count_max17\
    \ = 0;\n    let vowels_index_count_min17 = 0;\n    let vowels_index_count_max18\
    \ = 0;\n    let vowels_index_count_min18 = 0;\n    let vowels_index_count_max19\
    \ = 0;\n    let vowels_index_count_min19 = 0;\n    let vowels_index_count_max20\
    \ = 0;\n    let vowels_index_count_min20 = 0;\n    let vowels_index_count_max21\
    \ = 0;\n    let vowels_index_count_min21 = 0;\n    let vowels_index_count_max22\
    \ = 0;\n    let vowels_index_count_min22 = 0;\n    let vowels_index_count_max23\
    \ = 0;\n    let vowels_index_count_min23 = 0;\n    let vowels_index_count_max24\
    \ = 0;\n    let vowels_index_count_min24 = 0;\n    let vowels_index_count_max25\
    \ = 0;\n    let vowels_index_count_min25 = 0;\n    let vowels_index_count_max26\
    \ = 0;\n    let vowels_index_count_min26 = 0;\n    let vowels_index_count_max27\
    \ = 0;\n    let vowels_index_count_min27 = 0;\n    let vowels_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphfhpef5_.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n    let vowelsCountMin\
    \ = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n    let vowelsCountMaxIndex\
    \ = 0;\n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsCount++;\n            vowelsIndex++;\n        }\n        if(vowelsCount\
    \ > vowelsCountMax){\n            vowelsCountMax = vowelsCount;\n            vowelsCountMaxIndex\
    \ = vowelsIndex;\n        }\n        if(vowelsCount < vowelsCountMin){\n     \
    \       vowelsCountMin = vowelsCount;\n            vowelsCountMinIndex = vowelsIndex;\n\
    \        }\n    }\n    let vowelsCountMinIndexInWord = word.lastIndexOf(vowels[vowelsCountMinIndex]);\n\
    \    let vowelsCountMaxIndexInWord = word.lastIndexOf(vowels[vowelsCountMaxIndex]);\n\
    \    let vowelsCountInWord = vowelsCountMaxIndexInWord - vowelsCountMinIndexInWord\
    \ + 1;\n    let vowelsCountInWordInWord = vowelsCountInWord / 2;\n    let vowelsCountInWordInWordInWord\
    \ = vowelsCountInWordInWord / 2;\n    let vowelsCountInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWord / 2;\n    let vowelsCountInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWord / 2;\n    let vowelsCountInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWord / 2;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWord / 2;\n    let vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord\
    \ = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWord / 2;\n    let\
    \ vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord = vowelsCountInWordInWordInWordInWordInWordInWordInWordInWordInWord\
    \ / 2;\n    let vowelsCountInWordInWordInWordInWordInWordInWordIn\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmph5sxgkmq.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8y66bl_0.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw75zos5x.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let\
    \ vowelsIndexSumCount2 = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3\
    \ = vowelsIndexSumCount / 3;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount\
    \ / 4;\n    let vowelsIndexSumCount5 = vowelsIndexSumCount / 5;\n    let vowelsIndexSumCount6\
    \ = vowelsIndexSumCount / 6;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount\
    \ / 7;\n    let vowelsIndexSumCount8 = vowelsIndexSumCount / 8;\n    let vowelsIndexSumCount9\
    \ = vowelsIndexSumCount / 9;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount\
    \ / 10;\n    let vowelsIndexSumCount11 = vowelsIndexSumCount / 11;\n    let vowelsIndexSumCount12\
    \ = vowelsIndexSumCount / 12;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount\
    \ / 13;\n    let vowelsIndexSumCount14 = vowelsIndexSumCount / 14;\n    let vowelsIndexSumCount15\
    \ = vowelsIndexSumCount / 15;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount\
    \ / 16;\n    let vowelsIndexSumCount17 = vowelsIndexSumCount / 17;\n    let vowelsIndexSumCount18\
    \ = vowelsIndexSumCount / 18;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount\
    \ / 19;\n    let vowelsIndexSumCount20 = vowelsIndexSumCount / 20;\n    let vowelsIndexSumCount21\
    \ = vowelsIndexSumCount / 21;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount\
    \ / 22;\n    let vowelsIndexSumCount23 = vowelsIndexSumCount / 23;\n    let vowelsIndexSumCount24\
    \ = vowelsIndexSumCount / 24;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount\
    \ / 25;\n    let vowelsIndexSumCount26 = vowelsIndexSumCount / 26;\n    let vowels\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4fq5wfnp.js:52\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_middle2 = vowels_count - 4;\n\
    \    var vowels_count_from_middle3 = vowels_count - 5;\n    var vowels_count_from_middle4\
    \ = vowels_count - 6;\n    var vowels_count_from_middle5 = vowels_count - 7;\n\
    \    var vowels_count_from_middle6 = vowels_count - 8;\n    var vowels_count_from_middle7\
    \ = vowels_count - 9;\n    var vowels_count_from_middle8 = vowels_count - 10;\n\
    \    var vowels_count_from_middle9 = vowels_count - 11;\n    var vowels_count_from_middle10\
    \ = vowels_count - 12;\n    var vowels_count_from_middle11 = vowels_count - 13;\n\
    \    var vowels_count_from_middle12 = vowels_count - 14;\n    var vowels_count_from_middle13\
    \ = vowels_count - 15;\n    var vowels_count_from_middle14 = vowels_count - 16;\n\
    \    var vowels_count_from_middle15 = vowels_count - 17;\n    var vowels_count_from_middle16\
    \ = vowels_count - 18;\n    var vowels_count_from_middle17 = vowels_count - 19;\n\
    \    var vowels_count_from_middle18 = vowels_count - 20;\n    var vowels_count_from_middle19\
    \ = vowels_count - 21;\n    var vowels_count_from_middle20 = vowels_count - 22;\n\
    \    var vowels_count_from_middle21 = vowels_count - 23;\n    var vowels_count_from_middle22\
    \ = vowels_count - 24;\n    var vowels_count_from_middle23 = vowels_count - 25;\n\
    \    var vowels_count_from_middle24 = vowels_count - 26;\n    var vowels_count_from_middle25\
    \ = vowels_count - 27;\n    var vowels_count_from_middle26 = vowels_count - 28;\n\
    \    var vowels_count_from_middle27 = vowels_count - 29;\n    var vowels_count_from_middle28\
    \ = vowels_count - 30;\n    var vowels_count_from_middle29 = vowels_count - 31;\n\
    \    var vowels_count_from_middle30 = vowels_count - 32;\n    var vowels_count_from_middle31\
    \ = vowels_count - 33;\n    var vowels_count_from_middle32 = vowels_count - 34;\n\
    \    var vowels_count_from_middle33 = vowels_count - 35;\n    var \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0iw0wdn7.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n  \
    \  let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex\
    \ = 0;\n    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsCount++;\n            if(vowelsCount > vowelsCountMax){\n \
    \               vowelsCountMax = vowelsCount;\n                vowelsCountMaxIndex\
    \ = i;\n            }\n            if(vowelsCount < vowelsCountMin){\n       \
    \         vowelsCountMin = vowelsCount;\n                vowelsCountMinIndex =\
    \ i;\n            }\n        }\n    }\n    if(vowelsCount > vowelsCountMax){\n\
    \        vowelsCountMax = vowelsCount;\n        vowelsCountMaxIndex = vowelsCountMaxIndex;\n\
    \    }\n    if(vowelsCount < vowelsCountMin){\n        vowelsCountMin = vowelsCount;\n\
    \        vowelsCountMinIndex = vowelsCountMinIndex;\n    }\n    let vowelsCountMinIndex2\
    \ = vowelsCountMaxIndex - vowelsCountMinIndex + 1;\n    let vowelsCountMaxIndex2\
    \ = vowelsCountMaxIndex - vowelsCountMinIndex + 1;\n    let vowelsCountMinIndex3\
    \ = vowelsCountMaxIndex2 - vowelsCountMinIndex + 1;\n    let vowelsCountMaxIndex3\
    \ = vowelsCountMaxIndex2 - vowelsCountMinIndex + 1;\n    let vowelsCountMinIndex4\
    \ = vowelsCountMaxIndex3 - vowelsCountMinIndex + 1;\n    let vowelsCountMaxIndex4\
    \ = vowelsCountMaxIndex3 - vowelsCountMinIndex + 1;\n    let vowelsCountMinIndex5\
    \ = vowelsCountMaxIndex4 - vowelsCountMinIndex + 1;\n    let vowelsCountMaxIndex5\
    \ = vowelsCountMaxIndex4 - vowelsCountMinIndex + 1;\n    let vowelsCountMinIndex6\
    \ = vowelsCountMaxIndex5 - vowelsCountMinIndex + 1;\n    let vowelsCountMaxIndex6\
    \ = vowelsCountMaxIndex5 - vowelsCountMinIndex + 1;\n    let vowelsCountMinIndex7\
    \ = vowelsCountMaxIndex6 - vowelsCountMinIndex + 1;\n    let vowelsCountMaxIndex7\
    \ = vowelsCountMaxIndex6 - vowelsCountMinIndex + 1;\n    let vowelsCountMinIndex8\
    \ = vowelsCountMaxIndex7 - vowelsCountMinIndex + 1;\n    let vowelsCount\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu39x_cbi.js:24\n    let vowelsCountMaxIndex = 0;\n        ^\n\n\
    SyntaxError: Identifier 'vowelsCountMaxIndex' has already been declared\n    at\
    \ Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc7d8isf3.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk_qc2rhg.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8y66bl_0.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsIndex2 = vowelsIndex + vowelsCount;\n\
    \    let vowelsIndex3 = vowelsIndex2 + vowelsCount;\n    let vowelsIndex4 = vowelsIndex3\
    \ + vowelsCount;\n    let vowelsIndex5 = vowelsIndex4 + vowelsCount;\n    let\
    \ vowelsIndex6 = vowelsIndex5 + vowelsCount;\n    let vowelsIndex7 = vowelsIndex6\
    \ + vowelsCount;\n    let vowelsIndex8 = vowelsIndex7 + vowelsCount;\n    let\
    \ vowelsIndex9 = vowelsIndex8 + vowelsCount;\n    let vowelsIndex10 = vowelsIndex9\
    \ + vowelsCount;\n    let vowelsIndex11 = vowelsIndex10 + vowelsCount;\n    let\
    \ vowelsIndex12 = vowelsIndex11 + vowelsCount;\n    let vowelsIndex13 = vowelsIndex12\
    \ + vowelsCount;\n    let vowelsIndex14 = vowelsIndex13 + vowelsCount;\n    let\
    \ vowelsIndex15 = vowelsIndex14 + vowelsCount;\n    let vowelsIndex16 = vowelsIndex15\
    \ + vowelsCount;\n    let vowelsIndex17 = vowelsIndex16 + vowelsCount;\n    let\
    \ vowelsIndex18 = vowelsIndex17 + vowelsCount;\n    let vowelsIndex19 = vowelsIndex18\
    \ + vowelsCount;\n    let vowelsIndex20 = vowelsIndex19 + vowelsCount;\n    let\
    \ vowelsIndex21 = vowelsIndex20 + vowelsCount;\n    let vowelsIndex22 = vowelsIndex21\
    \ + vowelsCount;\n    let vowelsIndex23 = vowelsIndex22 + vowelsCount;\n    let\
    \ vowelsIndex24 = vowelsIndex23 + vowelsCount;\n    let vowelsIndex25 = vowelsIndex24\
    \ + vowelsCount;\n    let vowelsIndex26 = vowelsIndex25 + vowelsCount;\n    let\
    \ vowelsIndex27 = vowelsIndex26 + vowelsCount;\n    let vowelsIndex28 = vowelsIndex27\
    \ + vowelsCount;\n    let vowelsIndex29 = vowelsIndex28 + vowelsCount;\n    let\
    \ vowelsIndex30 = vowelsIndex29 + vowelsCount;\n    let vowelsIndex31 = vowelsIndex30\
    \ + vowelsCount;\n    let vowelsIndex32 = vowelsIndex31 + vowelsCount;\n    let\
    \ vowelsIndex\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphjb53kkg.js:50\n    let vowelsIndex\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinVowel\
    \ = vowels[vowelsIndexMin];\n    let vowelsIndexMaxVowel = vowels[vowelsIndexMax];\n\
    \    let vowelsIndexMinVowelIndex = vowels.indexOf(vowelsIndexMinVowel);\n   \
    \ let vowelsIndexMaxVowelIndex = vowels.indexOf(vowelsIndexMaxVowel);\n    let\
    \ vowelsIndexMinVowelIndexCount = vowels.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndexCount = vowels.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndexCountIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndexCount);\n\
    \    let vowelsIndexMaxVowelIndexCountIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndexCount);\n\
    \    let vowelsIndexMinVowelIndexCountVowel = vowels[vowelsIndexMinVowelIndexCount];\n\
    \    let vowelsIndexMaxVowelIndexCountVowel = vowels[vowelsIndexMaxVowelIndexCount];\n\
    \    let vowelsIndexMinVowelIndexCountVowelIndex = vowels.indexOf(vowelsIndexMinVowelIndexCountVowel);\n\
    \    let vowelsIndexMaxVowelIndexCountVowelIndex = vowels.indexOf(vowelsIndexMaxVowelIndexCountVowel);\n\
    \    let vowelsIndexMinVowelIndexCountVowelIndexCount = vowels.indexOf(vowelsIndexMinVowelIndexCountVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndexCountVowelIndexCount = vowels.indexOf(vowelsIndexMaxVowelIndexCountVowelIndex);\n\
    \    let vowelsIndexMinVowelIndexCountVowelIndexCountVowel = vowels[vowelsIndexMinVowelIndexCountVowelIndexCount];\n\
    \    let vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmi192ca6.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    let vowelsIndexCount2\
    \ = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4 = 0;\n    let\
    \ vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let vowelsIndexCount7\
    \ = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9 = 0;\n    let\
    \ vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n    let vowelsIndexCount12\
    \ = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14 = 0;\n   \
    \ let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n    let vowelsIndexCount17\
    \ = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19 = 0;\n   \
    \ let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n    let vowelsIndexCount22\
    \ = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24 = 0;\n   \
    \ let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n    let vowelsIndexCount27\
    \ = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29 = 0;\n   \
    \ let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n    let vowelsIndexCount32\
    \ = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34 = 0;\n   \
    \ let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n    let vowelsIndexCount37\
    \ = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39 = 0;\n   \
    \ let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n    let vowelsIndexCount42\
    \ = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44 = 0;\n   \
    \ let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n    let vowelsIndexCount47\
    \ = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49 = 0;\n   \
    \ let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n    let vowelsIndexCount52\
    \ = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54 = 0;\n   \
    \ let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n    let vowelsIndexCount57\
    \ = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59 = 0;\n   \
    \ let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8y66bl_0.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    let vowelsIndexLength\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMiddle\
    \ = Math.floor(vowelsIndex.length / 2);\n    let vowelsIndexMiddleMax = Math.max(...vowelsIndexMiddle);\n\
    \    let vowelsIndexMiddleMin = Math.min(...vowelsIndexMiddle);\n    let vowelsIndexMiddleMiddle\
    \ = Math.floor(vowelsIndexMiddle / 2);\n    let vowelsIndexMiddleMiddleMax = Math.max(...vowelsIndexMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMin = Math.min(...vowelsIndexMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle /\
    \ 2);\n    let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle /\
    \ 2);\n    let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle /\
    \ 2);\n    let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle /\
    \ 2);\n    let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle /\
    \ 2);\n    let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndexMiddleMiddleMiddle);\n\
    \    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle /\
    \ 2);\n    let vowelsIndexMiddleMiddleMiddleMax = Math.max(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3x4dch7c.js:38\n    let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        ^\n\nSyntaxError: Identifier 'vowelsIndexMiddleMiddleMiddle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinIndex = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex2 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex2 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex3 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex3 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex4 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex4 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex5 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex5 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex6 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex6 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex7 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex7 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex8 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex8 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex9 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex9 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex10 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex10 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex11 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex11 = vowelsIndex.\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt117bbhh.js:47\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    var vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    var vowels_count = vowels.length;\n    var vowels_count_from_right\
    \ = word.length - vowels_count;\n    var vowels_count_from_left = vowels_count\
    \ - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n    var vowels_count_from_middle2\
    \ = vowels_count / 2;\n    var vowels_count_from_middle3 = vowels_count / 2;\n\
    \    var vowels_count_from_middle4 = vowels_count / 2;\n    var vowels_count_from_middle5\
    \ = vowels_count / 2;\n    var vowels_count_from_middle6 = vowels_count / 2;\n\
    \    var vowels_count_from_middle7 = vowels_count / 2;\n    var vowels_count_from_middle8\
    \ = vowels_count / 2;\n    var vowels_count_from_middle9 = vowels_count / 2;\n\
    \    var vowels_count_from_middle10 = vowels_count / 2;\n    var vowels_count_from_middle11\
    \ = vowels_count / 2;\n    var vowels_count_from_middle12 = vowels_count / 2;\n\
    \    var vowels_count_from_middle13 = vowels_count / 2;\n    var vowels_count_from_middle14\
    \ = vowels_count / 2;\n    var vowels_count_from_middle15 = vowels_count / 2;\n\
    \    var vowels_count_from_middle16 = vowels_count / 2;\n    var vowels_count_from_middle17\
    \ = vowels_count / 2;\n    var vowels_count_from_middle18 = vowels_count / 2;\n\
    \    var vowels_count_from_middle19 = vowels_count / 2;\n    var vowels_count_from_middle20\
    \ = vowels_count / 2;\n    var vowels_count_from_middle21 = vowels_count / 2;\n\
    \    var vowels_count_from_middle22 = vowels_count / 2;\n    var vowels_count_from_middle23\
    \ = vowels_count / 2;\n    var vowels_count_from_middle24 = vowels_count / 2;\n\
    \    var vowels_count_from_middle25 = vowels_count / 2;\n    var vowels_count_from_middle26\
    \ = vowels_count / 2;\n    var vowels_count_from_middle27 = vowels_count / 2;\n\
    \    var vowels_count_from_middle28 = vowels_count / 2;\n    var vowels_count_from_middle29\
    \ = vowels_count / 2;\n    var vowels_count_from_middle30 = vowels_count / 2;\n\
    \    var vowels_count_from_middle31 = vowels_count / 2;\n    var vowels_count_from_middle32\
    \ = vowels_count / 2;\n    var vowels_count_from_middle33 = vowels_count / 2;\n\
    \    var vowels_count_from_middle34 = vowels_count / 2;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpf27uodsl.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = vowels_count - 1;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count - 1;\n\
    \    var vowels_count_from_middle2 = vowels_count - 1;\n    var vowels_count_from_middle3\
    \ = vowels_count - 1;\n    var vowels_count_from_middle4 = vowels_count - 1;\n\
    \    var vowels_count_from_middle5 = vowels_count - 1;\n    var vowels_count_from_middle6\
    \ = vowels_count - 1;\n    var vowels_count_from_middle7 = vowels_count - 1;\n\
    \    var vowels_count_from_middle8 = vowels_count - 1;\n    var vowels_count_from_middle9\
    \ = vowels_count - 1;\n    var vowels_count_from_middle10 = vowels_count - 1;\n\
    \    var vowels_count_from_middle11 = vowels_count - 1;\n    var vowels_count_from_middle12\
    \ = vowels_count - 1;\n    var vowels_count_from_middle13 = vowels_count - 1;\n\
    \    var vowels_count_from_middle14 = vowels_count - 1;\n    var vowels_count_from_middle15\
    \ = vowels_count - 1;\n    var vowels_count_from_middle16 = vowels_count - 1;\n\
    \    var vowels_count_from_middle17 = vowels_count - 1;\n    var vowels_count_from_middle18\
    \ = vowels_count - 1;\n    var vowels_count_from_middle19 = vowels_count - 1;\n\
    \    var vowels_count_from_middle20 = vowels_count - 1;\n    var vowels_count_from_middle21\
    \ = vowels_count - 1;\n    var vowels_count_from_middle22 = vowels_count - 1;\n\
    \    var vowels_count_from_middle23 = vowels_count - 1;\n    var vowels_count_from_middle24\
    \ = vowels_count - 1;\n    var vowels_count_from_middle25 = vowels_count - 1;\n\
    \    var vowels_count_from_middle26 = vowels_count - 1;\n    var vowels_count_from_middle27\
    \ = vowels_count - 1;\n    var vowels_count_from_middle28 = vowels_count - 1;\n\
    \    var vowels_count_from_middle29 = vowels_count - 1;\n    var vowels_count_from_middle30\
    \ = vowels_count - 1;\n    var vowels_count_from_middle31 = vowels_count - 1;\n\
    \    var vowels_count_from_middle32 = vowels_count - 1;\n    var vowels_count_from_middle33\
    \ = vowels_count - 1;\n    var vowels_count_from_middle34 = vowels_count - 1;\n\
    \    var vowels_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsqqbmmn1.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle_to_right = vowels_count_from_middle + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_to_left = vowels_count_from_middle - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count_from_middle_to_left\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left - vowels_count_from_left;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_left + vowels_count_from_middle;\n   \
    \ var vowels_count_from_middle_to_left_to_right_to_middle_to_right = vowels_count_from_middle_to_left_to_right_to_middle\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left =\
    \ vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_left + vowels_count_from_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ + vowels_count_from_middle;\n    var vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmvakp5fl.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowelsArr = vowels.split(\"\");\n \
    \   let vowelsArr2 = vowels.split(\"\");\n    let vowelsArr3 = vowels.split(\"\
    \");\n    let vowelsArr4 = vowels.split(\"\");\n    let vowelsArr5 = vowels.split(\"\
    \");\n    let vowelsArr6 = vowels.split(\"\");\n    let vowelsArr7 = vowels.split(\"\
    \");\n    let vowelsArr8 = vowels.split(\"\");\n    let vowelsArr9 = vowels.split(\"\
    \");\n    let vowelsArr10 = vowels.split(\"\");\n    let vowelsArr11 = vowels.split(\"\
    \");\n    let vowelsArr12 = vowels.split(\"\");\n    let vowelsArr13 = vowels.split(\"\
    \");\n    let vowelsArr14 = vowels.split(\"\");\n    let vowelsArr15 = vowels.split(\"\
    \");\n    let vowelsArr16 = vowels.split(\"\");\n    let vowelsArr17 = vowels.split(\"\
    \");\n    let vowelsArr18 = vowels.split(\"\");\n    let vowelsArr19 = vowels.split(\"\
    \");\n    let vowelsArr20 = vowels.split(\"\");\n    let vowelsArr21 = vowels.split(\"\
    \");\n    let vowelsArr22 = vowels.split(\"\");\n    let vowelsArr23 = vowels.split(\"\
    \");\n    let vowelsArr24 = vowels.split(\"\");\n    let vowelsArr25 = vowels.split(\"\
    \");\n    let vowelsArr26 = vowels.split(\"\");\n    let vowelsArr27 = vowels.split(\"\
    \");\n    let vowelsArr28 = vowels.split(\"\");\n    let vowelsArr29 = vowels.split(\"\
    \");\n    let vowelsArr30 = vowels.split(\"\");\n    let vowelsArr31 = vowels.split(\"\
    \");\n    let vowelsArr32 = vowels.split(\"\");\n    let vowelsArr33 = vowels.split(\"\
    \");\n    let vowelsArr34 = vowels.split(\"\");\n    let vowelsArr35 = vowels.split(\"\
    \");\n    let vowelsArr36 = vowels.split(\"\");\n    let vowelsArr37 = vowels.split(\"\
    \");\n    let vowelsArr38 = vowels.split(\"\");\n    let vowelsArr39 = vowels.split(\"\
    \");\n    let vowelsArr40 = vowels.split(\"\");\n    let vowelsArf41 = vowels.split(\"\
    \");\n    let vowelsArf42 = vowels.split(\"\");\n    let vowelsArf43 = vowels.split(\"\
    \");\n    let vowelsArr44 = vowels.split(\"\");\n    let vowelsArr45 = vowels.split(\"\
    \");\n    let vowelsArr46 = vowels.split(\"\");\n    let vowelsArr47 = vowels.\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfc3s7tqq.js:64\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_left = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n    let\
    \ vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let vowels_count_from_right_to_middle_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count\
    \ - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle = vowels_count\
    \ - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle =\
    \ vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_middle\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7xburijn.js:41\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_index = 0;\n    var vowels_index_count = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj6lzy4kr.js:100\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowels_count = vowels.length;\n\
    \tlet vowels_count_from_right = vowels_count - 1;\n\tlet vowels_count_from_left\
    \ = vowels_count - 2;\n\tlet vowels_count_from_middle = vowels_count - 3;\n\t\
    let vowels_count_from_middle2 = vowels_count - 4;\n\tlet vowels_count_from_middle3\
    \ = vowels_count - 5;\n\tlet vowels_count_from_middle4 = vowels_count - 6;\n\t\
    let vowels_count_from_middle5 = vowels_count - 7;\n\tlet vowels_count_from_middle6\
    \ = vowels_count - 8;\n\tlet vowels_count_from_middle7 = vowels_count - 9;\n\t\
    let vowels_count_from_middle8 = vowels_count - 10;\n\tlet vowels_count_from_middle9\
    \ = vowels_count - 11;\n\tlet vowels_count_from_middle10 = vowels_count - 12;\n\
    \tlet vowels_count_from_middle11 = vowels_count - 13;\n\tlet vowels_count_from_middle12\
    \ = vowels_count - 14;\n\tlet vowels_count_from_middle13 = vowels_count - 15;\n\
    \tlet vowels_count_from_middle14 = vowels_count - 16;\n\tlet vowels_count_from_middle15\
    \ = vowels_count - 17;\n\tlet vowels_count_from_middle16 = vowels_count - 18;\n\
    \tlet vowels_count_from_middle17 = vowels_count - 19;\n\tlet vowels_count_from_middle18\
    \ = vowels_count - 20;\n\tlet vowels_count_from_middle19 = vowels_count - 21;\n\
    \tlet vowels_count_from_middle20 = vowels_count - 22;\n\tlet vowels_count_from_middle21\
    \ = vowels_count - 23;\n\tlet vowels_count_from_middle22 = vowels_count - 24;\n\
    \tlet vowels_count_from_middle23 = vowels_count - 25;\n\tlet vowels_count_from_middle24\
    \ = vowels_count - 26;\n\tlet vowels_count_from_middle25 = vowels_count - 27;\n\
    \tlet vowels_count_from_middle26 = vowels_count - 28;\n\tlet vowels_count_from_middle27\
    \ = vowels_count - 29;\n\tlet vowels_count_from_middle28 = vowels_count - 30;\n\
    \tlet vowels_count_from_middle29 = vowels_count - 31;\n\tlet vowels_count_from_middle30\
    \ = vowels_count - 32;\n\tlet vowels_count_from_middle31 = vowels_count \nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk17nansq.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n  \
    \  let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnlahcr8c.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowel_count = vowels.length;\n \
    \ let vowel_positions = [];\n  let vowel_positions_count = vowel_positions.length;\n\
    \  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum\
    \ = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n\
    \  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count\
    \ = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n\
    \  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum\
    \ = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n\
    \  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count\
    \ = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n\
    \  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum\
    \ = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n\
    \  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count\
    \ = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n\
    \  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum\
    \ = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n\
    \  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count\
    \ = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n\
    \  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum\
    \ = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n\
    \  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count\
    \ = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n\
    \  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum\
    \ = 0;\n  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n\
    \  let vowel_positions_sum_count = 0;\n  let vowel_positions_sum = 0;\n  let vowel_positions_sum_count\
    \ = 0;\n  let vowel_positions_sum = 0;\n  let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdph52edv.js:22\n  let vowel_positions_sum = 0;\n      ^\n\nSyntaxError:\
    \ Identifier 'vowel_positions_sum' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountFromRight = word.length - vowelsCount;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 1;\n    let vowelsCountFromRightAndLeft = vowelsCountFromRight\
    \ + vowelsCountFromLeft;\n    let vowelsCountFromRightAndLeftAndVowel = vowelsCountFromRightAndLeft\
    \ + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonant = vowelsCountFromRightAndLeftAndVowel\
    \ - 1;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowel = vowelsCountFromRightAndLeftAndVowelAndConsonant\
    \ + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonant\
    \ = vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowel - 1;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowel\
    \ = vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonant + vowelsCount;\n\
    \    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowelAndConsonant\
    \ = vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowel\
    \ - 1;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowelAndConsonantAndVowel\
    \ = vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowelAndConsonant\
    \ + vowelsCount;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowelAndConsonantAndVowelAndConsonant\
    \ = vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndVowelAndConsonantAndVowel\
    \ - 1;\n    let vowelsCountFromRightAndLeftAndVowelAndConsonantAndVowelAndConsonantAndV\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplnvhks2x.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowels_count = vowels.length;\n\
    \  let vowel_found = false;\n  let vowel_position = 0;\n  let vowel_found2 = false;\n\
    \  let vowel_position2 = 0;\n  let consonants = [\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let consonants_count = consonants.length;\n\
    \  let consonant_found = false;\n  let consonant_position = 0;\n  let consonant_found2\
    \ = false;\n  let consonant_position2 = 0;\n  let consonant_found3 = false;\n\
    \  let consonant_position3 = 0;\n  let consonant_found4 = false;\n  let consonant_position4\
    \ = 0;\n  let consonant_found5 = false;\n  let consonant_position5 = 0;\n  let\
    \ consonant_found6 = false;\n  let consonant_position6 = 0;\n  let consonant_found7\
    \ = false;\n  let consonant_position7 = 0;\n  let consonant_found8 = false;\n\
    \  let consonant_position8 = 0;\n  let consonant_found9 = false;\n  let consonant_position9\
    \ = 0;\n  let consonant_found10 = false;\n  let consonant_position10 = 0;\n  let\
    \ consonant_found11 = false;\n  let consonant_position11 = 0;\n  let consonant_found12\
    \ = false;\n  let consonant_position12 = 0;\n  let consonant_found13 = false;\n\
    \  let consonant_position13 = 0;\n  let consonant_found14 = false;\n  let consonant_position14\
    \ = 0;\n  let consonant_found15 = false;\n  let consonant_position15 = 0;\n  let\
    \ consonant_found16 = false;\n  let consonant_position16 = 0;\n  let consonant_found17\
    \ = false;\n  let consonant_position17 = 0;\n  let consonant_found18 = false;\n\
    \  let consonant_position18 = 0;\n  let consonant_found19 = false;\n  let consonant_position19\
    \ = 0;\n  let consonant_found20 = false;\n  let consonant_position20 = 0;\n  let\
    \ consonant_found21 = false;\n  let consonant_position21 = 0;\n  let consonant_found22\
    \ = false;\n  let consonant_position22 = 0;\n  let consonant_found23 = false;\n\
    \  let consonant_position23 = 0;\n  let consonant_found24 = false;\n  let consonant_position24\
    \ = 0;\n  let consonant_found25 = false;\n  let consonant_position25 = 0;\n  let\
    \ consonant_found26 = false;\n  let consonant_position26 = 0;\n  let consonant_found\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqqws3jnv.js:76\n  let consonant_found\n      ^\n\nSyntaxError:\
    \ Identifier 'consonant_found' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n  \
    \  let vowelsIndexSorted = vowelsIndex.sort();\n    let vowelsIndexSortedCopy\
    \ = vowelsIndexSorted.slice();\n    let vowelsIndexSortedCopyCount = vowelsIndexSortedCopy.length;\n\
    \    let vowelsIndexSortedCopyIndex = 0;\n    let vowelsIndexSortedCopyIndexCount\
    \ = vowelsIndexSortedCopyCount;\n    let vowelsIndexSortedCopyIndexCount = 0;\n\
    \    let vowelsIndexSortedCopyIndexCount2 = 0;\n    let vowelsIndexSortedCopyIndexCount3\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount4 = 0;\n    let vowelsIndexSortedCopyIndexCount5\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount6 = 0;\n    let vowelsIndexSortedCopyIndexCount7\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount8 = 0;\n    let vowelsIndexSortedCopyIndexCount9\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount10 = 0;\n    let vowelsIndexSortedCopyIndexCount11\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount12 = 0;\n    let vowelsIndexSortedCopyIndexCount13\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount14 = 0;\n    let vowelsIndexSortedCopyIndexCount15\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount16 = 0;\n    let vowelsIndexSortedCopyIndexCount17\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount18 = 0;\n    let vowelsIndexSortedCopyIndexCount19\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount20 = 0;\n    let vowelsIndexSortedCopyIndexCount21\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount22 = 0;\n    let vowelsIndexSortedCopyIndexCount23\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount24 = 0;\n    let vowelsIndexSortedCopyIndexCount25\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount26 = 0;\n    let vowelsIndexSortedCopyIndexCount27\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount28 = 0;\n    let vowelsIndexSortedCopyIndexCount29\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount30 = 0;\n    let vowelsIndexSortedCopyIndexCount31\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount32 = 0;\n    let vowelsIndexSortedCopyIndexCount33\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount34 = 0;\n    let vowelsIndexSortedCopyIndexCount35\
    \ = 0;\n    let vowelsIndexSortedCopyIndexCount36\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp091mfnm2.js:22\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjgyhl9oi.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_position = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowel_found\
    \ = true;\n            vowel_position = i;\n            break;\n        }\n  \
    \  }\n    if(vowel_found){\n        let consonants = word.substring(vowel_position).split('');\n\
    \        let consonants_count = consonants.length;\n        let consonant_found\
    \ = false;\n        let consonant_position = 0;\n        for(let i = 0; i < consonants_count;\
    \ i++){\n            if(consonants.includes(vowels[i])){\n                consonant_found\
    \ = true;\n                consonant_position = i;\n                break;\n \
    \           }\n        }\n        if(consonant_found){\n            let vowel_distance\
    \ = vowel_position - consonant_position;\n            if(vowel_distance < 0){\n\
    \                vowel_distance = 0;\n            }\n            if(vowel_distance\
    \ > vowels_count){\n                vowel_distance = vowels_count - 1;\n     \
    \       }\n            return vowels[vowel_distance];\n        }\n    }\n    return\
    \ '';\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpnbjsyzee.js:58:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnbjsyzee.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax\
    \ + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let\
    \ vowelsIndexSumCount2 = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3\
    \ = vowelsIndexSumCount2 / 2;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount3\
    \ / 2;\n    let vowelsIndexSumCount5 = vowelsIndexSumCount4 / 2;\n    let vowelsIndexSumCount6\
    \ = vowelsIndexSumCount5 / 2;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount6\
    \ / 2;\n    let vowelsIndexSumCount8 = vowelsIndexSumCount7 / 2;\n    let vowelsIndexSumCount9\
    \ = vowelsIndexSumCount8 / 2;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount9\
    \ / 2;\n    let vowelsIndexSumCount11 = vowelsIndexSumCount10 / 2;\n    let vowelsIndexSumCount12\
    \ = vowelsIndexSumCount11 / 2;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount12\
    \ / 2;\n    let vowelsIndexSumCount14 = vowelsIndexSumCount13 / 2;\n    let vowelsIndexSumCount15\
    \ = vowelsIndexSumCount14 / 2;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount15\
    \ / 2;\n    let vowelsIndexSumCount17 = vowelsIndexSumCount16 / 2;\n    let vowelsIndexSumCount18\
    \ = vowelsIndexSumCount17 / 2;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount18\
    \ / 2;\n    let vowelsIndexSumCount20 = vowelsIndexSumCount19 / 2;\n    let vowelsIndexSumCount21\
    \ = vowelsIndexSumCount20 / 2;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount21\
    \ / 2;\n    let vowelsIndexSumCount23 = vowelsIndexSumCount22 / 2;\n    let vowelsIndexSumCount24\
    \ = vowelsIndexSumCount23 / 2;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount24\
    \ / 2;\n    let vowelsIndexSum\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpt_ta1af_.js:51\n    let vowelsIndexSum\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndexSum' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    \n    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    \n    for(let i = 0; i < vowelsCount; i++){\n\
    \        vowelsIndex.push(i);\n    }\n    \n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    \n    for(let i = 0; i < vowelsIndexCount; i++){\n        let vowelsIndexCount\
    \ = vowelsIndex.length;\n        \n        for(let j = 0; j < vowelsIndexCount;\
    \ j++){\n            if(word.charAt(vowelsIndex[j]) === vowels[i]){\n        \
    \        vowelsIndex.splice(j, 1);\n                vowelsIndexCount--;\n    \
    \            break;\n            }\n        }\n    }\n    \n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    \n    for(let i = 0; i < vowelsIndexCount; i++){\n\
    \        let vowelsIndexCount = vowelsIndex.length;\n        \n        for(let\
    \ j = 0; j < vowelsIndexCount; j++){\n            if(word.charAt(vowelsIndex[j])\
    \ === vowels[i]){\n                vowelsIndex.splice(j, 1);\n               \
    \ vowelsIndexCount--;\n                break;\n            }\n        }\n    }\n\
    \    \n    let vowelsIndexCount = vowelsIndex.length;\n    \n    for(let i = 0;\
    \ i < vowelsIndexCount; i++){\n        let vowelsIndexCount = vowelsIndex.length;\n\
    \        \n        for(let j = 0; j < vowelsIndexCount; j++){\n            if(word.charAt(vowelsIndex[j])\
    \ === vowels[i]){\n                vowelsIndex.splice(j, 1);\n               \
    \ vowelsIndexCount--;\n                break;\n            }\n        }\n    }\n\
    \    \n    let vowelsIndexCount = vowelsIndex.length;\n    \n    for(let i = 0;\
    \ i < vowelsIndexCount; i++){\n        let vowelsIndexCount = vowelsIndex.length;\n\
    \        \n        for(let j = 0; j < vowelsIndexCount; j++){\n            if(word.charAt(vowelsIndex[j])\
    \ === vowels[i]){\n                vowelsIndex.splice(j, 1);\n               \
    \ vowelsIndexCount--;\n                break;\n            }\n        }\n    }\n\
    \    \n    let vowelsIndexCount = vowelsIndex.length;\n    \n    for(let i = 0;\
    \ i < vowelsIndexCount; i++){\n        let vowelsIndexCount = vowelsIndex.length;\n\
    \        \n        for(let j = 0; j < vowelsIndexCount; j++){\n            if(word.charAt(vowelsIndex[j])\
    \ === vowels[i]){\n                vowelsIndex.splice(j, 1);\n               \
    \ vowelsIndexCount--;\n                break;\n            }\n        }\n    }\n\
    \    \n    let vowelsIndexCount = vowelsIndex.length;\n    \n    for(let i = 0;\
    \ i < vowelsIndexCount; i++){\n        let vowelsIndexCount = vowelsIndex.length;\n\
    \        \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmps8tclz5y.js:39\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexCount' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountLeft = vowelsCount\
    \ - 2;\n    let vowelsCountRightLeft = vowelsCount - 3;\n    let vowelsCountRightRight\
    \ = vowelsCount - 4;\n    let vowelsCountRightLeft = vowelsCount - 5;\n    let\
    \ vowelsCountLeftRight = vowelsCount - 6;\n    let vowelsCountLeftLeft = vowelsCount\
    \ - 7;\n    let vowelsCountLeftRight = vowelsCount - 8;\n    let vowelsCountRightLeft\
    \ = vowelsCount - 9;\n    let vowelsCountRightRight = vowelsCount - 10;\n    let\
    \ vowelsCountRightLeft = vowelsCount - 11;\n    let vowelsCountLeftRight = vowelsCount\
    \ - 12;\n    let vowelsCountLeftLeft = vowelsCount - 13;\n    let vowelsCountLeftRight\
    \ = vowelsCount - 14;\n    let vowelsCountRightLeft = vowelsCount - 15;\n    let\
    \ vowelsCountRightRight = vowelsCount - 16;\n    let vowelsCountRightLeft = vowelsCount\
    \ - 17;\n    let vowelsCountLeftRight = vowelsCount - 18;\n    let vowelsCountLeftLeft\
    \ = vowelsCount - 19;\n    let vowelsCountLeftRight = vowelsCount - 20;\n    let\
    \ vowelsCountRightLeft = vowelsCount - 21;\n    let vowelsCountRightRight = vowelsCount\
    \ - 22;\n    let vowelsCountRightLeft = vowelsCount - 23;\n    let vowelsCountLeftRight\
    \ = vowelsCount - 24;\n    let vowelsCountLeftLeft = vowelsCount - 25;\n    let\
    \ vowelsCountLeftRight = vowelsCount - 26;\n    let vowelsCountRightLeft = vowelsCount\
    \ - 27;\n    let vowelsCountRightRight = vowelsCount - 28;\n    let vowelsCountRightLeft\
    \ = vowelsCount - 29;\n    let vowelsCountLeftRight = vowelsCount - 30;\n    let\
    \ vowelsCountLeftLeft = vowelsCount - 31;\n    let vowelsCountLeftRight = vowelsCount\
    \ - 32;\n    let vowelsCountRightLeft = vowelsCount - 33;\n    let vowelsCountRightRight\
    \ = vowelsCount - 34;\n    let vowelsCountRightLeft = vowelsCount - 35;\n    let\
    \ vowelsCountLeftRight = vowelsCount - 36;\n    let vowelsCountLeftLeft = vowelsCount\
    \ - 37;\n    let vowelsCountLeftRight = vowelsCount - 38\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpke8we1ii.js:22\n    let vowelsCountRightLeft = vowelsCount - 5;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsCountRightLeft' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelsCount =\
    \ vowels.length;\n    var vowelsIndex = [];\n    var vowelsIndexCount = 0;\n \
    \   var vowelsIndexCount2 = 0;\n    var vowelsIndexCount3 = 0;\n    var vowelsIndexCount4\
    \ = 0;\n    var vowelsIndexCount5 = 0;\n    var vowelsIndexCount6 = 0;\n    var\
    \ vowelsIndexCount7 = 0;\n    var vowelsIndexCount8 = 0;\n    var vowelsIndexCount9\
    \ = 0;\n    var vowelsIndexCount10 = 0;\n    var vowelsIndexCount11 = 0;\n   \
    \ var vowelsIndexCount12 = 0;\n    var vowelsIndexCount13 = 0;\n    var vowelsIndexCount14\
    \ = 0;\n    var vowelsIndexCount15 = 0;\n    var vowelsIndexCount16 = 0;\n   \
    \ var vowelsIndexCount17 = 0;\n    var vowelsIndexCount18 = 0;\n    var vowelsIndexCount19\
    \ = 0;\n    var vowelsIndexCount20 = 0;\n    var vowelsIndexCount21 = 0;\n   \
    \ var vowelsIndexCount22 = 0;\n    var vowelsIndexCount23 = 0;\n    var vowelsIndexCount24\
    \ = 0;\n    var vowelsIndexCount25 = 0;\n    var vowelsIndexCount26 = 0;\n   \
    \ var vowelsIndexCount27 = 0;\n    var vowelsIndexCount28 = 0;\n    var vowelsIndexCount29\
    \ = 0;\n    var vowelsIndexCount30 = 0;\n    var vowelsIndexCount31 = 0;\n   \
    \ var vowelsIndexCount32 = 0;\n    var vowelsIndexCount33 = 0;\n    var vowelsIndexCount34\
    \ = 0;\n    var vowelsIndexCount35 = 0;\n    var vowelsIndexCount36 = 0;\n   \
    \ var vowelsIndexCount37 = 0;\n    var vowelsIndexCount38 = 0;\n    var vowelsIndexCount39\
    \ = 0;\n    var vowelsIndexCount40 = 0;\n    var vowelsIndexCount41 = 0;\n   \
    \ var vowelsIndexCount42 = 0;\n    var vowelsIndexCount43 = 0;\n    var vowelsIndexCount44\
    \ = 0;\n    var vowelsIndexCount45 = 0;\n    var vowelsIndexCount46 = 0;\n   \
    \ var vowelsIndexCount47 = 0;\n    var vowelsIndexCount48 = 0;\n    var vowelsIndexCount49\
    \ = 0;\n    var vowelsIndexCount50 = 0;\n    var vowelsIndexCount51 = 0;\n   \
    \ var vowelsIndexCount52 = 0;\n    var vowelsIndexCount53 = 0;\n    var vowelsIndexCount54\
    \ = 0;\n    var vowelsIndexCount55 = 0;\n    var vowelsIndexCount56 = 0;\n   \
    \ var vowelsIndexCount57 = 0;\n    var vowelsIndexCount58 = 0;\n    var vowelsIndexCount59\
    \ = 0;\n    var vowelsIndexCount60 = 0;\n    var vowelsIndexCount61 = 0;\n   \
    \ var vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzkm8p39p.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc7d8isf3.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpanzqya61.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowels_count = vowels.length;\n\t\
    let vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\tlet vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n\t\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpk6asup6a.js:22\n\tlet vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n\t    ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw75zos5x.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsIndex = [];\n  for(let i=0;i<word.length;i++){\n    if(vowels.includes(word[i])){\n\
    \      vowelsIndex.push(i);\n    }\n  }\n  if(vowelsIndex.length<2){\n    return\
    \ \"\";\n  }\n  let vowelsIndex = vowelsIndex.sort((a,b)=>b-a).reverse();\n  let\
    \ vowelsIndexLength = vowelsIndex.length;\n  let vowelsIndexStart = 0;\n  let\
    \ vowelsIndexEnd = vowelsIndexLength-1;\n  let vowelsIndexMid = (vowelsIndexEnd+vowelsIndexStart)/2;\n\
    \  let vowelsIndexMidValue = vowels[vowelsIndexMid];\n  let vowelsIndexMidValueLength\
    \ = vowelsIndexMidValue.length;\n  let vowelsIndexMidValueStart = 0;\n  let vowelsIndexMidValueEnd\
    \ = vowelsIndexMidValueLength-1;\n  let vowelsIndexMidValueMid = (vowelsIndexMidValueEnd+vowelsIndexMidValueStart)/2;\n\
    \  let vowelsIndexMidValueMidValue = vowelsIndexMidValue[vowelsIndexMidValueMid];\n\
    \  let vowelsIndexMidValueMidValueLength = vowelsIndexMidValueMidValue.length;\n\
    \  let vowelsIndexMidValueMidValueStart = 0;\n  let vowelsIndexMidValueMidValueEnd\
    \ = vowelsIndexMidValueMidValueLength-1;\n  let vowelsIndexMidValueMidValueMid\
    \ = (vowelsIndexMidValueMidValueEnd+vowelsIndexMidValueMidValueStart)/2;\n  let\
    \ vowelsIndexMidValueMidValueMidValue = vowelsIndexMidValueMidValue[vowelsIndexMidValueMidValueMid];\n\
    \  let vowelsIndexMidValueMidValueMidValueLength = vowelsIndexMidValueMidValueMidValue.length;\n\
    \  let vowelsIndexMidValueMidValueMidValueStart = 0;\n  let vowelsIndexMidValueMidValueMidValueEnd\
    \ = vowelsIndexMidValueMidValueMidValueLength-1;\n  let vowelsIndexMidValueMidValueMidValueMid\
    \ = (vowelsIndexMidValueMidValueMidValueEnd+vowelsIndexMidValueMidValueMidValueStart)/2;\n\
    \  let vowelsIndexMidValueMidValueMidValueLength = vowelsIndexMidValueMidValueMidValue.length;\n\
    \  let vowelsIndexMidValueMidValueMidValueStart = 0;\n  let vowelsIndexMidValueMidValueMidValueEnd\
    \ = vowelsIndexMidValueMidValueMidValueLength-1;\n  let vowelsIndexMidValueMidValueMidValueMid\
    \ = (vowelsIndexMidValue\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpx1jzqzt0.js:27\n  let vowelsIndex = vowelsIndex.sort((a,b)=>b-a).reverse();\n\
    \      ^\n\nSyntaxError: Identifier 'vowelsIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptk1vvxzb.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = word.length - vowels_count;\n\
    \    var vowels_count_from_left = vowels_count - 1;\n    var vowels_count_from_middle\
    \ = vowels_count / 2;\n    var vowels_count_from_middle2 = vowels_count / 2;\n\
    \    var vowels_count_from_middle3 = vowels_count / 3;\n    var vowels_count_from_middle4\
    \ = vowels_count / 4;\n    var vowels_count_from_middle5 = vowels_count / 5;\n\
    \    var vowels_count_from_middle6 = vowels_count / 6;\n    var vowels_count_from_middle7\
    \ = vowels_count / 7;\n    var vowels_count_from_middle8 = vowels_count / 8;\n\
    \    var vowels_count_from_middle9 = vowels_count / 9;\n    var vowels_count_from_middle10\
    \ = vowels_count / 10;\n    var vowels_count_from_middle11 = vowels_count / 11;\n\
    \    var vowels_count_from_middle12 = vowels_count / 12;\n    var vowels_count_from_middle13\
    \ = vowels_count / 13;\n    var vowels_count_from_middle14 = vowels_count / 14;\n\
    \    var vowels_count_from_middle15 = vowels_count / 15;\n    var vowels_count_from_middle16\
    \ = vowels_count / 16;\n    var vowels_count_from_middle17 = vowels_count / 17;\n\
    \    var vowels_count_from_middle18 = vowels_count / 18;\n    var vowels_count_from_middle19\
    \ = vowels_count / 19;\n    var vowels_count_from_middle20 = vowels_count / 20;\n\
    \    var vowels_count_from_middle21 = vowels_count / 21;\n    var vowels_count_from_middle22\
    \ = vowels_count / 22;\n    var vowels_count_from_middle23 = vowels_count / 23;\n\
    \    var vowels_count_from_middle24 = vowels_count / 24;\n    var vowels_count_from_middle25\
    \ = vowels_count / 25;\n    var vowels_count_from_middle26 = vowels_count / 26;\n\
    \    var vowels_count_from_middle27 = vowels_count / 27;\n    var vowels_count_from_middle28\
    \ = vowels_count / 28;\n    var vowels_count_from_middle29 = vowels_count / 29;\n\
    \    var vowels_count_from_middle30 = vowels_count / 30;\n    var vowels_count_from_middle31\
    \ = vowels_count / 31;\n    var vowels_count_from_middle32 = vowels_count / 32;\n\
    \    var vowels_count_from_middle33 = vowels_count / 33;\n    var vowels_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpemik1rto.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowelsCount = vowels.length;\n\
    \tlet vowelsCountLeft = word.length - vowelsCount;\n\tlet vowelsCountRight = vowelsCount\
    \ - 1;\n\tlet vowelsCountRightInner = vowelsCount - 2;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 3;\n\tlet vowelsCountRightInner = vowelsCount - 4;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 5;\n\tlet vowelsCountRightInner = vowelsCount - 6;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 7;\n\tlet vowelsCountRightInner = vowelsCount - 8;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 9;\n\tlet vowelsCountRightInner = vowelsCount - 10;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 11;\n\tlet vowelsCountRightInner = vowelsCount - 12;\n\tlet\
    \ vowelsCountRightInner = vowelsCount - 13;\n\tlet vowelsCountRightInner = vowelsCount\
    \ - 14;\n\tlet vowelsCountRightInner = vowelsCount - 15;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 16;\n\tlet vowelsCountRightInner = vowelsCount - 17;\n\tlet\
    \ vowelsCountRightInner = vowelsCount - 18;\n\tlet vowelsCountRightInner = vowelsCount\
    \ - 19;\n\tlet vowelsCountRightInner = vowelsCount - 20;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 21;\n\tlet vowelsCountRightInner = vowelsCount - 22;\n\tlet\
    \ vowelsCountRightInner = vowelsCount - 23;\n\tlet vowelsCountRightInner = vowelsCount\
    \ - 24;\n\tlet vowelsCountRightInner = vowelsCount - 25;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 26;\n\tlet vowelsCountRightInner = vowelsCount - 27;\n\tlet\
    \ vowelsCountRightInner = vowelsCount - 28;\n\tlet vowelsCountRightInner = vowelsCount\
    \ - 29;\n\tlet vowelsCountRightInner = vowelsCount - 30;\n\tlet vowelsCountRightInner\
    \ = vowelsCount - 31;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwy7vheea.js:21\n\tlet vowelsCountRightInner = vowelsCount - 3;\n\
    \t    ^\n\nSyntaxError: Identifier 'vowelsCountRightInner' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max2 = 0;\n    var vowels_index_count_min2 = 0;\n  \
    \  var vowels_index_count_max3 = 0;\n    var vowels_index_count_min3 = 0;\n  \
    \  var vowels_index_count_max4 = 0;\n    var vowels_index_count_min4 = 0;\n  \
    \  var vowels_index_count_max5 = 0;\n    var vowels_index_count_min5 = 0;\n  \
    \  var vowels_index_count_max6 = 0;\n    var vowels_index_count_min6 = 0;\n  \
    \  var vowels_index_count_max7 = 0;\n    var vowels_index_count_min7 = 0;\n  \
    \  var vowels_index_count_max8 = 0;\n    var vowels_index_count_min8 = 0;\n  \
    \  var vowels_index_count_max9 = 0;\n    var vowels_index_count_min9 = 0;\n  \
    \  var vowels_index_count_max10 = 0;\n    var vowels_index_count_min10 = 0;\n\
    \    var vowels_index_count_max11 = 0;\n    var vowels_index_count_min11 = 0;\n\
    \    var vowels_index_count_max12 = 0;\n    var vowels_index_count_min12 = 0;\n\
    \    var vowels_index_count_max13 = 0;\n    var vowels_index_count_min13 = 0;\n\
    \    var vowels_index_count_max14 = 0;\n    var vowels_index_count_min14 = 0;\n\
    \    var vowels_index_count_max15 = 0;\n    var vowels_index_count_min15 = 0;\n\
    \    var vowels_index_count_max16 = 0;\n    var vowels_index_count_min16 = 0;\n\
    \    var vowels_index_count_max17 = 0;\n    var vowels_index_count_min17 = 0;\n\
    \    var vowels_index_count_max18 = 0;\n    var vowels_index_count_min18 = 0;\n\
    \    var vowels_index_count_max19 = 0;\n    var vowels_index_count_min19 = 0;\n\
    \    var vowels_index_count_max20 = 0;\n    var vowels_index_count_min20 = 0;\n\
    \    var vowels_index_count_max21 = 0;\n    var vowels_index_count_min21 = 0;\n\
    \    var vowels_index_count_max22 = 0;\n    var vowels_index_count_min22 = 0;\n\
    \    var vowels_index_count_max23 = 0;\n    var vowels_index_count_min23 = 0;\n\
    \    var vowels_index_count_max24 = 0;\n    var vowels_index_count_min24 = 0;\n\
    \    var vowels_index_count_max25 = 0;\n    var vowels_index_count_min25 = 0;\n\
    \    var vowels_index_count_max26 = 0;\n    var vowels_index_count_min26 = 0;\n\
    \    var vowels_index_count_max27 = 0;\n    var vowels_index_count_min27 = 0;\n\
    \    var vowels_index_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfie3suol.js:95\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  let index = word.indexOf(vowels[i]);\n        if(index != -1){\n          \
    \  vowelsIndex.push(index);\n        }\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMax =\
    \ Math.max(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax - vowelsIndexMin\
    \ + 1;\n    let vowelsIndexSum2 = vowelsIndexSum * vowelsIndexSum;\n    let vowelsIndexSum3\
    \ = vowelsIndexSum2 * vowelsIndexSum;\n    let vowelsIndexSum4 = vowelsIndexSum3\
    \ * vowelsIndexSum;\n    let vowelsIndexSum5 = vowelsIndexSum4 * vowelsIndexSum;\n\
    \    let vowelsIndexSum6 = vowelsIndexSum5 * vowelsIndexSum;\n    let vowelsIndexSum7\
    \ = vowelsIndexSum6 * vowelsIndexSum;\n    let vowelsIndexSum8 = vowelsIndexSum7\
    \ * vowelsIndexSum;\n    let vowelsIndexSum9 = vowelsIndexSum8 * vowelsIndexSum;\n\
    \    let vowelsIndexSum10 = vowelsIndexSum9 * vowelsIndexSum;\n    let vowelsIndexSum11\
    \ = vowelsIndexSum10 * vowelsIndexSum;\n    let vowelsIndexSum12 = vowelsIndexSum11\
    \ * vowelsIndexSum;\n    let vowelsIndexSum13 = vowelsIndexSum12 * vowelsIndexSum;\n\
    \    let vowelsIndexSum14 = vowelsIndexSum13 * vowelsIndexSum;\n    let vowelsIndexSum15\
    \ = vowelsIndexSum14 * vowelsIndexSum;\n    let vowelsIndexSum16 = vowelsIndexSum15\
    \ * vowelsIndexSum;\n    let vowelsIndexSum17 = vowelsIndexSum16 * vowelsIndexSum;\n\
    \    let vowelsIndexSum18 = vowelsIndexSum17 * vowelsIndexSum;\n    let vowelsIndexSum19\
    \ = vowelsIndexSum18 * vowelsIndexSum;\n    let vowelsIndexSum20 = vowelsIndexSum19\
    \ * vowelsIndexSum;\n    let vowelsIndexSum21 = vowelsIndexSum20 * vowelsIndexSum;\n\
    \    let vowelsIndexSum22 = vowelsIndexSum21 * vowelsIndexSum;\n    let vowelsIndexSum23\
    \ = vowelsIndexSum22 * vowelsIndexSum\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpewq7s2yw.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3 = vowelsCount -\
    \ 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5 = vowelsCount\
    \ - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7 = vowelsCount\
    \ - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9 = vowelsCount\
    \ - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11 = vowelsCount\
    \ - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13 = vowelsCount\
    \ - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15 = vowelsCount\
    \ - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17 = vowelsCount\
    \ - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19 = vowelsCount\
    \ - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21 = vowelsCount\
    \ - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23 = vowelsCount\
    \ - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25 = vowelsCount\
    \ - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27 = vowelsCount\
    \ - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29 = vowelsCount\
    \ - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31 = vowelsCount\
    \ - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33 = vowelsCount\
    \ - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35 = vowelsCount\
    \ - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37 = vowelsCount\
    \ - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39 = vowelsCount\
    \ - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41 = vowelsCount\
    \ - 40;\n    let \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkqlfp2co.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountLeft = word.length - vowelsCount;\n    let vowelsCountRight\
    \ = vowelsCount;\n    let vowelsCountRight2 = word.length - vowelsCount;\n   \
    \ let vowelsCountRight3 = word.length - vowelsCount;\n    let vowelsCountRight4\
    \ = word.length - vowelsCount;\n    let vowelsCountRight5 = word.length - vowelsCount;\n\
    \    let vowelsCountRight6 = word.length - vowelsCount;\n    let vowelsCountRight7\
    \ = word.length - vowelsCount;\n    let vowelsCountRight8 = word.length - vowelsCount;\n\
    \    let vowelsCountRight9 = word.length - vowelsCount;\n    let vowelsCountRight10\
    \ = word.length - vowelsCount;\n    let vowelsCountRight11 = word.length - vowelsCount;\n\
    \    let vowelsCountRight12 = word.length - vowelsCount;\n    let vowelsCountRight13\
    \ = word.length - vowelsCount;\n    let vowelsCountRight14 = word.length - vowelsCount;\n\
    \    let vowelsCountRight15 = word.length - vowelsCount;\n    let vowelsCountRight16\
    \ = word.length - vowelsCount;\n    let vowelsCountRight17 = word.length - vowelsCount;\n\
    \    let vowelsCountRight18 = word.length - vowelsCount;\n    let vowelsCountRight19\
    \ = word.length - vowelsCount;\n    let vowelsCountRight20 = word.length - vowelsCount;\n\
    \    let vowelsCountRight21 = word.length - vowelsCount;\n    let vowelsCountRight22\
    \ = word.length - vowelsCount;\n    let vowelsCountRight23 = word.length - vowelsCount;\n\
    \    let vowelsCountRight24 = word.length - vowelsCount;\n    let vowelsCountRight25\
    \ = word.length - vowelsCount;\n    let vowelsCountRight26 = word.length - vowelsCount;\n\
    \    let vowelsCountRight27 = word.length - vowelsCount;\n    let vowelsCountRight28\
    \ = word.length - vowelsCount;\n    let vowelsCountRight29 = word.length - vowelsCount;\n\
    \    let vowelsCountRight30 = word.length - vowelsCount;\n    let vowelsCountRight31\
    \ = word.length - vowelsCount;\n    let vowelsCountRight32 = word.length - vowelsCount;\n\
    \    let vowelsCountRight33 = word.length - vowelsCount;\n    let vowelsCountRight34\
    \ = word.length - vowelsCount;\n    let vowelsCountRight35 = word.length - vowelsCount;\n\
    \    let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbuh4l59z.js:54\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_right_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkr6295me.js:41\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_left_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n \
    \   for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n\
    \    }\n    if(vowelsIndexCount > 1){\n        let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \        let vowelsIndexMax = Math.max(...vowelsIndex);\n        let vowelsIndexMiddle\
    \ = Math.floor(vowelsIndexCount / 2);\n        let vowelsIndexMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddle));\n\
    \        let vowelsIndexMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddle));\n\
    \        let vowelsIndexMiddleMiddle = Math.floor(vowelsIndexMiddle / 2);\n  \
    \      let vowelsIndexMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddleMin = Math.min(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddleMax = Math.max(...vowelsIndex.slice(vowelsIndexMiddleMiddleMiddle));\n\
    \        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n        let vowelsIndexMiddleMiddleMiddle\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprszeymi5.js:38\n        let vowelsIndexMiddleMiddleMiddle = Math.floor(vowelsIndexMiddleMiddle\
    \ / 2);\n            ^\n\nSyntaxError: Identifier 'vowelsIndexMiddleMiddleMiddle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - word.length;\n    let vowels_count_from_both = vowels_count_from_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_both_2 = vowels_count_from_both\
    \ * 2;\n    let vowels_count_from_both_3 = vowels_count_from_both_2 * 2;\n   \
    \ let vowels_count_from_both_4 = vowels_count_from_both_3 * 2;\n    let vowels_count_from_both_5\
    \ = vowels_count_from_both_4 * 2;\n    let vowels_count_from_both_6 = vowels_count_from_both_5\
    \ * 2;\n    let vowels_count_from_both_7 = vowels_count_from_both_6 * 2;\n   \
    \ let vowels_count_from_both_8 = vowels_count_from_both_7 * 2;\n    let vowels_count_from_both_9\
    \ = vowels_count_from_both_8 * 2;\n    let vowels_count_from_both_10 = vowels_count_from_both_9\
    \ * 2;\n    let vowels_count_from_both_11 = vowels_count_from_both_10 * 2;\n \
    \   let vowels_count_from_both_12 = vowels_count_from_both_11 * 2;\n    let vowels_count_from_both_13\
    \ = vowels_count_from_both_12 * 2;\n    let vowels_count_from_both_14 = vowels_count_from_both_13\
    \ * 2;\n    let vowels_count_from_both_15 = vowels_count_from_both_14 * 2;\n \
    \   let vowels_count_from_both_16 = vowels_count_from_both_15 * 2;\n    let vowels_count_from_both_17\
    \ = vowels_count_from_both_16 * 2;\n    let vowels_count_from_both_18 = vowels_count_from_both_17\
    \ * 2;\n    let vowels_count_from_both_19 = vowels_count_from_both_18 * 2;\n \
    \   let vowels_count_from_both_20 = vowels_count_from_both_19 * 2;\n    let vowels_count_from_both_21\
    \ = vowels_count_from_both_20 * 2;\n    let vowels_count_from_both_22 = vowels_count_from_both_21\
    \ * 2;\n    let vowels_count_from_both_23 = vowels_count_from_both_22 * 2;\n \
    \   let vowels_count_from_both_24 = vowels_count_from_both_23 * 2;\n    let vowels_count_from_both_25\
    \ = vowels_count_from_both_24 * 2;\n    let vowels_count_from_both_26 = vowels_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpge5g6yn_.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMin\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjgdfxdsa.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_index = 0;\n    let vowels_index_count = 0;\n    let vowels_index_count_max\
    \ = 0;\n    let vowels_index_count_min = 0;\n    \n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            vowels_index_count++;\n\
    \            if(vowels_index_count > vowels_index_count_max){\n              \
    \  vowels_index_count_max = vowels_index_count;\n            }\n            if(vowels_index_count\
    \ < vowels_index_count_min){\n                vowels_index_count_min = vowels_index_count;\n\
    \            }\n        }\n    }\n    \n    for(let i = word.length - 1; i >=\
    \ 0; i--){\n        if(vowels.includes(word[i])){\n            vowels_index_count++;\n\
    \            if(vowels_index_count > vowels_index_count_max){\n              \
    \  vowels_index_count_max = vowels_index_count;\n            }\n            if(vowels_index_count\
    \ < vowels_index_count_min){\n                vowels_index_count_min = vowels_index_count;\n\
    \            }\n        }\n    }\n    \n    if(vowels_index_count_max > vowels_index_count_min){\n\
    \        return word[vowels_index_count_max - vowels_index_count_min + vowels_index_count];\n\
    \    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'u'\n    at test (/tmp/tmpw9mxvgww.js:58:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpw9mxvgww.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n    let\
    \ vowelsCountRight = vowelsCount - 1;\n    let vowelsCountRight1 = word.length\
    \ - vowelsCount;\n    let vowelsCountRight2 = word.length - vowelsCount;\n   \
    \ let vowelsCountRight3 = word.length - vowelsCount;\n    let vowelsCountRight4\
    \ = word.length - vowelsCount;\n    let vowelsCountRight5 = word.length - vowelsCount;\n\
    \    let vowelsCountRight6 = word.length - vowelsCount;\n    let vowelsCountRight7\
    \ = word.length - vowelsCount;\n    let vowelsCountRight8 = word.length - vowelsCount;\n\
    \    let vowelsCountRight9 = word.length - vowelsCount;\n    let vowelsCountRight10\
    \ = word.length - vowelsCount;\n    let vowelsCountRight11 = word.length - vowelsCount;\n\
    \    let vowelsCountRight12 = word.length - vowelsCount;\n    let vowelsCountRight13\
    \ = word.length - vowelsCount;\n    let vowelsCountRight14 = word.length - vowelsCount;\n\
    \    let vowelsCountRight15 = word.length - vowelsCount;\n    let vowelsCountRight16\
    \ = word.length - vowelsCount;\n    let vowelsCountRight17 = word.length - vowelsCount;\n\
    \    let vowelsCountRight18 = word.length - vowelsCount;\n    let vowelsCountRight19\
    \ = word.length - vowelsCount;\n    let vowelsCountRight20 = word.length - vowelsCount;\n\
    \    let vowelsCountRight21 = word.length - vowelsCount;\n    let vowelsCountRight22\
    \ = word.length - vowelsCount;\n    let vowelsCountRight23 = word.length - vowelsCount;\n\
    \    let vowelsCountRight24 = word.length - vowelsCount;\n    let vowelsCountRight25\
    \ = word.length - vowelsCount;\n    let vowelsCountRight26 = word.length - vowelsCount;\n\
    \    let vowelsCountRight27 = word.length - vowelsCount;\n    let vowelsCountRight28\
    \ = word.length - vowelsCount;\n    let vowelsCountRight29 = word.length - vowelsCount;\n\
    \    let vowelsCountRight30 = word.length - vowelsCount;\n    let vowelsCountRight31\
    \ = word.length - vowelsCount;\n    let vowelsCountRight32 = word.length - vowelsCount;\n\
    \    let vowelsCountRight33 = word.length - vowelsCount;\n    let vowelsCountRight34\
    \ = word.length - vowelsCount;\n    let vowelsCount\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprcxuxit9.js:54\n    let vowelsCount\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCountLeft = word.length - vowelsCount;\n    let vowelsCountRight\
    \ = word.length - vowelsCountLeft;\n    let vowelsCountRightLeft = word.length\
    \ - vowelsCountRight - vowelsCountLeft;\n    let vowelsCountRightLeft2 = word.length\
    \ - vowelsCountRight - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft3\
    \ = word.length - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft;\n\
    \    let vowelsCountRightLeft4 = word.length - vowelsCountRight - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft5\
    \ = word.length - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft6 = word.length\
    \ - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft7 = word.length\
    \ - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft8\
    \ = word.length - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft;\n\
    \    let vowelsCountRightLeft9 = word.length - vowelsCountRight - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft10\
    \ = word.length - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowelsCountLeft;\n    let vowelsCountRightLeft11 = word.length\
    \ - vowelsCountRight - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft - vowelsCountLeft\
    \ - vowelsCountLeft - vowels\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfmk7_6_s.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelsCount = vowels.length;\n\
    \  let vowelsCount2 = vowelsCount-1;\n  let vowelsCount3 = vowelsCount-2\n  let\
    \ vowelsCount4 = vowelsCount-3\n  let vowelsCount5 = vowelsCount-4\n  let vowelsCount6\
    \ = vowelsCount-5\n  let vowelsCount7 = vowelsCount-6\n  let vowelsCount8 = vowelsCount-7\n\
    \  let vowelsCount9 = vowelsCount-8\n  let vowelsCount10 = vowelsCount-9\n  let\
    \ vowelsCount11 = vowelsCount-10\n  let vowelsCount12 = vowelsCount-11\n  let\
    \ vowelsCount13 = vowelsCount-12\n  let vowelsCount14 = vowelsCount-13\n  let\
    \ vowelsCount15 = vowelsCount-14\n  let vowelsCount16 = vowelsCount-15\n  let\
    \ vowelsCount17 = vowelsCount-16\n  let vowelsCount18 = vowelsCount-17\n  let\
    \ vowelsCount19 = vowelsCount-18\n  let vowelsCount20 = vowelsCount-19\n  let\
    \ vowelsCount21 = vowelsCount-20\n  let vowelsCount22 = vowelsCount-21\n  let\
    \ vowelsCount23 = vowelsCount-22\n  let vowelsCount24 = vowelsCount-23\n  let\
    \ vowelsCount25 = vowelsCount-24\n  let vowelsCount26 = vowelsCount-25\n  let\
    \ vowelsCount27 = vowelsCount-26\n  let vowelsCount28 = vowelsCount-27\n  let\
    \ vowelsCount29 = vowelsCount-28\n  let vowelsCount30 = vowelsCount-29\n  let\
    \ vowelsCount31 = vowelsCount-30\n  let vowelsCount32 = vowelsCount-31\n  let\
    \ vowelsCount33 = vowelsCount-32\n  let vowelsCount34 = vowelsCount-33\n  let\
    \ vowelsCount35 = vowelsCount-34\n  let vowelsCount36 = vowelsCount-35\n  let\
    \ vowelsCount37 = vowelsCount-36\n  let vowelsCount38 = vowelsCount-37\n  let\
    \ vowelsCount39 = vowelsCount-38\n  let vowelsCount40 = vowelsCount-39\n  let\
    \ vowelsCount41 = vowelsCount-40\n  let vowelsCount42 = vowelsCount-41\n  let\
    \ vowelsCount43 = vowelsCount-42\n  let vowelsCount44 = vowelsCount-43\n  let\
    \ vowelsCount45 = vowels\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa2niv3db.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = vowels.length;\n\t\
    let vowel_count_from_right = word.length - vowel_count - 1;\n\tlet vowel_count_from_left\
    \ = vowel_count - 1;\n\tlet vowel_count_from_left_to_right = word.length - vowel_count\
    \ + 1;\n\tlet vowel_count_from_right_to_left = word.length - vowel_count - 1;\n\
    \tlet vowel_count_from_left_to_right_to_left = word.length - vowel_count + 1;\n\
    \tlet vowel_count_from_right_to_left_to_right = word.length - vowel_count - 1;\n\
    \tlet vowel_count_from_left_to_right_to_left_to_right = word.length - vowel_count\
    \ + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left = word.length -\
    \ vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_to_right_to_left\
    \ = word.length - vowel_count + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left_to_right\
    \ = word.length - vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = word.length - vowel_count + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = word.length - vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = word.length - vowel_count + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = word.length - vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = word.length - vowel_count + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = word.length - vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = word.length - vowel_count + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = word.length - vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = word.length - vowel_count + 1;\n\tlet vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = word.length - vowel_count - 1;\n\tlet vowel_count_from_left_to_right_to_left_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2z_87rxd.js:59\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    \n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    let vowelsCount = vowels.length;\n    \n    let vowelsIndex\
    \ = [];\n    for(let i=0; i<vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    \n    let vowelsIndexCount = vowelsIndex.length;\n    \n    let vowelsIndexMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    \n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n  \
    \  let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    \n    let\
    \ vowelsIndexMaxValue = vowelsIndex[vowelsIndexMax];\n    let vowelsIndexMinValue\
    \ = vowelsIndex[vowelsIndexMin];\n    \n    let vowelsIndexMaxVowel = vowels[vowelsIndexMax];\n\
    \    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n    \n    let vowelsIndexMaxVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n    let vowelsIndexMinVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMinVowel);\n    \n    let vowelsIndexMaxVowelValue\
    \ = vowelsIndex[vowelsIndexMaxVowel];\n    let vowelsIndexMinVowelValue = vowelsIndex[vowelsIndexMinVowel];\n\
    \    \n    let vowelsIndexMaxVowelVowel = vowels[vowelsIndexMaxVowel];\n    let\
    \ vowelsIndexMinVowelVowel = vowels[vowelsIndexMinVowel];\n    \n    let vowelsIndexMaxVowelVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMaxVowelVowel);\n    let vowelsIndexMinVowelVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMinVowelVowel);\n    \n    let vowelsIndexMaxVowelVowelValue\
    \ = vowelsIndex[vowelsIndexMaxVowelVowel];\n    let vowelsIndexMinVowelVowelValue\
    \ = vowelsIndex[vowelsIndexMinVowelVowel];\n    \n    let vowelsIndexMaxVowelVowelVowel\
    \ = vowels[vowelsIndexMaxVowelVowel];\n    let vowelsIndexMinVowelVowelVowel =\
    \ vowels[vowelsIndexMinV\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpa3j2wo6z.js:57\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    \n    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n    let vowels_count_from_left_to_right = vowels_count_from_left\
    \ - vowels_count_from_right;\n    \n    let vowel_found = false;\n    let closest_vowel\
    \ = \"\";\n    \n    for(let i = 0; i < vowels_count_from_right_to_left; i++){\n\
    \        if(vowels.includes(word[vowels_count_from_right - i])){\n           \
    \ closest_vowel = word[vowels_count_from_right - i];\n            vowel_found\
    \ = true;\n            break;\n        }\n    }\n    \n    if(!vowel_found){\n\
    \        for(let i = 0; i < vowels_count_from_left_to_right; i++){\n         \
    \   if(vowels.includes(word[vowels_count_from_left + i])){\n                closest_vowel\
    \ = word[vowels_count_from_left + i];\n                vowel_found = true;\n \
    \               break;\n            }\n        }\n    }\n    \n    if(!vowel_found){\n\
    \        for(let i = 0; i < vowels_count; i++){\n            if(vowels.includes(word[i])){\n\
    \                closest_vowel = word[i];\n                vowel_found = true;\n\
    \                break;\n            }\n        }\n    }\n    \n    return closest_vowel;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmppfk_8hhp.js:63:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppfk_8hhp.js:78:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n  \
    \  let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo = vowelsCount\
    \ - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let vowelsCountMinusFour\
    \ = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount - 5;\n    let\
    \ vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven = vowelsCount\
    \ - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let vowelsCountMinusNine\
    \ = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount - 10;\n    let\
    \ vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve =\
    \ vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n  \
    \  let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusThirty\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6l29ioem.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountSum = vowelsIndexCountMax\
    \ + vowelsIndexCountMin;\n    let vowelsIndexCountSumMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountSumMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSum\
    \ = vowelsIndexCountSumMax + vowelsIndexCountSumMin;\n    let vowelsIndexCountSumSumMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexCountSumSumMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountSumSumSum = vowelsIndexCountSumSumMax + vowelsIndexCountSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountSumSumSumMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSumSumSum = vowelsIndexCountSumSumSumMax\
    \ + vowelsIndexCountSumSumSumMin;\n    let vowelsIndexCountSumSumSumSumMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSum = vowelsIndexCountSumSumSumSumMax + vowelsIndexCountSumSumSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumSumMax = Math.max(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSumSumSumSum\
    \ = vowelsIndexCountSumSumSumSumSumMax + vowelsIndexCountSumSumSumSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumSumSumMax = Math.max(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountSumSumSumSumSum\
    \ = vowelsIndexCountSumSumSumSumSumSumMax + vowelsIndexCountSumSumSumSumSumSumMin;\n\
    \    let vowelsIndexCountSumSumSumSumSumMax = Math.max(...vowelsIndex);\n    let\
    \ vowelsIndexCountSumSumSumSumMin = Math.min(...vowelsIndex);\n    let vowels\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpfeysb5qp.js:37\n    let vowelsIndexCountSumSumSumSum = vowelsIndexCountSumSumSumSumMax\
    \ + vowelsIndexCountSumSumSumSumMin;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexCountSumSumSumSum'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_2 = 0;\n    var vowels_index_count_3 = 0;\n    var\
    \ vowels_index_count_4 = 0;\n    var vowels_index_count_5 = 0;\n    var vowels_index_count_6\
    \ = 0;\n    var vowels_index_count_7 = 0;\n    var vowels_index_count_8 = 0;\n\
    \    var vowels_index_count_9 = 0;\n    var vowels_index_count_10 = 0;\n    var\
    \ vowels_index_count_11 = 0;\n    var vowels_index_count_12 = 0;\n    var vowels_index_count_13\
    \ = 0;\n    var vowels_index_count_14 = 0;\n    var vowels_index_count_15 = 0;\n\
    \    var vowels_index_count_16 = 0;\n    var vowels_index_count_17 = 0;\n    var\
    \ vowels_index_count_18 = 0;\n    var vowels_index_count_19 = 0;\n    var vowels_index_count_20\
    \ = 0;\n    var vowels_index_count_21 = 0;\n    var vowels_index_count_22 = 0;\n\
    \    var vowels_index_count_23 = 0;\n    var vowels_index_count_24 = 0;\n    var\
    \ vowels_index_count_25 = 0;\n    var vowels_index_count_26 = 0;\n    var vowels_index_count_27\
    \ = 0;\n    var vowels_index_count_28 = 0;\n    var vowels_index_count_29 = 0;\n\
    \    var vowels_index_count_30 = 0;\n    var vowels_index_count_31 = 0;\n    var\
    \ vowels_index_count_32 = 0;\n    var vowels_index_count_33 = 0;\n    var vowels_index_count_34\
    \ = 0;\n    var vowels_index_count_35 = 0;\n    var vowels_index_count_36 = 0;\n\
    \    var vowels_index_count_37 = 0;\n    var vowels_index_count_38 = 0;\n    var\
    \ vowels_index_count_39 = 0;\n    var vowels_index_count_40 = 0;\n    var vowels_index_count_41\
    \ = 0;\n    var vowels_index_count_42 = 0;\n    var vowels_index_count_43 = 0;\n\
    \    var vowels_index_count_44 = 0;\n    var vowels_index_count_45 = 0;\n    var\
    \ vowels_index_count_46 = 0;\n    var vowels_index_count_47 = 0;\n    var vowels_index_count_48\
    \ = 0;\n    var vowels_index_count_49 = 0;\n    var vowels_index_count_50 = 0;\n\
    \    var vowels_index_count_51 = 0;\n    var vowels_index_count_52 = 0;\n    var\
    \ vowels_index_count_53 = 0;\n    var vowels_index_count_54 = 0;\n    var vowels_index_count_55\
    \ = 0;\n    var vowels_index_count_56 = 0;\n    var vowels_index_count_57 = 0;\n\
    \    var vowels_index_count_58 = 0;\n    var vowels_index_count_59 = 0;\n    var\
    \ vowels_index_count_60 = 0;\n    var vowels_index_count_61 = 0;\n    var vowels_index_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0atlehy5.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMin = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMaxMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMax = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinMinMaxMax\
    \ = Math.max(...vowelsIndex);\n    let vowels\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp32b_g0al.js:30\n    let vowelsIndexCountMinMinMaxMax = Math.min(...vowelsIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexCountMinMinMaxMax' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels_count = vowels.length;\n    vowels_count_from_right = vowels_count\
    \ - 1;\n    vowels_count_from_left = vowels_count - 2;\n    vowels_count_from_left_to_right\
    \ = vowels_count - 3;\n    vowels_count_from_right_to_left = vowels_count - 4;\n\
    \    vowels_count_from_left_to_right_to_left = vowels_count - 5;\n    vowels_count_from_right_to_left_to_right\
    \ = vowels_count - 6;\n    vowels_count_from_left_to_right_to_left_to_right =\
    \ vowels_count - 7;\n    vowels_count_from_right_to_left_to_right_to_left = vowels_count\
    \ - 8;\n    vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count\
    \ - 9;\n    vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 10;\n    vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 11;\n    vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 13;\n    vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 15;\n    vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 16;\n    vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 17;\n    vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 19;\n    vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 20;\n    vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwpkm0acd.js:61\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - word.length;\n    var vowels_count_from_both = vowels_count_from_right\
    \ + vowels_count_from_left;\n    var vowels_count_from_both_not_in_word = 0;\n\
    \    \n    for(var i=0;i<vowels_count;i++){\n        if(word.indexOf(vowels[i])\
    \ == -1){\n            vowels_count_from_both_not_in_word++;\n        }\n    }\n\
    \    \n    if(vowels_count_from_both_not_in_word == 0){\n        return \"\";\n\
    \    }\n    \n    if(vowels_count_from_both_not_in_word == 1){\n        return\
    \ word[vowels_count_from_both];\n    }\n    \n    if(vowels_count_from_both_not_in_word\
    \ == 2){\n        return word[vowels_count_from_both-1] + word[vowels_count_from_both];\n\
    \    }\n    \n    if(vowels_count_from_both_not_in_word == 3){\n        return\
    \ word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both];\n\
    \    }\n    \n    if(vowels_count_from_both_not_in_word == 4){\n        return\
    \ word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both-1]\
    \ + word[vowels_count_from_both];\n    }\n    \n    if(vowels_count_from_both_not_in_word\
    \ == 5){\n        return word[vowels_count_from_both-1] + word[vowels_count_from_both-1]\
    \ + word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both];\n\
    \    }\n    \n    if(vowels_count_from_both_not_in_word == 6){\n        return\
    \ word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both-1]\
    \ + word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both];\n\
    \    }\n    \n    if(vowels_count_from_both_not_in_word == 7){\n        return\
    \ word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both-1]\
    \ + word[vowels_count_from_both-1] + word[vowels_count_from_both-1] + word[vowels_count_from_both-1]\
    \ + word[\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuyy21l46.js:59\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = 0;\n    let vowels_count_from_middle = 0;\n    let vowels_count_from_middle2\
    \ = 0;\n    let vowels_count_from_middle3 = 0;\n    let vowels_count_from_middle4\
    \ = 0;\n    let vowels_count_from_middle5 = 0;\n    let vowels_count_from_middle6\
    \ = 0;\n    let vowels_count_from_middle7 = 0;\n    let vowels_count_from_middle8\
    \ = 0;\n    let vowels_count_from_middle9 = 0;\n    let vowels_count_from_middle10\
    \ = 0;\n    let vowels_count_from_middle11 = 0;\n    let vowels_count_from_middle12\
    \ = 0;\n    let vowels_count_from_middle13 = 0;\n    let vowels_count_from_middle14\
    \ = 0;\n    let vowels_count_from_middle15 = 0;\n    let vowels_count_from_middle16\
    \ = 0;\n    let vowels_count_from_middle17 = 0;\n    let vowels_count_from_middle18\
    \ = 0;\n    let vowels_count_from_middle19 = 0;\n    let vowels_count_from_middle20\
    \ = 0;\n    let vowels_count_from_middle21 = 0;\n    let vowels_count_from_middle22\
    \ = 0;\n    let vowels_count_from_middle23 = 0;\n    let vowels_count_from_middle24\
    \ = 0;\n    let vowels_count_from_middle25 = 0;\n    let vowels_count_from_middle26\
    \ = 0;\n    let vowels_count_from_middle27 = 0;\n    let vowels_count_from_middle28\
    \ = 0;\n    let vowels_count_from_middle29 = 0;\n    let vowels_count_from_middle30\
    \ = 0;\n    let vowels_count_from_middle31 = 0;\n    let vowels_count_from_middle32\
    \ = 0;\n    let vowels_count_from_middle33 = 0;\n    let vowels_count_from_middle34\
    \ = 0;\n    let vowels_count_from_middle35 = 0;\n    let vowels_count_from_middle36\
    \ = 0;\n    let vowels_count_from_middle37 = 0;\n    let vowels_count_from_middle38\
    \ = 0;\n    let vowels_count_from_middle39 = 0;\n    let vowels_count_from_middle40\
    \ = 0;\n    let vowels_count_from_middle41 = 0;\n    let vowels_count_from_middle42\
    \ = 0;\n    let vowels_count_from_middle43 = 0;\n    let vowels_count_from_middle44\
    \ = 0;\n    let vowels_count_from_middle45 = 0;\n    let vowels_count_from_middle46\
    \ = 0;\n    let vowels_count_from_middle47 = 0;\n    let vowels_count_from_middle48\
    \ = 0;\n    let vowels_count_from_middle49 = 0;\n    let vowels_count_from_middle50\
    \ = 0;\n    let vowels_count_from_middle51 = 0;\n    let vowels_count_from_middle52\
    \ = 0;\n    let vowels_count_from_middle53 = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcmh2pvr5.js:93\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \  let vowels = ['a','e','i','o','u'];\n  let vowelsCount = vowels.length;\n \
    \ let vowelsCount2 = vowelsCount-1;\n  let vowelsCount3 = vowelsCount-2; \n  let\
    \ vowelsCount4 = vowelsCount-3;\n  let vowelsCount5 = vowelsCount-4; \n  let vowelsCount6\
    \ = vowelsCount-5; \n  let vowelsCount7 = vowelsCount-6; \n  let vowelsCount8\
    \ = vowelsCount-7; \n  let vowelsCount9 = vowelsCount-8; \n  let vowelsCount10\
    \ = vowelsCount-9; \n  let vowelsCount11 = vowelsCount-10; \n  let vowelsCount12\
    \ = vowelsCount-11; \n  let vowelsCount13 = vowelsCount-12; \n  let vowelsCount14\
    \ = vowelsCount-13; \n  let vowelsCount15 = vowelsCount-14; \n  let vowelsCount16\
    \ = vowelsCount-15; \n  let vowelsCount17 = vowelsCount-16; \n  let vowelsCount18\
    \ = vowelsCount-17; \n  let vowelsCount19 = vowelsCount-18; \n  let vowelsCount20\
    \ = vowelsCount-19; \n  let vowelsCount21 = vowelsCount-20; \n  let vowelsCount22\
    \ = vowelsCount-21; \n  let vowelsCount23 = vowelsCount-22; \n  let vowelsCount24\
    \ = vowelsCount-23; \n  let vowelsCount25 = vowelsCount-24; \n  let vowelsCount26\
    \ = vowelsCount-25; \n  let vowelsCount27 = vowelsCount-26; \n  let vowelsCount28\
    \ = vowelsCount-27; \n  let vowelsCount29 = vowelsCount-28; \n  let vowelsCount30\
    \ = vowelsCount-29; \n  let vowelsCount31 = vowelsCount-30; \n  let vowelsCount32\
    \ = vowelsCount-31; \n  let vowelsCount33 = vowelsCount-32; \n  let vowelsCount34\
    \ = vowelsCount-33; \n  let vowelsCount35 = vowelsCount-34; \n  let vowelsCount36\
    \ = vowelsCount-35; \n  let vowelsCount37 = vowelsCount-36; \n  let vowelsCount38\
    \ = vowelsCount-37; \n  let vowelsCount39 = vowelsCount-38; \n  let vowelsCount40\
    \ = vowelsCount-39; \n  let vowelsCount41 = vowelsCount-40; \n  let vowelsCount4\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi90m2fxm.js:58\n  let vowelsCount4\n      ^\n\nSyntaxError: Identifier\
    \ 'vowelsCount4' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    let vowels_index_count_min = 0;\n  \
    \  let vowels_index_count_min_index = 0;\n    let vowels_index_count_max_index\
    \ = 0;\n    let vowels_index_count_min_index2 = 0;\n    let vowels_index_count_max_index2\
    \ = 0;\n    let vowels_index_count_min_index3 = 0;\n    let vowels_index_count_max_index3\
    \ = 0;\n    let vowels_index_count_min_index4 = 0;\n    let vowels_index_count_max_index4\
    \ = 0;\n    let vowels_index_count_min_index5 = 0;\n    let vowels_index_count_max_index5\
    \ = 0;\n    let vowels_index_count_min_index6 = 0;\n    let vowels_index_count_max_index6\
    \ = 0;\n    let vowels_index_count_min_index7 = 0;\n    let vowels_index_count_max_index7\
    \ = 0;\n    let vowels_index_count_min_index8 = 0;\n    let vowels_index_count_max_index8\
    \ = 0;\n    let vowels_index_count_min_index9 = 0;\n    let vowels_index_count_max_index9\
    \ = 0;\n    let vowels_index_count_min_index10 = 0;\n    let vowels_index_count_max_index10\
    \ = 0;\n    let vowels_index_count_min_index11 = 0;\n    let vowels_index_count_max_index11\
    \ = 0;\n    let vowels_index_count_min_index12 = 0;\n    let vowels_index_count_max_index12\
    \ = 0;\n    let vowels_index_count_min_index13 = 0;\n    let vowels_index_count_max_index13\
    \ = 0;\n    let vowels_index_count_min_index14 = 0;\n    let vowels_index_count_max_index14\
    \ = 0;\n    let vowels_index_count_min_index15 = 0;\n    let vowels_index_count_max_index15\
    \ = 0;\n    let vowels_index_count_min_index16 = 0;\n    let vowels_index_count_max_index16\
    \ = 0;\n    let vowels_index_count_min_index17 = 0;\n    let vowels_index_count_max_index17\
    \ = 0;\n    let vowels_index_count_min_index18 = 0;\n    let vowels_index_count_max_index18\
    \ = 0;\n    let vowels_index_count_min_index19 = 0;\n    let vowels_index_count_max_index19\
    \ = 0;\n    let vowels_index_count_min_index20 = 0;\n    let vowels_index_count_max_index20\
    \ = 0;\n    let vowels_index_count_min_index21 = 0;\n    let vowels_index_count_max_index21\
    \ = 0;\n    let vowels_index_count_min_index22 = 0;\n    let vowels_index_count_max_index22\
    \ = 0;\n    let vowels_index_count_min_index23 = 0;\n    let vowels_index_count_max_index23\
    \ = 0;\n    let vowels_index_count_min_index24 = 0;\n    let vowels_index_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4pwc10p1.js:90\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n \
    \   let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n       \
    \ vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n  \
    \  let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n \
    \   for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n\
    \    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n \
    \   let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i\
    \ = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n   \
    \ let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i =\
    \ 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n    let\
    \ vowelsCount = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(i);\n    }\n    \n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n \
    \   let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n       \
    \ vowelsIndex.push(i);\n    }\n    \n    let vowelsCount = vowels.length;\n  \
    \  let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n\
    \    }\n    \n    let vowelsCount = vowels.length;\n    let vowelsIndex = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(i);\n   \
    \ }\n    \n    let vowelsCount = vowels.length;\n    let \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpafz2pr0t.js:23\n    let vowelsCount = vowels.length;\n        ^\n\
    \nSyntaxError: Identifier 'vowelsCount' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_middle2 = vowels_count - 4;\n    let vowels_count_from_middle3\
    \ = vowels_count - 5;\n    let vowels_count_from_middle4 = vowels_count - 6;\n\
    \    let vowels_count_from_middle5 = vowels_count - 7;\n    let vowels_count_from_middle6\
    \ = vowels_count - 8;\n    let vowels_count_from_middle7 = vowels_count - 9;\n\
    \    let vowels_count_from_middle8 = vowels_count - 10;\n    let vowels_count_from_middle9\
    \ = vowels_count - 11;\n    let vowels_count_from_middle10 = vowels_count - 12;\n\
    \    let vowels_count_from_middle11 = vowels_count - 13;\n    let vowels_count_from_middle12\
    \ = vowels_count - 14;\n    let vowels_count_from_middle13 = vowels_count - 15;\n\
    \    let vowels_count_from_middle14 = vowels_count - 16;\n    let vowels_count_from_middle15\
    \ = vowels_count - 17;\n    let vowels_count_from_middle16 = vowels_count - 18;\n\
    \    let vowels_count_from_middle17 = vowels_count - 19;\n    let vowels_count_from_middle18\
    \ = vowels_count - 20;\n    let vowels_count_from_middle19 = vowels_count - 21;\n\
    \    let vowels_count_from_middle20 = vowels_count - 22;\n    let vowels_count_from_middle21\
    \ = vowels_count - 23;\n    let vowels_count_from_middle22 = vowels_count - 24;\n\
    \    let vowels_count_from_middle23 = vowels_count - 25;\n    let vowels_count_from_middle24\
    \ = vowels_count - 26;\n    let vowels_count_from_middle25 = vowels_count - 27;\n\
    \    let vowels_count_from_middle26 = vowels_count - 28;\n    let vowels_count_from_middle27\
    \ = vowels_count - 29;\n    let vowels_count_from_middle28 = vowels_count - 30;\n\
    \    let vowels_count_from_middle29 = vowels_count - 31;\n    let vowels_count_from_middle30\
    \ = vowels_count - 32;\n    let vowels_count_from_middle31 = vowels_count - 33;\n\
    \    let vowels_count_from_middle32 = vowels_count - 34;\n    let vowels_count_from_middle33\
    \ = vowels_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpw75zos5x.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = word.length - vowels_count;\n\
    \    var vowels_count_from_left = vowels_count - 1;\n    var vowels_count_from_middle\
    \ = vowels_count / 2;\n    var vowels_count_from_middle2 = vowels_count_from_middle\
    \ + 1;\n    var vowels_count_from_middle3 = vowels_count_from_middle2 + 1;\n \
    \   var vowels_count_from_middle4 = vowels_count_from_middle3 + 1;\n    var vowels_count_from_middle5\
    \ = vowels_count_from_middle4 + 1;\n    var vowels_count_from_middle6 = vowels_count_from_middle5\
    \ + 1;\n    var vowels_count_from_middle7 = vowels_count_from_middle6 + 1;\n \
    \   var vowels_count_from_middle8 = vowels_count_from_middle7 + 1;\n    var vowels_count_from_middle9\
    \ = vowels_count_from_middle8 + 1;\n    var vowels_count_from_middle10 = vowels_count_from_middle9\
    \ + 1;\n    var vowels_count_from_middle11 = vowels_count_from_middle10 + 1;\n\
    \    var vowels_count_from_middle12 = vowels_count_from_middle11 + 1;\n    var\
    \ vowels_count_from_middle13 = vowels_count_from_middle12 + 1;\n    var vowels_count_from_middle14\
    \ = vowels_count_from_middle13 + 1;\n    var vowels_count_from_middle15 = vowels_count_from_middle14\
    \ + 1;\n    var vowels_count_from_middle16 = vowels_count_from_middle15 + 1;\n\
    \    var vowels_count_from_middle17 = vowels_count_from_middle16 + 1;\n    var\
    \ vowels_count_from_middle18 = vowels_count_from_middle17 + 1;\n    var vowels_count_from_middle19\
    \ = vowels_count_from_middle18 + 1;\n    var vowels_count_from_middle20 = vowels_count_from_middle19\
    \ + 1;\n    var vowels_count_from_middle21 = vowels_count_from_middle20 + 1;\n\
    \    var vowels_count_from_middle22 = vowels_count_from_middle21 + 1;\n    var\
    \ vowels_count_from_middle23 = vowels_count_from_middle22 + 1;\n    var vowels_count_from_middle24\
    \ = vowels_count_from_middle23 + 1;\n    var vowels_count_from_middle25 = vowels_count_from_middle24\
    \ + 1;\n    var vowels_count_from_middle26 = vowels_count_from_middle25 + 1;\n\
    \    var vowels_count_from_middle27 = vowels_count_from_middle26 + 1;\n    var\
    \ vowels_count_from_middle28 = vowels_count_from_middle27 + 1;\n    var vowels_count_from_middle29\
    \ = vowels_count_from_middle28 + 1;\n    var vowels_count_from_middle30 = vowels_count_from_middle29\
    \ + 1;\n    var \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxzrxdxay.js:51\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMin\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkc5gc6kc.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i=0;i<word.length;i++){\n        if(vowels.includes(word[i])){\n\
    \            vowelsIndex.push(i);\n        }\n    }\n    let vowelsIndexLength\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexMiddle\
    \ = Math.round((vowelsIndexMax+vowelsIndexMin)/2);\n    let vowelsIndexMiddleIndex\
    \ = 0;\n    for(let i=0;i<vowelsIndexLength;i++){\n        if(vowelsIndexMiddle==i){\n\
    \            vowelsIndexMiddleIndex = i;\n            break;\n        }\n    }\n\
    \    let vowelsIndexMiddleValue = vowelsIndex[vowelsIndexMiddle];\n    let vowelsIndexMiddleValueIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMiddleValue);\n    let vowelsIndexMiddleValueLength\
    \ = vowelsIndexMiddleValue.length;\n    let vowelsIndexMiddleValueMax = Math.max(...vowelsIndexMiddleValue);\n\
    \    let vowelsIndexMiddleValueMin = Math.min(...vowelsIndexMiddleValue);\n  \
    \  let vowelsIndexMiddleValueMiddle = Math.round((vowelsIndexMiddleValueMax+vowelsIndexMiddleValueMin)/2);\n\
    \    let vowelsIndexMiddleValueMiddleIndex = 0;\n    for(let i=0;i<vowelsIndexMiddleValueLength;i++){\n\
    \        if(vowelsIndexMiddleValueMiddle==i){\n            vowelsIndexMiddleValueMiddleIndex\
    \ = i;\n            break;\n        }\n    }\n    let vowelsIndexMiddleValueMiddleValue\
    \ = vowelsIndexMiddleValue[vowelsIndexMiddleValueMiddle];\n    let vowelsIndexMiddleValueMiddleValueIndex\
    \ = vowelsIndexMiddleValue.indexOf(vowelsIndexMiddleValueMiddleValue);\n    let\
    \ vowelsIndexMiddleValueMiddleValueLength = vowelsIndexMiddleValueMiddleValue.length;\n\
    \    let vowelsIndexMiddleValueMiddleValueMax = Math.max(...vowelsIndexMiddleValueMiddleValue);\n\
    \    let vowelsIndexMiddleValueMiddleValueMin = Math.min(...vowelsIndexMiddleValueMiddleValue);\n\
    \    let vowelsIndexMiddleValueMiddleValueMiddle = Math.round((vowelsIndexMiddleValueMiddleValueMax+vowelsIndexMiddleValueMiddleValueMin)/2);\n\
    \    let vowelsIndexMiddleValueMiddleValueMiddleIndex = 0;\n    for(let i=0;i<vowelsIndexMiddleValueMiddleValueLength;i++){\n\
    \        if(vowelsIndexMiddleValueMiddleValueMiddle==i){\n            vowelsIndexMiddleValueMiddleValueMiddleIndex\
    \ = i;\n            break;\n        }\n    }\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc2mbspgl.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    \n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexCountMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    \n    let vowelsIndexCountMinIndex\
    \ = 0;\n    let vowelsIndexCountMaxIndex = 0;\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] === vowelsIndexCountMin){\n            vowelsIndexCountMinIndex\
    \ = i;\n        }\n        if(vowelsIndex[i] === vowelsIndexCountMax){\n     \
    \       vowelsIndexCountMaxIndex = i;\n        }\n    }\n    \n    let vowelsIndexCountMinIndexVowel\
    \ = vowelsIndex[vowelsIndexCountMinIndex];\n    let vowelsIndexCountMaxIndexVowel\
    \ = vowelsIndex[vowelsIndexCountMaxIndex];\n    \n    let vowelsIndexCountMinIndexVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexCountMinIndexVowel);\n    let vowelsIndexCountMaxIndexVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexCountMaxIndexVowel);\n    \n    let vowelsIndexCountMinIndexVowelVowel\
    \ = vowelsIndex[vowelsIndexCountMinIndexVowelIndex];\n    let vowelsIndexCountMaxIndexVowelVowel\
    \ = vowelsIndex[vowelsIndexCountMaxIndexVowelIndex];\n    \n    let vowelsIndexCountMinIndexVowelVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexCountMinIndexVowelVowel);\n    let vowelsIndexCountMaxIndexVowelVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexCountMaxIndexVowelVowel);\n    \n    let vowelsIndexCountMinIndexVowelVowelVowel\
    \ = vowelsIndex[vowelsIndexCountMinIndexVowelVowelIndex];\n    let vowelsIndexCountMaxIndexVowelVowelVowel\
    \ = vowelsIndex[vowelsIndexCountMaxIndexVowelVowelIndex];\n    \n    let vowelsIndexCountMinIndexVowelVowelVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexCountMinIndexVowelVow\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc31u7ka6.js:53\n    let vowelsIndexCountMinIndexVowelVowelVowelIndex\
    \ = vowelsIndex.indexOf(vowelsIndexCountMinIndexVowelVow\n                   \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nSyntaxError: missing ) after argument list\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = word.length - vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 1;\n    let vowel_count_from_left_from_right = word.length -\
    \ vowel_count_from_right - 1;\n    let vowel_count_from_right_from_left = word.length\
    \ - vowel_count_from_left - 1;\n    let vowel_count_from_left_from_right_from_right\
    \ = word.length - vowel_count_from_left_from_right - 1;\n    let vowel_count_from_right_from_left_from_right\
    \ = word.length - vowel_count_from_right_from_left - 1;\n    let vowel_count_from_left_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_left_from_right_from_right - 1;\n    let vowel_count_from_right_from_left_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_right_from_left_from_right_from_right - 1;\n\
    \    let vowel_count_from_left_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_left_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_right_from_left_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_right_from_left_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_left_from_right_from_right_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_right_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_right_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_right_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_right_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ = word.length - vowel_count_from_left_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right_from_right\
    \ - 1;\n    let vowel_count_from_right_from_left_from_right_from_right_from_right_from_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8zvchwwn.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a','e','i','o','u'];\n    var vowel_count = 0;\n    var vowel_found\
    \ = false;\n    var vowel_found2 = false;\n    var vowel_found3 = false;\n   \
    \ var vowel_found4 = false;\n    var vowel_found5 = false;\n    var vowel_found6\
    \ = false;\n    var vowel_found7 = false;\n    var vowel_found8 = false;\n   \
    \ var vowel_found9 = false;\n    var vowel_found10 = false;\n    var vowel_found11\
    \ = false;\n    var vowel_found12 = false;\n    var vowel_found13 = false;\n \
    \   var vowel_found14 = false;\n    var vowel_found15 = false;\n    var vowel_found16\
    \ = false;\n    var vowel_found17 = false;\n    var vowel_found18 = false;\n \
    \   var vowel_found19 = false;\n    var vowel_found20 = false;\n    var vowel_found21\
    \ = false;\n    var vowel_found22 = false;\n    var vowel_found23 = false;\n \
    \   var vowel_found24 = false;\n    var vowel_found25 = false;\n    var vowel_found26\
    \ = false;\n    var vowel_found27 = false;\n    var vowel_found28 = false;\n \
    \   var vowel_found29 = false;\n    var vowel_found30 = false;\n    var vowel_found31\
    \ = false;\n    var vowel_found32 = false;\n    var vowel_found33 = false;\n \
    \   var vowel_found34 = false;\n    var vowel_found35 = false;\n    var vowel_found36\
    \ = false;\n    var vowel_found37 = false;\n    var vowel_found38 = false;\n \
    \   var vowel_found39 = false;\n    var vowel_found40 = false;\n    var vowel_found41\
    \ = false;\n    var vowel_found42 = false;\n    var vowel_found43 = false;\n \
    \   var vowel_found44 = false;\n    var vowel_found45 = false;\n    var vowel_found46\
    \ = false;\n    var vowel_found47 = false;\n    var vowel_found48 = false;\n \
    \   var vowel_found49 = false;\n    var vowel_found50 = false;\n    var vowel_found51\
    \ = false;\n    var vowel_found52 = false;\n    var vowel_found53 = false;\n \
    \   var vowel_found54 = false;\n    var vowel_found55 = false;\n    var vowel_found56\
    \ = false;\n    var vowel_found57 = false;\n    var vowel_found58 = false;\n \
    \   var vowel_found59 = false;\n    var vowel_found60 = false;\n    var vowel_found61\
    \ = false;\n    var vowel_found62 = false;\n    var vowel_found63 = false;\n \
    \   var vowel_found64 = false;\n    var vowel_found65 = false;\n    var vowel_found66\
    \ = false;\n    var vowel_found67 = false;\n    var vowel_found68 = false;\n \
    \   var vowel_found69\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz4w17wwu.js:107\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowelsCount =\
    \ vowels.length;\n    var vowelsIndex = [];\n    var vowelsIndexCount = 0;\n \
    \   var vowelsIndexCount2 = 0;\n    var vowelsIndexCount3 = 0;\n    var vowelsIndexCount4\
    \ = 0;\n    var vowelsIndexCount5 = 0;\n    var vowelsIndexCount6 = 0;\n    var\
    \ vowelsIndexCount7 = 0;\n    var vowelsIndexCount8 = 0;\n    var vowelsIndexCount9\
    \ = 0;\n    var vowelsIndexCount10 = 0;\n    var vowelsIndexCount11 = 0;\n   \
    \ var vowelsIndexCount12 = 0;\n    var vowelsIndexCount13 = 0;\n    var vowelsIndexCount14\
    \ = 0;\n    var vowelsIndexCount15 = 0;\n    var vowelsIndexCount16 = 0;\n   \
    \ var vowelsIndexCount17 = 0;\n    var vowelsIndexCount18 = 0;\n    var vowelsIndexCount19\
    \ = 0;\n    var vowelsIndexCount20 = 0;\n    var vowelsIndexCount21 = 0;\n   \
    \ var vowelsIndexCount22 = 0;\n    var vowelsIndexCount23 = 0;\n    var vowelsIndexCount24\
    \ = 0;\n    var vowelsIndexCount25 = 0;\n    var vowelsIndexCount26 = 0;\n   \
    \ var vowelsIndexCount27 = 0;\n    var vowelsIndexCount28 = 0;\n    var vowelsIndexCount29\
    \ = 0;\n    var vowelsIndexCount30 = 0;\n    var vowelsIndexCount31 = 0;\n   \
    \ var vowelsIndexCount32 = 0;\n    var vowelsIndexCount33 = 0;\n    var vowelsIndexCount34\
    \ = 0;\n    var vowelsIndexCount35 = 0;\n    var vowelsIndexCount36 = 0;\n   \
    \ var vowelsIndexCount37 = 0;\n    var vowelsIndexCount38 = 0;\n    var vowelsIndexCount39\
    \ = 0;\n    var vowelsIndexCount40 = 0;\n    var vowelsIndexCount41 = 0;\n   \
    \ var vowelsIndexCount42 = 0;\n    var vowelsIndexCount43 = 0;\n    var vowelsIndexCount44\
    \ = 0;\n    var vowelsIndexCount45 = 0;\n    var vowelsIndexCount46 = 0;\n   \
    \ var vowelsIndexCount47 = 0;\n    var vowelsIndexCount48 = 0;\n    var vowelsIndexCount49\
    \ = 0;\n    var vowelsIndexCount50 = 0;\n    var vowelsIndexCount51 = 0;\n   \
    \ var vowelsIndexCount52 = 0;\n    var vowelsIndexCount53 = 0;\n    var vowelsIndexCount54\
    \ = 0;\n    var vowelsIndexCount55 = 0;\n    var vowelsIndexCount56 = 0;\n   \
    \ var vowelsIndexCount57 = 0;\n    var vowelsIndexCount58 = 0;\n    var vowelsIndexCount59\
    \ = 0;\n    var vowelsIndexCount60 = 0;\n    var vowelsIndexCount61 = 0;\n   \
    \ var vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpzkm8p39p.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_left_to_right = vowels_count_from_right - vowels_count_from_left;\n\
    \    let vowels_count_from_right_to_left = vowels_count_from_left - vowels_count_from_right;\n\
    \    let vowels_count_from_middle_to_left = vowels_count_from_left - vowels_count_from_middle;\n\
    \    let vowels_count_from_middle_to_right = vowels_count_from_right - vowels_count_from_middle;\n\
    \    let vowels_count_from_left_to_middle = vowels_count_from_middle - vowels_count_from_left;\n\
    \    let vowels_count_from_right_to_middle = vowels_count_from_middle - vowels_count_from_right;\n\
    \    let vowels_count_from_middle_to_middle = vowels_count_from_middle - vowels_count_from_middle;\n\
    \    let vowels_count_from_left_to_right_to_middle = vowels_count_from_right_to_middle\
    \ - vowels_count_from_left_to_right;\n    let vowels_count_from_right_to_left_to_middle\
    \ = vowels_count_from_left_to_middle - vowels_count_from_right_to_left;\n    let\
    \ vowels_count_from_middle_to_left_to_middle = vowels_count_from_middle_to_middle\
    \ - vowels_count_from_left_to_middle;\n    let vowels_count_from_middle_to_right_to_middle\
    \ = vowels_count_from_right_to_middle - vowels_count_from_middle_to_left;\n  \
    \  let vowels_count_from_left_to_middle_to_middle = vowels_count_from_middle_to_middle\
    \ - vowels_count_from_left_to_middle;\n    let vowels_count_from_right_to_middle_to_middle\
    \ = vowels_count_from_middle_to_middle - vowels_count_from_right_to_left;\n  \
    \  let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count_from_right_to_left_to_middle\
    \ - vowels_count_from_middle_to_right_to_left;\n    let vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count_from_left_to_middle_to_middle - vowels_count_from_middle_to_right_to_left;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count_from_right_to_left_to_middle\
    \ - vowels_count_from_middle_to_left_to_middle;\n    let vowels_count_from_middle_to_right_to_left_to_middle_to_middle\
    \ = vowels_count_from_left_to_middle_to_right_to_middle - vowels_count_from_middle_to_left_to_right_to_middle;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp474jpt02.js:36\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_right_to_left_to_middle - vowels_count_from_middle_to_left_to_middle;\n\
    \        ^\n\nSyntaxError: Identifier 'vowels_count_from_middle_to_left_to_right_to_middle'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle_right = vowels_count_from_middle + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_left = vowels_count_from_middle - vowels_count_from_left;\n\
    \    let vowels_count_from_middle_left_right = vowels_count_from_middle_left +\
    \ vowels_count_from_right;\n    let vowels_count_from_middle_right_left = vowels_count_from_middle_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left\
    \ = vowels_count_from_middle_left_right + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left_right\
    \ = vowels_count_from_middle_left_right_left + vowels_count_from_right;\n    let\
    \ vowels_count_from_middle_left_right_left_right_left = vowels_count_from_middle_left_right_left_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left_right_left_right\
    \ = vowels_count_from_middle_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_left_right_left_right_left_right_left = vowels_count_from_middle_left_right_left_right_left_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_left_right_left_right_left_right_left + vowels_count_from_right;\n\
    \    let vowels_count_from_middle_left_right_left_right_left_right_left_right_left\
    \ = vowels_count_from_middle_left_right_left_right_left_right_left_right + vowels_count_from_left;\n\
    \    let vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_left_right_left_right_left_right_left_right_left\
    \ + vowels_count_from_right;\n    let vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right_left\
    \ = vowels_count_from_middle_left_right_left_right_left_right_left_right_left\
    \ + vowels_count_from_right;\n    let vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right\
    \ + vowels_count_from_left;\n    let vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right_left\
    \ + vowels_count_from_right;\n    let vowels_count_from_middle_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpryaj7pnx.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinIndex = 0;\n    for(let\
    \ i = 0; i < vowelsCount; i++){\n        if(vowelsIndex[i] >= vowelsIndexCountMin\
    \ && vowelsIndex[i] <= vowelsIndexCountMax){\n            vowelsIndexCountMinIndex\
    \ = i;\n            break;\n        }\n    }\n    let vowelsIndexCountMinIndexIndex\
    \ = 0;\n    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndex[i] >=\
    \ vowelsIndexCountMin && vowelsIndex[i] <= vowelsIndexCountMax){\n           \
    \ vowelsIndexCountMinIndexIndex = i;\n            break;\n        }\n    }\n \
    \   let vowelsIndexCountMaxIndex = 0;\n    for(let i = 0; i < vowelsCount; i++){\n\
    \        if(vowelsIndex[i] >= vowelsIndexCountMin && vowelsIndex[i] <= vowelsIndexCountMax){\n\
    \            vowelsIndexCountMaxIndex = i;\n            break;\n        }\n  \
    \  }\n    let vowelsIndexCountMaxIndexIndex = 0;\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] >= vowelsIndexCountMin && vowelsIndex[i] <=\
    \ vowelsIndexCountMax){\n            vowelsIndexCountMaxIndexIndex = i;\n    \
    \        break;\n        }\n    }\n    let vowelsIndexCountMinIndexIndex = 0;\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndex[i] >= vowelsIndexCountMin\
    \ && vowelsIndex[i] <= vowelsIndexCountMax){\n            vowelsIndexCountMinIndexIndex\
    \ = i;\n            break;\n        }\n    }\n    let vowelsIndexCountMaxIndexIndex\
    \ = 0;\n    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndex[i] >=\
    \ vowelsIndexCountMin && vowelsIndex[i] <= vowelsIndexCountMax){\n           \
    \ vowelsIndexCountMaxIndexIndex = i;\n            break;\n        }\n    }\n \
    \   let vowelsIndexCountMinIndexIndex = 0;\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] >= vowelsIndexCountMin && vowelsIndex[i] <=\
    \ vowelsIndexCountMax){\n            vowelsIndexCountMinIndexIndex = i;\n    \
    \        break;\n        }\n    }\n    let vowelsIndexCountMaxIndexIndex = 0;\n\
    \    for(let i = 0; i < \nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp3e3vxdg7.js:53\n    let vowelsIndexCountMinIndexIndex = 0;\n  \
    \      ^\n\nSyntaxError: Identifier 'vowelsIndexCountMinIndexIndex' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var\
    \ vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max\
    \ = 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max =\
    \ 0;\n    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n\
    \    var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n  \
    \  var vowels_index_count_min = 0;\n    var vowels_index_count_max = 0;\n    var\
    \ vowels_index_count_min = 0;\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp39dgugob.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(word[word.length - 1 - i].toUpperCase()));\n\
    \    }\n    vowelsIndex = vowelsIndex.sort((a, b) => a - b);\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMin = vowelsIndex[0];\n    let vowelsIndexMax\
    \ = vowelsIndex[vowelsCount - 1];\n    for(let i = 0; i < vowelsCount; i++){\n\
    \        if(vowelsIndexMin > vowelsIndex[i]){\n            vowelsIndexMin = vowelsIndex[i];\n\
    \        }\n        if(vowelsIndexMax < vowelsIndex[i]){\n            vowelsIndexMax\
    \ = vowelsIndex[i];\n        }\n    }\n    return vowels[vowelsIndexMin];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4gz1aej0.js:23\n    let vowelsCount = vowelsIndex.length;\n   \
    \     ^\n\nSyntaxError: Identifier 'vowelsCount' has already been declared\n \
    \   at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowel_found = false;\n    let vowel_position = 0;\n    let vowel_found2\
    \ = false;\n    let vowel_position2 = 0;\n    let vowel_found3 = false;\n    let\
    \ vowel_position3 = 0;\n    let vowel_found4 = false;\n    let vowel_position4\
    \ = 0;\n    let vowel_found5 = false;\n    let vowel_position5 = 0;\n    let vowel_found6\
    \ = false;\n    let vowel_position6 = 0;\n    let vowel_found7 = false;\n    let\
    \ vowel_position7 = 0;\n    let vowel_found8 = false;\n    let vowel_position8\
    \ = 0;\n    let vowel_found9 = false;\n    let vowel_position9 = 0;\n    let vowel_found10\
    \ = false;\n    let vowel_position10 = 0;\n    let vowel_found11 = false;\n  \
    \  let vowel_position11 = 0;\n    let vowel_found12 = false;\n    let vowel_position12\
    \ = 0;\n    let vowel_found13 = false;\n    let vowel_position13 = 0;\n    let\
    \ vowel_found14 = false;\n    let vowel_position14 = 0;\n    let vowel_found15\
    \ = false;\n    let vowel_position15 = 0;\n    let vowel_found16 = false;\n  \
    \  let vowel_position16 = 0;\n    let vowel_found17 = false;\n    let vowel_position17\
    \ = 0;\n    let vowel_found18 = false;\n    let vowel_position18 = 0;\n    let\
    \ vowel_found19 = false;\n    let vowel_position19 = 0;\n    let vowel_found20\
    \ = false;\n    let vowel_position20 = 0;\n    let vowel_found21 = false;\n  \
    \  let vowel_position21 = 0;\n    let vowel_found22 = false;\n    let vowel_position22\
    \ = 0;\n    let vowel_found23 = false;\n    let vowel_position23 = 0;\n    let\
    \ vowel_found24 = false;\n    let vowel_position24 = 0;\n    let vowel_found25\
    \ = false;\n    let vowel_position25 = 0;\n    let vowel_found26 = false;\n  \
    \  let vowel_position26 = 0;\n    let vowel_found27 = false;\n    let vowel_position27\
    \ = 0;\n    let vowel_found28 = false;\n    let vowel_position28 = 0;\n    let\
    \ vowel_found29 = false;\n    let vowel_position29 = 0;\n    let vowel_found30\
    \ = false;\n    let vowel_position30 = 0;\n    let vowel_found31 = false;\n  \
    \  let vowel_position31 = 0;\n    let vowel_found32 = false;\n    let vowel_position32\
    \ = 0;\n    let vowel_found33 = false;\n    let vowel_position33 = 0;\n    let\
    \ vowel_found34 = false;\n    let vowel_position34 = 0;\n    let vowel_found35\
    \ = false;\n    let vowel_position35 = 0;\n    let vowel_found36 = false;\n  \
    \  let vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4naoyeaa.js:110\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_middle2 = vowels_count - 4;\n\
    \    var vowels_count_from_middle3 = vowels_count - 5;\n    var vowels_count_from_middle4\
    \ = vowels_count - 6;\n    var vowels_count_from_middle5 = vowels_count - 7;\n\
    \    var vowels_count_from_middle6 = vowels_count - 8;\n    var vowels_count_from_middle7\
    \ = vowels_count - 9;\n    var vowels_count_from_middle8 = vowels_count - 10;\n\
    \    var vowels_count_from_middle9 = vowels_count - 11;\n    var vowels_count_from_middle10\
    \ = vowels_count - 12;\n    var vowels_count_from_middle11 = vowels_count - 13;\n\
    \    var vowels_count_from_middle12 = vowels_count - 14;\n    var vowels_count_from_middle13\
    \ = vowels_count - 15;\n    var vowels_count_from_middle14 = vowels_count - 16;\n\
    \    var vowels_count_from_middle15 = vowels_count - 17;\n    var vowels_count_from_middle16\
    \ = vowels_count - 18;\n    var vowels_count_from_middle17 = vowels_count - 19;\n\
    \    var vowels_count_from_middle18 = vowels_count - 20;\n    var vowels_count_from_middle19\
    \ = vowels_count - 21;\n    var vowels_count_from_middle20 = vowels_count - 22;\n\
    \    var vowels_count_from_middle21 = vowels_count - 23;\n    var vowels_count_from_middle22\
    \ = vowels_count - 24;\n    var vowels_count_from_middle23 = vowels_count - 25;\n\
    \    var vowels_count_from_middle24 = vowels_count - 26;\n    var vowels_count_from_middle25\
    \ = vowels_count - 27;\n    var vowels_count_from_middle26 = vowels_count - 28;\n\
    \    var vowels_count_from_middle27 = vowels_count - 29;\n    var vowels_count_from_middle28\
    \ = vowels_count - 30;\n    var vowels_count_from_middle29 = vowels_count - 31;\n\
    \    var vowels_count_from_middle30 = vowels_count - 32;\n    var vowels_count_from_middle31\
    \ = vowels_count - 33;\n    var vowels_count_from_middle32 = vowels_count - 34;\n\
    \    var vowels_count_from_middle33 = vowels_count - 35;\n    var \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0iw0wdn7.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_count = vowels.length;\n\
    \    var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - vowels_count_from_right;\n    var vowels_count_from_middle\
    \ = vowels_count / 2;\n    var vowels_count_from_middle_right = vowels_count_from_middle\
    \ - vowels_count_from_right;\n    var vowels_count_from_middle_left = vowels_count_from_middle\
    \ + vowels_count_from_left;\n    var vowels_count_from_middle_middle_right = vowels_count_from_middle\
    \ + vowels_count_from_right + vowels_count_from_left;\n    var vowels_count_from_middle_middle_left\
    \ = vowels_count_from_middle + vowels_count_from_left + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_middle_middle_right = vowels_count_from_middle\
    \ + vowels_count_from_right + vowels_count_from_left + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_middle_middle_left = vowels_count_from_middle\
    \ + vowels_count_from_left + vowels_count_from_right + vowels_count_from_left;\n\
    \    var vowels_count_from_middle_middle_middle_middle_right = vowels_count_from_middle\
    \ + vowels_count_from_right + vowels_count_from_left + vowels_count_from_right\
    \ + vowels_count_from_left;\n    var vowels_count_from_middle_middle_middle_middle_left\
    \ = vowels_count_from_middle + vowels_count_from_left + vowels_count_from_right\
    \ + vowels_count_from_left + vowels_count_from_right + vowels_count_from_left;\n\
    \    var vowels_count_from_middle_middle_middle_middle_middle_right = vowels_count_from_middle\
    \ + vowels_count_from_left + vowels_count_from_right + vowels_count_from_left\
    \ + vowels_count_from_right + vowels_count_from_left + vowels_count_from_right\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_middle_middle_middle_middle_left\
    \ = vowels_count_from_middle + vowels_count_from_left + vowels_count_from_right\
    \ + vowels_count_from_left + vowels_count_from_right + vowels_count_from_left\
    \ + vowels_count_from_right + vowels_count_from_left;\n    var vowels_count_from_middle_middle_middle_middle_middle_left\
    \ = vowels_count_from_middle + vowels_count_from_left + vowels_count_from_right\
    \ + vowels_count_from_left + vowels_count_from_right + vowels_count_from_left\
    \ + vowels_count_from_right + vowels_count_from_left + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_middle_middle_middle_middle_middle_right = vowels_count_from_middle\
    \ + vowels_count_from_left + vowels_count_from_right + vowels_count_from_left\
    \ + vowels_count_from_right + vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl6ed83wj.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndex\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpf364w0mt.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = [];\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        vowelsIndex.push(vowels.indexOf(i));\n     \
    \   vowelsIndexCount.push(vowelsIndex.filter(item => item === i).length);\n  \
    \  }\n    let vowelsIndexMax = Math.max.apply(null, vowelsIndexCount);\n    let\
    \ vowelsIndexMin = Math.min.apply(null, vowelsIndexCount);\n    let vowelsIndexMinIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinValue = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxValue\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinCount = vowelsIndexCount.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxCount = vowelsIndexCount.indexOf(vowelsIndexMax);\n   \
    \ let vowelsIndexMinCountValue = vowelsIndexCount[vowelsIndexMinCount];\n    let\
    \ vowelsIndexMaxCountValue = vowelsIndexCount[vowelsIndexMaxCount];\n    let vowelsIndexMinCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMinValue);\n    let vowelsIndexMaxCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMaxValue);\n    let vowelsIndexMinCountValue\
    \ = vowelsIndexCount[vowelsIndexMinCountIndex];\n    let vowelsIndexMaxCountValue\
    \ = vowelsIndexCount[vowelsIndexMaxCountIndex];\n    let vowelsIndexMinCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMinCountValue);\n    let vowelsIndexMaxCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMaxCountValue);\n    let vowelsIndexMinCountValue\
    \ = vowelsIndexCount[vowelsIndexMinCountIndex];\n    let vowelsIndexMaxCountValue\
    \ = vowelsIndexCount[vowelsIndexMaxCountIndex];\n    let vowelsIndexMinCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMinCountValue);\n    let vowelsIndexMaxCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMaxCountValue);\n    let vowelsIndexMinCountValue\
    \ = vowelsIndexCount[vowelsIndexMinCountIndex];\n    let vowelsIndexMaxCountValue\
    \ = vowelsIndexCount[vowelsIndexMaxCountIndex];\n    let vowelsIndexMinCountIndex\
    \ = vowelsIndexCount.indexOf(vowelsIndexMinCountValue);\n    let vowelsIndexMax\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprc_8lpp5.js:36\n    let vowelsIndexMinCountValue = vowelsIndexCount[vowelsIndexMinCountIndex];\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMinCountValue' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = Math.max(...vowelsIndex);\n    let vowelsIndexCountMin\
    \ = Math.min(...vowelsIndex);\n    let vowelsIndexCountMinIndex = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMaxIndex2 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex2 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMinIndex3 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex3 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex4 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex4 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex5 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex5 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex6 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex6 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex7 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex7 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex8 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex8 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex9 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex9 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex10 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex10 = vowelsIndex.indexOf(vowelsIndexCountMax);\n\
    \    let vowelsIndexCountMinIndex11 = vowelsIndex.indexOf(vowelsIndexCountMin);\n\
    \    let vowelsIndexCountMaxIndex11 = vowelsIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp9hrpowyz.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = word.length - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpvgs67v99.js:22\n    let vowels_count_from_right_to_left = vowels_count_from_right\
    \ - vowels_count_from_left;\n        ^\n\nSyntaxError: Identifier 'vowels_count_from_right_to_left'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = \"aeiouAEIOU\";\n    let vowels_count = vowels.length;\n   \
    \ let vowels_count_from_right = word.length - vowels_count;\n    let vowels_count_from_left\
    \ = vowels_count - 1;\n    let vowels_count_from_middle = vowels_count / 2;\n\
    \    let vowels_count_from_middle2 = vowels_count / 2;\n    let vowels_count_from_middle3\
    \ = vowels_count / 2;\n    let vowels_count_from_middle4 = vowels_count / 2;\n\
    \    let vowels_count_from_middle5 = vowels_count / 2;\n    let vowels_count_from_middle6\
    \ = vowels_count / 2;\n    let vowels_count_from_middle7 = vowels_count / 2;\n\
    \    let vowels_count_from_middle8 = vowels_count / 2;\n    let vowels_count_from_middle9\
    \ = vowels_count / 2;\n    let vowels_count_from_middle10 = vowels_count / 2;\n\
    \    let vowels_count_from_middle11 = vowels_count / 2;\n    let vowels_count_from_middle12\
    \ = vowels_count / 2;\n    let vowels_count_from_middle13 = vowels_count / 2;\n\
    \    let vowels_count_from_middle14 = vowels_count / 2;\n    let vowels_count_from_middle15\
    \ = vowels_count / 2;\n    let vowels_count_from_middle16 = vowels_count / 2;\n\
    \    let vowels_count_from_middle17 = vowels_count / 2;\n    let vowels_count_from_middle18\
    \ = vowels_count / 2;\n    let vowels_count_from_middle19 = vowels_count / 2;\n\
    \    let vowels_count_from_middle20 = vowels_count / 2;\n    let vowels_count_from_middle21\
    \ = vowels_count / 2;\n    let vowels_count_from_middle22 = vowels_count / 2;\n\
    \    let vowels_count_from_middle23 = vowels_count / 2;\n    let vowels_count_from_middle24\
    \ = vowels_count / 2;\n    let vowels_count_from_middle25 = vowels_count / 2;\n\
    \    let vowels_count_from_middle26 = vowels_count / 2;\n    let vowels_count_from_middle27\
    \ = vowels_count / 2;\n    let vowels_count_from_middle28 = vowels_count / 2;\n\
    \    let vowels_count_from_middle29 = vowels_count / 2;\n    let vowels_count_from_middle30\
    \ = vowels_count / 2;\n    let vowels_count_from_middle31 = vowels_count / 2;\n\
    \    let vowels_count_from_middle32 = vowels_count / 2;\n    let vowels_count_from_middle33\
    \ = vowels_count / 2;\n    let vowels_count_from_middle34 = vowels_count / 2;\n\
    \    let vowels_count_from_middle35\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpse1q1d7c.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexCountMax = vowelsIndexCount + 1;\n    let vowelsIndexCountMin\
    \ = vowelsIndexCount - 1;\n    let vowelsIndexCountMin2 = vowelsIndexCountMin\
    \ + 1;\n    let vowelsIndexCountMax2 = vowelsIndexCountMax - 1;\n    let vowelsIndexCountMin3\
    \ = vowelsIndexCountMin + 2;\n    let vowelsIndexCountMax3 = vowelsIndexCountMax\
    \ - 2;\n    let vowelsIndexCountMin4 = vowelsIndexCountMin + 3;\n    let vowelsIndexCountMax4\
    \ = vowelsIndexCountMax - 3;\n    let vowelsIndexCountMin5 = vowelsIndexCountMin\
    \ + 4;\n    let vowelsIndexCountMax5 = vowelsIndexCountMax - 4;\n    let vowelsIndexCountMin6\
    \ = vowelsIndexCountMin + 5;\n    let vowelsIndexCountMax6 = vowelsIndexCountMax\
    \ - 5;\n    let vowelsIndexCountMin7 = vowelsIndexCountMin + 6;\n    let vowelsIndexCountMax7\
    \ = vowelsIndexCountMax - 6;\n    let vowelsIndexCountMin8 = vowelsIndexCountMin\
    \ + 7;\n    let vowelsIndexCountMax8 = vowelsIndexCountMax - 7;\n    let vowelsIndexCountMin9\
    \ = vowelsIndexCountMin + 8;\n    let vowelsIndexCountMax9 = vowelsIndexCountMax\
    \ - 8;\n    let vowelsIndexCountMin10 = vowelsIndexCountMin + 9;\n    let vowelsIndexCountMax10\
    \ = vowelsIndexCountMax - 9;\n    let vowelsIndexCountMin11 = vowelsIndexCountMin\
    \ + 10;\n    let vowelsIndexCountMax11 = vowelsIndexCountMax - 10;\n    let vowelsIndexCountMin12\
    \ = vowelsIndexCountMin + 11;\n    let vowelsIndexCountMax12 = vowelsIndexCountMax\
    \ - 11;\n    let vowelsIndexCountMin13 = vowelsIndexCountMin + 12;\n    let vowelsIndexCountMax13\
    \ = vowelsIndexCountMax - 12;\n    let vowelsIndexCountMin14 = vowelsIndexCountMin\
    \ + 13;\n    let vowelsIndexCountMax14 = vowelsIndexCountMax - 13;\n    let vowelsIndexCountMin15\
    \ = vowelsIndexCountMin + 14;\n    let vowelsIndexCountMax15 = vowelsIndexCountMax\
    \ - 14;\n    let vowelsIndexCountMin16 = vowelsIndexCountMin + 15;\n    let vowelsIndexCountMax\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4n0ygqfj.js:51\n    let vowelsIndexCountMax\n        ^\n\nSyntaxError:\
    \ Identifier 'vowelsIndexCountMax' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_count_from_right = vowels_count - 1;\n    var\
    \ vowels_count_from_left = vowels_count - 2;\n    var vowels_count_from_middle\
    \ = vowels_count - 3;\n    var vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    var vowels_count_from_right_to_left = vowels_count - 5;\n    var vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    var vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    var vowels_count_from_right_to_middle = vowels_count - 8;\n    var\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    var vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    var vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    var vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    var vowels_count_from_right_to_left_to_middle = vowels_count - 13;\n    var\
    \ vowels_count_from_middle_to_right_to_left = vowels_count - 14;\n    var vowels_count_from_left_to_middle_to_right\
    \ = vowels_count - 15;\n    var vowels_count_from_right_to_middle_to_left = vowels_count\
    \ - 16;\n    var vowels_count_from_middle_to_left_to_right = vowels_count - 17;\n\
    \    var vowels_count_from_right_to_left_to_middle = vowels_count - 18;\n    var\
    \ vowels_count_from_middle_to_right_to_left = vowels_count - 19;\n    var vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 20;\n    var vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 21;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    var vowels_count_from_right_to_left_to_middle_to_left_to_right\
    \ = vowels_count - 23;\n    var vowels_count_from_middle_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 24;\n    var vowels_count_from_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 27;\n    var vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 28;\n    var vowels_count_from_middle_to_right_to_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz0sf2psk.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(i));\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexSum = vowelsIndexMax + vowelsIndexMin;\n\
    \    let vowelsIndexSumCount = vowelsIndexSum / 2;\n    let vowelsIndexSumCount2\
    \ = vowelsIndexSumCount / 2;\n    let vowelsIndexSumCount3 = vowelsIndexSumCount2\
    \ / 2;\n    let vowelsIndexSumCount4 = vowelsIndexSumCount3 / 2;\n    let vowelsIndexSumCount5\
    \ = vowelsIndexSumCount4 / 2;\n    let vowelsIndexSumCount6 = vowelsIndexSumCount5\
    \ / 2;\n    let vowelsIndexSumCount7 = vowelsIndexSumCount6 / 2;\n    let vowelsIndexSumCount8\
    \ = vowelsIndexSumCount7 / 2;\n    let vowelsIndexSumCount9 = vowelsIndexSumCount8\
    \ / 2;\n    let vowelsIndexSumCount10 = vowelsIndexSumCount9 / 2;\n    let vowelsIndexSumCount11\
    \ = vowelsIndexSumCount10 / 2;\n    let vowelsIndexSumCount12 = vowelsIndexSumCount11\
    \ / 2;\n    let vowelsIndexSumCount13 = vowelsIndexSumCount12 / 2;\n    let vowelsIndexSumCount14\
    \ = vowelsIndexSumCount13 / 2;\n    let vowelsIndexSumCount15 = vowelsIndexSumCount14\
    \ / 2;\n    let vowelsIndexSumCount16 = vowelsIndexSumCount15 / 2;\n    let vowelsIndexSumCount17\
    \ = vowelsIndexSumCount16 / 2;\n    let vowelsIndexSumCount18 = vowelsIndexSumCount17\
    \ / 2;\n    let vowelsIndexSumCount19 = vowelsIndexSumCount18 / 2;\n    let vowelsIndexSumCount20\
    \ = vowelsIndexSumCount19 / 2;\n    let vowelsIndexSumCount21 = vowelsIndexSumCount20\
    \ / 2;\n    let vowelsIndexSumCount22 = vowelsIndexSumCount21 / 2;\n    let vowelsIndexSumCount23\
    \ = vowelsIndexSumCount22 / 2;\n    let vowelsIndexSumCount24 = vowelsIndexSumCount23\
    \ / 2;\n    let vowelsIndexSumCount25 = vowelsIndexSumCount24 / 2;\n    let vowel\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpozdyni6x.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748663
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n  \
    \  let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpnlahcr8c.js:80\n    let vowels\n        ^\n\nSyntaxError: Identifier\
    \ 'vowels' has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpv0rr1yzl.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsIndexCount = 0;\n    let vowelsIndexCountMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMin = 0;\n    let vowelsIndexCountMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMin = vowelsCount - 1;\n    let\
    \ vowelsIndexCountMinMaxMin = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMin = vowelsCount - 1;\n\
    \    let vowelsIndexCountMaxMinMaxMin = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMin = vowelsCount\
    \ - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMin = vowelsCount - 1;\n    let\
    \ vowelsIndexCountMaxMinMaxMinMaxMinMax = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMin = vowelsCount\
    \ - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax = vowelsCount - 1;\n\
    \    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMax = vowelsCount - 1;\n    let\
    \ vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsCount - 1;\n    let vowelsIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpip6_ov6h.js:27\n    let vowelsIndexCountMaxMinMaxMin = vowelsCount\
    \ - 1;\n        ^\n\nSyntaxError: Identifier 'vowelsIndexCountMaxMinMaxMin' has\
    \ already been declared\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_count_max = 0;\n    var vowels_index_count_min =\
    \ 0;\n    var vowels_index_count_min_index = 0;\n    var vowels_index_count_max_index\
    \ = 0;\n    var vowels_index_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpu80ll1dm.js:97\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n    let vowelsCountMin\
    \ = 0;\n    let vowelsCountMax = 0;\n    let vowelsCountSum = 0;\n    let vowelsCountSumMin\
    \ = 0;\n    let vowelsCountSumMax = 0;\n    let vowelsCountSumSum = 0;\n    let\
    \ vowelsCountSumSumMin = 0;\n    let vowelsCountSumSumMax = 0;\n    let vowelsCountSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumMin = 0;\n    let vowelsCountSumSumSumMax\
    \ = 0;\n    let vowelsCountSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumMin\
    \ = 0;\n    let vowelsCountSumSumSumSumMax = 0;\n    let vowelsCountSumSumSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumSumSumMin = 0;\n    let vowelsCountSumSumSumSumSumMax\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumMin\
    \ = 0;\n    let vowelsCountSumSumSumSumSumMax = 0;\n    let vowelsCountSumSumSumSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumMin = 0;\n    let vowelsCountSumSumSumSumSumSumMax\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMax = 0;\n    let vowelsCountSumSumSumSumSumSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin = 0;\n    let vowelsCountSumSumSumSumSumSumSumMax\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMax = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumMin = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumMax\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumMin\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumMax = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumSumMin = 0;\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_aopqgvw.js:38\n    let vowelsCountSumSumSumSumSumMin = 0;\n  \
    \      ^\n\nSyntaxError: Identifier 'vowelsCountSumSumSumSumSumMin' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_positions = [];\n    let vowel_positions_count = vowel_positions.length;\n\
    \    let vowel_positions_index = 0;\n    let vowel_positions_index_count = 0;\n\
    \    let vowel_positions_index_count_max = 0;\n    let vowel_positions_index_count_min\
    \ = 0;\n    let vowel_positions_index_count_max2 = 0;\n    let vowel_positions_index_count_min2\
    \ = 0;\n    let vowel_positions_index_count_max3 = 0;\n    let vowel_positions_index_count_min3\
    \ = 0;\n    let vowel_positions_index_count_max4 = 0;\n    let vowel_positions_index_count_min4\
    \ = 0;\n    let vowel_positions_index_count_max5 = 0;\n    let vowel_positions_index_count_min5\
    \ = 0;\n    let vowel_positions_index_count_max6 = 0;\n    let vowel_positions_index_count_min6\
    \ = 0;\n    let vowel_positions_index_count_max7 = 0;\n    let vowel_positions_index_count_min7\
    \ = 0;\n    let vowel_positions_index_count_max8 = 0;\n    let vowel_positions_index_count_min8\
    \ = 0;\n    let vowel_positions_index_count_max9 = 0;\n    let vowel_positions_index_count_min9\
    \ = 0;\n    let vowel_positions_index_count_max10 = 0;\n    let vowel_positions_index_count_min10\
    \ = 0;\n    let vowel_positions_index_count_max11 = 0;\n    let vowel_positions_index_count_min11\
    \ = 0;\n    let vowel_positions_index_count_max12 = 0;\n    let vowel_positions_index_count_min12\
    \ = 0;\n    let vowel_positions_index_count_max13 = 0;\n    let vowel_positions_index_count_min13\
    \ = 0;\n    let vowel_positions_index_count_max14 = 0;\n    let vowel_positions_index_count_min14\
    \ = 0;\n    let vowel_positions_index_count_max15 = 0;\n    let vowel_positions_index_count_min15\
    \ = 0;\n    let vowel_positions_index_count_max16 = 0;\n    let vowel_positions_index_count_min16\
    \ = 0;\n    let vowel_positions_index_count_max17 = 0;\n    let vowel_positions_index_count_min17\
    \ = 0;\n    let vowel_positions_index_count_max18 = 0;\n    let vowel_positions_index_count_min18\
    \ = 0;\n    let vowel_positions_index_count_max19 = 0;\n    let vowel_positions_index_count_min19\
    \ = 0;\n    let vowel_positions_index_count_max20 = 0;\n    let vowel_positions_index_count_min20\
    \ = 0;\n    let vowel_positions_index_count_max21 = 0;\n    let vowel_positions_index_count_min21\
    \ = 0;\n    let vowel_positions_index_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmped8w8n8j.js:85\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowels[vowelsIndexMax];\n    let vowelsIndexMinVowel = vowels[vowelsIndexMin];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelIndex);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinV\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjq8guifw.js:31\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelIndex);\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexMaxVowelIndex' has already been\
    \ declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowelsIndex.push(i);\n\
    \            vowelsIndexCount++;\n        }\n    }\n    if(vowelsIndexCount ===\
    \ 0){\n        return \"\";\n    }\n    let vowelsIndexMax = Math.max.apply(null,\
    \ vowelsIndex);\n    let vowelsIndexMin = Math.min.apply(null, vowelsIndex);\n\
    \    let vowelsIndexMin2 = vowelsIndexMin + 1;\n    let vowelsIndexMax2 = vowelsIndexMax\
    \ + 1;\n    let vowelsIndexMin3 = vowelsIndexMin + 2;\n    let vowelsIndexMax3\
    \ = vowelsIndexMax + 2;\n    let vowelsIndexMin4 = vowelsIndexMin + 3;\n    let\
    \ vowelsIndexMax4 = vowelsIndexMax + 3;\n    let vowelsIndexMin5 = vowelsIndexMin\
    \ + 4;\n    let vowelsIndexMax5 = vowelsIndexMax + 4;\n    let vowelsIndexMin6\
    \ = vowelsIndexMin + 5;\n    let vowelsIndexMax6 = vowelsIndexMax + 5;\n    let\
    \ vowelsIndexMin7 = vowelsIndexMin + 6;\n    let vowelsIndexMax7 = vowelsIndexMax\
    \ + 6;\n    let vowelsIndexMin8 = vowelsIndexMin + 7;\n    let vowelsIndexMax8\
    \ = vowelsIndexMax + 7;\n    let vowelsIndexMin9 = vowelsIndexMin + 8;\n    let\
    \ vowelsIndexMax9 = vowelsIndexMax + 8;\n    let vowelsIndexMin10 = vowelsIndexMin\
    \ + 9;\n    let vowelsIndexMax10 = vowelsIndexMax + 9;\n    let vowelsIndexMin11\
    \ = vowelsIndexMin + 10;\n    let vowelsIndexMax11 = vowelsIndexMax + 10;\n  \
    \  let vowelsIndexMin12 = vowelsIndexMin + 11;\n    let vowelsIndexMax12 = vowelsIndexMax\
    \ + 11;\n    let vowelsIndexMin13 = vowelsIndexMin + 12;\n    let vowelsIndexMax13\
    \ = vowelsIndexMax + 12;\n    let vowelsIndexMin14 = vowelsIndexMin + 13;\n  \
    \  let vowelsIndexMax14 = vowelsIndexMax + 13;\n    let vowelsIndexMin15 = vowelsIndexMin\
    \ + 14;\n    let vowelsIndexMax15 = vowelsIndexMax + 14;\n    let vowelsIndexMin16\
    \ = vowelsIndexMin + 15;\n    let vowelsIndexMax16 = vowelsIndexMax + 15;\n  \
    \  let vowelsIndexMin17\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplqd1rbwx.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = [];\n\
    \    for(let i = 0; i < vowelsCount; i++){\n        vowelsIndex.push(word.indexOf(vowels[i]));\n\
    \        vowelsIndexCount.push(vowelsIndex[i]);\n    }\n    let vowelsIndexMax\
    \ = Math.max.apply(null, vowelsIndexCount);\n    let vowelsIndexMin = Math.min.apply(null,\
    \ vowelsIndexCount);\n    let vowelsIndexDiff = Math.abs(vowelsIndexMax - vowelsIndexMin);\n\
    \    let vowelsIndexDiffCount = vowelsIndexDiff;\n    let vowelsIndexDiffIndex\
    \ = [];\n    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndex[i]\
    \ >= vowelsIndexMax){\n            vowelsIndexDiffIndex.push(i);\n        }\n\
    \    }\n    let vowelsIndexDiffIndexCount = vowelsIndexDiffIndex;\n    let vowelsIndexDiffIndexMax\
    \ = Math.max.apply(null, vowelsIndexDiffIndex);\n    let vowelsIndexDiffIndexMin\
    \ = Math.min.apply(null, vowelsIndexDiffIndex);\n    let vowelsIndexDiffIndexDiff\
    \ = Math.abs(vowelsIndexDiffIndexMax - vowelsIndexDiffIndexMin);\n    let vowelsIndexDiffIndexDiffCount\
    \ = vowelsIndexDiffIndexDiff;\n    let vowelsIndexDiffIndexDiffIndex = [];\n \
    \   for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndexDiffIndex[i]\
    \ >= vowelsIndexDiffIndexMax){\n            vowelsIndexDiffIndexDiffIndex.push(i);\n\
    \        }\n    }\n    let vowelsIndexDiffIndexDiffIndexCount = vowelsIndexDiffIndexDiffIndex;\n\
    \    let vowelsIndexDiffIndexDiffIndexMax = Math.max.apply(null, vowelsIndexDiffIndexDiffIndex);\n\
    \    let vowelsIndexDiffIndexDiffIndexMin = Math.min.apply(null, vowelsIndexDiffIndexDiffIndex);\n\
    \    let vowelsIndexDiffIndexDiffIndexDiff = Math.abs(vowelsIndexDiffIndexDiffIndexMax\
    \ - vowelsIndexDiffIndexDiffIndexMin);\n    let vowelsIndexDiffIndexDiffIndexDiffCount\
    \ = vowelsIndexDiffIndexDiffIndexDiff;\n    let vowelsIndexDiffIndexDiffIndexDiffIndex\
    \ = [];\n    for(let i = 0; i < vowelsCount; i++){\n        if(vowelsIndexDiffIndexDiffIndex[i]\
    \ >= vowelsIndexDiffIndexDiffIndexMax){\n            vowelsIndexDiffIndexDiffIndexDiffIndex.push(i);\n\
    \        }\n    }\n    let vowelsIndexDiffIndexDiffIndexDiffIndexCount = vowelsIndexDiffIndexDiffIndexDiffIndex;\n\
    \    let vowelsIndexDiffIndexDiffIndexDiffIndexMax = Math.max.\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmo4_3baj.js:58\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowel_count = vowels.length;\n\t\
    let consonants = 'bcdfghjklmnpqrstvwxyz';\n\tlet consonant_count = consonants.length;\n\
    \tlet vowel_positions = [];\n\tlet consonant_positions = [];\n\tlet vowel_position\
    \ = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet vowel_position = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet vowel_position = 0;\n\tlet consonant_position\
    \ = 0;\n\tlet vowel_found = false;\n\tlet consonant_found = false;\n\tlet vowel_position\
    \ = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet vowel_position = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet vowel_position = 0;\n\tlet consonant_position\
    \ = 0;\n\tlet vowel_found = false;\n\tlet consonant_found = false;\n\tlet vowel_position\
    \ = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet vowel_position = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet vowel_position = 0;\n\tlet consonant_position\
    \ = 0;\n\tlet vowel_found = false;\n\tlet consonant_found = false;\n\tlet vowel_position\
    \ = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet vowel_position = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet vowel_position = 0;\n\tlet consonant_position\
    \ = 0;\n\tlet vowel_found = false;\n\tlet consonant_found = false;\n\tlet vowel_position\
    \ = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found = false;\n\tlet consonant_found\
    \ = false;\n\tlet vowel_position = 0;\n\tlet consonant_position = 0;\n\tlet vowel_found\
    \ = false;\n\tlet consonant_found = false;\n\tlet vowel_position = 0;\n\tlet consonant_position\
    \ = 0;\n\tlet vowel_found = false;\n\tlet con\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpj8asf01c.js:26\n\tlet vowel_position = 0;\n\t    ^\n\nSyntaxError:\
    \ Identifier 'vowel_position' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = word.length - vowels_count_from_right;\n    var vowels_count_from_middle =\
    \ word.length - vowels_count_from_left - vowels_count_from_right;\n    var vowels_count_from_middle2\
    \ = word.length - vowels_count_from_middle - vowels_count_from_right;\n    var\
    \ vowels_count_from_middle3 = word.length - vowels_count_from_middle - vowels_count_from_right\
    \ - vowels_count_from_left;\n    var vowels_count_from_middle4 = word.length -\
    \ vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left\
    \ - vowels_count_from_middle;\n    var vowels_count_from_middle5 = word.length\
    \ - vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left\
    \ - vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left;\n\
    \    var vowels_count_from_middle6 = word.length - vowels_count_from_middle -\
    \ vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle;\n\
    \    var vowels_count_from_middle7 = word.length - vowels_count_from_middle -\
    \ vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowels_count_from_left;\n    var vowels_count_from_middle8\
    \ = word.length - vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left\
    \ - vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left\
    \ - vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left\
    \ - vowels_count_from_middle - vowels_count_from_right - vowels_count_from_left;\n\
    \    var vowels_count_from_middle9 = word.length - vowels_count_from_middle -\
    \ vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle;\n\
    \    var vowels_count_from_middle10 = word.length - vowels_count_from_middle -\
    \ vowels_count_from_right - vowels_count_from_left - vowels_count_from_middle\
    \ - vowels_count_from_right - vowel\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpiy86xp0_.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowel_found = false;\n    let vowel_position = 0;\n\
    \    let vowel_position_count = 0;\n    let consonants = word.split(\"\");\n \
    \   let consonants_count = consonants.length;\n    let consonant_found = false;\n\
    \    let consonant_position = 0;\n    let consonant_position_count = 0;\n    for(let\
    \ i = 0; i < consonants_count; i++){\n        if(consonants[i] == \"a\"){\n  \
    \          consonant_found = true;\n            consonant_position = i;\n    \
    \    }\n        if(consonants[i] == \"e\"){\n            consonant_found = true;\n\
    \            consonant_position = i;\n        }\n        if(consonants[i] == \"\
    i\"){\n            consonant_found = true;\n            consonant_position = i;\n\
    \        }\n        if(consonants[i] == \"o\"){\n            consonant_found =\
    \ true;\n            consonant_position = i;\n        }\n        if(consonants[i]\
    \ == \"u\"){\n            consonant_found = true;\n            consonant_position\
    \ = i;\n        }\n        if(consonants[i] == \"A\"){\n            consonant_found\
    \ = true;\n            consonant_position = i;\n        }\n        if(consonants[i]\
    \ == \"E\"){\n            consonant_found = true;\n            consonant_position\
    \ = i;\n        }\n        if(consonants[i] == \"I\"){\n            consonant_found\
    \ = true;\n            consonant_position = i;\n        }\n        if(consonants[i]\
    \ == \"O\"){\n            consonant_found = true;\n            consonant_position\
    \ = i;\n        }\n        if(consonants[i] == \"U\"){\n            consonant_found\
    \ = true;\n            consonant_position = i;\n        }\n    }\n    for(let\
    \ i = 0; i < vowels_count; i++){\n        if(vowels[i] == word[vowel_position]){\n\
    \            vowel_found = true;\n            vowel_position = i;\n        }\n\
    \    }\n    if(vowel_found == false){\n        return \"\";\n    }\n    for(let\
    \ i = vowel_position + 1; i < consonants_count; i++){\n        if(consonants[i]\
    \ == word[consonant_position]){\n            consonant_found = true;\n       \
    \     consonant_position = i;\n        }\n    }\n    if(consonant_found == false){\n\
    \        return \"\";\n    }\n    for(let i = consonant_position + 1; i < word.length;\
    \ i++){\n        if(vowels[i] == word[i]){\n            vowel_found = true;\n\
    \            vowel_position = i;\n        }\n    }\n    if(vowel_found == false){\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprfhw8meh.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_middle\
    \ = vowels_count / 2;\n    let vowels_count_from_middle2 = vowels_count / 2;\n\
    \    let vowels_count_from_middle3 = vowels_count / 2;\n    let vowels_count_from_middle4\
    \ = vowels_count / 2;\n    let vowels_count_from_middle5 = vowels_count / 2;\n\
    \    let vowels_count_from_middle6 = vowels_count / 2;\n    let vowels_count_from_middle7\
    \ = vowels_count / 2;\n    let vowels_count_from_middle8 = vowels_count / 2;\n\
    \    let vowels_count_from_middle9 = vowels_count / 2;\n    let vowels_count_from_middle10\
    \ = vowels_count / 2;\n    let vowels_count_from_middle11 = vowels_count / 2;\n\
    \    let vowels_count_from_middle12 = vowels_count / 2;\n    let vowels_count_from_middle13\
    \ = vowels_count / 2;\n    let vowels_count_from_middle14 = vowels_count / 2;\n\
    \    let vowels_count_from_middle15 = vowels_count / 2;\n    let vowels_count_from_middle16\
    \ = vowels_count / 2;\n    let vowels_count_from_middle17 = vowels_count / 2;\n\
    \    let vowels_count_from_middle18 = vowels_count / 2;\n    let vowels_count_from_middle19\
    \ = vowels_count / 2;\n    let vowels_count_from_middle20 = vowels_count / 2;\n\
    \    let vowels_count_from_middle21 = vowels_count / 2;\n    let vowels_count_from_middle22\
    \ = vowels_count / 2;\n    let vowels_count_from_middle23 = vowels_count / 2;\n\
    \    let vowels_count_from_middle24 = vowels_count / 2;\n    let vowels_count_from_middle25\
    \ = vowels_count / 2;\n    let vowels_count_from_middle26 = vowels_count / 2;\n\
    \    let vowels_count_from_middle27 = vowels_count / 2;\n    let vowels_count_from_middle28\
    \ = vowels_count / 2;\n    let vowels_count_from_middle29 = vowels_count / 2;\n\
    \    let vowels_count_from_middle30 = vowels_count / 2;\n    let vowels_count_from_middle31\
    \ = vowels_count / 2;\n    let vowels_count_from_middle32 = vowels_count / 2;\n\
    \    let vowels_count_from_middle33 = vowels_count / 2;\n    let vowels_count_from_middle34\
    \ = vowels_count / 2;\n    let vowels_count_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpc7d8isf3.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748664
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowelsCount = vowels.length;\n\
    \    var vowelsCountLeft = word.length - vowelsCount;\n    var vowelsCountRight\
    \ = word.length - vowelsCount;\n    var vowelsCountRight2 = word.length - vowelsCount;\n\
    \    var vowelsCountRight3 = word.length - vowelsCount;\n    var vowelsCountRight4\
    \ = word.length - vowelsCount;\n    var vowelsCountRight5 = word.length - vowelsCount;\n\
    \    var vowelsCountRight6 = word.length - vowelsCount;\n    var vowelsCountRight7\
    \ = word.length - vowelsCount;\n    var vowelsCountRight8 = word.length - vowelsCount;\n\
    \    var vowelsCountRight9 = word.length - vowelsCount;\n    var vowelsCountRight10\
    \ = word.length - vowelsCount;\n    var vowelsCountRight11 = word.length - vowelsCount;\n\
    \    var vowelsCountRight12 = word.length - vowelsCount;\n    var vowelsCountRight13\
    \ = word.length - vowelsCount;\n    var vowelsCountRight14 = word.length - vowelsCount;\n\
    \    var vowelsCountRight15 = word.length - vowelsCount;\n    var vowelsCountRight16\
    \ = word.length - vowelsCount;\n    var vowelsCountRight17 = word.length - vowelsCount;\n\
    \    var vowelsCountRight18 = word.length - vowelsCount;\n    var vowelsCountRight19\
    \ = word.length - vowelsCount;\n    var vowelsCountRight20 = word.length - vowelsCount;\n\
    \    var vowelsCountRight21 = word.length - vowelsCount;\n    var vowelsCountRight22\
    \ = word.length - vowelsCount;\n    var vowelsCountRight23 = word.length - vowelsCount;\n\
    \    var vowelsCountRight24 = word.length - vowelsCount;\n    var vowelsCountRight25\
    \ = word.length - vowelsCount;\n    var vowelsCountRight26 = word.length - vowelsCount;\n\
    \    var vowelsCountRight27 = word.length - vowelsCount;\n    var vowelsCountRight28\
    \ = word.length - vowelsCount;\n    var vowelsCountRight29 = word.length - vowelsCount;\n\
    \    var vowelsCountRight30 = word.length - vowelsCount;\n    var vowelsCountRight31\
    \ = word.length - vowelsCount;\n    var vowelsCountRight32 = word.length - vowelsCount;\n\
    \    var vowelsCountRight33 = word.length - vowelsCount;\n    var vowelsCountRight34\
    \ = word.length - vowelsCount;\n    var vowelsCountRight35 = word.length - vowelsCount;\n\
    \    var vowels\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpovmga97k.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowels_count =\
    \ vowels.length;\n    var vowels_index = 0;\n    var vowels_index_count = 0;\n\
    \    var vowels_index_count_max = 0;\n    var vowels_index_count_min = 0;\n  \
    \  var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min = 0;\n\
    \    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max =\
    \ 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_max\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_max = 0;\n    var vowels_index_count_min_min\
    \ = 0;\n    var vowels_index_count_max_min = 0;\n    var vowels_index_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp37_f1vuw.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n    let\
    \ vowelsCountRight = vowelsCount;\n    let vowelsCountRightToLeft = vowelsCount;\n\
    \    let vowelsCountLeftToRight = vowelsCount;\n    let vowelsCountRightToLeftToRight\
    \ = vowelsCount;\n    let vowelsCountLeftToRightToRight = vowelsCount;\n    let\
    \ vowelsCountRightToLeftToRightToLeft = vowelsCount;\n    let vowelsCountLeftToRightToRightToRight\
    \ = vowelsCount;\n    let vowelsCountRightToLeftToRightToRightToLeft = vowelsCount;\n\
    \    let vowelsCountLeftToRightToRightToRightToRightToLeft = vowelsCount;\n  \
    \  let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft\
    \ = \"\";\n    let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n\
    \    let vowelsCountLeftToRightToRightToRightToRightToLeft = \"\";\n    let vowelsCountRightToLeftToRightToRightToRightToLeft\
    \ = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft = \"\";\n\
    \    let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft\
    \ = \"\";\n    let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n\
    \    let vowelsCountLeftToRightToRightToRightToRightToLeft = \"\";\n    let vowelsCountRightToLeftToRightToRightToRightToLeft\
    \ = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft = \"\";\n\
    \    let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft\
    \ = \"\";\n    let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n\
    \    let vowelsCountLeftToRightToRightToRightToRightToLeft = \"\";\n    let vowelsCountRightToLeftToRightToRightToRightToLeft\
    \ = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft = \"\";\n\
    \    let vowelsCountRightToLeftToRightToRightToRightToLeft = \"\";\n    let vowelsCountLeftToRightToRightToRightToRightToLeft\
    \ = \"\";\n    let vowels\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy5utfl9o.js:29\n    let vowelsCountLeftToRightToRightToRightToRightToLeft\
    \ = \"\";\n        ^\n\nSyntaxError: Identifier 'vowelsCountLeftToRightToRightToRightToRightToLeft'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748665
