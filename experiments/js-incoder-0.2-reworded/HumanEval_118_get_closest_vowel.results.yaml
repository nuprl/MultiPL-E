name: HumanEval_118_get_closest_vowel
language: js
results:
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_counter = 0;\n    let vowel_found = false;\n    let vowel_counter2\
    \ = 0;\n    let vowel_found2 = false;\n    let vowel_counter3 = 0;\n    let vowel_found3\
    \ = false;\n    let vowel_counter4 = 0;\n    let vowel_found4 = false;\n    let\
    \ vowel_counter5 = 0;\n    let vowel_found5 = false;\n    let vowel_counter6 =\
    \ 0;\n    let vowel_found6 = false;\n    let vowel_counter7 = 0;\n    let vowel_found7\
    \ = false;\n    let vowel_counter8 = 0;\n    let vowel_found8 = false;\n    let\
    \ vowel_counter9 = 0;\n    let vowel_found9 = false;\n    let vowel_counter10\
    \ = 0;\n    let vowel_found10 = false;\n    let vowel_counter11 = 0;\n    let\
    \ vowel_found11 = false;\n    let vowel_counter12 = 0;\n    let vowel_found12\
    \ = false;\n    let vowel_counter13 = 0;\n    let vowel_found13 = false;\n   \
    \ let vowel_counter14 = 0;\n    let vowel_found14 = false;\n    let vowel_counter15\
    \ = 0;\n    let vowel_found15 = false;\n    let vowel_counter16 = 0;\n    let\
    \ vowel_found16 = false;\n    let vowel_counter17 = 0;\n    let vowel_found17\
    \ = false;\n    let vowel_counter18 = 0;\n    let vowel_found18 = false;\n   \
    \ let vowel_counter19 = 0;\n    let vowel_found19 = false;\n    let vowel_counter20\
    \ = 0;\n    let vowel_found20 = false;\n    let vowel_counter21 = 0;\n    let\
    \ vowel_found21 = false;\n    let vowel_counter22 = 0;\n    let vowel_found22\
    \ = false;\n    let vowel_counter23 = 0;\n    let vowel_found23 = false;\n   \
    \ let vowel_counter24 = 0;\n    let vowel_found24 = false;\n    let vowel_counter25\
    \ = 0;\n    let vowel_found25 = false;\n    let vowel_counter26 = 0;\n    let\
    \ vowel_found26 = false;\n    let vowel_counter27 = 0;\n    let vowel_found27\
    \ = false;\n    let vowel_counter28 = 0;\n    let vowel_found28 = false;\n   \
    \ let vowel_counter29 = 0;\n    let vowel_found29 = false;\n    let vowel_counter30\
    \ = 0;\n    let vowel_found30 = false;\n    let vowel_counter31 = 0;\n    let\
    \ vowel_found31 = false;\n    let vowel_counter32 = 0;\n    let vowel_found32\
    \ = false;\n    let vowel_counter33 = 0;\n    let vowel_found33 = false;\n   \
    \ let vowel_counter34 = 0;\n    let vowel_found34 = false;\n    let vowel_counter35\
    \ = 0;\n    let vowel_found35 = false;\n    let vowel_counter36\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2fiwqwdp.js:109\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowel_positions = [];\n    let vowel_positions_count\
    \ = vowel_positions.length;\n    let vowel_positions_count_max = Math.max(...vowel_positions);\n\
    \    let vowel_positions_count_min = Math.min(...vowel_positions);\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_count_min_index\
    \ = vowel_positions.indexOf(vowel_positions_count_min);\n    let vowel_positions_count_max_value\
    \ = vowel_positions[vowel_positions_count_max_index];\n    let vowel_positions_count_min_value\
    \ = vowel_positions[vowel_positions_count_min_index];\n    let vowel_positions_count_max_index\
    \ = vowel_positions.indexOf(vowel_positions_count_max);\n    let vowel_positions_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv7bmakt1.js:26\n    let vowel_positions_count_max_index = vowel_positions.indexOf(vowel_positions_count_max);\n\
    \        ^\n\nSyntaxError: Identifier 'vowel_positions_count_max_index' has already\
    \ been declared\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe\
    \ (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsCount2 = vowelsCount-1;\n    let vowelsCount3 = vowelsCount-2\n\
    \    let vowelsCount4 = vowelsCount-3\n    let vowelsCount5 = vowelsCount-4\n\
    \    let vowelsCount6 = vowelsCount-5\n    let vowelsCount7 = vowelsCount-6\n\
    \    let vowelsCount8 = vowelsCount-7\n    let vowelsCount9 = vowelsCount-8\n\
    \    let vowelsCount10 = vowelsCount-9\n    let vowelsCount11 = vowelsCount-10\n\
    \    let vowelsCount12 = vowelsCount-11\n    let vowelsCount13 = vowelsCount-12\n\
    \    let vowelsCount14 = vowelsCount-13\n    let vowelsCount15 = vowelsCount-14\n\
    \    let vowelsCount16 = vowelsCount-15\n    let vowelsCount17 = vowelsCount-16\n\
    \    let vowelsCount18 = vowelsCount-17\n    let vowelsCount19 = vowelsCount-18\n\
    \    let vowelsCount20 = vowelsCount-19\n    let vowelsCount21 = vowelsCount-20\n\
    \    let vowelsCount22 = vowelsCount-21\n    let vowelsCount23 = vowelsCount-22\n\
    \    let vowelsCount24 = vowelsCount-23\n    let vowelsCount25 = vowelsCount-24\n\
    \    let vowelsCount26 = vowelsCount-25\n    let vowelsCount27 = vowelsCount-26\n\
    \    let vowelsCount28 = vowelsCount-27\n    let vowelsCount29 = vowelsCount-28\n\
    \    let vowelsCount30 = vowelsCount-29\n    let vowelsCount31 = vowelsCount-30\n\
    \    let vowelsCount32 = vowelsCount-31\n    let vowelsCount33 = vowelsCount-32\n\
    \    let vowelsCount34 = vowelsCount-33\n    let vowelsCount35 = vowelsCount-34\n\
    \    let vowelsCount36 = vowelsCount-35\n    let vowelsCount37 = vowelsCount-36\n\
    \    let vowelsCount38 = vowelsCount-37\n    let vowelsCount39 = vowelsCount-38\n\
    \    let vowelsCount40 = vowelsCount-39\n    let vowelsCount41 = vowelsCount-40\n\
    \    let vowelsCount42 = vowelsCount-41\n    let vowelsCount43 = vowelsCount-42\n\
    \    let vowelsCount44 = vowelsCount-43\n    let vowelsCount45 = vowel\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb1n0aa2j.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n  \
    \  let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountSum = 0;\n    let vowelsCountSumIndex = 0;\n    let vowelsCountSumMin\
    \ = vowelsCountSum;\n    let vowelsCountSumMax = vowelsCountSum;\n    let vowelsCountSumSum\
    \ = 0;\n    let vowelsCountSumSumIndex = 0;\n    let vowelsCountSumSumMin = vowelsCountSumSum;\n\
    \    let vowelsCountSumSumMax = vowelsCountSumSum;\n    let vowelsCountSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumIndex = 0;\n    let vowelsCountSumSumSumMin\
    \ = vowelsCountSumSumSum;\n    let vowelsCountSumSumSumMax = vowelsCountSumSumSum;\n\
    \    let vowelsCountSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumIndex =\
    \ 0;\n    let vowelsCountSumSumSumSumMin = vowelsCountSumSumSumSum;\n    let vowelsCountSumSumSumSumMax\
    \ = vowelsCountSumSumSumSum;\n    let vowelsCountSumSumSumSumSum = 0;\n    let\
    \ vowelsCountSumSumSumSumSumIndex = 0;\n    let vowelsCountSumSumSumSumSumMin\
    \ = vowelsCountSumSumSumSumSum;\n    let vowelsCountSumSumSumSumSumMax = vowelsCountSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSum;\n \
    \   let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin = vowelsCount\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkx_izw1i.js:51\n    let vowelsCountSumSumSumSumSumSumSumIndex =\
    \ 0;\n        ^\n\nSyntaxError: Identifier 'vowelsCountSumSumSumSumSumSumSumIndex'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n    for(let i = 0;\
    \ i < vowelsCount; i++){\n        if(word.indexOf(vowels[i]) > -1){\n        \
    \    vowelsIndex.push(i);\n            vowelsIndexCount++;\n        }\n    }\n\
    \    let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin2 =\
    \ vowelsIndexMin + 1;\n    let vowelsIndexMax2 = vowelsIndexMax + 1;\n    let\
    \ vowelsIndexMin3 = vowelsIndexMin + 2;\n    let vowelsIndexMax3 = vowelsIndexMax\
    \ + 2;\n    let vowelsIndexMin4 = vowelsIndexMin + 3;\n    let vowelsIndexMax4\
    \ = vowelsIndexMax + 3;\n    let vowelsIndexMin5 = vowelsIndexMin + 4;\n    let\
    \ vowelsIndexMax5 = vowelsIndexMax + 4;\n    let vowelsIndexMin6 = vowelsIndexMin\
    \ + 5;\n    let vowelsIndexMax6 = vowelsIndexMax + 5;\n    let vowelsIndexMin7\
    \ = vowelsIndexMin + 6;\n    let vowelsIndexMax7 = vowelsIndexMax + 6;\n    let\
    \ vowelsIndexMin8 = vowelsIndexMin + 7;\n    let vowelsIndexMax8 = vowelsIndexMax\
    \ + 7;\n    let vowelsIndexMin9 = vowelsIndexMin + 8;\n    let vowelsIndexMax9\
    \ = vowelsIndexMax + 8;\n    let vowelsIndexMin10 = vowelsIndexMin + 9;\n    let\
    \ vowelsIndexMax10 = vowelsIndexMax + 9;\n    let vowelsIndexMin11 = vowelsIndexMin\
    \ + 10;\n    let vowelsIndexMax11 = vowelsIndexMax + 10;\n    let vowelsIndexMin12\
    \ = vowelsIndexMin + 11;\n    let vowelsIndexMax12 = vowelsIndexMax + 11;\n  \
    \  let vowelsIndexMin13 = vowelsIndexMin + 12;\n    let vowelsIndexMax13 = vowelsIndexMax\
    \ + 12;\n    let vowelsIndexMin14 = vowelsIndexMin + 13;\n    let vowelsIndexMax14\
    \ = vowelsIndexMax + 13;\n    let vowelsIndexMin15 = vowelsIndexMin + 14;\n  \
    \  let vowelsIndexMax15 = vowelsIndexMax + 14;\n    let vowelsIndexMin16 = vowelsIndexMin\
    \ + 15;\n    let vowelsIndexMax16 = vowelsIndexMax + 15;\n    let vowelsIndexMin17\
    \ = vowel\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsuuzd8z8.js:26\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \        ^\n\nSyntaxError: Identifier 'vowelsIndexCount' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowelsCount = vowels.length;\n\
    \    let vowelsIndex = [];\n    for(let i = 0; i < vowelsCount; i++){\n      \
    \  vowelsIndex.push(vowels.indexOf(word[i]));\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max(...vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let vowelsIndexSum =\
    \ vowelsIndexMax + vowelsIndexMin;\n    let vowelsIndexSumCount = vowelsIndexSum\
    \ / 2;\n    let vowelsIndexSumCountIndex = vowelsIndexSumCount - vowelsIndexMin;\n\
    \    let vowelsIndexSumCountIndex2 = vowelsIndexSumCountIndex - 1;\n    let vowelsIndexSumCountIndex3\
    \ = vowelsIndexSumCountIndex - 2;\n    let vowelsIndexSumCountIndex4 = vowelsIndexSumCountIndex\
    \ - 3;\n    let vowelsIndexSumCountIndex5 = vowelsIndexSumCountIndex - 4;\n  \
    \  let vowelsIndexSumCountIndex6 = vowelsIndexSumCountIndex - 5;\n    let vowelsIndexSumCountIndex7\
    \ = vowelsIndexSumCountIndex - 6;\n    let vowelsIndexSumCountIndex8 = vowelsIndexSumCountIndex\
    \ - 7;\n    let vowelsIndexSumCountIndex9 = vowelsIndexSumCountIndex - 8;\n  \
    \  let vowelsIndexSumCountIndex10 = vowelsIndexSumCountIndex - 9;\n    let vowelsIndexSumCountIndex11\
    \ = vowelsIndexSumCountIndex - 10;\n    let vowelsIndexSumCountIndex12 = vowelsIndexSumCountIndex\
    \ - 11;\n    let vowelsIndexSumCountIndex13 = vowelsIndexSumCountIndex - 12;\n\
    \    let vowelsIndexSumCountIndex14 = vowelsIndexSumCountIndex - 13;\n    let\
    \ vowelsIndexSumCountIndex15 = vowelsIndexSumCountIndex - 14;\n    let vowelsIndexSumCountIndex16\
    \ = vowelsIndexSumCountIndex - 15;\n    let vowelsIndexSumCountIndex17 = vowelsIndexSumCountIndex\
    \ - 16;\n    let vowelsIndexSumCountIndex18 = vowelsIndexSumCountIndex - 17;\n\
    \    let vowelsIndexSumCountIndex19 = vowelsIndexSumCountIndex - 18;\n    let\
    \ vowelsIndexSumCountIndex20 = vowelsIndexSumCountIndex - 19;\n    let vowelsIndexSumCountIndex21\
    \ = vowelsIndexSumCountIndex - 20;\n    let vowelsIndexSumCountIndex22 = vowelsIndexSumCountIndex\
    \ - 21;\n    let vowelsIndexSumCountIndex\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvl34jmsr.js:49\n    let vowelsIndexSumCountIndex\n        ^\n\n\
    SyntaxError: Identifier 'vowelsIndexSumCountIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_index = 0;\n    let vowel_found = false;\n    for(let i = 0; i\
    \ < word.length; i++){\n        if(vowels.includes(word[i])){\n            vowel_found\
    \ = true;\n            vowel_index = i;\n            break;\n        }\n    }\n\
    \    if(vowel_found){\n        let vowel_start = vowel_index;\n        let vowel_end\
    \ = vowel_index;\n        for(let i = vowel_index + 1; i < word.length; i++){\n\
    \            if(vowels.includes(word[i])){\n                vowel_end = i;\n \
    \               break;\n            }\n        }\n        let vowel_middle = word[vowel_start]\
    \ + word[vowel_end];\n        if(vowel_middle === 'a' || vowel_middle === 'e'\
    \ || vowel_middle === 'i' || vowel_middle === 'o' || vowel_middle === 'u'){\n\
    \            return word[vowel_start];\n        }\n    }\n    return \"\";\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpca8pm_3a.js:49:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpca8pm_3a.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_max = 0;\n    for(let i = 0; i < word.length; i++){\n\
    \        if(vowels.includes(word[i])){\n            vowels_index = i;\n      \
    \      vowels_index_count++;\n            if(vowels_index_count > vowels_index_count_max){\n\
    \                vowels_index_count_max = vowels_index_count;\n            }\n\
    \        }\n    }\n    let vowels_index_count_min = 0;\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            vowels_index\
    \ = i;\n            vowels_index_count++;\n            if(vowels_index_count <\
    \ vowels_index_count_min){\n                vowels_index_count_min = vowels_index_count;\n\
    \            }\n        }\n    }\n    if(vowels_index_count_max > vowels_index_count_min){\n\
    \        return word[vowels_index];\n    }\n    return \"\";\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpzwz1sztk.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwz1sztk.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    word = word.toLowerCase();\n    vowels = ['a','e','i','o','u'];\n    vowels_count\
    \ = vowels.length;\n    vowels_index = [];\n    vowels_index[0] = 0;\n    vowels_index[vowels_count-1]\
    \ = vowels_count;\n    vowels_index[vowels_count-2] = vowels_count-1;\n    vowels_index[vowels_count-3]\
    \ = vowels_count-2;\n    vowels_index[vowels_count-4] = vowels_count-3;\n    vowels_index[vowels_count-5]\
    \ = vowels_count-4;\n    vowels_index[vowels_count-6] = vowels_count-5;\n    vowels_index[vowels_count-7]\
    \ = vowels_count-6;\n    vowels_index[vowels_count-8] = vowels_count-7;\n    vowels_index[vowels_count-9]\
    \ = vowels_count-8;\n    vowels_index[vowels_count-10] = vowels_count-9;\n   \
    \ vowels_index[vowels_count-11] = vowels_count-10;\n    vowels_index[vowels_count-12]\
    \ = vowels_count-11;\n    vowels_index[vowels_count-13] = vowels_count-12;\n \
    \   vowels_index[vowels_count-14] = vowels_count-13;\n    vowels_index[vowels_count-15]\
    \ = vowels_count-14;\n    vowels_index[vowels_count-16] = vowels_count-15;\n \
    \   vowels_index[vowels_count-17] = vowels_count-16;\n    vowels_index[vowels_count-18]\
    \ = vowels_count-17;\n    vowels_index[vowels_count-19] = vowels_count-18;\n \
    \   vowels_index[vowels_count-20] = vowels_count-19;\n    vowels_index[vowels_count-21]\
    \ = vowels_count-20;\n    vowels_index[vowels_count-22] = vowels_count-21;\n \
    \   vowels_index[vowels_count-23] = vowels_count-22;\n    vowels_index[vowels_count-24]\
    \ = vowels_count-23;\n    vowels_index[vowels_count-25] = vowels_count-24;\n \
    \   vowels_index[vowels_count-26] = vowels_count-25;\n    vowels_index[vowels_count-27]\
    \ = vowels_count-26; \n    vowels_index[vowels_count-28] = vowels_count-27;\n\
    \    vowels_index[vowels_count-29] = vowels_count-\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyowq29qy.js:50\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowels_count_from_right = vowels_count - 1;\n    let vowels_count_from_left\
    \ = vowels_count - 2;\n    let vowels_count_from_middle = vowels_count - 3;\n\
    \    let vowels_count_from_left_to_right = vowels_count - 4;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 5;\n    let vowels_count_from_middle_to_right = vowels_count\
    \ - 6;\n    let vowels_count_from_left_to_middle = vowels_count - 7;\n    let\
    \ vowels_count_from_right_to_middle = vowels_count - 8;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count - 11;\n\
    \    let vowels_count_from_middle_to_right_to_middle = vowels_count - 12;\n  \
    \  let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_right\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_middle\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_middle\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_middle_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_middle_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_middle_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7kqvbzs6.js:46\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowels_count = vowels.length;\n\
    \    let vowel_found = false;\n    let vowel_found_index = 0;\n    for(let i =\
    \ 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n         \
    \   vowel_found = true;\n            vowel_found_index = i;\n            break;\n\
    \        }\n    }\n    if(vowel_found){\n        let vowel_found_index = vowel_found_index\
    \ + 1;\n        let vowel_found = false;\n        for(let i = vowel_found_index;\
    \ i < word.length; i++){\n            if(vowels.includes(word[i])){\n        \
    \        vowel_found = true;\n                vowel_found_index = i;\n       \
    \         break;\n            }\n        }\n        if(vowel_found){\n       \
    \     let vowel_found_index = vowel_found_index + 1;\n            let vowel_found\
    \ = false;\n            for(let i = vowel_found_index; i < word.length; i++){\n\
    \                if(vowels.includes(word[i])){\n                    vowel_found\
    \ = true;\n                    vowel_found_index = i;\n                    break;\n\
    \                }\n            }\n            if(vowel_found){\n            \
    \    let vowel_found_index = vowel_found_index + 1;\n                let vowel_found\
    \ = false;\n                for(let i = vowel_found_index; i < word.length; i++){\n\
    \                    if(vowels.includes(word[i])){\n                        vowel_found\
    \ = true;\n                        vowel_found_index = i;\n                  \
    \      break;\n                    }\n                }\n                if(vowel_found){\n\
    \                    let vowel_found_index = vowel_found_index + 1;\n        \
    \            let vowel_found = false;\n                    for(let i = vowel_found_index;\
    \ i < word.length; i++){\n                        if(vowels.includes(word[i])){\n\
    \                            vowel_found = true;\n                           \
    \ vowel_found_index = i;\n                            break;\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkxdbxnkz.js:28\n        let vowel_found_index = vowel_found_index\
    \ + 1;\n                                ^\n\nReferenceError: Cannot access 'vowel_found_index'\
    \ before initialization\n    at get_closest_vowel (/tmp/tmpkxdbxnkz.js:28:33)\n\
    \    at test (/tmp/tmpkxdbxnkz.js:79:20)\n    at Object.<anonymous> (/tmp/tmpkxdbxnkz.js:94:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: ReferenceError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_counter = 0;\n    let vowel_start = 0;\n    let vowel_end = 0;\n\
    \    for(let i = 0; i < word.length; i++){\n        if(vowels.includes(word[i])){\n\
    \            vowel_counter++;\n            if(vowel_counter > vowel_start){\n\
    \                vowel_start = i;\n            }\n            if(vowel_counter\
    \ > vowel_end){\n                vowel_end = i;\n            }\n        }\n  \
    \  }\n    if(vowel_counter > vowel_start && vowel_counter > vowel_end){\n    \
    \    return word[vowel_start];\n    }\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmploywj14n.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmploywj14n.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowelsCount = vowels.length;\n\
    \tlet vowelsIndex = [];\n\tlet vowelsIndexCount = 0;\n\tlet vowelsIndexCount2\
    \ = 0;\n\tlet vowelsIndexCount3 = 0;\n\tlet vowelsIndexCount4 = 0;\n\tlet vowelsIndexCount5\
    \ = 0;\n\tlet vowelsIndexCount6 = 0;\n\tlet vowelsIndexCount7 = 0;\n\tlet vowelsIndexCount8\
    \ = 0;\n\tlet vowelsIndexCount9 = 0;\n\tlet vowelsIndexCount10 = 0;\n\tlet vowelsIndexCount11\
    \ = 0;\n\tlet vowelsIndexCount12 = 0;\n\tlet vowelsIndexCount13 = 0;\n\tlet vowelsIndexCount14\
    \ = 0;\n\tlet vowelsIndexCount15 = 0;\n\tlet vowelsIndexCount16 = 0;\n\tlet vowelsIndexCount17\
    \ = 0;\n\tlet vowelsIndexCount18 = 0;\n\tlet vowelsIndexCount19 = 0;\n\tlet vowelsIndexCount20\
    \ = 0;\n\tlet vowelsIndexCount21 = 0;\n\tlet vowelsIndexCount22 = 0;\n\tlet vowelsIndexCount23\
    \ = 0;\n\tlet vowelsIndexCount24 = 0;\n\tlet vowelsIndexCount25 = 0;\n\tlet vowelsIndexCount26\
    \ = 0;\n\tlet vowelsIndexCount27 = 0;\n\tlet vowelsIndexCount28 = 0;\n\tlet vowelsIndexCount29\
    \ = 0;\n\tlet vowelsIndexCount30 = 0;\n\tlet vowelsIndexCount31 = 0;\n\tlet vowelsIndexCount32\
    \ = 0;\n\tlet vowelsIndexCount33 = 0;\n\tlet vowelsIndexCount34 = 0;\n\tlet vowelsIndexCount35\
    \ = 0;\n\tlet vowelsIndexCount36 = 0;\n\tlet vowelsIndexCount37 = 0;\n\tlet vowelsIndexCount38\
    \ = 0;\n\tlet vowelsIndexCount39 = 0;\n\tlet vowelsIndexCount40 = 0;\n\tlet vowelsIndexCount41\
    \ = 0;\n\tlet vowelsIndexCount42 = 0;\n\tlet vowelsIndexCount43 = 0;\n\tlet vowelsIndexCount44\
    \ = 0;\n\tlet vowelsIndexCount45 = 0;\n\tlet vowelsIndexCount46 = 0;\n\tlet vowelsIndexCount47\
    \ = 0;\n\tlet vowelsIndexCount48 = 0;\n\tlet vowelsIndexCount49 = 0;\n\tlet vowelsIndexCount50\
    \ = 0;\n\tlet vowelsIndexCount51 = 0;\n\tlet vowelsIndexCount52 = 0;\n\tlet vowelsIndexCount53\
    \ = 0;\n\tlet vowelsIndexCount54 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy37g2t7_.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    \n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        vowelsIndex.push(vowels.indexOf(word[i]));\n    }\n    \n   \
    \ let vowelsIndexCount = vowelsIndex.length;\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    \n    let vowelsIndexMinIndex\
    \ = 0;\n    let vowelsIndexMaxIndex = 0;\n    \n    for(let i = 0; i < vowelsCount;\
    \ i++){\n        if(vowelsIndex[i] === vowelsIndexMin){\n            vowelsIndexMinIndex\
    \ = i;\n        }\n        if(vowelsIndex[i] === vowelsIndexMax){\n          \
    \  vowelsIndexMaxIndex = i;\n        }\n    }\n    \n    let vowelsIndexMinValue\
    \ = vowels[vowelsIndexMinIndex];\n    let vowelsIndexMaxValue = vowels[vowelsIndexMaxIndex];\n\
    \    \n    if(vowelsIndexMinValue === vowelsIndexMaxValue){\n        return vowelsIndexMinValue;\n\
    \    }\n    \n    let vowelsIndexMinIndex2 = vowelsIndexMin - 1;\n    let vowelsIndexMaxIndex2\
    \ = vowelsIndexMax + 1;\n    \n    if(vowelsIndexMinIndex2 >= 0 && vowelsIndexMaxIndex2\
    \ < vowelsCount){\n        let vowelsIndexMinValue2 = vowels[vowelsIndexMinIndex2];\n\
    \        let vowelsIndexMaxValue2 = vowels[vowelsIndexMaxIndex2];\n        \n\
    \        if(vowelsIndexMinValue2 === vowelsIndexMaxValue2){\n            return\
    \ vowelsIndexMinValue2;\n        }\n    }\n    \n    return \"\";\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmp9etedwe7.js:68:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9etedwe7.js:83:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = ['a','e','i','o','u'];\n    let vowel_count = vowels.length;\n\
    \    let vowel_count_from_right = vowel_count - 1;\n    let vowel_count_from_left\
    \ = vowel_count - 2;\n    let vowel_count_from_middle = vowel_count - 3;\n   \
    \ let vowel_count_from_middle2 = vowel_count - 4;\n    let vowel_count_from_middle3\
    \ = vowel_count - 5;\n    let vowel_count_from_middle4 = vowel_count - 6;\n  \
    \  let vowel_count_from_middle5 = vowel_count - 7;\n    let vowel_count_from_middle6\
    \ = vowel_count - 8;\n    let vowel_count_from_middle7 = vowel_count - 9;\n  \
    \  let vowel_count_from_middle8 = vowel_count - 10;\n    let vowel_count_from_middle9\
    \ = vowel_count - 11;\n    let vowel_count_from_middle10 = vowel_count - 12;\n\
    \    let vowel_count_from_middle11 = vowel_count - 13;\n    let vowel_count_from_middle12\
    \ = vowel_count - 14;\n    let vowel_count_from_middle13 = vowel_count - 15;\n\
    \    let vowel_count_from_middle14 = vowel_count - 16;\n    let vowel_count_from_middle15\
    \ = vowel_count - 17;\n    let vowel_count_from_middle16 = vowel_count - 18;\n\
    \    let vowel_count_from_middle17 = vowel_count - 19;\n    let vowel_count_from_middle18\
    \ = vowel_count - 20;\n    let vowel_count_from_middle19 = vowel_count - 21;\n\
    \    let vowel_count_from_middle20 = vowel_count - 22;\n    let vowel_count_from_middle21\
    \ = vowel_count - 23;\n    let vowel_count_from_middle22 = vowel_count - 24;\n\
    \    let vowel_count_from_middle23 = vowel_count - 25;\n    let vowel_count_from_middle24\
    \ = vowel_count - 26;\n    let vowel_count_from_middle25 = vowel_count - 27;\n\
    \    let vowel_count_from_middle26 = vowel_count - 28;\n    let vowel_count_from_middle27\
    \ = vowel_count - 29;\n    let vowel_count_from_middle28 = vowel_count - 30;\n\
    \    let vowel_count_from_middle29 = vowel_count - 31;\n    let vowel_count_from_middle30\
    \ = vowel_count - 32;\n    let vowel_count_from_middle31 = vowel_count - 33;\n\
    \    let vowel_count_from_middle32 = vowel_count - 34;\n    let vowel_count_from_middle33\
    \ = vowel_count - 35;\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8yx0ugcy.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowelsCount =\
    \ vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowel\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8zjf4_c_.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet vowels_count = vowels.length;\n\
    \tlet vowels_count_from_right = word.length - vowels_count;\n\tlet vowels_count_from_left\
    \ = vowels_count - 1;\n\tlet vowels_count_from_middle = vowels_count / 2;\n\t\
    let vowels_count_from_middle2 = vowels_count_from_middle + 1;\n\tlet vowels_count_from_middle3\
    \ = vowels_count_from_middle2 + 1;\n\tlet vowels_count_from_middle4 = vowels_count_from_middle3\
    \ + 1;\n\tlet vowels_count_from_middle5 = vowels_count_from_middle4 + 1;\n\tlet\
    \ vowels_count_from_middle6 = vowels_count_from_middle5 + 1;\n\tlet vowels_count_from_middle7\
    \ = vowels_count_from_middle6 + 1;\n\tlet vowels_count_from_middle8 = vowels_count_from_middle7\
    \ + 1;\n\tlet vowels_count_from_middle9 = vowels_count_from_middle8 + 1;\n\tlet\
    \ vowels_count_from_middle10 = vowels_count_from_middle9 + 1;\n\tlet vowels_count_from_middle11\
    \ = vowels_count_from_middle10 + 1;\n\tlet vowels_count_from_middle12 = vowels_count_from_middle11\
    \ + 1;\n\tlet vowels_count_from_middle13 = vowels_count_from_middle12 + 1;\n\t\
    let vowels_count_from_middle14 = vowels_count_from_middle13 + 1;\n\tlet vowels_count_from_middle15\
    \ = vowels_count_from_middle14 + 1;\n\tlet vowels_count_from_middle16 = vowels_count_from_middle15\
    \ + 1;\n\tlet vowels_count_from_middle17 = vowels_count_from_middle16 + 1;\n\t\
    let vowels_count_from_middle18 = vowels_count_from_middle17 + 1;\n\tlet vowels_count_from_middle19\
    \ = vowels_count_from_middle18 + 1;\n\tlet vowels_count_from_middle20 = vowels_count_from_middle19\
    \ + 1;\n\tlet vowels_count_from_middle21 = vowels_count_from_middle20 + 1;\n\t\
    let vowels_count_from_middle22 = vowels_count_from_middle21 + 1;\n\tlet vowels_count_from_middle23\
    \ = vowels_count_from_middle22 + 1;\n\tlet vowels_count_from_middle24 = vowels_count_from_middle23\
    \ + 1;\n\tlet vowels_count_from_middle25 = vowels_count_from_middle24 + 1;\n\t\
    let vowels_count_from_middle26 = vowels_count_from_middle25 + 1;\n\tlet vowels_count_from_middle27\
    \ = vowels_count_from_middle26 + 1;\n\tlet vowels_count_from_middle28 = vowels_count_from_middle27\
    \ + 1;\n\t\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"\
    u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp86zdxwh_.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let vowels_count =\
    \ vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count_from_right_to_left - vowels_count_from_left_to_right;\n    let\
    \ vowels_count_from_left_to_right_to_left = vowels_count_from_left_to_right -\
    \ vowels_count_from_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right - vowels_count_from_left_to_right_to_left;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count_from_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ - vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptislh9ix.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \    var vowels = \"aeiouAEIOU\";\n    var vowels_count = vowels.length;\n   \
    \ var vowels_count_from_right = word.length - vowels_count;\n    var vowels_count_from_left\
    \ = vowels_count - 1;\n    var vowels_count_from_middle = vowels_count / 2;\n\
    \    var vowels_count_from_middle_to_right = vowels_count_from_middle + vowels_count_from_right;\n\
    \    var vowels_count_from_middle_to_left = vowels_count_from_middle - vowels_count_from_left;\n\
    \    var vowels_count_from_middle_to_left_to_right = vowels_count_from_middle_to_left\
    \ + vowels_count_from_right;\n    var vowels_count_from_middle_to_left_to_left\
    \ = vowels_count_from_middle_to_left - vowels_count_from_left;\n    var vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_left + vowels_count_from_middle;\n   \
    \ var vowels_count_from_middle_to_left_to_right_to_left_to_middle = vowels_count_from_middle_to_left_to_right\
    \ - vowels_count_from_middle;\n    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left + vowels_count_from_middle_to_left_to_right_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left =\
    \ vowels_count_from_middle_to_left_to_right_to_left_to_middle - vowels_count_from_middle_to_left_to_right_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left + vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left\
    \ + vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_right\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left\
    \ + vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_middle;\n\
    \    var vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_right_to_middle\
    \ = vowels_count_from_middle_to_left_to_right_to_left_to_middle_to_left_to_left_to_left_to_right_to_middle;\n\
    \    var vowels_count_from_middle_to_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuas3v0sx.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
    yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
    quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n\
    \tlet vowels = ['a','e','i','o','u'];\n\tlet vowelsCount = vowels.length;\n\t\
    let vowelsIndex = [];\n\tlet vowelsIndexCount = [];\n\tlet vowelsIndexCountSum\
    \ = 0;\n\tlet vowelsIndexSum = 0;\n\tlet vowelsIndexSumCount = 0;\n\tlet vowelsIndexSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCount = 0;\n\tlet vowelsIndexSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCount = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCount = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCount = 0;\n\tlet\
    \ vowelsIndexSumCountSumCountSumCountSumCountSumCountSum = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n\t\
    let vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum =\
    \ 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n\tlet \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpphizi2uu.js:33\n\tlet vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n\t    ^\n\nSyntaxError: Identifier 'vowelsIndexSumCountSumCountSumCountSumCountSumCountSumCount'\
    \ has already been declared\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
