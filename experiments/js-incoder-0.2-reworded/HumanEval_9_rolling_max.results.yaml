name: HumanEval_9_rolling_max
language: js
results:
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var max = 0;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    if(numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  for(var i =\
    \ 0; i < numbers.length; i++){\n    if(numbers[i] > max){\n      result.push(max);\n\
    \      max = numbers[i];\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp8py713v3.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8py713v3.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_max = [];\n\tvar max_value = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > max_value){\n\t\t\trolling_max = [max_value];\n\t\
    \t\tmax_value = numbers[i];\n\t\t}else{\n\t\t\trolling_max.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn rolling_max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpalm6eq4k.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpalm6eq4k.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar max_value = numbers[0];\n\tvar max_index = 0;\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max_value){\n\t\t\tmax_value\
    \ = numbers[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\tresult.push(max_value);\n\
    \tresult.push(max_index);\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpq8u2xaq5.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq8u2xaq5.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar rolling_max;\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\trolling_max = Math.max(numbers[i]);\n\t\tresult.push(rolling_max);\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmptbme746x.js:22:10)\n    at Object.<anonymous> (/tmp/tmptbme746x.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var currentMax = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] > currentMax){\n      currentMax = numbers[i];\n  \
    \  }\n  }\n  result.push(currentMax);\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1jqi121k.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1jqi121k.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max = numbers[0];\n\tvar max_index = -1;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t\tmax_index =\
    \ i;\n\t\t}\n\t}\n\treturn numbers.slice(0, max_index + 1);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpvy14y791.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvy14y791.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var max_value = numbers[0];\n    var max_index = -1;\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_value){\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push(max_value);\n    result.push(max_index);\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmphaad0vlp.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmphaad0vlp.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    numbers.forEach(function(number){\n        var max\
    \ = 0;\n        for(var i=0; i<numbers.length; i++){\n            if(numbers[i]\
    \ > max){\n                max = numbers[i];\n            }\n        }\n     \
    \   result.push(max);\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpttqae0b0.js:25:10)\n    at Object.<anonymous> (/tmp/tmpttqae0b0.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar max_number = 0;\n\tvar max_index = 0;\n\tfor(var i in numbers){\n\t\tmax_number\
    \ = Math.max(max_number, numbers[i]);\n\t\tmax_index = i;\n\t}\n\treturn numbers.slice(max_index,\
    \ numbers.length);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpe4fp6388.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe4fp6388.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var max = 0;\n    for(var i=0; i<numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \ }\n    for(var i=0; i<numbers.length; i++){\n        if(numbers[i] > max){\n\
    \            result.push(max);\n            max = numbers[i];\n        }\n   \
    \     else if(numbers[i] < max){\n            result.push(numbers[i]);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpj_inhhga.js:31:10)\n    at Object.<anonymous> (/tmp/tmpj_inhhga.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var max_rolling = 0;\n    var max_rolling_numbers = [];\n    for(var i=0;\
    \ i<numbers.length; i++){\n        if(numbers[i] > max_rolling){\n           \
    \ max_rolling = numbers[i];\n        }\n    }\n    for(var i=0; i<numbers.length;\
    \ i++){\n        if(numbers[i] > max_rolling){\n            max_rolling_numbers.push(max_rolling);\n\
    \            max_rolling = numbers[i];\n        }\n    }\n    max_rolling_numbers.push(max_rolling);\n\
    \    return max_rolling_numbers;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmptnda4a0w.js:28:10)\n   \
    \ at Object.<anonymous> (/tmp/tmptnda4a0w.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n    }\n    result.push(max);\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpz3lri51u.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz3lri51u.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar max_value = numbers[0];\n\tvar max_index = 0;\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max_value){\n\t\t\tmax_value\
    \ = numbers[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\tresult.push(max_value);\n\
    \tresult.push(max_index);\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzasnkvk1.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzasnkvk1.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar rolling_max = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\trolling_max.push(numbers[i]);\n\
    \t}\n\trolling_max = rolling_max.sort(function(a, b){\n\t\treturn a-b;\n\t});\n\
    \tfor(var i=0; i<numbers.length; i++){\n\t\trolling_max[i] = rolling_max[i] +\
    \ numbers[i];\n\t}\n\treturn rolling_max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  6,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpr_0h_4sp.js:25:10)\n    at Object.<anonymous> (/tmp/tmpr_0h_4sp.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 6,\
    \ 8 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var max_value = numbers[0];\n    var max_index = 0;\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_value){\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result.push(max_value);\n    result.push(numbers[max_index]);\n  \
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1r7ms4sm.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1r7ms4sm.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar max_value = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > max_value){\n\t\t\tmax_value = numbers[i];\n\t\t\
    }\n\t}\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] > max_value){\n\
    \t\t\tresult.push(max_value);\n\t\t\tmax_value = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpinuklajw.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpinuklajw.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var currentMax = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] > currentMax){\n      currentMax = numbers[i];\n  \
    \  }\n  }\n  result.push(currentMax);\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5qu7stvl.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5qu7stvl.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \  var result = [];\n  var max_value = numbers[0];\n  var max_index = 0;\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] > max_value){\n      max_value\
    \ = numbers[i];\n      max_index = i;\n    }\n  }\n  result.push(max_value);\n\
    \  result.push(max_index);\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpp6khocyu.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp6khocyu.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \    var result = [];\n    var rolling_max;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        rolling_max = numbers[i];\n        for(var j = i - 1; j >= 0;\
    \ j--){\n            if(numbers[j] > rolling_max){\n                rolling_max\
    \ = numbers[j];\n            }\n        }\n        result.push(rolling_max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\
    \tvar result = [];\n\tvar max = 0;\n\tfor(var i=0;i<numbers.length;i++){\n\t\t\
    max = Math.max(max, numbers[i]);\n\t\tresult.push(max);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
