name: HumanEval_149_sorted_list_sum
language: js
prompt: "//Write a function that accepts an array of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted array\
  \ with a sorted order,\n// The array is always an array of strings and never an\
  \ array of numbers,\n// and it may contain duplicates.\n// The order of the array\
  \ should be ascending by length of each word, and you\n// should return the array\
  \ sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n\
  // The function should return an array of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
  aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
  AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\"\
  , \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"\
  abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"\
  AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\"\
  , \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
completions: ["  var sorted_lst = lst;\n  sorted_lst.sort(function(a, b){\n    return\
    \ a.length - b.length;\n  });\n  return sorted_lst;\n}\n", "    let sortedArr\
    \ = lst.sort((a,b) => a.length - b.length);\n    return sortedArr.sort((a,b) =>\
    \ a.localeCompare(b));\n}\n", "\tlet sortedArr = lst.sort((a,b) => a.length -\
    \ b.length);\n\tlet sortedArr2 = sortedArr.sort((a,b) => a > b);\n\treturn sortedArr2;\n\
    }\n", "    var sorted_lst = lst;\n    sorted_lst.sort();\n    sorted_lst.forEach(function(word){\n\
    \        sorted_lst.splice(sorted_lst.indexOf(word), 1);\n    });\n    return\
    \ sorted_lst;\n}\n", "    var new_lst = [];\n    for(var i=0;i<lst.length;i++){\n\
    \        var word = lst[i];\n        var index = new_lst.indexOf(word);\n    \
    \    if(index == -1){\n            new_lst.push(word);\n        }else{\n     \
    \       var index = new_lst.indexOf(word);\n            new_lst[index] = word;\n\
    \        }\n    }\n    new_lst.sort();\n    return new_lst;\n}\n", "    let sorted\
    \ = [];\n    let sortedArr = lst;\n    for(let i = 0; i < sortedArr.length; i++){\n\
    \        let currentWord = sortedArr[i];\n        let currentWordArr = currentWord.split('');\n\
    \        let currentWordArrLength = currentWordArr.length;\n        for(let j\
    \ = 0; j < currentWordArrLength; j++){\n            if(j % 2 === 0){\n       \
    \         sorted.push(currentWord);\n            }\n        }\n    }\n    sorted\
    \ = sorted.sort();\n    return sorted;\n}\n", "    var sorted_lst = [];\n    var\
    \ sorted_lst_length = [];\n    for(var i=0; i<lst.length; i++){\n        sorted_lst_length[i]\
    \ = lst[i].length;\n    }\n    sorted_lst.sort(function(a, b){\n        return\
    \ sorted_lst_length[a] - sorted_lst_length[b];\n    });\n    for(var i=0; i<lst.length;\
    \ i++){\n        if(sorted_lst_length[i] != lst[i].length){\n            sorted_lst.push(lst[i]);\n\
    \        }\n    }\n    return sorted_lst;\n}\n", "  var new_lst = [];\n  for(var\
    \ i=0;i<lst.length;i++){\n    var new_lst = lst[i].split(\" \");\n    new_lst.sort();\n\
    \    new_lst = new_lst.join(\" \");\n    new_lst.split(\" \");\n    new_lst.sort();\n\
    \    new_lst = new_lst.join(\" \");\n  }\n  return new_lst;\n}\n", "  var new_lst\
    \ = lst;\n  new_lst.sort(function(a, b){\n    return a.length - b.length;\n  });\n\
    \  return new_lst;\n}\n", "  var sorted_lst = [];\n  for(var i=0;i<lst.length;i++){\n\
    \    var word = lst[i];\n    var index = sorted_lst.indexOf(word);\n    if(index\
    \ == -1){\n      sorted_lst.push(word);\n    }else{\n      sorted_lst.splice(index,\
    \ 1);\n    }\n  }\n  sorted_lst.sort();\n  return sorted_lst;\n}\n", "  var newList\
    \ = [];\n  for(var i=0;i<lst.length;i++){\n    if(lst[i].length%2 != 0){\n   \
    \   newList.push(lst[i]);\n    }\n  }\n  newList.sort();\n  return newList;\n}",
  "  var sorted_lst = [];\n  for(var i=0; i<lst.length; i++){\n    for(var j=0; j<lst.length;\
    \ j++){\n      if(lst[i].length < lst[j].length){\n        sorted_lst.push(lst[j]);\n\
    \      }\n      else if(lst[i].length > lst[j].length){\n        sorted_lst.push(lst[i]);\n\
    \      }\n      else if(lst[i].length == lst[j].length){\n        sorted_lst.push(lst[i]);\n\
    \      }\n    }\n  }\n  return sorted_lst;\n}\n", "    let sorted_lst = lst\n\
    \    sorted_lst.sort((a,b)=>a.length>b.length?1:-1)\n    sorted_lst.sort((a,b)=>a.localeCompare(b))\n\
    \    return sorted_lst\n}\n", "    var sorted_lst = [];\n    for(var i=0;i<lst.length;i++){\n\
    \        if(sorted_lst.indexOf(lst[i]) == -1){\n            sorted_lst.push(lst[i]);\n\
    \        }\n    }\n    sorted_lst.sort();\n    return sorted_lst;\n}\n", "  var\
    \ sorted_lst = lst;\n  sorted_lst.sort();\n  sorted_lst.forEach(function(word){\n\
    \    if(word.length % 2 === 0){\n      sorted_lst.splice(sorted_lst.indexOf(word),\
    \ 1);\n    }\n  });\n  return sorted_lst;\n}\n", "  let sortedArr = lst\n    .map(item\
    \ => item.split(\" \").sort((a, b) => a.length - b.length))\n    .map(item =>\
    \ item.join(\" \"))\n    .sort((a, b) => a.localeCompare(b));\n  return sortedArr;\n\
    }\n", "\tlet sortedArray = lst;\n\tlet sortedArrayLength = sortedArray.length;\n\
    \tlet sortedArraySorted = [];\n\tlet sortedArraySortedLength = 0;\n\tlet sortedArraySortedIndex\
    \ = 0;\n\tlet sortedArraySortedIndexLength = 0;\n\tlet sortedArraySortedIndexLength2\
    \ = 0;\n\tlet sortedArraySortedIndexLength3 = 0;\n\tlet sortedArraySortedIndexLength4\
    \ = 0;\n\tlet sortedArraySortedIndexLength5 = 0;\n\tlet sortedArraySortedIndexLength6\
    \ = 0;\n\tlet sortedArraySortedIndexLength7 = 0;\n\tlet sortedArraySortedIndexLength8\
    \ = 0;\n\tlet sortedArraySortedIndexLength9 = 0;\n\tlet sortedArraySortedIndexLength10\
    \ = 0;\n\tlet sortedArraySortedIndexLength11 = 0;\n\tlet sortedArraySortedIndexLength12\
    \ = 0;\n\tlet sortedArraySortedIndexLength13 = 0;\n\tlet sortedArraySortedIndexLength14\
    \ = 0;\n\tlet sortedArraySortedIndexLength15 = 0;\n\tlet sortedArraySortedIndexLength16\
    \ = 0;\n\tlet sortedArraySortedIndexLength17 = 0;\n\tlet sortedArraySortedIndexLength18\
    \ = 0;\n\tlet sortedArraySortedIndexLength19 = 0;\n\tlet sortedArraySortedIndexLength20\
    \ = 0;\n\tlet sortedArraySortedIndexLength21 = 0;\n\tlet sortedArraySortedIndexLength22\
    \ = 0;\n\tlet sortedArraySortedIndexLength23 = 0;\n\tlet sortedArraySortedIndexLength24\
    \ = 0;\n\tlet sortedArraySortedIndexLength25 = 0;\n\tlet sortedArraySortedIndexLength26\
    \ = 0;\n\tlet sortedArraySortedIndexLength27 = 0;\n\tlet sortedArraySortedIndexLength28\
    \ = 0;\n\tlet sortedArraySortedIndexLength29 = 0;\n\tlet sortedArraySortedIndexLength30\
    \ = 0;\n\tlet sortedArraySortedIndexLength31 = 0;\n\tlet sortedArraySortedIndexLength32\
    \ = 0;\n\tlet sortedArraySortedIndexLength33 = 0;\n\tlet sortedArraySortedIndexLength34\
    \ = 0;\n\tlet sortedArraySortedIndexLength35 = 0;\n\tlet sortedArraySortedIndexLength36\
    \ = 0;\n\tlet sortedArraySortedIndexLength37 = 0;\n\tlet sortedArraySortedIndexLength38\
    \ = 0;\n\tlet sortedArraySortedIndexLength39 = 0;\n\tlet sortedArraySortedIndexLength40\
    \ = 0;\n\tlet sortedArraySortedIndexLength41 = 0;\n\tlet sortedArraySortedIndexLength42\
    \ = 0;\n\tlet sortedArraySortedIndexLength43 = 0;\n\tlet sortedArraySortedIndexLength44\
    \ = 0;\n\tlet sortedArraySortedIndexLength45 = 0;\n\tlet sortedArraySortedIndexLength46\
    \ = 0;\n\tlet sortedArraySortedIndexLength47 = 0;\n\tlet sortedArraySortedIndex",
  "  var newArr = [];\n  for(var i=0;i<lst.length;i++){\n    if(newArr.indexOf(lst[i])==-1){\n\
    \      newArr.push(lst[i]);\n    }\n  }\n  newArr.sort();\n  return newArr;\n\
    }\n", "    let sortedArr = lst.sort((a,b) => a.length - b.length);\n    sortedArr\
    \ = sortedArr.sort((a,b) => a > b);\n    return sortedArr;\n}\n", "  var sorted_lst\
    \ = [];\n  for(var i=0;i<lst.length;i++){\n    if(sorted_lst.indexOf(lst[i]) ==\
    \ -1){\n      sorted_lst.push(lst[i]);\n    }\n  }\n  sorted_lst.sort();\n  return\
    \ sorted_lst;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
