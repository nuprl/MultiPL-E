name: HumanEval_126_is_sorted
language: js
prompt: "//Given an array of numbers, return whether or not they are sorted\n// in\
  \ ascending order. If array has more than 1 duplicate of the same\n// number, return\
  \ false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n\
  // true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2,\
  \ 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n\
  // >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3,\
  \ 4])\n// false\nfunction is_sorted(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n \
  \ assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
  \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),true);\n}\n\ntest();"
completions: ["  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i]\
    \ < lst[i - 1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n\
    }\n", "    var sorted = true;\n    var prev = null;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(prev != null && lst[i] > prev){\n            sorted = false;\n   \
    \         break;\n        }\n        prev = lst[i];\n    }\n    return sorted;\n\
    }\n", "\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i] === lst[i-1]){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    var sorted = true;\n\
    \    for(var i = 1; i < lst.length; i++){\n        if(lst[i] > lst[i-1]){\n  \
    \          sorted = false;\n            break;\n        }\n    }\n    return sorted;\n\
    }\n", "  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i]\
    \ < lst[i - 1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n\
    }\n", "\tvar sorted = true;\n\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i]\
    \ < lst[i-1]){\n\t\t\tsorted = false;\n\t\t}\n\t}\n\treturn sorted;\n}\n", " \
    \ var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] <\
    \ lst[i-1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n\
    }\n", "  var sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i]\
    \ < lst[i - 1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n\
    }\n", "\tvar sorted_list = lst.sort();\n\treturn sorted_list.length == lst.length;\n\
    }\n", "\tlet sorted = true;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tfor(let\
    \ j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\t\tsorted\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n", "  var\
    \ sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < lst[i-1]){\n\
    \      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n}\n", "  \
    \  var sorted = true;\n    var prev = null;\n    for(var i=0;i<lst.length;i++){\n\
    \        if(prev != null && lst[i] > prev){\n            sorted = false;\n   \
    \         break;\n        }\n        prev = lst[i];\n    }\n    return sorted;\n\
    }\n", "\tvar i, j, len = lst.length, sorted = true;\n\tfor(i = 0; i < len; i++){\n\
    \t\tfor(j = i+1; j < len; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\t\tsorted =\
    \ false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n", "  var\
    \ sorted = true;\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < lst[i-1]){\n\
    \      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n}\n", "\t\
    let sorted = true;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tfor(let j = i\
    \ + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\t\t\t\tsorted = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n}\n", "  var sorted = true;\n\
    \  var last;\n  for(var i=0; i<lst.length; i++){\n    last = lst[i];\n    for(var\
    \ j=i+1; j<lst.length; j++){\n      if(lst[j] < last){\n        sorted = false;\n\
    \        break;\n      }\n    }\n    if(!sorted){\n      break;\n    }\n  }\n\
    \  return sorted;\n}\n", "\tfor(var i = 1; i < lst.length; i++){\n\t\tif(lst[i]\
    \ === lst[i - 1]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \ if(lst.length <= 1) return true;\n  if(lst.length == 2) return lst[0] < lst[1];\n\
    \  if(lst.length == 1) return false;\n  var sorted = true;\n  var lastValue =\
    \ lst[0];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] != lastValue){\n\
    \      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n}\n", "  \
    \  var sorted = true;\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i]\
    \ < lst[i-1]){\n            sorted = false;\n            break;\n        }\n \
    \   }\n    return sorted;\n}\n", "\tlet sorted = true;\n\tfor(let i = 0; i < lst.length;\
    \ i++){\n\t\tfor(let j = i + 1; j < lst.length; j++){\n\t\t\tif(lst[i] > lst[j]){\n\
    \t\t\t\tsorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
