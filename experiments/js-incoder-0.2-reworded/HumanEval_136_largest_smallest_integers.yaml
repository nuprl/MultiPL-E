name: HumanEval_136_largest_smallest_integers
language: js
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
  \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n \
  \ assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2,\
  \ 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
  \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["  var largest = Number.NEGATIVE_INFINITY;\n  var smallest = Number.POSITIVE_INFINITY;\n\
    \  for (var i = 0; i < lst.length; i++){\n    if (lst[i] > largest){\n      largest\
    \ = lst[i];\n    }\n    if (lst[i] < smallest){\n      smallest = lst[i];\n  \
    \  }\n  }\n  return [smallest, largest];\n}\n", "  var smallest = Number.MAX_VALUE;\n\
    \  var largest = Number.MIN_VALUE;\n  for (var i = 0; i < lst.length; i++){\n\
    \    if (lst[i] < smallest){\n      smallest = lst[i];\n    }\n    if (lst[i]\
    \ > largest){\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  var largest = Number.NEGATIVE_INFINITY;\n  var smallest = Number.POSITIVE_INFINITY;\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(lst[i] > largest){\n      largest\
    \ = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n   \
    \ }\n  }\n  return [smallest, largest];\n}\n", "  var smallest = lst[0];\n  var\
    \ largest = lst[0];\n  for(var i = 1; i < lst.length; i++){\n    if(lst[i] < smallest){\n\
    \      smallest = lst[i];\n    }\n    if(lst[i] > largest){\n      largest = lst[i];\n\
    \    }\n  }\n  return [smallest, largest];\n}\n", "  var largest = undefined;\n\
    \  var smallest = undefined;\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]\
    \ > largest){\n      largest = lst[i];\n    }\n    if(lst[i] < smallest){\n  \
    \    smallest = lst[i];\n    }\n  }\n  return [smallest,largest];\n}\n", "  var\
    \ max_num = -Infinity;\n  var min_num = Infinity;\n  for(var i=0; i<lst.length;\
    \ i++){\n    if(lst[i] > max_num){\n      max_num = lst[i];\n    }\n    if(lst[i]\
    \ < min_num){\n      min_num = lst[i];\n    }\n  }\n  return [max_num, min_num];\n\
    }\n", "  var largest = undefined;\n  var smallest = undefined;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(largest === undefined || largest < lst[i]){\n\
    \      largest = lst[i];\n    }\n    if(smallest === undefined || smallest > lst[i]){\n\
    \      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ var max_negative = Number.NEGATIVE_INFINITY;\n  var min_positive = Number.POSITIVE_INFINITY;\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i] < min_positive){\n      min_positive\
    \ = lst[i];\n    }\n    if(lst[i] > max_negative){\n      max_negative = lst[i];\n\
    \    }\n  }\n  return [max_negative, min_positive];\n}\n", "  var largest = undefined;\n\
    \  var smallest = undefined;\n  for(var i=0;i<lst.length;i++){\n    if(lst[i]\
    \ < 0){\n      if(largest === undefined){\n        largest = lst[i];\n      }else{\n\
    \        if(largest < lst[i]){\n          largest = lst[i];\n        }\n     \
    \ }\n    }else{\n      if(smallest === undefined){\n        smallest = lst[i];\n\
    \      }else{\n        if(smallest > lst[i]){\n          smallest = lst[i];\n\
    \        }\n      }\n    }\n  }\n  return [largest,smallest];\n}\n", "  var largest\
    \ = Number.MIN_VALUE;\n  var smallest = Number.MAX_VALUE;\n  for(var i = 0; i\
    \ < lst.length; i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n  \
    \  }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  var largest = undefined;\n  var smallest = undefined;\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(largest === undefined || largest\
    \ < lst[i]){\n      largest = lst[i];\n    }\n    if(smallest === undefined ||\
    \ smallest > lst[i]){\n      smallest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  var smallest = Number.MAX_VALUE;\n  var largest = Number.MIN_VALUE;\n\
    \  for (var i = 0; i < lst.length; i++){\n    if (lst[i] > largest){\n      largest\
    \ = lst[i];\n    }\n    if (lst[i] < smallest){\n      smallest = lst[i];\n  \
    \  }\n  }\n  return [smallest, largest];\n}\n", "  var largest = undefined;\n\
    \  var smallest = undefined;\n  for(var i = 0; i < lst.length; i++){\n    if(largest\
    \ === undefined || lst[i] > largest){\n      largest = lst[i];\n    }\n    if(smallest\
    \ === undefined || lst[i] < smallest){\n      smallest = lst[i];\n    }\n  }\n\
    \  return [smallest, largest];\n}\n", "  var largest = Number.MIN_VALUE;\n  var\
    \ smallest = Number.MAX_VALUE;\n  for (var i = 0; i < lst.length; i++){\n    if\
    \ (lst[i] > largest){\n      largest = lst[i];\n    }\n    if (lst[i] < smallest){\n\
    \      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n", " \
    \ var largest = Number.MIN_VALUE;\n  var smallest = Number.MAX_VALUE;\n  for (var\
    \ i = 0; i < lst.length; i++){\n    if (lst[i] < smallest){\n      smallest =\
    \ lst[i];\n    }\n    if (lst[i] > largest){\n      largest = lst[i];\n    }\n\
    \  }\n  return [largest, smallest];\n}\n", "  var largest = undefined;\n  var\
    \ smallest = undefined;\n  for(var i = 0; i < lst.length; i++){\n    if(largest\
    \ === undefined || largest < lst[i]){\n      largest = lst[i];\n    }\n    if(smallest\
    \ === undefined || smallest > lst[i]){\n      smallest = lst[i];\n    }\n  }\n\
    \  return [smallest, largest];\n}\n", "  var largest = undefined;\n  var smallest\
    \ = undefined;\n  for(var i = 0; i < lst.length; i++){\n    if(largest === undefined\
    \ || largest < lst[i]){\n      largest = lst[i];\n    }\n    if(smallest === undefined\
    \ || smallest > lst[i]){\n      smallest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  var largest = Number.MIN_VALUE;\n  var smallest = Number.MAX_VALUE;\n\
    \  for(var i=0; i<lst.length; i++){\n    if(lst[i] > largest){\n      largest\
    \ = lst[i];\n    }\n    if(lst[i] < smallest){\n      smallest = lst[i];\n   \
    \ }\n  }\n  return [smallest, largest];\n}\n", "  var largest = Number.NEGATIVE_INFINITY;\n\
    \  var smallest = Number.POSITIVE_INFINITY;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] > largest){\n      largest = lst[i];\n    }\n    if(lst[i]\
    \ < smallest){\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  var largest = undefined;\n  var smallest = undefined;\n  for(var i =\
    \ 0; i < lst.length; i++){\n    if(largest === undefined || largest < lst[i]){\n\
    \      largest = lst[i];\n    }\n    if(smallest === undefined || smallest > lst[i]){\n\
    \      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
