name: HumanEval_130_tri
language: js
results:
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  for(var i = 1;\
    \ i <= n; i++){\n    arr.push((i%2 === 0)? i : i+1);\n  }\n  return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp74tm52fw.js:30:10)\n    at Object.<anonymous> (/tmp/tmp74tm52fw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 4\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  if(n<=1){\n  \
    \  arr.push(n);\n    return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp89l8_l3e.js:23\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \                      ^\n\nRangeError: Maximum call stack size exceeded\n   \
    \ at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n    at tri\
    \ (/tmp/tmp89l8_l3e.js:23:23)\n    at tri (/tmp/tmp89l8_l3e.js:23:12)\n    at\
    \ tri (/tmp/tmp89l8_l3e.js:23:38)\n    at tri (/tmp/tmp89l8_l3e.js:23:12)\n  \
    \  at tri (/tmp/tmp89l8_l3e.js:23:38)\n    at tri (/tmp/tmp89l8_l3e.js:23:12)\n\
    \    at tri (/tmp/tmp89l8_l3e.js:23:38)\n    at tri (/tmp/tmp89l8_l3e.js:23:12)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    let first\
    \ = 1;\n    let second = 2;\n    let third = 3;\n    for(let i = 0; i <= n; i++){\n\
    \        arr.push(first);\n        first = second + third;\n        second = third;\n\
    \        third = first + second;\n    }\n    return arr;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  11,\n  27\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n\
    \    at test (/tmp/tmpc343wy55.js:36:10)\n    at Object.<anonymous> (/tmp/tmpc343wy55.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 11,\
    \ 27 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 1; i <= n; i++){\n        arr.push((i%2 == 0)?(i/2):(i-1)+(i-2)+(i+1));\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpq2kf4lf2.js:30:10)\n    at Object.<anonymous> (/tmp/tmpq2kf4lf2.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 7\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var arr = [];\n    for(var i\
    \ = 1; i <= n; i++){\n        arr.push((i%2 === 0)? i : i+1);\n    }\n    return\
    \ arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,fibonacci,recursion\
    \ |>\n<code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3taywdc4.js:24\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    arr.push(3);\n\
    \    for(let i = 1; i < n; i++){\n        arr.push(arr[i-1] + arr[i-2] + arr[i+1])\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  NaN,\n\
    \  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at\
    \ test (/tmp/tmp1ca0oq2y.js:31:10)\n    at Object.<anonymous> (/tmp/tmp1ca0oq2y.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, NaN,\
    \ NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    arr.push(3);\n\
    \    arr.push(1);\n    arr.push(2);\n    arr.push(1);\n    arr.push(1);\n    arr.push(2);\n\
    \    arr.push(1);\n    arr.push(3);\n    arr.push(3);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n    arr.push(8);\n\
    \    arr.push(\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpssfxq0c5.js:121\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  if(n<=0){\n  \
    \  return arr;\n  }\n  if(n%2===0){\n    arr.push(n);\n    arr.push(tri(Math.floor(n/2)));\n\
    \    arr.push(tri(Math.floor(n/2)));\n  }else{\n    arr.push(tri(Math.floor(n/2)));\n\
    \    arr.push(tri(Math.floor(n/2)));\n    arr.push(n);\n  }\n  return arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    [],\n\
    \    [],\n    1\n  ],\n  [\n    [],\n    [],\n    1\n  ],\n  3\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmp2fji0hd_.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2fji0hd_.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ [], [],\
    \ 1 ], [ [], [], 1 ], 3 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  if(n<=1){\n  \
    \  arr.push(1);\n    return arr;\n  }\n  if(n%2===0){\n    arr.push(tri(Math.floor(n\
    \ / 2)));\n    arr.push(tri(n - 1));\n    return arr;\n  }\n  arr.push(tri(Math.floor(n\
    \ / 2)));\n  arr.push(tri(n - 1));\n  arr.push(tri(n - 2));\n  return arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1\n\
    \  ],\n  [\n    [\n      1\n    ],\n    [\n      1\n    ]\n  ],\n  [\n    1\n\
    \  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmp2uyko244.js:39:10)\n    at Object.<anonymous> (/tmp/tmp2uyko244.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1 ], [\
    \ [ 1 ], [ 1 ] ], [ 1 ] ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  for(let i = 1;\
    \ i <= n; i++){\n    arr.push((i%2 == 0)?i:i+1);\n  }\n  return arr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tri;\n\
    \  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmpu9cfz0vw.js:30:10)\n    at Object.<anonymous> (/tmp/tmpu9cfz0vw.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 4\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 1; i <= n; i++){\n        arr.push(i);\n    }\n    for(let i = 2; i <= n;\
    \ i++){\n        arr.push(arr[i-1] + arr[i-2]);\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  3,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n\
    ]\n    at test (/tmp/tmpdeow08jw.js:33:10)\n    at Object.<anonymous> (/tmp/tmpdeow08jw.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 3, 5 ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    let tri_arr\
    \ = [3,1];\n    for(let i = 3; i <= n; i++){\n        tri_arr.push(tri_arr[i-1]\
    \ + tri_arr[i-2] + tri_arr[i+1])\n    }\n    arr.push(tri_arr[n]);\n    return\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test (/tmp/tmpv7kon5cp.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv7kon5cp.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 1; i <= n; i++){\n        if(i%2 === 0){\n            arr.push(i);\n     \
    \   }else{\n            arr.push(tri(i - 1) + tri(i - 2) + tri(i + 1))\n     \
    \   }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpl0f5piei.js:23\n            arr.push(tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1))\n                                ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n\
    \    at tri (/tmp/tmpl0f5piei.js:23:33)\n    at tri (/tmp/tmpl0f5piei.js:23:48)\n\
    \    at tri (/tmp/tmpl0f5piei.js:23:48)\n    at tri (/tmp/tmpl0f5piei.js:23:48)\n\
    \    at tri (/tmp/tmpl0f5piei.js:23:48)\n    at tri (/tmp/tmpl0f5piei.js:23:48)\n\
    \    at tri (/tmp/tmpl0f5piei.js:23:48)\n    at tri (/tmp/tmpl0f5piei.js:23:48)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  let arr = [];\n  if(n<=0){\n  \
    \  return arr;\n  }\n  if(n%2==0){\n    arr.push(3);\n    arr.push(tri(Math.floor(n\
    \ / 2)));\n    arr.push(tri(Math.floor(n / 2) + 1));\n  }else{\n    arr.push(1);\n\
    \    arr.push(tri(Math.floor(n / 2) - 1));\n    arr.push(tri(Math.floor(n / 2)\
    \ + 1));\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9h8zwykg.js:27\n    arr.push(1);\n        ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at Array.push (<anonymous>)\n    at tri (/tmp/tmp9h8zwykg.js:27:9)\n\
    \    at tri (/tmp/tmp9h8zwykg.js:29:14)\n    at tri (/tmp/tmp9h8zwykg.js:29:14)\n\
    \    at tri (/tmp/tmp9h8zwykg.js:29:14)\n    at tri (/tmp/tmp9h8zwykg.js:29:14)\n\
    \    at tri (/tmp/tmp9h8zwykg.js:29:14)\n    at tri (/tmp/tmp9h8zwykg.js:29:14)\n\
    \    at tri (/tmp/tmp9h8zwykg.js:29:14)\n    at tri (/tmp/tmp9h8zwykg.js:29:14)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 1; i <= n; i++){\n        arr.push((i%2 === 0)? i : (i-1)+(i-2)+(i+1));\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n  8\n]\n    at test\
    \ (/tmp/tmps17_qgms.js:30:10)\n    at Object.<anonymous> (/tmp/tmps17_qgms.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 7\
    \ ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 0; i <= n; i++){\n        arr.push(tri(i));\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe5x2mfii.js:18\n    let arr = [];\n              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpe5x2mfii.js:18:15)\n \
    \   at tri (/tmp/tmpe5x2mfii.js:20:18)\n    at tri (/tmp/tmpe5x2mfii.js:20:18)\n\
    \    at tri (/tmp/tmpe5x2mfii.js:20:18)\n    at tri (/tmp/tmpe5x2mfii.js:20:18)\n\
    \    at tri (/tmp/tmpe5x2mfii.js:20:18)\n    at tri (/tmp/tmpe5x2mfii.js:20:18)\n\
    \    at tri (/tmp/tmpe5x2mfii.js:20:18)\n    at tri (/tmp/tmpe5x2mfii.js:20:18)\n\
    \    at tri (/tmp/tmpe5x2mfii.js:20:18)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    let arr = [];\n    for(let i\
    \ = 1; i <= n; i++){\n        if(i%2 == 0){\n            arr.push(i);\n      \
    \  }else{\n            arr.push(tri(i - 1) + tri(i - 2) + tri(i + 1))\n      \
    \  }\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf4dq1eef.js:23\n            arr.push(tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1))\n                                ^\n\nRangeError: Maximum call stack\
    \ size exceeded\n    at Array.join (<anonymous>)\n    at Array.toString (<anonymous>)\n\
    \    at tri (/tmp/tmpf4dq1eef.js:23:33)\n    at tri (/tmp/tmpf4dq1eef.js:23:48)\n\
    \    at tri (/tmp/tmpf4dq1eef.js:23:48)\n    at tri (/tmp/tmpf4dq1eef.js:23:48)\n\
    \    at tri (/tmp/tmpf4dq1eef.js:23:48)\n    at tri (/tmp/tmpf4dq1eef.js:23:48)\n\
    \    at tri (/tmp/tmpf4dq1eef.js:23:48)\n    at tri (/tmp/tmpf4dq1eef.js:23:48)\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  if(n<0) return\
    \ arr;\n  if(n==0) return [3,1];\n  if(n==1) return [3,1];\n  if(n%2==0) return\
    \ tri(n-1)+tri(n-2)+tri(n+1);\n  else return tri(n-1)+tri(n-2)+tri(n-1)+tri(n-2)+tri(n-1)+tri(n-2)+tri(n-1)+tri(n-2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
    \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
    \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4,\
    \ 24]);\n  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu2i23g46.js:21\n  if(n==1) return [3,1];\n           ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at tri (/tmp/tmpu2i23g46.js:21:12)\n \
    \   at tri (/tmp/tmpu2i23g46.js:22:21)\n    at tri (/tmp/tmpu2i23g46.js:23:15)\n\
    \    at tri (/tmp/tmpu2i23g46.js:22:39)\n    at tri (/tmp/tmpu2i23g46.js:23:15)\n\
    \    at tri (/tmp/tmpu2i23g46.js:22:39)\n    at tri (/tmp/tmpu2i23g46.js:23:15)\n\
    \    at tri (/tmp/tmpu2i23g46.js:22:39)\n    at tri (/tmp/tmpu2i23g46.js:23:15)\n\
    \    at tri (/tmp/tmpu2i23g46.js:22:39)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var arr = [];\n  if(n<=0){\n  \
    \  return arr;\n  }\n  if(n%2===0){\n    arr.push(tri(n-1));\n    arr.push(tri(n-2));\n\
    \    arr.push(tri(n+2));\n  }else{\n    arr.push(tri(n-1));\n    arr.push(tri(n-2));\n\
    \    arr.push(tri(n+1));\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1,\
    \ 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6q3ckajs.js:18\n  var arr = [];\n            ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at tri (/tmp/tmp6q3ckajs.js:18:13)\n    at tri\
    \ (/tmp/tmp6q3ckajs.js:27:14)\n    at tri (/tmp/tmp6q3ckajs.js:23:14)\n    at\
    \ tri (/tmp/tmp6q3ckajs.js:29:14)\n    at tri (/tmp/tmp6q3ckajs.js:23:14)\n  \
    \  at tri (/tmp/tmp6q3ckajs.js:29:14)\n    at tri (/tmp/tmp6q3ckajs.js:23:14)\n\
    \    at tri (/tmp/tmp6q3ckajs.js:29:14)\n    at tri (/tmp/tmp6q3ckajs.js:23:14)\n\
    \    at tri (/tmp/tmp6q3ckajs.js:29:14)\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: Exception
- program: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) =\
    \ 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n//\
    \ tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>>\
    \ tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n\tif(n<=0){\n\t\treturn [];\n\t}\n\
    \tlet arr = [1,3,2];\n\tfor(let i=2;i<=n;i++){\n\t\tarr.push(arr[i-1]+arr[i-2]+arr[i+1]);\n\
    \t}\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2,\
    \ 8]);\n  assert.deepEqual(candidate(4),[1, 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1,\
    \ 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1, 3, 2, 8, 3, 15, 4]);\n\
    \  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n  assert.deepEqual(candidate(8),[1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
    \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  3,\n  2,\n\
    \  8\n]\n    at test (/tmp/tmpm5jklojk.js:33:10)\n    at Object.<anonymous> (/tmp/tmpm5jklojk.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ NaN, NaN ],\n  expected: [ 1, 3, 2, 8 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
