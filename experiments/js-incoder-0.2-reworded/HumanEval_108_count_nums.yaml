name: HumanEval_108_count_nums
language: js
prompt: "//Write a function count_nums which takes an array of integers and returns\n\
  // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
  \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n\
  // 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
  \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
  \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
  \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
completions: ["  let count = 0;\n  for(let i = 0; i < arr.length; i++){\n    count\
    \ += count_num(arr[i]);\n  }\n  return count;\n}\n", "  var sum = 0;\n  for(var\
    \ i=0; i<arr.length; i++){\n    sum += arr[i];\n  }\n  return sum;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < arr.length; i++){\n    sum += arr[i];\n  }\n\
    \  return sum;\n}\n", "  var count = 0;\n  for(var i=0; i<arr.length; i++){\n\
    \    var num = arr[i];\n    if(num < 0){\n      num = -num;\n      if(num < 0){\n\
    \        continue;\n      }\n    }\n    count += Math.floor(Math.log10(num));\n\
    \  }\n  return count;\n}\n", "    var count = 0;\n    for(var i = 0; i < arr.length;\
    \ i++){\n        var num = arr[i];\n        if(num < 0){\n            num = -num;\n\
    \            count += num;\n        }\n        else{\n            count += Math.floor(Math.log10(num));\n\
    \        }\n    }\n    return count;\n}\n", "  var sum = 0;\n  for(var i=0;i<arr.length;i++){\n\
    \    sum += arr[i];\n  }\n  return sum;\n}\n", "  var sum = 0;\n  for (var i =\
    \ 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n", " \
    \ let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >=\
    \ 0) {\n      count += arr[i];\n    }\n  }\n  return count;\n}\n", "  var count\
    \ = 0;\n  for (var i = 0; i < arr.length; i++){\n    if (arr[i] > 0){\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    let num = arr[i];\n    if(num < 0){\n    \
    \  num *= -1;\n    }\n    for(let j = 0; j < num; j++){\n      count += Math.floor(num\
    \ / Math.pow(10, j+1));\n    }\n  }\n  return count;\n}\n", "  var count = 0;\n\
    \  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count\
    \ += arr[i];\n    }\n  }\n  return count;\n}\n", "  var count = 0;\n  for (var\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) count++;\n  }\n  return count;\n\
    }\n", "  var count = 0;\n  for(var i=0; i<arr.length; i++){\n    if(arr[i] > 0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  var count = 0;\n  for(var\
    \ i=0; i<arr.length; i++){\n    if(arr[i] >= 0){\n      count += arr[i];\n   \
    \ }\n  }\n  return count;\n}\n", "  var count = 0;\n  for(var i=0; i<arr.length;\
    \ i++){\n    if(arr[i] >= 0){\n      count += arr[i];\n    }\n  }\n  return count;\n\
    }\n", "  var sum = 0;\n  for(var i=0;i<arr.length;i++){\n    sum += arr[i]%10;\n\
    \  }\n  return sum;\n}\n", "  let count = 0;\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] > 0){\n      count += arr[i]\n    }\n  }\n  return count\n\
    }\n", "  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n\
    \  }\n  return sum;\n}\n", "  var count = 0;\n  for(var i=0;i<arr.length;i++){\n\
    \    if(arr[i]>0){\n      count++;\n    }\n  }\n  return count;\n}\n", "  var\
    \ count = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) count++;\n\
    \  }\n  return count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
