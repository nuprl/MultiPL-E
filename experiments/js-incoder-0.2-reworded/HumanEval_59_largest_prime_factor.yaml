name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i ==\
    \ 0){\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max.apply(null,\
    \ factors) : -1;\n}\n", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "    var i = 2;\n    while(true){\n        if(n % i == 0){\n           \
    \ return i;\n        }\n        i += 2;\n    }\n}\n</code>\n<|/ a tags=primes,algorithm,javascript\
    \ |>\n<| c |>\nThis is not an efficient solution. Try it on `n = 10^9`.\n<|/ c\
    \ |>\n<| c |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n\
    <| c |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n<|\
    \ c |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n<| c\
    \ |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n<| a tags=primes,algorithm,javascript\
    \ |>\n<code>", "  var factor = 2;\n  while(n%factor == 0){\n    factor += 1;\n\
    \  }\n  return factor;\n}\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n\
    \    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  factors.sort(function(a,\
    \ b){\n    return b-a;\n  });\n  return factors[factors.length-1];\n}\n", "  \
    \  var factors = [];\n    for(var i = 2; i <= n; i++){\n        var f = i;\n \
    \       while(f % 2 == 0){\n            f = f/2;\n        }\n        factors.push(f);\n\
    \    }\n    return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factor = 2;\n  while(n > 1){\n   \
    \ if(n % factor == 0){\n      n = n/factor;\n    }else{\n      factor = factor\
    \ * 2;\n    }\n  }\n  return factor;\n}\n", "    var factors = [];\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \        }\n    }\n    return factors.length ? Math.max.apply(null, factors) :\
    \ -1;\n}\n", "    var factors = [];\n    for(var i = 2; i <= n; i++){\n      \
    \  if(n % i == 0){\n            factors.push(i);\n            while(n % i == 0){\n\
    \                n /= i;\n            }\n        }\n    }\n    return factors.length\
    \ ? factors[factors.length - 1] : n;\n}\n", "  var factor = 2;\n  while(n > 1){\n\
    \    if(n % factor == 0){\n      n = n/factor;\n      factor++;\n    }\n    else{\n\
    \      factor++;\n    }\n  }\n  return factor;\n}\n", "    var factors = [];\n\
    \    for(var i = 2; i < n; i++){\n        factors.push(i);\n    }\n    factors.push(1);\n\
    \    for(var i = 2; i < n; i++){\n        var f = 1;\n        for(var j = 0; j\
    \ < factors.length; j++){\n            f *= factors[j];\n            if(f/i ===\
    \ 1){\n                break;\n            }\n        }\n        factors.push(f);\n\
    \    }\n    return factors[factors.length-1];\n}\n", "  var factor = 2;\n  while(n%factor\
    \ !== 0){\n    factor += 1;\n  }\n  return factor;\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  var i=2;\n  while(i*i<n){\n    i++;\n  }\n  return i;\n}\n", "  if(n\
    \ == 1) return 2;\n  if(n == 2) return 3;\n  if(n%2 == 0) return n-1;\n  var m\
    \ = Math.sqrt(n);\n  if(m%2 == 0) return m-1;\n  for(var i = 5; i%5 == 0;){\n\
    \    if(n % i == 0) return i;\n    i += 2;\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "    var factor = 2;\n    while(n\
    \ > 1){\n        if(n % factor === 0){\n            n = n/factor;\n        }else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var m=Math.sqrt(n);\n   \
    \ if(n % i == 0){\n      return i;\n    }\n    if(m % i == 0){\n      return i;\n\
    \    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  var i=2,\n      m=Math.sqrt(n);\n  while(i<m){\n    if(n\
    \ % i == 0){\n      n = n/i;\n      break;\n    }\n    i++;\n  }\n  return n;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
