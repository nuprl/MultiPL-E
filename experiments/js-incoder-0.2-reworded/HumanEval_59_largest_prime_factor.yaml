name: HumanEval_59_largest_prime_factor
language: js
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
  \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i ==\
    \ 0){\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max.apply(null,\
    \ factors) : -1;\n}\n", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "    var i = 2;\n    while(true){\n        if(n % i == 0){\n           \
    \ return i;\n        }\n        i += 2;\n    }\n}\n</code>\n<|/ a tags=primes,algorithm,javascript\
    \ |>\n<| c |>\nThis is not an efficient solution. Try it on `n = 10^9`.\n<|/ c\
    \ |>\n<| c |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n\
    <| c |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n<|\
    \ c |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n<| c\
    \ |>\nIt is not an efficient solution. Try it on `n = 10^9`.\n<|/ c |>\n<| a tags=primes,algorithm,javascript\
    \ |>\n<code>", "  var factor = 2;\n  while(n%factor == 0){\n    factor += 1;\n\
    \  }\n  return factor;\n}\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n\
    \    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  factors.sort(function(a,\
    \ b){\n    return b-a;\n  });\n  return factors[factors.length-1];\n}\n", "  \
    \  var factors = [];\n    for(var i = 2; i <= n; i++){\n        var f = i;\n \
    \       while(f % 2 == 0){\n            f = f/2;\n        }\n        factors.push(f);\n\
    \    }\n    return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factor = 2;\n  while(n > 1){\n   \
    \ if(n % factor == 0){\n      n = n/factor;\n    }else{\n      factor = factor\
    \ * 2;\n    }\n  }\n  return factor;\n}\n", "    var factors = [];\n    for(var\
    \ i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n            factors.push(i);\n\
    \        }\n    }\n    return factors.length ? Math.max.apply(null, factors) :\
    \ -1;\n}\n", "    var factors = [];\n    for(var i = 2; i <= n; i++){\n      \
    \  if(n % i == 0){\n            factors.push(i);\n            while(n % i == 0){\n\
    \                n /= i;\n            }\n        }\n    }\n    return factors.length\
    \ ? factors[factors.length - 1] : n;\n}\n", "  var factor = 2;\n  while(n > 1){\n\
    \    if(n % factor == 0){\n      n = n/factor;\n      factor++;\n    }\n    else{\n\
    \      factor++;\n    }\n  }\n  return factor;\n}\n", "    var factors = [];\n\
    \    for(var i = 2; i < n; i++){\n        factors.push(i);\n    }\n    factors.push(1);\n\
    \    for(var i = 2; i < n; i++){\n        var f = 1;\n        for(var j = 0; j\
    \ < factors.length; j++){\n            f *= factors[j];\n            if(f/i ===\
    \ 1){\n                break;\n            }\n        }\n        factors.push(f);\n\
    \    }\n    return factors[factors.length-1];\n}\n", "  var factor = 2;\n  while(n%factor\
    \ !== 0){\n    factor += 1;\n  }\n  return factor;\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  var i=2;\n  while(i*i<n){\n    i++;\n  }\n  return i;\n}\n", "  if(n\
    \ == 1) return 2;\n  if(n == 2) return 3;\n  if(n%2 == 0) return n-1;\n  var m\
    \ = Math.sqrt(n);\n  if(m%2 == 0) return m-1;\n  for(var i = 5; i%5 == 0;){\n\
    \    if(n % i == 0) return i;\n    i += 2;\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "    var factor = 2;\n    while(n\
    \ > 1){\n        if(n % factor === 0){\n            n = n/factor;\n        }else{\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var m=Math.sqrt(n);\n   \
    \ if(n % i == 0){\n      return i;\n    }\n    if(m % i == 0){\n      return i;\n\
    \    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  var i=2,\n      m=Math.sqrt(n);\n  while(i<m){\n    if(n\
    \ % i == 0){\n      n = n/i;\n      break;\n    }\n    i++;\n  }\n  return n;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var j=1;\n\
    \    while(i*j<=n){\n      j++;\n    }\n    if(i*j==n){\n      return i;\n   \
    \ }\n  }\n  return 1;\n}\n", "  var factor = 2;\n  while(n%factor !== 0){\n  \
    \  factor += 1;\n  }\n  return factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n\
    \  var i=2\n  while(i*i<n){\n    i++\n  }\n  return i\n}\n", "  var factors =\
    \ [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors.length ? Math.max.apply(null, factors) : -1;\n}\n",
  "  if(n == 1){\n    return 2;\n  }\n  if(n == 2){\n    return 3;\n  }\n  if(n%2\
    \ == 0){\n    return n;\n  }\n  var m = Math.sqrt(n);\n  var a = Math.ceil(Math.sqrt(m));\n\
    \  var b = Math.ceil(m / a);\n  var c = m%a;\n  var d = Math.ceil(m/b);\n  var\
    \ e = Math.ceil(m/b);\n  var f = Math.ceil(m/c);\n  var g = Math.ceil(m/d);\n\
    \  var h = Math.ceil(m/e);\n  var i = Math.ceil(m/g);\n  var j = Math.ceil(m/h);\n\
    \  var k = Math.ceil(m/i);\n  var l = Math.ceil(m/j);\n  var m = Math.ceil(m/k);\n\
    \  var n = Math.ceil(m/l);\n  var p = Math.ceil(m/m);\n  var q = Math.ceil(m/n);\n\
    \  var r = Math.ceil(m/p);\n  var s = Math.ceil(m/q);\n  var t = Math.ceil(m/r);\n\
    \  var u = Math.ceil(m/s);\n  var v = Math.ceil(m/t);\n  var w = Math.ceil(m/u);\n\
    \  var x = Math.ceil(m/v);\n  var y = Math.ceil(m/w);\n  var z = Math.ceil(m/x);\n\
    \  var a = Math.ceil(m/y);\n  var b = Math.ceil(m/z);\n  var c = Math.ceil(m/a);\n\
    \  var d = Math.ceil(m/b);\n  var e = Math.ceil(m/c);\n  var f = Math.ceil(m/d);\n\
    \  var g = Math.ceil(m/e);\n  var h = Math.ceil(m/f);\n  var i = Math.ceil(m/g);\n\
    \  var j = Math.ceil(m/h);\n  var k = Math.ceil(m/i);\n  var l = Math.ceil(m/j);\n\
    \  var m = Math.ceil(m/k);\n  var n = Math.ceil(m/l);\n  var p = Math.ceil(m/m);\n\
    \  var q = Math.ceil(m/n);\n  var r = Math.ceil(m/p);\n  var s = Math.ceil(m/q);\n\
    \  var t = Math.ceil(m/r);\n  var u = Math.ceil(m/s);\n  var v = Math.ceil(m/t);\n\
    \  var w = Math.ceil(m/u);\n  var x = Math.ceil(m/v);\n  var y = Math.ceil(m/w);\n\
    \  var z = Math.ceil(m/x);\n  var a = Math.ceil(m/y);\n  var b = Math.ceil(m/z);\n\
    \  var c = Math.ceil(m/a);\n  var d = Math.ceil(m/b);\n  var e = Math.ceil(m/c);\n\
    \  var f = Math.ceil(m/d);\n  var g = Math.ceil(m/e);\n  var h = Math.ceil(m/f);\n\
    \  var i = Math.ceil(m/g);\n  var j = Math.ceil(m/h);\n  var k = Math.ceil(m/i);\n\
    \  var l = Math.ceil(m/j);\n  var m = Math.ceil(m/k);", "  var factors = [];\n\
    \  for(var i = 2; i < n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      i=i*2+1;\n \
    \     s=s/2;\n    }else{\n      i=i*2+3;\n      s=s/2;\n    }\n    if(i==n){\n\
    \      return s;\n    }\n  }\n}", "  var factors = [];\n  for(var i = 2; i <=\
    \ n; i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return\
    \ factors[factors.length - 1];\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return\
    \ n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  var factor = 2;\n  while(n%factor == 0){\n    factor += 1;\n  }\n  return factor;\n\
    }\n", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "    var factors = [];\n    for(var i = 2; i < n; i++){\n        var f =\
    \ i;\n        while(f % 2 == 0){\n            f = f/2;\n        }\n        if(f\
    \ > 1){\n            factors.push(f);\n        }\n    }\n    return factors[factors.length-1];\n\
    }\n", "  var factor = 2;\n  while(n%factor !== 0){\n    factor += 1;\n  }\n  return\
    \ factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  var i=2,p,m=Math.sqrt(n);\n\
    \  while(m>1){\n    p = Math.floor((m+i)/2);\n    if(!prime[p]){\n      prime[p]\
    \ = 1;\n      m = p/2;\n    }else{\n      i = p;\n      m = m%p;\n    }\n  }\n\
    \  return prime[n-1];\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;\
    \ i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n \
    \ return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factors\
    \ = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i == 0){\n    \
    \  factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n}\n", " \
    \ var factor = 2;\n  while(n%factor == 0){\n    factor += 1;\n  }\n  return factor;\n\
    }\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n\
    \      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n \
    \ }\n  return n;\n}\n", "    var factors = [];\n    for(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n        if(n % i == 0){\n            factors.push(i);\n            while(n\
    \ % i == 0){\n                n /= i;\n            }\n        }\n    }\n    return\
    \ factors.length ? factors[factors.length-1] : null;\n}\n", "    var factors =\
    \ [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n\
    \            factors.push(i);\n            while(n % i == 0){\n              \
    \  n /= i;\n            }\n        }\n    }\n    return factors.length ? factors[factors.length\
    \ - 1] : null;\n}\n", "    var i = 2;\n    while(i * i <= n){\n        if(n %\
    \ i == 0){\n            return i;\n        }\n        i += 1;\n    }\n    return\
    \ n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n   \
    \ var j=1;\n    while(i*j<=n){\n      j++;\n    }\n    if(i*j>n){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return\
    \ n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n \
    \   return 1;\n  }\n  var i=2,s=1;\n  while(i<n){\n    s+=i;\n    i+=2;\n  }\n\
    \  return s;\n}\n", "  var factors = [];\n  for(var i = 2; i < n; i++){\n    if(n\
    \ % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "  var factor = 2;\n  while(n > 1){\n    if(n % factor == 0){\n      n =\
    \ n / factor;\n      factor++;\n    }else{\n      factor++;\n    }\n  }\n  return\
    \ factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n    \
    \  factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n}\n", " \
    \ if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      s=s/2;\n      i++;\n\
    \    }\n    else{\n      s=3*s+1;\n      i--;\n    }\n    if(s>=n){\n      break;\n\
    \    }\n  }\n  return i;\n}\n", "    var i = 2;\n    while(i < n){\n        if(n%i\
    \ == 0){\n            n = n/i;\n        }else{\n            i = i+1;\n       \
    \ }\n    }\n    return i;\n}\n", "    var factors = [];\n    for(var i = 2; i\
    \ <= n; i++){\n        if(n % i == 0){\n            factors.push(i);\n       \
    \ }\n    }\n    return factors[factors.length-1];\n}\n", "    var i = 2;\n   \
    \ while(true){\n        if(n%i == 0){\n            n = n/i;\n        }else{\n\
    \            return i;\n        }\n        i++;\n    }\n}\n", "  var factor =\
    \ 2;\n  while(n%factor == 0){\n    factor += 1;\n  }\n  return factor;\n}\n",
  "  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n    \
    \  factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n}\n", " \
    \ if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factor =\
    \ 2;\n  while(n%factor !== 0){\n    factor += 1;\n  }\n  return factor;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n == 1) return\
    \ 2;\n  if(n == 2) return 3;\n  if(n%2 == 0) return 2;\n  var max_factor = 2;\n\
    \  var max_factor_index = 2;\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      if(max_factor < i){\n        max_factor = i;\n        max_factor_index\
    \ = i;\n      }\n    }\n  }\n  return max_factor_index;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      return\
    \ s;\n    }\n    i=i*2+1;\n    if(s>=n){\n      break;\n    }\n    s=s/2;\n  }\n\
    \  return i;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    var m = Math.sqrt(n);\n    if(n % i == 0){\n      return i;\n    }\n    n\
    \ = m\n  }\n  return 1;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var j=Math.round(i*Math.sqrt(n));\n\
    \    if(j>n-1){\n      j=n-1;\n    }\n    if(j<=1){\n      return i;\n    }\n\
    \    if(j%2==0){\n      continue;\n    }\n    while(j%2==0){\n      j=j/2;\n \
    \   }\n    return j;\n  }\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;\
    \ i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n \
    \ return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n\
    \    if(n%i===0){\n      return i;\n    }\n  }\n  return n;\n}\n", "    var i\
    \ = 2;\n    while(true){\n        if(n % i == 0){\n            return i;\n   \
    \     }\n        i += 2;\n    }\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n \
    \ }\n  return n;\n}\n", "  var factor = 2;\n  while(n > 1){\n    if(n % factor\
    \ === 0){\n      n = n/factor;\n      factor++;\n    }\n    else{\n      factor++;\n\
    \    }\n  }\n  return factor;\n}\n", "    var i = 2;\n    while(i < n){\n    \
    \    if(n%i == 0){\n            n = n/i;\n        }else{\n            i++;\n \
    \       }\n    }\n    return i;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2;i<=Math.sqrt(n);i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n\
    \  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  var i=2,s=n;\n  while(true){\n\
    \    if(s%2==0){\n      i=i*2+1;\n      s>>=1;\n    }else{\n      i=i*2+3;\n \
    \     s>>=2;\n    }\n    if(i==n){\n      return s;\n    }\n  }\n}\n", "  var\
    \ factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n\
    \    }\n  }\n  return n;\n}\n", "  var factors = [];\n  for(var i = 2; i <= n;\
    \ i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  factors.sort(function(a,\
    \ b){\n    return b-a;\n  });\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  var i=2\n  while(i*i<n){\n    i++\n  }\n  if(i==2){\n \
    \   return 2;\n  }\n  if(i==3){\n    return 3;\n  }\n  while(i%2==0){\n    i=i/2\n\
    \  }\n  return i;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n \
    \ }\n  return n;\n}\n", "  var factors = [];\n  for(var i = 2; i < n; i++){\n\
    \    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  factors.sort(function(a,\
    \ b){\n    return b-a;\n  });\n  return factors[0];\n}\n", "  var factors = [];\n\
    \  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      return s;\n\
    \    }\n    i=i*2+1;\n    if(s>=n){\n      break;\n    }\n    s=s/2;\n  }\n  return\
    \ i;\n}", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n  \
    \  if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors.length\
    \ ? Math.max.apply(null, factors) : -1;\n}\n", "  if(n<=1){\n    return 1;\n \
    \ }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factor = 2;\n  while(factor * factor\
    \ <= n){\n    factor += 1;\n  }\n  return factor;\n}\n", "    var i = 2;\n   \
    \ while(true){\n        if(n % i == 0){\n            n = n/i;\n        }\n   \
    \     else{\n            return i;\n        }\n        i++;\n    }\n}\n", "  \
    \  var i = 2;\n    while(i < n){\n        if(n % i == 0){\n            n = n /\
    \ i;\n        }else{\n            i++;\n        }\n    }\n    return n;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factor =\
    \ 2;\n  while(n > 1){\n    if(n % factor === 0){\n      n /= factor;\n    }else{\n\
    \      factor++;\n    }\n  }\n  return factor;\n}\n", "    var i = 2;\n    while(true){\n\
    \        if(n % i == 0){\n            return i;\n        }\n        i += 2;\n\
    \        if(i > n){\n            return n;\n        }\n    }\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis doesn't work for all numbers. For example, `largest_prime_factor(13195)`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nYes, I noticed that after I\
    \ posted my comment. I've updated my answer to include a solution that works for\
    \ any number.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    var i = 2;\n    while(true){\n\
    \        if(n % i == 0){\n            return i;\n        }\n        i += 2;\n\
    \    }\n}\n", "  if(n<=1){\n    return 1;\n  }\n  var m = Math.sqrt(n);\n  for(var\
    \ i=2;i<=m;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return m;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var d=n%i\n\
    \    if(d!==0){\n      n=d\n    }\n  }\n  return n\n}\n", "  var factors = [];\n\
    \  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  factors.sort(function(a, b){\n    return b-a;\n  });\n  return\
    \ factors[factors.length-1];\n}\n", "  var factors = [];\n  for(var i = 2; i <=\
    \ Math.sqrt(n); i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n\
    \  return factors[factors.length-1];\n}\n", "  var factors = [];\n  for(var i\
    \ = 2; i <= n; i++){\n    var f = i;\n    while(f % 2 == 0){\n      f = f/2;\n\
    \    }\n    factors.push(f);\n  }\n  return factors[factors.length-1];\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "    var factors\
    \ = [];\n    for(var i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n\
    \            factors.push(i);\n            while(n % i == 0){\n              \
    \  n /= i;\n            }\n        }\n    }\n    return factors.length ? factors[factors.length\
    \ - 1] : null;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  var factor = 2;\n  while(n%factor == 0){\n    factor += 1;\n  }\n  return factor;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var j=1;\n\
    \    while(i*j<=n){\n      j++;\n    }\n    if(i*j==n){\n      return i;\n   \
    \ }\n  }\n  return 1;\n}\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n\
    \    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "  var factor = 2;\n  while(n%factor == 0){\n    factor = factor * 2;\n\
    \  }\n  return factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;\
    \ i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n \
    \ return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    var d=n%i;\n    if(d==0){\n      return i;\n    }\n  }\n  return 1;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factors =\
    \ [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors.length ? Math.max.apply(null, factors) : -1;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n\
    \      i=i+2;\n      s=s/2;\n    }else{\n      i=i+1;\n      s=s/2;\n    }\n \
    \   if(i==n){\n      return s;\n    }\n  }\n}\n", "  var factor = 2;\n  while(n\
    \ > 1){\n    if(n % factor == 0){\n      n = n / factor;\n      factor++;\n  \
    \  }\n    else{\n      factor++;\n    }\n  }\n  return factor;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factors = [];\n  for(var i = 2; i\
    \ <= Math.sqrt(n); i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n\
    \  }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factors = [];\n  for(var i = 2; i\
    \ <= n; i++){\n    var f = i;\n    while(n % f === 0){\n      f = f*i;\n    }\n\
    \    factors.push(f);\n  }\n  return factors[factors.length-1];\n}\n", "  var\
    \ factor = 2;\n  while(n%factor !== 0){\n    factor += 1;\n  }\n  return factor;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n %\
    \ i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "    var factor =\
    \ 2;\n    while(n%factor == 0){\n        factor = factor * 2;\n    }\n    return\
    \ factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  var i=2\n  while(i*i<=n){\n\
    \    i++\n  }\n  if(i==n){\n    return i;\n  }\n  if(n%2==0){\n    return i;\n\
    \  }\n  var j=3\n  while(j*j<=n){\n    j++\n  }\n  return j;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  if(n == 1) return 2;\n  if(n == 2) return\
    \ 3;\n  if(n%2 == 0) return n-1;\n  var m = Math.sqrt(n);\n  for(var i = 2; i\
    \ <= m; i++){\n    if(n % i == 0) return i;\n  }\n  return m;\n}\n", "  var factor\
    \ = 2;\n  while(n > 1){\n    if(n % factor == 0){\n      n = n/factor;\n     \
    \ factor++;\n    }else{\n      factor++;\n    }\n  }\n  return factor;\n}\n",
  "    var factors = [];\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n\
    \            factors.push(i);\n            while(n % i == 0){\n              \
    \  n /= i;\n            }\n        }\n    }\n    return factors.length ? factors[factors.length\
    \ - 1] : null;\n}\n", "    var factors = [];\n    for(var i = 2; i <= Math.sqrt(n);\
    \ i++){\n        if(n % i == 0){\n            factors.push(i);\n            while(n\
    \ % i == 0){\n                n /= i;\n            }\n        }\n    }\n    return\
    \ factors.length ? factors[factors.length - 1] : null;\n}\n", "  var factors =\
    \ [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors.length ? Math.max.apply(null, factors) : -1;\n}\n",
  "  var factor = 2;\n  while(n > 1){\n    if(n % factor == 0){\n      n = n/factor;\n\
    \      factor++;\n    }else{\n      factor++;\n    }\n  }\n  return factor;\n\
    }\n", "  var factors = [];\n  for(var i = 2; i < n; i++){\n    if(n % i == 0){\n\
    \      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  var i=2,\n      m=Math.sqrt(n);\n  while(i<m){\n\
    \    if(n % i == 0){\n      n = n/i;\n      break;\n    }\n    i++;\n  }\n  return\
    \ n;\n}", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      return s;\n    }\n\
    \    i=i*2+1;\n    if(s>=n){\n      break;\n    }\n    s=s/2;\n  }\n  return i;\n\
    }\n", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "    var\
    \ i = 2;\n    while(i * i <= n){\n        if(n % i == 0){\n            i += 1;\n\
    \        }else{\n            break;\n        }\n    }\n    return i;\n}\n", " \
    \ if(n<=1){\n    return 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n\
    \      return s;\n    }\n    i=i*2+1;\n    if(s>=n){\n      break;\n    }\n  \
    \  s=s/2;\n  }\n  return i;\n}\n", "    var i = 2;\n    while(i < n){\n      \
    \  if(n % i == 0){\n            n = n / i;\n        }else{\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  var\
    \ i=2,p,m=Math.sqrt(n);\n  while(m*m<=n){\n    p=Math.floor(m);\n    if(n%p==0){\n\
    \      i=p+1;\n      break;\n    }\n    m=m+p;\n  }\n  return i;\n}", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "  var factors = [];\n  for(var\
    \ i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n \
    \ }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      s=s/2;\n      i++;\n\
    \    }\n    else{\n      if(s%2==1){\n        return i;\n      }\n      s=s/2;\n\
    \      i--;\n    }\n  }\n}", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var m = Math.floor(i/2);\n\
    \    if(n % i == 0){\n      return i;\n    }\n    if(m == 0){\n      return n;\n\
    \    }\n    if(m > n){\n      return m;\n    }\n  }\n  return n;\n}\n", "  var\
    \ factors = [];\n  for(var i = 2; i <= n; i++){\n    var f = i;\n    while(n %\
    \ f === 0){\n      f = f*i;\n    }\n    factors.push(f);\n  }\n  return factors[factors.length-1];\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factor\
    \ = 2;\n  while(n%factor != 0){\n    factor += 1;\n  }\n  return factor;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n\
    \      i=i*2+1;\n      s>>=1;\n    }else{\n      i=i*2+3;\n      s>>=2;\n    }\n\
    \    if(i==n){\n      return s;\n    }\n  }\n}", "    var factors = [];\n    for(var\
    \ i = 2; i < n; i++){\n        var prime = true;\n        for(var j = 2; j < i;\
    \ j++){\n            if(n % j == 0){\n                prime = false;\n       \
    \         break;\n            }\n        }\n        if(prime){\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    var factors\
    \ = [];\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n         \
    \   factors.push(i);\n            while(n % i == 0){\n                n /= i;\n\
    \            }\n        }\n    }\n    return factors.length ? factors[factors.length\
    \ - 1] : n;\n}\n", "  var factor = 2;\n  while(n > 1){\n    if(n % factor == 0){\n\
    \      n = n/factor;\n      factor++;\n    }\n    else{\n      factor++;\n   \
    \ }\n  }\n  return factor;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return\
    \ n;\n}\n", "  var factors = [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  return factors[factors.length-1];\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "    var\
    \ factors = [];\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n \
    \           factors.push(i);\n        }\n    }\n    return factors.length ? factors[factors.length\
    \ - 1] : null;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factor\
    \ = 2;\n  while(n > 1){\n    if(n % factor == 0){\n      n = n/factor;\n     \
    \ factor++;\n    }\n    else{\n      factor++;\n    }\n  }\n  return factor;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factors\
    \ = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  var i=2,s=n;\n  while(true){\n    if(s%2==0){\n      return s;\n\
    \    }\n    i=i*2+1;\n    if(s>=n){\n      break;\n    }\n    s=s/2;\n  }\n  return\
    \ i;\n}\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n % i\
    \ == 0){\n      factors.push(i);\n    }\n  }\n  return factors.length ? Math.max.apply(null,\
    \ factors) : -1;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  var factor = 2;\n  while(n > 1){\n    if(n % factor == 0){\n      n = n/factor;\n\
    \      factor++;\n    }\n    else{\n      factor++;\n    }\n  }\n  return factor;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n%i===0){\n\
    \      return i;\n    }\n  }\n  return n;\n}", "  if(n<=1){\n    return 1;\n \
    \ }\n  for(var i=2;i*i<=n;i++){\n    var d=n%i\n    if(d===0){\n      return i;\n\
    \    }\n  }\n  return n;\n}\n", "  var factor = 2;\n  while(n%factor !== 0){\n\
    \    factor += 1;\n  }\n  return factor;\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n\
    \  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n);\
    \ i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var d=n%i\n  \
    \  if(d==0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factor =\
    \ 2;\n  while(n%factor !== 0){\n    factor += 1;\n  }\n  return factor;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factors =\
    \ [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors[factors.length-1];\n}\n", "  var factor = 2;\n \
    \ while(n%factor == 0){\n    factor += 1;\n  }\n  return factor;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n\
    \      return i;\n    }\n  }\n  return n;\n}\n", "    var i = 2;\n    while(true){\n\
    \        if(n % i == 0){\n            return i;\n        }\n        i += 2;\n\
    \    }\n}\n", "  var factors = [];\n  for(var i = 2; i <= n; i++){\n    if(n %\
    \ i == 0){\n      factors.push(i);\n    }\n  }\n  factors.sort(function(a, b){\n\
    \    return b-a;\n  });\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i<=Math.sqrt(n);i++){\n    if(n%i===0){\n \
    \     return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n\
    \  }\n  var i=2,p,m=Math.sqrt(n);\n  while(m>1){\n    p=Math.floor(m);\n    if(n%p==0){\n\
    \      m=m/p;\n      i++;\n    }\n    else{\n      m--;\n    }\n  }\n  return\
    \ i;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n   \
    \ var d=n%i\n    if(d!==0){\n      n=d\n    }else{\n      break\n    }\n  }\n\
    \  return n\n}\n", "  var factor = 2;\n  while(n > 1){\n    if(n % factor ===\
    \ 0) return factor;\n    n /= factor;\n    factor++;\n  }\n  return factor;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n\
    \    if(n % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n\
    \    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  var factors = [];\n  for(var i = 2; i\
    \ <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n    }\n  }\n  factors.sort(function(a,\
    \ b){\n    return b-a;\n  });\n  return factors[factors.length-1];\n}\n", "  \
    \  var i = 2;\n    while(i < n){\n        if(n % i == 0){\n            n = n/i;\n\
    \        }\n        i++;\n    }\n    return n;\n}\n", "  var factors = [];\n \
    \ for(var i = 2; i <= n; i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors[factors.length-1];\n}\n", "  if(n<=1){\n    return\
    \ 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n % i == 0){\n      return\
    \ i;\n    }\n  }\n  return n;\n}\n", "  if(n<=1){\n    return 1;\n  }\n  for(var\
    \ i=2;i*i<=n;i++){\n    if(n % i == 0){\n      return i;\n    }\n  }\n  return\
    \ n;\n}\n", "    var i = 2;\n    while(true){\n        if(n % i == 0){\n     \
    \       return i;\n        }\n        i += 2;\n    }\n}\n</code>\n<|/ a tags=primes,algorithm,javascript\
    \ |>\n<| c |>\nI like your answer but I don't think it works. Try it out with\
    \ 13195 and you'll see it returns 2.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it on http://jsfiddle.net/jfriend00/ZY4JB/ and it returned 29. Are you sure\
    \ you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code correctly.\
    \ Try it out with 13195 and you'll see it returns 2.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I've updated my answer with a new algorithm that works.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your algorithm is very efficient and\
    \ easy to understand. However I still don't understand why my algorithm doesn't\
    \ work. Could you please explain it a little bit more? Thanks.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nThe problem is that the algorithm is too slow. Here is a faster\
    \ algorithm:\n<code>", "    var factors = [];\n    for(var i = 2; i <= n; i++){\n\
    \        var f = i;\n        while(f*f <= n){\n            factors.push(f);\n\
    \            f *= i;\n        }\n    }\n    return factors[factors.length-1];\n\
    }\n", "  var factor = 2;\n  while(n%factor !== 0){\n    factor += 1;\n  }\n  return\
    \ factor;\n}\n", "    var factors = [];\n    for(var i = 2; i <= n; i++){\n  \
    \      factors.push(i);\n    }\n    factors.sort(function(a, b){\n        return\
    \ b-a;\n    });\n    return factors[factors.length-1];\n}\n", "  var factors =\
    \ [];\n  for(var i = 2; i <= Math.sqrt(n); i++){\n    if(n % i == 0){\n      factors.push(i);\n\
    \    }\n  }\n  return factors.length ? Math.max.apply(null, factors) : -1;\n}\n",
  "  if(n<=1){\n    return 1;\n  }\n  for(var i=2; i<=Math.sqrt(n); i++){\n    if(n\
    \ % i == 0){\n      return i;\n    }\n  }\n  return n;\n}\n", "  var factor =\
    \ 2;\n  while(n%factor !== 0){\n    factor += 1;\n  }\n  return factor;\n}\n",
  "  var factor = 2;\n  while(n > 1){\n    if(n % factor === 0){\n      n = n/factor;\n\
    \    }else{\n      n = n*factor;\n    }\n    factor++;\n  }\n  return factor;\n\
    }\n", "  if(n<=1){\n    return 1;\n  }\n  for(var i=2;i*i<=n;i++){\n    var j=Math.ceil(i/2);\n\
    \    if(j>n){\n      j=n;\n    }\n    if(j%i==0){\n      return i;\n    }\n  }\n\
    \  return n;\n}\n", "  var factor = 2;\n  while(n > 1){\n    if(n % factor ==\
    \ 0){\n      n /= factor;\n    }else{\n      factor++;\n    }\n  }\n  return factor;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
