name: HumanEval_2_truncate_number
language: js
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
  \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
completions: ["    var decimals = Math.pow(10,Math.floor(Math.log(number)/Math.LN10));\n\
    \    return Math.floor(number*decimals)/decimals;\n}\n", "  var decimals = Math.pow(10,\
    \ Math.floor(Math.log(number) / Math.LN10));\n  return Math.floor(number / decimals)\
    \ * decimals;\n}\n", "    var decimals = Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n    return Math.round(number * decimals) / decimals;\n}\n",
  "\tvar decimals = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n\treturn\
    \ Math.round(number * decimals) / decimals;\n}\n", "    var decimals = Math.pow(10,\
    \ Math.floor(Math.log(number) / Math.LN10));\n    return Math.floor(number * decimals)\
    \ / decimals;\n}\n", "    var decimals = Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n    return Math.floor(number / decimals) * decimals;\n}\n",
  "    var decimals = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  \
    \  return Math.floor(number / decimals) * decimals;\n}\n", "\tvar decimals = Math.pow(10,\
    \ Math.floor(Math.log(number) / Math.LN10));\n\treturn Math.round(number * decimals)\
    \ / decimals;\n}\n", "\tvar decimals = Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n\treturn Math.round(number * decimals) / decimals;\n}\n", " \
    \   var decimals = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n \
    \   return Math.floor(number / decimals) * decimals;\n}\n", "\tvar decimals =\
    \ Math.ceil(Math.log(number)/Math.LN10);\n\treturn Math.trunc(number*Math.pow(10,decimals))\
    \ / Math.pow(10,decimals);\n}\n", "\tvar decimals = Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n\treturn Math.round(number * decimals) / decimals;\n}\n", " \
    \   var decimals = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n \
    \   return Math.floor(number * decimals) / decimals;\n}\n", "  var decimals =\
    \ Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.floor(number\
    \ / decimals) * decimals;\n}\n", "  var decimals = Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n  return Math.floor(number * decimals) / decimals;\n}\n", " \
    \   var decimals = Math.pow(10,Math.floor(Math.log(number)/Math.LN10));\n    return\
    \ Math.round(number*decimals)/decimals;\n}\n", "\tlet decimals = Math.trunc(number);\n\
    \treturn number - decimals;\n}\n", "  var decimals = Math.pow(10, Math.floor(Math.log(number)\
    \ / Math.LN10));\n  return Math.floor(number / decimals) * decimals;\n}\n", "\t\
    var decimals = Math.pow(10,Math.floor(Math.log(number)/Math.LN10));\n\treturn\
    \ Math.round(number*decimals)/decimals;\n}\n", "\tlet decimals = Math.trunc(number).toString().split(\"\
    .\")[1].length;\n\treturn Math.trunc(number * 100) / 100;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
