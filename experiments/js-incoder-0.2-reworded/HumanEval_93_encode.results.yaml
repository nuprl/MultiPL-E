language: js
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.charAt(index+1);\n\
    \            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n  \
    \      else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmddk1o82.js:28\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxk8qb1oe.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxk8qb1oe.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowelsCount = vowels.length;\n  \
    \  var lettersCount = letters.length;\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message[i];\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters[index + 1];\n\
    \            if(vowels.indexOf(nextLetter) != -1){\n                newMessage\
    \ += nextLetter;\n            }\n            else{\n                newMessage\
    \ += letter;\n            }\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn1imki0h.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn1imki0h.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let letterIndex = englishLetters.indexOf(letter);\n\
    \    let vowelIndex = vowels.indexOf(letter);\n    if(letterIndex != -1){\n  \
    \    newMessage += swapCase(letter);\n    }\n    else if(vowelIndex != -1){\n\
    \      newMessage += letter;\n    }\n    else{\n      newMessage += letter;\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7yictenf.js:15\n    let letterIndex = englishLetters.indexOf(letter);\n\
    \                      ^\n\nReferenceError: englishLetters is not defined\n  \
    \  at encode (/tmp/tmp7yictenf.js:15:23)\n    at test (/tmp/tmp7yictenf.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmp7yictenf.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let nextLetter = message.charAt(i+1);\n\
    \        let newLetter = letter.toUpperCase();\n        newMessage += newLetter;\n\
    \        newMessage += nextLetter;\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEESSTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp446jsoyw.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp446jsoyw.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEESSTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n      newMessage += letter;\n      i++;\n    }\n  \
    \  else if(letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"A\"){\n     \
    \ newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter ===\
    \ \"e\" || letter === \"E\"){\n      newMessage += letter.toUpperCase();\n   \
    \   i++;\n    }\n    else if(letter === \"i\" || letter === \"I\"){\n      newMessage\
    \ += letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"o\" ||\
    \ letter === \"O\"){\n      newMessage += letter.toUpperCase();\n      i++;\n\
    \    }\n    else if(letter === \"u\" || letter === \"U\"){\n      newMessage +=\
    \ letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"y\" || letter\
    \ === \"Y\"){\n      newMessage += letter.toUpperCase();\n      i++;\n    }\n\
    \    else if(letter === \"h\" || letter === \"H\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"k\" || letter === \"K\"){\n     \
    \ newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter ===\
    \ \"l\" || letter === \"L\"){\n      newMessage += letter.toUpperCase();\n   \
    \   i++;\n    }\n    else if(letter === \"s\" || letter === \"S\"){\n      newMessage\
    \ += letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"c\" ||\
    \ letter === \"C\"){\n      newMessage += letter.toUpperCase();\n      i++;\n\
    \    }\n    else if(letter === \"g\" || letter === \"G\"){\n      newMessage +=\
    \ letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"m\" || letter\
    \ === \"M\"){\n      newMessage += letter.toUpperCase();\n      i++;\n    }\n\
    \    else if(letter === \"p\" || letter === \"P\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"f\" || letter === \"F\"){\n     \
    \ newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter ===\
    \ \"v\" || letter === \"V\"){\n      newMessage += letter.toUpperCase();\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpahkvx0c_.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        if(letter === \" \"){\n      \
    \      newMessage += letter;\n        }\n        else{\n            newMessage\
    \ += swapCase(letter);\n        }\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2t_fjowh.js:19\n            newMessage += swapCase(letter);\n \
    \           ^\n\nReferenceError: swapCase is not defined\n    at encode (/tmp/tmp2t_fjowh.js:19:13)\n\
    \    at test (/tmp/tmp2t_fjowh.js:30:20)\n    at Object.<anonymous> (/tmp/tmp2t_fjowh.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter;\n    for(let\
    \ j = 0; j < letter.length; j++){\n      let vowel = letter.charAt(j);\n     \
    \ if(vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\"\
    \ || vowel === \"u\"){\n        encodedLetter = vowel + vowel.charAt(j+1);\n \
    \     }\n    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph1uimk8l.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph1uimk8l.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter.toLowerCase() === \"a\" || letter.toLowerCase() === \"e\" ||\
    \ letter.toLowerCase() === \"i\" || letter.toLowerCase() === \"o\" || letter.toLowerCase()\
    \ === \"u\"){\n            newMessage += letter;\n        }\n        else if(nextLetter.toLowerCase()\
    \ === \"a\" || nextLetter.toLowerCase() === \"e\" || nextLetter.toLowerCase()\
    \ === \"i\" || nextLetter.toLowerCase() === \"o\" || nextLetter.toLowerCase()\
    \ === \"u\"){\n            newMessage += nextLetter;\n        }\n        else{\n\
    \            newMessage += letter.toUpperCase();\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'EEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdmwj67p4.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdmwj67p4.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'EEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter.toUpperCase();\n        var newNextLetter = nextLetter.toUpperCase();\n\
    \        if(newLetter != letter){\n            newMessage += newLetter;\n    \
    \    }\n        if(newNextLetter != nextLetter){\n            newMessage += newNextLetter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpo0vkmz1u.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo0vkmz1u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  var vowels = \"AEIOU\";\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var index = alphabet.indexOf(letter);\n   \
    \ if(index != -1){\n      var nextLetter = alphabet.charAt(index+1);\n      if(vowels.indexOf(nextLetter)\
    \ != -1){\n        newMessage += nextLetter;\n      }\n      else{\n        newMessage\
    \ += letter;\n      }\n    }\n    else{\n      newMessage += letter;\n    }\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'UESU'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpoud0fh1z.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpoud0fh1z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'UESU',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letterToAdd = alphabet.charAt(letterIndex+2);\n    newMessage += letterToAdd;\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpv57sf7ye.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpv57sf7ye.js:15:23)\n    at test (/tmp/tmpv57sf7ye.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpv57sf7ye.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ var vowels = \"aeiou\";\n    var vowelsArray = vowels.split(\"\");\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var nextLetter = messageArray[i+1];\n        var nextVowel = messageArray[i+2];\n\
    \        if(vowelsArray.indexOf(letter) > -1 && vowelsArray.indexOf(nextLetter)\
    \ > -1){\n            newMessage += letter;\n            newMessage += nextVowel;\n\
    \            i += 2;\n        }\n        else if(vowelsArray.indexOf(letter) >\
    \ -1){\n            newMessage += letter;\n            i += 1;\n        }\n  \
    \      else if(vowelsArray.indexOf(nextLetter) > -1){\n            newMessage\
    \ += nextLetter;\n            i += 1;\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpm71evm2o.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm71evm2o.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\"){\n            newMessage += letter;\n       \
    \ }else{\n            var vowelIndex = letters.indexOf(letter);\n            var\
    \ vowel = vowels[vowelIndex];\n            var vowelIndex = letters.indexOf(vowel);\n\
    \            var nextVowel = letters[vowelIndex+1];\n            newMessage +=\
    \ letters[vowelIndex];\n            newMessage += nextVowel;\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfyglvrrw.js:19\n            var vowelIndex = letters.indexOf(letter);\n\
    \                             ^\n\nReferenceError: letters is not defined\n  \
    \  at encode (/tmp/tmpfyglvrrw.js:19:30)\n    at test (/tmp/tmpfyglvrrw.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpfyglvrrw.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message.toLowerCase()\n  let newMessageArray = newMessage.split('')\n\
    \  let newMessageArrayLength = newMessageArray.length\n  let newMessageArrayLength2\
    \ = newMessageArrayLength/2\n  let newMessageArrayLength3 = newMessageArrayLength/3\n\
    \  let newMessageArrayLength4 = newMessageArrayLength/4\n  let newMessageArrayLength5\
    \ = newMessageArrayLength/5\n  let newMessageArrayLength6 = newMessageArrayLength/6\n\
    \  let newMessageArrayLength7 = newMessageArrayLength/7\n  let newMessageArrayLength8\
    \ = newMessageArrayLength/8\n  let newMessageArrayLength9 = newMessageArrayLength/9\n\
    \  let newMessageArrayLength10 = newMessageArrayLength/10\n  let newMessageArrayLength11\
    \ = newMessageArrayLength/11\n  let newMessageArrayLength12 = newMessageArrayLength/12\n\
    \  let newMessageArrayLength13 = newMessageArrayLength/13\n  let newMessageArrayLength14\
    \ = newMessageArrayLength/14\n  let newMessageArrayLength15 = newMessageArrayLength/15\n\
    \  let newMessageArrayLength16 = newMessageArrayLength/16\n  let newMessageArrayLength17\
    \ = newMessageArrayLength/17\n  let newMessageArrayLength18 = newMessageArrayLength/18\n\
    \  let newMessageArrayLength19 = newMessageArrayLength/19\n  let newMessageArrayLength20\
    \ = newMessageArrayLength/20\n  let newMessageArrayLength21 = newMessageArrayLength/21\n\
    \  let newMessageArrayLength22 = newMessageArrayLength/22\n  let newMessageArrayLength23\
    \ = newMessageArrayLength/23\n  let newMessageArrayLength24 = newMessageArrayLength/24\n\
    \  let newMessageArrayLength25 = newMessageArrayLength/25\n  let newMessageArrayLength26\
    \ = newMessageArrayLength/26\n  let newMessageArrayLength27 = newMessageArrayLength/27\n\
    \  let newMessageArrayLength28 = newMessageArrayLength/28\n  let newMessageArrayLength29\
    \ = newMessageArrayLength/29\n  let newMessageArrayLength30 = newMessageArrayLength/30\n\
    \  let newMessageArrayLength31 = newMessageArrayLength/31\n  let newMessageArrayLength32\
    \ = newMessageArrayLength/32\n  let newMessageArrayLength33 = newMessageArrayLength/33\n\
    \  let newMessageArrayLength34 = newMessageArrayLength/34\n  let newMessageArrayLength35\
    \ = newMessageArrayLength/35\n  let newMessageArrayLength36 = newMessageArrayLength/36\n\
    \  let newMessageArrayLength37 = newMessageArrayLength/37\n  let newMessageArrayLength38\
    \ = newMessageArrayLength/38\n  let newMessageArrayLength\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpjyjk9erw.js:52\n  let newMessageArrayLength\n      ^\n\nSyntaxError:\
    \ Identifier 'newMessageArrayLength' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\"){\n            newMessage += letter;\n        }\n \
    \       else if(letter == \"A\" || letter == \"E\" || letter == \"I\" || letter\
    \ == \"O\" || letter == \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter == \"b\" || letter == \"c\" || letter == \"\
    d\" || letter == \"f\" || letter == \"g\" || letter == \"h\" || letter == \"j\"\
    \ || letter == \"k\" || letter == \"l\" || letter == \"m\" || letter == \"n\"\
    \ || letter == \"p\" || letter == \"q\" || letter == \"r\" || letter == \"s\"\
    \ || letter == \"t\" || letter == \"v\" || letter == \"w\" || letter == \"x\"\
    \ || letter == \"y\" || letter == \"z\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"B\" || letter == \"C\" || letter == \"\
    D\" || letter == \"F\" || letter == \"G\" || letter == \"H\" || letter == \"J\"\
    \ || letter == \"K\" || letter == \"L\" || letter == \"M\" || letter == \"N\"\
    \ || letter == \"P\" || letter == \"Q\" || letter == \"R\" || letter == \"S\"\
    \ || letter == \"T\" || letter == \"V\" || letter == \"W\" || letter == \"X\"\
    \ || letter == \"Y\" || letter == \"Z\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter == \"0\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"1\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"2\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"3\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"4\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"5\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"6\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"7\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"8\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"9\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \" \"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"-\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"/\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"*\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"(\"){\n            newMessage += letter;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpsrt3rtaj.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        var newLetter = letter.charCodeAt(0) - 97;\n        newLetter = nextLetter.charCodeAt(0)\
    \ - 97;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFE4\uFFF2\uFFF3\
    \\x00'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfi6vn0oe.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfi6vn0oe.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFE4\uFFF2\
    \uFFF3\\x00',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextIndex = index + 2;\n          \
    \  if(nextIndex < letters.length){\n                newMessage += letters[nextIndex];\n\
    \            }\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuutptnxw.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuutptnxw.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var index = alphabet.indexOf(letter);\n    var nextLetter = alphabet[index\
    \ + 1];\n    if(index === -1){\n      newMessage += letter;\n    }\n    else{\n\
    \      newMessage += nextLetter;\n    }\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_h7fxs83.js:16\n    var index = alphabet.indexOf(letter);\n   \
    \             ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmp_h7fxs83.js:16:17)\n\
    \    at test (/tmp/tmp_h7fxs83.js:33:20)\n    at Object.<anonymous> (/tmp/tmp_h7fxs83.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let newMessageArray\
    \ = message.split(\"\");\n    for(let i = 0; i < newMessageArray.length; i++){\n\
    \        if(vowels.includes(newMessageArray[i])){\n            newMessage = newMessage.replace(newMessageArray[i],\
    \ newMessageArray[i+1]);\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TSST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcb1bo850.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcb1bo850.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TSST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message[i];\n    let newLetter = letter;\n    for(let j = 0; j\
    \ < 2; j++){\n      newLetter = swapCase(newLetter);\n    }\n    newMessage =\
    \ newMessage.replace(letter, newLetter);\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyglz2fph.js:17\n      newLetter = swapCase(newLetter);\n      ^\n\
    \nReferenceError: swapCase is not defined\n    at encode (/tmp/tmpyglz2fph.js:17:7)\n\
    \    at test (/tmp/tmpyglz2fph.js:29:20)\n    at Object.<anonymous> (/tmp/tmpyglz2fph.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj8f7cetn.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj8f7cetn.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextIndex = alphabet.indexOf(vowels[index],\
    \ index + 1);\n            if(nextIndex == -1){\n                newMessage +=\
    \ letter;\n            }else{\n                newMessage += vowels[index];\n\
    \                newMessage += vowels[nextIndex];\n            }\n        }else{\n\
    \            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp55cahhde.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp55cahhde.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        let letterToSwap = alphabet.charAt(letterIndex+2);\n        newMessage\
    \ += alphabet.charAt(letterIndex+1) + letterToSwap;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpejlj6ckh.js:15\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpejlj6ckh.js:15:27)\n    at test (/tmp/tmpejlj6ckh.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpejlj6ckh.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var encodedMessage = \"\";\n  for (var i = 0; i < message.length; i++){\n \
    \   var letter = message.charAt(i);\n    var encodedLetter = letter;\n    if (letter\
    \ >= 'a' && letter <= 'z'){\n      encodedLetter = letter.toUpperCase();\n   \
    \ } else if (letter >= 'A' && letter <= 'Z'){\n      encodedLetter = letter.toLowerCase();\n\
    \    }\n    encodedMessage += encodedLetter;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8ll19mqk.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ll19mqk.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\"){\n            newMessage += letter;\n       \
    \     i++;\n        }\n        else if(letter === \"A\" || letter === \"E\" ||\
    \ letter === \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage\
    \ += letter.toUpperCase();\n            i++;\n        }\n        else if(letter\
    \ === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\"){\n            newMessage += letter;\n            i++;\n        }\n\
    \        else if(letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newMessage += letter;\n            i++;\n        }\n        else if(letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\"){\n            newMessage += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if(letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter;\n\
    \            i++;\n        }\n        else if(letter === \"A\" || letter === \"\
    E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"){\n          \
    \  newMessage += letter.toUpperCase();\n            i++;\n        }\n        else\
    \ if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n            newMessage += letter;\n            i++;\n\
    \        }\n        else if(letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \            i++;\n        }\n        else if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newMessage += letter;\n            i++;\n        }\n        else if(letter\
    \ === \"A\" || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter\
    \ === \"U\"){\n            newMessage += letter.toUpperCase();\n            i++;\n\
    \        }\n        else if(letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter;\n\
    \            i++;\n        }\n        else if(letter === \"A\" || letter === \"\
    E\" || \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp097dyzfo.js:69\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for(var i =\
    \ 0; i < message.length; i++){\n        var letter = message.charAt(i);\n    \
    \    if(letters.indexOf(letter) == -1){\n            newMessage += letter;\n \
    \       }\n        else{\n            var index = letters.indexOf(letter);\n \
    \           var nextLetter = letters.charAt(index + 1);\n            var nextVowel\
    \ = vowels.indexOf(nextLetter);\n            if(nextVowel == -1){\n          \
    \      newMessage += letter;\n            }\n            else{\n             \
    \   newMessage += letters[(index - 2) % 26] + nextLetter;\n            }\n   \
    \     }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'RUESRU'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4lfudzjw.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4lfudzjw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'RUESRU',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw10r3er1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw10r3er1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if (letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }\n    else {\n      let letterIndex = alphabet.indexOf(letter);\n\
    \      newMessage += alphabet[letterIndex + 2];\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxujy4zk3.js:19\n      let letterIndex = alphabet.indexOf(letter);\n\
    \                        ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpxujy4zk3.js:19:25)\n    at test (/tmp/tmpxujy4zk3.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpxujy4zk3.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsc9yb5om.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsc9yb5om.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter;\n    \
    \    for(var j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newLetter = vowels[j + 2];\n                break;\n        \
    \    }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5a9l41hh.js:16\n        for(var j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmp5a9l41hh.js:16:28)\n    at test (/tmp/tmp5a9l41hh.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5a9l41hh.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        let newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n    }\n    for(let i = 0; i < message.length;\
    \ i++){\n        let letter = message[i];\n        let newLetter = letter.toLowerCase();\n\
    \        newMessage += newLetter;\n    }\n    for(let i = 0; i < message.length;\
    \ i++){\n        let letter = message[i];\n        let newLetter = letter.replace(/[aeiou]/g,\
    \ letter => letter.toUpperCase());\n        newMessage += newLetter;\n    }\n\
    \    for(let i = 0; i < message.length; i++){\n        let letter = message[i];\n\
    \        let newLetter = letter.replace(/[aeiou]/g, letter => letter.toLowerCase());\n\
    \        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTESTTEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp60stqnur.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp60stqnur.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var letters\
    \ = ['t','g','k','s','c','g','h','k','s'];\n    var vowelsCount = vowels.length;\n\
    \    var lettersCount = letters.length;\n    for(var i=0; i<message.length; i++){\n\
    \        var letter = message.charAt(i);\n        if(letter in vowels){\n    \
    \        result += letters[vowels.indexOf(letter)];\n        }else{\n        \
    \    result += letter;\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3hehlgl7.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3hehlgl7.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter === \"a\"){\n            newMessage += \"A\";\n        }\n      \
    \  else if(letter === \"e\"){\n            newMessage += \"E\";\n        }\n \
    \       else if(letter === \"i\"){\n            newMessage += \"I\";\n       \
    \ }\n        else if(letter === \"o\"){\n            newMessage += \"O\";\n  \
    \      }\n        else if(letter === \"u\"){\n            newMessage += \"U\"\
    ;\n        }\n        else if(letter === \"y\"){\n            newMessage += \"\
    Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage +=\
    \ \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(letter === \"y\"){\n            newMessage\
    \ += \"Y\";\n        }\n        else if(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprwfenejq.js:113\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter;\n    \
    \    for(var j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newLetter = vowels[j + 2];\n                break;\n        \
    \    }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5a9l41hh.js:16\n        for(var j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmp5a9l41hh.js:16:28)\n    at test (/tmp/tmp5a9l41hh.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5a9l41hh.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if(letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }\n    else if(letter === \"A\" || letter === \"E\" || letter\
    \ === \"I\" || letter === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \    }\n    else{\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2xsfwf2c.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2xsfwf2c.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let letter = message[i];\n        let vowels = \"aeiouAEIOU\";\n    \
    \    let vowelIndex = vowels.indexOf(letter);\n        if (vowelIndex > -1) {\n\
    \            newMessage += vowels[vowelIndex + 2];\n        } else {\n       \
    \     newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppc8u2cn3.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppc8u2cn3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < message.length; i++){\n        let letter = message.charAt(i);\n\
    \        newMessage += letter;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpngf_79qr.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpngf_79qr.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_jcl5l0w.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_jcl5l0w.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let encodedMessage = \"\";\n\
    \    for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        if(letterIndex ===\
    \ -1){\n            encodedMessage += letter;\n        }else{\n            let\
    \ vowelIndex = letterIndex - 2;\n            if(vowelIndex < 0){\n           \
    \     encodedMessage += letter;\n            }else{\n                let vowel\
    \ = alphabet[vowelIndex];\n                let vowelIndex = alphabet.indexOf(vowel);\n\
    \                let nextVowel = alphabet[vowelIndex + 1];\n                encodedMessage\
    \ += letter + nextVowel;\n            }\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqwymlld6.js:16\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpqwymlld6.js:16:27)\n    at test (/tmp/tmpqwymlld6.js:39:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqwymlld6.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for (let i\
    \ = 0; i < message.length; i++){\n        let letter = message[i];\n        newMessage\
    \ += letter.charCodeAt(0) - 65 + vowels.indexOf(letter.charAt(1)) + 1;\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2051920'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppj9c2o5b.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmppj9c2o5b.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2051920',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let encodedMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = englishAlphabet.indexOf(letter);\n    let letterIndex2 =\
    \ letterIndex + 1;\n    let letterIndex3 = letterIndex2 + 1;\n    let letterIndex4\
    \ = letterIndex3 + 1;\n    let letterIndex5 = letterIndex4 + 1;\n    let letterIndex6\
    \ = letterIndex5 + 1;\n    let letterIndex7 = letterIndex6 + 1;\n    let letterIndex8\
    \ = letterIndex7 + 1;\n    let letterIndex9 = letterIndex8 + 1;\n    let letterIndex10\
    \ = letterIndex9 + 1;\n    let letterIndex11 = letterIndex10 + 1;\n    let letterIndex12\
    \ = letterIndex11 + 1;\n    let letterIndex13 = letterIndex12 + 1;\n    let letterIndex14\
    \ = letterIndex13 + 1;\n    let letterIndex15 = letterIndex14 + 1;\n    let letterIndex16\
    \ = letterIndex15 + 1;\n    let letterIndex17 = letterIndex16 + 1;\n    let letterIndex18\
    \ = letterIndex17 + 1;\n    let letterIndex19 = letterIndex18 + 1;\n    let letterIndex20\
    \ = letterIndex19 + 1;\n    let letterIndex21 = letterIndex20 + 1;\n    let letterIndex22\
    \ = letterIndex21 + 1;\n    let letterIndex23 = letterIndex22 + 1;\n    let letterIndex24\
    \ = letterIndex23 + 1;\n    let letterIndex25 = letterIndex24 + 1;\n    let letterIndex26\
    \ = letterIndex25 + 1;\n    let letterIndex27 = letterIndex26 + 1;\n    let letterIndex28\
    \ = letterIndex27 + 1;\n    let letterIndex29 = letterIndex28 + 1;\n    let letterIndex30\
    \ = letterIndex29 + 1;\n    let letterIndex31 = letterIndex30 + 1;\n    let letterIndex32\
    \ = letterIndex31 + 1;\n    let letterIndex33 = letterIndex32 + 1;\n    let letterIndex34\
    \ = letterIndex33 + 1;\n    let letterIndex35 = letterIndex34 + 1;\n    let letterIndex36\
    \ = letterIndex35 + 1;\n    let letterIndex37 = letterIndex36 + 1;\n    let letterIndex38\
    \ = letterIndex37 + 1;\n    let letterIndex39 = letterIndex38 + 1;\n    let letterIndex40\
    \ = letterIndex39 + 1;\n    let letterIndex41 = letterIndex40 + 1;\n    let letterIndex42\
    \ = letterIndex41 + 1;\n    let letterIndex43 = letterIndex42 + 1;\n    let letterIndex44\
    \ = letterIndex43 + 1;\n    let letterIndex45 = letterIndex44 + 1;\n    let letterIndex46\
    \ = letterIndex45 + 1;\n    let letterIndex47 = letterIndex46 + 1;\n    let letterIndex48\
    \ = letterIndex47 + 1;\n    let letterIndex49 = letterIndex48 + 1;\n    let \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpinjqs39l.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for(var i =\
    \ 0; i < message.length; i++){\n        var letter = message.charAt(i);\n    \
    \    var index = letter.charCodeAt(0);\n        var nextLetter = letters.charAt(index\
    \ + 1);\n        newMessage += letters.charAt(index) + nextLetter;\n    }\n  \
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmp8qmvrnhb.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8qmvrnhb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n \
    \   let encodedVowel = vowels[letter];\n    encodedMessage += encodedLetter +\
    \ encodedVowel;\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqgwaogo1.js:16\n    let encodedVowel = vowels[letter];\n      \
    \                 ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmpqgwaogo1.js:16:24)\n\
    \    at test (/tmp/tmpqgwaogo1.js:27:20)\n    at Object.<anonymous> (/tmp/tmpqgwaogo1.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw10r3er1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw10r3er1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsc9yb5om.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsc9yb5om.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet.charAt(index+1);\n\
    \            if(vowels.indexOf(nextLetter) != -1){\n                newMessage\
    \ += nextLetter;\n            }else{\n                newMessage += letter;\n\
    \            }\n        }else{\n            newMessage += letter;\n        }\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'UESU'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9oj1es1s.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9oj1es1s.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'UESU',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \        newMessage += letter.charCodeAt(0) - 65;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T19E4S18T19'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpm9gsldry.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm9gsldry.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T19E4S18T19',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdd5uzkdp.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdd5uzkdp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = 'aeiouy';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    \n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0);\n        \n        if(index >= 65 &&\
    \ index <= 90){\n            result += letters[(index - 65)];\n        }\n   \
    \     else if(index >= 97 && index <= 122){\n            result += letters[(index\
    \ - 97)];\n        }\n        else if(index >= 48 && index <= 57){\n         \
    \   result += letters[index - 48];\n        }\n        else{\n            result\
    \ += letter;\n        }\n    }\n    \n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcthpge94.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcthpge94.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter;\n    if(letter ===\
    \ \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter\
    \ === \"u\"){\n      newLetter = letter.toUpperCase();\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxrg1jyqd.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxrg1jyqd.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.charCodeAt(0) -\
    \ 65 + letter.charCodeAt(1) - 65;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv4dt510q.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv4dt510q.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw10r3er1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw10r3er1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter.charCodeAt(0) - 65;\n    newMessage\
    \ += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpymdtx4lm.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpymdtx4lm.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n\
    \        let letter = message[i].toLowerCase();\n        let vowelIndex = letter.indexOf(\"\
    a\");\n        let vowel = letter.slice(vowelIndex);\n        let vowelIndex =\
    \ letter.indexOf(\"e\");\n        let vowel2 = letter.slice(vowelIndex);\n   \
    \     let vowelIndex = letter.indexOf(\"i\");\n        let vowel3 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"o\");\n        let vowel4 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"u\");\n        let vowel5 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"y\");\n        let vowel6 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"s\");\n        let vowel7 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"d\");\n        let vowel8 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"g\");\n        let vowel9 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"b\");\n        let vowel10 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"p\");\n        let vowel11 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"f\");\n        let vowel12 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"v\");\n        let vowel13 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"k\");\n        let vowel14 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"m\");\n        let vowel15 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"c\");\n        let vowel16 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"q\");\n        let vowel17 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"j\");\n        let vowel18 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"x\");\n        let vowel19 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"z\");\n        let vowel20 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"w\");\n        let vowel21 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"v\");\n        let vowel22 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"b\");\n        let vowel23 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"n\");\n        let vowel24 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"m\");\n        let vowel25 = letter.slice(vowelIndex);\n\
    \        let vowelIndex = letter.indexOf(\"k\");\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppyn1yc5n.js:17\n        let vowelIndex = letter.indexOf(\"e\");\n\
    \            ^\n\nSyntaxError: Identifier 'vowelIndex' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxk8qb1oe.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxk8qb1oe.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextIndex = index + 1;\n          \
    \  var nextLetter = alphabet.charAt(nextIndex);\n            newMessage += alphabet.charAt(index)\
    \ + nextLetter;\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0rlm0j07.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0rlm0j07.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = letter.charCodeAt(0) - 97;\n    result\
    \ += String.fromCharCode(index+2);\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF5\uFFE6\uFFF4\
    \uFFF5'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsdbeuj42.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsdbeuj42.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF5\uFFE6\
    \uFFF4\uFFF5',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let\
    \ i = 0; i < message.length; i++){\n        let letter = message.charAt(i);\n\
    \        if(vowels.indexOf(letter) > -1){\n            encodedMessage += letter;\n\
    \        }\n        else{\n            encodedMessage += letter.charCodeAt(0)\
    \ - 64;\n        }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'20E1920'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmbf0m6so.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmbf0m6so.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '20E1920',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var newLetter = letter.toUpperCase();\n        var newVowel = vowels[letter];\n\
    \        var newVowel2 = vowels[newVowel];\n        newMessage += newLetter;\n\
    \        newMessage += newVowel2;\n        newMessage += newVowel;\n    }\n  \
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpj8kkdwh5.js:17\n        var newVowel = vowels[letter];\n      \
    \                 ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmpj8kkdwh5.js:17:24)\n\
    \    at test (/tmp/tmpj8kkdwh5.js:31:20)\n    at Object.<anonymous> (/tmp/tmpj8kkdwh5.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        encodedMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 65;\n    }\n    return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxf029304.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxf029304.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  var vowels = \"AEIOU\";\n\
    \  var messageArray = message.split(\"\");\n  var encodedMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var currentLetter = messageArray[i];\n\
    \    var nextLetter = messageArray[i+1];\n    if(alphabet.indexOf(currentLetter)\
    \ > alphabet.indexOf(nextLetter)){\n      encodedMessage += currentLetter;\n \
    \   }\n    else{\n      encodedMessage += vowels.charAt(alphabet.indexOf(currentLetter)\
    \ - alphabet.indexOf(nextLetter));\n    }\n  }\n  return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TT'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwn_y7bfr.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwn_y7bfr.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TT',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ newMessage = newMessage.replace(\n      /[a-z]/g, \n      function(letter){\n\
    \        return letter.charCodeAt(0) - 64;\n      }\n    );\n  }\n  for(let i\
    \ = 0; i < message.length; i++){\n    newMessage = newMessage.replace(\n     \
    \ /[aeiou]/g, \n      function(letter){\n        return letter.charCodeAt(0) -\
    \ 96;\n      }\n    );\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9hz75hv5.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9hz75hv5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for (let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    if\
    \ (index === -1){\n      index = alphabet.length;\n    }\n    newMessage = newMessage.replace(letter,\
    \ alphabet[index + 2]);\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3z3nlqct.js:15\n    let index = alphabet.indexOf(letter);\n   \
    \             ^\n\nReferenceError: alphabet is not defined\n    at encode (/tmp/tmp3z3nlqct.js:15:17)\n\
    \    at test (/tmp/tmp3z3nlqct.js:29:20)\n    at Object.<anonymous> (/tmp/tmp3z3nlqct.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter === \"a\"){\n            newMessage += \"A\";\n        }\n      \
    \  else if(letter === \"e\"){\n            newMessage += \"E\";\n        }\n \
    \       else if(letter === \"i\"){\n            newMessage += \"I\";\n       \
    \ }\n        else if(letter === \"o\"){\n            newMessage += \"O\";\n  \
    \      }\n        else if(letter === \"u\"){\n            newMessage += \"U\"\
    ;\n        }\n        else if(letter === \"y\"){\n            newMessage += \"\
    Y\";\n        }\n        else if(letter === \"h\"){\n            newMessage +=\
    \ \"H\";\n        }\n        else if(letter === \"k\"){\n            newMessage\
    \ += \"K\";\n        }\n        else if(letter === \"s\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter === \"t\"){\n            newMessage\
    \ += \"T\";\n        }\n        else if(letter === \"r\"){\n            newMessage\
    \ += \"R\";\n        }\n        else if(letter === \"l\"){\n            newMessage\
    \ += \"L\";\n        }\n        else if(letter === \"d\"){\n            newMessage\
    \ += \"D\";\n        }\n        else if(letter === \"m\"){\n            newMessage\
    \ += \"M\";\n        }\n        else if(letter === \"g\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter === \"c\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter === \"g\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter === \"s\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter === \"c\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter === \"g\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter === \"s\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter === \"c\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter === \"g\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter === \"s\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter === \"c\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter === \"g\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter === \"s\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter === \"c\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter === \"g\"){\n            newMessage\
    \ += \"G\";\n        }\n        else if(letter === \"s\"){\n            newMessage\
    \ += \"S\";\n        }\n        else if(letter === \"c\"){\n            newMessage\
    \ += \"C\";\n        }\n        else if(letter === \"g\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp8wy3s0fz.js:109\n        else if(letter === \"g\n             \
    \              ^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message[i];\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters[index + 1];\n\
    \            if(vowels.indexOf(nextLetter) != -1){\n                newMessage\
    \ += letter;\n            }else{\n                newMessage += nextLetter;\n\
    \            }\n        }else{\n            newMessage += letter;\n        }\n\
    \    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm,string\
    \ |>\n<| c |>\nThis doesn't seem to work. Try it with `encode(\"This is a message\"\
    )`.\n<|/ c |>\n<| c |>\nIt works fine for me. Try it here: http://jsfiddle.net/jfriend00/qwLnj/\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me in Chrome. Try it with `encode(\"This\
    \ is a message\")`.\n<|/ c |>\n<| c |>\nIt works fine in Chrome for me. Try it\
    \ here: http://jsfiddle.net/jfriend00/qwLnj/\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me in Firefox. Try it with `encode(\"This is a message\")`.\n<|/ c |>\n\
    <| a tags=javascript,algorithm,string |>\n<code>\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpn4l1zhy7.js:31\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i=0; i<message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters.charAt(index+1);\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk_ef1csx.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpk_ef1csx.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdd5uzkdp.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdd5uzkdp.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let encodedMessage = \"\";\n\
    \    for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = letter.charCodeAt(0) - 97;\n        encodedMessage\
    \ += letterIndex.toString();\n    }\n    return encodedMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmbhgxn8k.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmbhgxn8k.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let vowels = \"AEIOUaeiou\";\n    let index\
    \ = vowels.indexOf(letter);\n    if (index != -1){\n      newMessage += vowels[index\
    \ + 2];\n    }\n    else {\n      newMessage += letter;\n    }\n  }\n  return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptfpx6b9p.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptfpx6b9p.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ var newLetter = letter;\n    if(letter === \"a\" || letter === \"e\" || letter\
    \ === \"i\" || letter === \"o\" || letter === \"u\"){\n      newLetter = nextLetter;\n\
    \    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyaymfnkv.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyaymfnkv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n \
    \   let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj8f7cetn.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj8f7cetn.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let newMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = alphabet.indexOf(letter);\n    let nextLetterIndex = letterIndex\
    \ + 2;\n    if(nextLetterIndex > alphabet.length){\n      nextLetterIndex = 0;\n\
    \    }\n    newMessage += alphabet[nextLetterIndex];\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpphkf4zbm.js:16\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpphkf4zbm.js:16:23)\n    at test (/tmp/tmpphkf4zbm.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpphkf4zbm.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters[index + 1];\n\
    \            newMessage += letter.toUpperCase();\n            newMessage += nextLetter.toUpperCase();\n\
    \        }\n        else{\n            newMessage += letter.toUpperCase();\n \
    \       }\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfv40cu7m.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfv40cu7m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    if(letter == \"a\"){\n      newMessage += \"\
    t\";\n    }else if(letter == \"e\"){\n      newMessage += \"k\";\n    }else if(letter\
    \ == \"i\"){\n      newMessage += \"s\";\n    }else if(letter == \"o\"){\n   \
    \   newMessage += \"c\";\n    }else if(letter == \"u\"){\n      newMessage +=\
    \ \"g\";\n    }else if(letter == \"y\"){\n      newMessage += \"g\";\n    }else{\n\
    \      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsx_lfl4u.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsx_lfl4u.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiou\";\n    var letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message[i];\n        var index = letters.indexOf(letter);\n\
    \        var nextLetter = letters[(index+1)%letters.length];\n        newMessage\
    \ += nextLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aaaa'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1a8jcnmw.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1a8jcnmw.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter.toLowerCase() == \"a\" || letter.toLowerCase() == \"e\" || letter.toLowerCase()\
    \ == \"i\" || letter.toLowerCase() == \"o\" || letter.toLowerCase() == \"u\"){\n\
    \      newMessage += letter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ == \"b\"){\n      newMessage += letter;\n      i++;\n      newMessage += nextLetter;\n\
    \      i++;\n    }\n    else if(letter.toLowerCase() == \"c\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += nextLetter;\n      i++;\n      newMessage\
    \ += nextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase() == \"d\"\
    ){\n      newMessage += letter;\n      i++;\n      newMessage += nextLetter;\n\
    \      i++;\n      newMessage += nextLetter;\n      i++;\n      newMessage +=\
    \ nextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase() == \"e\"){\n\
    \      newMessage += letter;\n      i++;\n      newMessage += nextLetter;\n  \
    \    i++;\n      newMessage += nextLetter;\n      i++;\n      newMessage += nextLetter;\n\
    \      i++;\n      newMessage += nextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ == \"f\"){\n      newMessage += letter;\n      i++;\n      newMessage += nextLetter;\n\
    \      i++;\n      newMessage += nextLetter;\n      i++;\n      newMessage +=\
    \ nextLetter;\n      i++;\n      newMessage += nextLetter;\n      i++;\n     \
    \ newMessage += nextLetter;\n      i++;\n    }\n    else if(letter.toLowerCase()\
    \ == \"g\"){\n      newMessage += letter;\n      i++;\n      newMessage += nextLetter;\n\
    \      i++;\n      newMessage += nextLetter;\n      i++;\n      newMessage +=\
    \ nextLetter;\n      i++;\n      newMessage += nextLetter;\n      i++;\n     \
    \ newMessage += nextLetter;\n      i++;\n      newMessage += nextLetter;\n   \
    \   i++;\n    }\n    else if(letter.toLowerCase() == \"h\"){\n      newMessage\
    \ += letter;\n      i++;\n      newMessage += nextLetter;\n      i++;\n      newMessage\
    \ += nextLetter;\n      i++;\n      newMessage += nextLetter;\n      i++;\n  \
    \    newMessage += next\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpl82cqgbr.js:108\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter;\n    \
    \    for(var j = 0; j < vowels.length; j++){\n            if(letter == vowels[j]){\n\
    \                newLetter = vowels[j + 2];\n                break;\n        \
    \    }\n        }\n        newMessage += newLetter;\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5a9l41hh.js:16\n        for(var j = 0; j < vowels.length; j++){\n\
    \                           ^\n\nReferenceError: vowels is not defined\n    at\
    \ encode (/tmp/tmp5a9l41hh.js:16:28)\n    at test (/tmp/tmp5a9l41hh.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5a9l41hh.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        let newLetter = letter;\n        for(let\
    \ j = 0; j < letter.length; j++){\n            let vowel = letter.charAt(j);\n\
    \            let vowelIndex = alphabet.indexOf(vowel);\n            if(vowelIndex\
    \ > 0){\n                let vowelIndex = vowelIndex - 2;\n                let\
    \ newVowel = alphabet.charAt(vowelIndex);\n                newLetter = newLetter.replace(vowel,\
    \ newVowel);\n            }\n        }\n        newMessage += newLetter;\n   \
    \ }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl9pkihod.js:18\n            let vowelIndex = alphabet.indexOf(vowel);\n\
    \                             ^\n\nReferenceError: alphabet is not defined\n \
    \   at encode (/tmp/tmpl9pkihod.js:18:30)\n    at test (/tmp/tmpl9pkihod.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpl9pkihod.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message[i];\n        if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  letter = letter.toUpperCase();\n        }\n        encodedMessage += letter;\n\
    \    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgwrgydw2.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgwrgydw2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) -\
    \ 65;\n    newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy2zb5srg.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy2zb5srg.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if (letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }\n    else {\n      newMessage += letter.charCodeAt(0) - 97;\n\
    \    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-13-28-14-13'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp60v7fr__.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp60v7fr__.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-13-28-14-13',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        var newLetter = letter;\n        for(var\
    \ j=0; j<vowels.length; j++){\n            if(letter == vowels[j]){\n        \
    \        newLetter = vowels[j+2];\n            }\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpabw2cicp.js:16\n        for(var j=0; j<vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpabw2cicp.js:16:24)\n    at test (/tmp/tmpabw2cicp.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpabw2cicp.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = englishAlphabet.indexOf(letter);\n\
    \    let letterToAdd = letterIndex === 0 ? letter : englishAlphabet[letterIndex-1];\n\
    \    newMessage += letterToAdd;\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd8p_m_3m.js:15\n    let letterIndex = englishAlphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: englishAlphabet is not defined\n \
    \   at encode (/tmp/tmpd8p_m_3m.js:15:23)\n    at test (/tmp/tmpd8p_m_3m.js:27:20)\n\
    \    at Object.<anonymous> (/tmp/tmpd8p_m_3m.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\"\
    ;\n    let encodedMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if(alphabet.indexOf(letter)\
    \ > -1){\n            encodedMessage += alphabet.indexOf(letter) + 1;\n      \
    \  }\n        else if(vowels.indexOf(letter) > -1){\n            encodedMessage\
    \ += alphabet.indexOf(letter) + 2;\n        }\n        else{\n            encodedMessage\
    \ += letter;\n        }\n    }\n    return encodedMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphepuf05e.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphepuf05e.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i<message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = alphabet.charAt(index+1);\n\
    \            if(vowels.indexOf(nextLetter) != -1){\n                newMessage\
    \ += letter;\n            }\n            else{\n                newMessage +=\
    \ nextLetter;\n            }\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TFTT'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1z4n09lr.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1z4n09lr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TFTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter.toLowerCase() == nextLetter.toLowerCase()){\n            newMessage\
    \ += letter;\n        }\n        else{\n            newMessage += letter.toUpperCase();\n\
    \        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nI like this solution, however it fails on \"This is a message\"\
    \ with expected output \"tHKS KS C MGSSCGG\"\n<|/ c |>\n<| c |>\nI fixed the problem\
    \ you mentioned, but I believe that my solution still works. I tested it on \"\
    This is a message\" and it returned \"tHKS KS C MGSSCGG\"\n<|/ c |>\n<| c |>\n\
    Yes, it works. I tested it on \"This is a message\" and it returned \"tHKS KS\
    \ C MGSSCGG\"\n<|/ c |>\n<| c |>\nI tested it on \"This is a message\" and it\
    \ returned \"tHKS KS C MGSSCGG\"\n<|/ c |>\n<| c |>\nI tested it on \"This is\
    \ a message\" and it returned \"tHKS KS C MGSSCGG\"\n<|/ c |>\n<| a |>\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmplfa5or3l.js:25\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        if(letterIndex !=\
    \ -1){\n            let nextLetterIndex = letterIndex + 1;\n            if(nextLetterIndex\
    \ < alphabet.length){\n                newMessage += alphabet[nextLetterIndex];\n\
    \            }\n        }\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcmnls37k.js:16\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpcmnls37k.js:16:27)\n    at test (/tmp/tmpcmnls37k.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpcmnls37k.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let i =\
    \ 0; i < message.length; i++){\n        let letter = message[i];\n        let\
    \ newLetter = letter;\n        for(let j = 0; j < vowels.length; j++){\n     \
    \       if(letter == vowels[j]){\n                newLetter = vowels[j + 2];\n\
    \                break;\n            }\n        }\n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv1wee2sy.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv1wee2sy.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 65;\n    newMessage\
    \ += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaaxb9d2j.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaaxb9d2j.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let\
    \ i = 0; i < message.length; i++){\n        let letter = message[i];\n       \
    \ let index = vowels.indexOf(letter);\n        if(index != -1){\n            encodedMessage\
    \ += vowels[index];\n        }else{\n            encodedMessage += letter;\n \
    \       }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz76v4sc8.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz76v4sc8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message.toLowerCase();\n    let vowels = \"aeiou\";\n  \
    \  let newVowels = \"\";\n    for(let i = 0; i < newMessage.length; i++){\n  \
    \      if(vowels.includes(newMessage[i])){\n            newVowels += newMessage[i];\n\
    \        }else{\n            newVowels += newMessage[i].toUpperCase();\n     \
    \   }\n    }\n    return newVowels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd85f7l99.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd85f7l99.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.toUpperCase();\n   \
    \ var newVowel = vowels[letter];\n    newMessage += newLetter;\n    newMessage\
    \ += newVowel;\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr83hodl0.js:16\n    var newVowel = vowels[letter];\n          \
    \         ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmpr83hodl0.js:16:20)\n\
    \    at test (/tmp/tmpr83hodl0.js:29:20)\n    at Object.<anonymous> (/tmp/tmpr83hodl0.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for(let i = 0; i < message.length; i++){\n        let letter = message[i];\n\
    \        newMessage += letter;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTTEST'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf51lncmu.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf51lncmu.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowelIndex = letters.indexOf(newVowel);\n    var newLetterIndex =\
    \ letters.indexOf(newLetter);\n    newMessage = newMessage + newLetter;\n    if(newVowelIndex\
    \ != newLetterIndex){\n      newMessage = newMessage + newVowel;\n    }\n  }\n\
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp40zzf73q.js:17\n    var newVowel = vowels[letter];\n          \
    \         ^\n\nReferenceError: vowels is not defined\n    at encode (/tmp/tmp40zzf73q.js:17:20)\n\
    \    at test (/tmp/tmp40zzf73q.js:33:20)\n    at Object.<anonymous> (/tmp/tmp40zzf73q.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message[i];\n        let index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            let nextLetter = letters[index + 1];\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpuau46oll.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuau46oll.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: -1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        newMessage += letters[letters.indexOf(letter)];\n\
    \    }\n    for(let i = 0; i < newMessage.length; i++){\n        let letter =\
    \ newMessage.charAt(i);\n        newMessage += vowels[vowels.indexOf(letter)];\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747179
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < newMessage.length;\
    \ i++){\n        let letter = newMessage.charAt(i);\n        if(letters.indexOf(letter)\
    \ > -1){\n            newMessage = newMessage.replace(letter, letters[letters.indexOf(letter)\
    \ + 1]);\n        }\n    }\n    for(let i = 0; i < vowels.length; i++){\n    \
    \    newMessage = newMessage.replace(vowels[i], vowels[i + 1]);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa85tjp43.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa85tjp43.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.toUpperCase();\n\
    \        newMessage += newLetter;\n    }\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var newLetter = letter.toLowerCase();\n\
    \        newMessage += newLetter;\n    }\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var newLetter = letter;\n\
    \        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTtestTEST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpudeaamrm.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpudeaamrm.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTtestTEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiou\";\n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = vowels.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = vowels[index+1];\n    \
    \        newMessage += nextVowel;\n        }\n        newMessage += letter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpoxvjpv9g.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpoxvjpv9g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n\
    \    let letter = message[i];\n    encodedMessage += letters[letters.indexOf(letter)];\n\
    \  }\n  for(let i = 0; i < message.length; i++){\n    let letter = message[i];\n\
    \    encodedMessage += vowels.indexOf(letter) + 2;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedundefinedundefinedundefined1811'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgsbt0rfd.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgsbt0rfd.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedundefinedundefinedundefined1811',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let vowelIndex = letter.search(/[aeiou]/);\n        if(vowelIndex > -1){\n\
    \            letter = letter.split(\"\")[vowelIndex];\n        }\n        newMessage\
    \ += letter;\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpduff36cl.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpduff36cl.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    if(letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }else{\n      newMessage += letter.charCodeAt(0) - 96;\n   \
    \ }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-12-27-13-12'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpprorrqd8.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpprorrqd8.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-12-27-13-12',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter == \"a\"){\n            newMessage += \"A\";\n        }\n       \
    \ else if(letter == \"e\"){\n            newMessage += \"E\";\n        }\n   \
    \     else if(letter == \"i\"){\n            newMessage += \"I\";\n        }\n\
    \        else if(letter == \"o\"){\n            newMessage += \"O\";\n       \
    \ }\n        else if(letter == \"u\"){\n            newMessage += \"U\";\n   \
    \     }\n        else if(letter == \"A\"){\n            newMessage += \"a\";\n\
    \        }\n        else if(letter == \"E\"){\n            newMessage += \"e\"\
    ;\n        }\n        else if(letter == \"I\"){\n            newMessage += \"\
    i\";\n        }\n        else if(letter == \"O\"){\n            newMessage +=\
    \ \"o\";\n        }\n        else if(letter == \"U\"){\n            newMessage\
    \ += \"u\";\n        }\n        else if(letter == \"a\"){\n            newMessage\
    \ += \"A\";\n        }\n        else if(letter == \"e\"){\n            newMessage\
    \ += \"E\";\n        }\n        else if(letter == \"i\"){\n            newMessage\
    \ += \"I\";\n        }\n        else if(letter == \"o\"){\n            newMessage\
    \ += \"O\";\n        }\n        else if(letter == \"u\"){\n            newMessage\
    \ += \"U\";\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprfldx84q.js:70:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprfldx84q.js:77:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n\
    \    let letter = message[i];\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let nextLetterIndex = letterIndex + 2;\n    if (nextLetterIndex > alphabet.length)\
    \ nextLetterIndex = 0;\n    let nextLetter = alphabet[nextLetterIndex];\n    encodedMessage\
    \ += nextLetter;\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp81z5usox.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp81z5usox.js:15:23)\n    at test (/tmp/tmp81z5usox.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp81z5usox.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let index = letter.charCodeAt(0) - 97;\n  \
    \  newMessage += String.fromCharCode(index+2);\n  }\n  return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF5\uFFE6\uFFF4\
    \uFFF5'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf6jx1rgr.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf6jx1rgr.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF5\uFFE6\
    \uFFF4\uFFF5',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter.charCodeAt(0) - 65;\n    newMessage\
    \ += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9ad52ju1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ad52ju1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        if(letterIndex != -1){\n            let nextLetter = alphabet[letterIndex\
    \ + 1];\n            newMessage += nextLetter;\n        }\n        else{\n   \
    \         newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4cgewstg.js:15\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmp4cgewstg.js:15:27)\n    at test (/tmp/tmp4cgewstg.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmp4cgewstg.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg5yjo2v_.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg5yjo2v_.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message.toLowerCase().replace(/[a-z]/g, function(letter){\n\
    \    return letter.charCodeAt(0) - 64;\n  });\n  newMessage = newMessage.replace(/[aeiou]/g,\
    \ function(letter){\n    return letter.charCodeAt(0) - 96;\n  });\n  newMessage\
    \ = newMessage.replace(/[aeiouAEIOU]/g, function(letter){\n    return letter.charCodeAt(0)\
    \ - 128;\n  });\n  return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'52375152'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpou4l6fl4.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmpou4l6fl4.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '52375152',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextVowel = alphabet.indexOf(vowels[index + 1], index + 1);\n  \
    \          if(nextVowel == -1){\n                nextVowel = alphabet.length;\n\
    \            }\n            newMessage += alphabet.charAt(nextVowel);\n      \
    \  }\n        else{\n            newMessage += letter;\n        }\n    }\n   \
    \ return newMessage;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4pqy18wj.js:32\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter.charCodeAt(0)\
    \ - 65 + letter.charCodeAt(1) - 65;\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaNNaNNaNNaN'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2vdhcm9v.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2vdhcm9v.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaNNaNNaNNaN',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message[i];\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.indexOf(vowels[index],\
    \ index + 1);\n            if(nextVowel != -1){\n                newMessage +=\
    \ alphabet.charAt(nextVowel);\n            }\n            else{\n            \
    \    newMessage += alphabet.charAt(index);\n            }\n        }\n       \
    \ else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnpcjasf5.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnpcjasf5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < newMessage.length;\
    \ i++){\n        let letter = newMessage.charAt(i);\n        if(letters.indexOf(letter)\
    \ > -1){\n            newMessage = newMessage.replace(letter, letters[letters.indexOf(letter)\
    \ + 1]);\n        }\n    }\n    for(let i = 0; i < vowels.length; i++){\n    \
    \    newMessage = newMessage.replace(vowels[i], vowels[i + 1]);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TundefinedST'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa85tjp43.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa85tjp43.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TundefinedST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxk8qb1oe.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxk8qb1oe.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let index = letters.indexOf(letter);\n    newMessage\
    \ += letters[(index + 1) % letters.length];\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aaaa'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnnm6jpet.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnnm6jpet.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    for(let i = 0; i < message.length; i++){\n\
    \        if(message[i] === \"a\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"A\");\n        }\n        else if(message[i] === \"e\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"E\");\n        }\n        else if(message[i]\
    \ === \"i\"){\n            newMessage = newMessage.replace(message[i], \"I\");\n\
    \        }\n        else if(message[i] === \"o\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"O\");\n        }\n        else if(message[i] === \"u\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"U\");\n        }\n        else if(message[i]\
    \ === \"y\"){\n            newMessage = newMessage.replace(message[i], \"Y\");\n\
    \        }\n    }\n    for(let i = 0; i < message.length; i++){\n        if(message[i]\
    \ === \"a\"){\n            newMessage = newMessage.replace(message[i], \"a\");\n\
    \        }\n        else if(message[i] === \"e\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"e\");\n        }\n        else if(message[i] === \"i\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"i\");\n        }\n        else if(message[i]\
    \ === \"o\"){\n            newMessage = newMessage.replace(message[i], \"o\");\n\
    \        }\n        else if(message[i] === \"u\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"u\");\n        }\n        else if(message[i] === \"y\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"y\");\n        }\n    }\n    for(let i =\
    \ 0; i < message.length; i++){\n        if(message[i] === \"a\"){\n          \
    \  newMessage = newMessage.replace(message[i], \"A\");\n        }\n        else\
    \ if(message[i] === \"e\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"E\");\n        }\n        else if(message[i] === \"i\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"I\");\n        }\n        else if(message[i]\
    \ === \"o\"){\n            newMessage = newMessage.replace(message[i], \"O\");\n\
    \        }\n        else if(message[i] === \"u\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"U\");\n        }\n        else if(message[i] === \"y\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"Y\");\n        }\n    }\n    for(let i =\
    \ 0; i < message.length; i++){\n        if(message[i] === \"a\"){\n          \
    \  newMessage = newMessage.replace(message[i], \"a\");\n        }\n        else\
    \ if(message[i] === \"e\"){\n            newMessage = newMessage.replace(message[i],\
    \ \"e\");\n        }\n        else if(message[i] === \"i\"){\n            newMessage\
    \ = newMessage.replace(message[i], \"i\");\n        }\n        else if(message[i]\
    \ === \"o\"){\n            newMessage = newMessage.replace(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz0qbkskp.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index == -1){\n            newMessage += letter;\n        }\n    \
    \    else{\n            var nextLetter = alphabet.charAt(index+1);\n         \
    \   if(vowels.indexOf(nextLetter) != -1){\n                newMessage += letter;\n\
    \            }\n            else{\n                newMessage += nextLetter;\n\
    \            }\n        }\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TFTT'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvgi0ocx6.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvgi0ocx6.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TFTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  messageArray.forEach(function(letter){\n\
    \    letter = letter.toUpperCase();\n    letter = letter.replace(vowels, \"AEIOU\"\
    );\n    letter = letter.replace(/[^AEIOU]/g, function(letter){\n      return letter.toUpperCase();\n\
    \    });\n  });\n  return messageArray.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpo4jpsahz.js:15\n    letter = letter.replace(vowels, \"AEIOU\");\n\
    \                            ^\n\nReferenceError: vowels is not defined\n    at\
    \ /tmp/tmpo4jpsahz.js:15:29\n    at Array.forEach (<anonymous>)\n    at encode\
    \ (/tmp/tmpo4jpsahz.js:13:16)\n    at test (/tmp/tmpo4jpsahz.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpo4jpsahz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 96;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\
    \uFFF4'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp564yjyf1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp564yjyf1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\
    \uFFF3\uFFF4',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n   \
    \ for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = englishAlphabet.indexOf(letter);\n        if(letterIndex\
    \ > 0){\n            let letter2 = englishAlphabet[letterIndex + 1];\n       \
    \     newMessage += letter2;\n        }\n        newMessage += letter;\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp52ixie2p.js:16\n        let letterIndex = englishAlphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: englishAlphabet is not defined\n\
    \    at encode (/tmp/tmp52ixie2p.js:16:27)\n    at test (/tmp/tmp52ixie2p.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmp52ixie2p.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextIndex = index + 2;\n          \
    \  if(nextIndex < alphabet.length){\n                newMessage += alphabet.charAt(nextIndex);\n\
    \            }\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    for(var i = 0; i < vowels.length; i++){\n        var letter\
    \ = vowels.charAt(i);\n        var index = alphabet.indexOf(letter);\n       \
    \ if(index != -1){\n            var nextIndex = index + 2;\n            if(nextIndex\
    \ < alphabet.length){\n                newMessage += alphabet.charAt(nextIndex);\n\
    \            }\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUVCGKQW'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7kbvjkd8.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7kbvjkd8.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUVCGKQW',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  for(var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n    var nextLetterIndex\
    \ = alphabet.indexOf(nextLetter);\n    var nextLetterIndex2 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 1);\n    var nextLetterIndex3 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 2);\n    var nextLetterIndex4 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 3);\n    var nextLetterIndex5 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 4);\n    var nextLetterIndex6 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 5);\n    var nextLetterIndex7 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 6);\n    var nextLetterIndex8 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 7);\n    var nextLetterIndex9 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 8);\n    var nextLetterIndex10 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 9);\n    var nextLetterIndex11 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 10);\n    var nextLetterIndex12 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 11);\n    var nextLetterIndex13 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 12);\n    var nextLetterIndex14 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 13);\n    var nextLetterIndex15 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 14);\n    var nextLetterIndex16 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 15);\n    var nextLetterIndex17 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 16);\n    var nextLetterIndex18 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 17);\n    var nextLetterIndex19 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 18);\n    var nextLetterIndex20 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 19);\n    var nextLetterIndex21 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 20);\n    var nextLetterIndex22 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 21);\n    var nextLetterIndex23 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 22);\n    var nextLetterIndex24 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 23);\n    var nextLetterIndex25 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 24);\n    var nextLetterIndex26 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 25);\n    var nextLetterIndex27 = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 26);\n    var nextLetterIndex28 = alphabet.indexOf(\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpuuxbdne9.js:44\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"aeiou\";\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var index = alphabet.indexOf(letter);\n    var nextLetter = alphabet[(index+1)%alphabet.length];\n\
    \    newMessage += letter.split(\"\").map(function(letter){\n      return vowels.indexOf(letter)\
    \ > -1 ? nextLetter : letter;\n    }).join(\"\");\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzxie2grl.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzxie2grl.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter.charCodeAt(0)\
    \ - 65;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphxx5oj00.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmphxx5oj00.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    var vowelsArray\
    \ = vowels.split(\"\");\n    var lettersArray = letters.split(\"\");\n    for(var\
    \ i = 0; i < message.length; i++){\n        var letter = message[i];\n       \
    \ var index = lettersArray.indexOf(letter);\n        if(index != -1){\n      \
    \      var nextLetter = lettersArray[index + 1];\n            newMessage += letters[(index\
    \ - 2) % letters.length] + nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'RUCFQTRU'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn6ad08rc.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn6ad08rc.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'RUCFQTRU',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter.charCodeAt(0)\
    \ - 65 + 2;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsu5gi0ug.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsu5gi0ug.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var letterIndex = alphabet.indexOf(letter);\n        if(letterIndex !=\
    \ -1){\n            var nextLetterIndex = letterIndex + 1;\n            if(nextLetterIndex\
    \ < alphabet.length){\n                var nextLetter = alphabet[nextLetterIndex];\n\
    \                newMessage += nextLetter;\n            }\n        }\n       \
    \ newMessage += letter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpd4kfqahl.js:16\n        var letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpd4kfqahl.js:16:27)\n    at test (/tmp/tmpd4kfqahl.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmpd4kfqahl.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let newMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = englishAlphabet.indexOf(letter);\n    let letterIndex2 =\
    \ letterIndex + 2;\n    if(letterIndex2 >= englishAlphabet.length){\n      letterIndex2\
    \ = letterIndex2 - englishAlphabet.length;\n    }\n    newMessage += englishAlphabet[letterIndex2];\n\
    \  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdn2617ff.js:16\n    let letterIndex = englishAlphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: englishAlphabet is not defined\n \
    \   at encode (/tmp/tmpdn2617ff.js:16:23)\n    at test (/tmp/tmpdn2617ff.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpdn2617ff.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        if(letter === \"a\" || letter === \"\
    e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n          \
    \  newMessage += letter;\n        }\n        else if(letter === \"A\" || letter\
    \ === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\"){\n  \
    \          newMessage += letter.toUpperCase();\n        }\n        else{\n   \
    \         newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpylsemmdz.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpylsemmdz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let index = letter.charCodeAt(0) - 97;\n    let letter2\
    \ = letter.charCodeAt(0) - 65;\n    let letter3 = letter.charCodeAt(0) - 97;\n\
    \    let letter4 = letter.charCodeAt(0) - 65;\n    let letter5 = letter.charCodeAt(0)\
    \ - 97;\n    let letter6 = letter.charCodeAt(0) - 65;\n    let letter7 = letter.charCodeAt(0)\
    \ - 97;\n    let letter8 = letter.charCodeAt(0) - 65;\n    let letter9 = letter.charCodeAt(0)\
    \ - 97;\n    let letter10 = letter.charCodeAt(0) - 65;\n    let letter11 = letter.charCodeAt(0)\
    \ - 97;\n    let letter12 = letter.charCodeAt(0) - 65;\n    let letter13 = letter.charCodeAt(0)\
    \ - 97;\n    let letter14 = letter.charCodeAt(0) - 65;\n    let letter15 = letter.charCodeAt(0)\
    \ - 97;\n    let letter16 = letter.charCodeAt(0) - 65;\n    let letter17 = letter.charCodeAt(0)\
    \ - 97;\n    let letter18 = letter.charCodeAt(0) - 65;\n    let letter19 = letter.charCodeAt(0)\
    \ - 97;\n    let letter20 = letter.charCodeAt(0) - 65;\n    let letter21 = letter.charCodeAt(0)\
    \ - 97;\n    let letter22 = letter.charCodeAt(0) - 65;\n    let letter23 = letter.charCodeAt(0)\
    \ - 97;\n    let letter24 = letter.charCodeAt(0) - 65;\n    let letter25 = letter.charCodeAt(0)\
    \ - 97;\n    let letter26 = letter.charCodeAt(0) - 65;\n    let letter27 = letter.charCodeAt(0)\
    \ - 97;\n    let letter28 = letter.charCodeAt(0) - 65;\n    let letter29 = letter.charCodeAt(0)\
    \ - 97;\n    let letter30 = letter.charCodeAt(0) - 65;\n    let letter31 = letter.charCodeAt(0)\
    \ - 97;\n    let letter32 = letter.charCodeAt(0) - 65;\n    let letter33 = letter.charCodeAt(0)\
    \ - 97;\n    let letter34 = letter.charCodeAt(0) - 65;\n    let letter35 = letter.charCodeAt(0)\
    \ - 97;\n    let letter36 = letter.charCodeAt(0) - 65;\n    let letter37 = letter.charCodeAt(0)\
    \ - 97;\n    let letter38 = letter.charCodeAt(0) - 65;\n    let letter39 = letter.charCodeAt(0)\
    \ - 97;\n    let letter40 = letter.charCodeAt(0) - 65;\n    let letter41 = letter.charCodeAt(0)\
    \ - 97;\n    let letter42 = letter.charCodeAt(0) - 65;\n    let \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxjvf9ntl.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 65;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7g3wwa0d.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7g3wwa0d.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i=0; i<message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters.charAt(index+1);\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgw_1hpxm.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgw_1hpxm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\"\
    ;\n    let messageArray = message.split(\"\");\n    let newMessage = \"\";\n \
    \   for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let index = alphabet.indexOf(letter);\n        let nextLetter = alphabet[index\
    \ + 1];\n        if(vowels.includes(letter)){\n            newMessage += letter;\n\
    \        }\n        else if(vowels.includes(nextLetter)){\n            newMessage\
    \ += letter;\n        }\n        else{\n            newMessage += nextLetter;\n\
    \        }\n    }\n    return newMessage;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it!\n<|/ c |>\n<| c |>\nNo\
    \ problem! Glad to help!\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppab9z8bv.js:32\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let newLetter = letter.charCodeAt(0) - 96;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\
    \uFFF4'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp564yjyf1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp564yjyf1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\
    \uFFF3\uFFF4',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let letterIndex = alphabet.indexOf(letter);\n\
    \    let letter2 = alphabet.charAt(letterIndex+1);\n    newMessage += alphabet.charAt(letterIndex)\
    \ + letter2;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpegofx2xo.js:15\n    let letterIndex = alphabet.indexOf(letter);\n\
    \                      ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmpegofx2xo.js:15:23)\n    at test (/tmp/tmpegofx2xo.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpegofx2xo.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let vowels = \"aeiou\"\
    ;\n    let messageArray = message.split(\"\");\n    let encodedMessage = \"\"\
    ;\n    for(let i = 0; i < messageArray.length; i++){\n        let letter = messageArray[i];\n\
    \        let letterIndex = alphabet.indexOf(letter);\n        let vowelIndex =\
    \ vowels.indexOf(letter);\n        let nextLetterIndex = letterIndex + 2;\n  \
    \      if(letterIndex < alphabet.length){\n            encodedMessage += alphabet[letterIndex];\n\
    \        }\n        if(vowelIndex > -1){\n            encodedMessage += vowels[vowelIndex];\n\
    \        }\n        if(nextLetterIndex < alphabet.length){\n            encodedMessage\
    \ += alphabet[nextLetterIndex];\n        }\n    }\n    return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefinedbundefinedbundefinedbundefinedb'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqxiil1v2.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqxiil1v2.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefinedbundefinedbundefinedbundefinedb',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i\
    \ + 1);\n        var newLetter = letter;\n        if(letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n  \
    \          newLetter = nextLetter;\n        }\n        newMessage += newLetter;\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo3ep0d3k.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3ep0d3k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    for(let\
    \ i = 0; i < message.length; i++){\n        let letter = message[i];\n       \
    \ encodedMessage += letter.charCodeAt(0) - 65 + vowels.indexOf(letter.charAt(1))\
    \ + vowels.indexOf(letter.charAt(2));\n    }\n    return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1941819'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_qbwv4sl.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_qbwv4sl.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1941819',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    \n    for(var i=0; i<message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        var nextLetter = letters.charAt(index+1);\n        var nextIndex\
    \ = nextLetter.charCodeAt(0) - 97;\n        var nextNextLetter = letters.charAt(index+2);\n\
    \        \n        if(vowels.indexOf(letter) > -1){\n            newMessage +=\
    \ letter;\n        }\n        else if(letters.indexOf(letter) > -1 && vowels.indexOf(nextLetter)\
    \ > -1){\n            newMessage += nextLetter;\n        }\n        else if(letters.indexOf(letter)\
    \ > -1 && letters.indexOf(nextLetter) > -1 && vowels.indexOf(nextNextLetter) >\
    \ -1){\n            newMessage += nextNextLetter;\n        }\n        else if(letters.indexOf(letter)\
    \ > -1 && letters.indexOf(nextLetter) > -1 && letters.indexOf(nextNextLetter)\
    \ > -1 && vowels.indexOf(nextNextNextLetter) > -1){\n            newMessage +=\
    \ nextNextNextLetter;\n        }\n        else if(letters.indexOf(letter) > -1\
    \ && letters.indexOf(nextLetter) > -1 && letters.indexOf(nextNextLetter) > -1\
    \ && letters.indexOf(nextNextNextLetter) > -1 && vowels.indexOf(nextNextNextNextLetter)\
    \ > -1){\n            newMessage += nextNextNextNextLetter;\n        }\n     \
    \   else if(letters.indexOf(letter) > -1 && letters.indexOf(nextLetter) > -1 &&\
    \ letters.indexOf(nextNextLetter) > -1 && letters.indexOf(nextNextNextLetter)\
    \ > -1 && letters.indexOf(nextNextNextNextLetter) > -1 && vowels.indexOf(nextNextNextNextNextLetter)\
    \ > -1){\n            newMessage += nextNextNextNextNextLetter;\n        }\n \
    \       else if(letters.indexOf(letter) > -1 && letters.indexOf(nextLetter) >\
    \ -1 && letters.indexOf(nextNextLetter) > -1 && letters.indexOf(nextNextNextLetter)\
    \ > -1 && letters.indexOf(nextNextNextNextLetter) > -1 && letters.indexOf(nextNextNextNextNextLetter)\
    \ > -1 && vowels.indexOf(nextNextNextNextNextNextLetter) > -1){\n            newMessage\
    \ += nextNextNextNextNextNextLetter;\n        }\n        else if(letters.indexOf(letter)\
    \ > -1 && letters.indexOf(nextLetter) > -1 && letters.indexOf(nextNextLetter)\
    \ > -1 && letters.indexOf(nextNextNextLetter) > -1 && letters.indexOf(nextNextNextNextLetter)\
    \ > -1 && letters.indexOf(nextNextNextNextNextLetter) > -1 && letters.indexOf(nextNextNextNextNextNext\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo7zhhv12.js:44\n        else if(letters.indexOf(letter) > -1 &&\
    \ letters.indexOf(nextLetter) > -1 && letters.indexOf(nextNextLetter) > -1 &&\
    \ letters.indexOf(nextNextNextLetter) > -1 && letters.indexOf(nextNextNextNextLetter)\
    \ > -1 && letters.indexOf(nextNextNextNextNextLetter) > -1 && letters.indexOf(nextNextNextNextNextNext\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nSyntaxError: missing ) after argument list\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        if(letter.toLowerCase() === \"a\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"e\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"i\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"o\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"u\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"y\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"h\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"k\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"l\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"s\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"t\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"g\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"m\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"c\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"g\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"s\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"c\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"g\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"s\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"c\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"g\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"s\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"c\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(letter.toLowerCase() ===\
    \ \"g\"){\n            newMessage += letter.toUpperCase();\n        }\n      \
    \  else if(letter.toLowerCase() === \"s\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter.toLowerCase() === \"c\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        else if(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0hovazdv.js:95\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n\
    \    let letter = message[i];\n    let vowelIndex = letter.search(vowels);\n \
    \   let letterIndex = letter.search(letters);\n    if(vowelIndex != -1){\n   \
    \   encodedMessage += letter.substr(0, vowelIndex) + letters[letterIndex + 1];\n\
    \    }\n    else{\n      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphr2fb0ln.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphr2fb0ln.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    newMessage = newMessage.toLowerCase();\n \
    \   let vowels = \"aeiou\";\n    let vowelsArray = vowels.split(\"\");\n    for(let\
    \ i = 0; i < vowelsArray.length; i++){\n        let index = newMessage.indexOf(vowelsArray[i]);\n\
    \        if(index != -1){\n            let nextVowel = vowelsArray[i+1];\n   \
    \         newMessage = newMessage.replace(vowelsArray[i], nextVowel);\n      \
    \  }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tundefinedst'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj7y_7bkx.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj7y_7bkx.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tundefinedst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var vowels = \"AEIOU\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        if(index != -1){\n            var nextVowel = alphabet.charAt(index+1);\n\
    \            newMessage += alphabet.charAt(index) + nextVowel;\n        }\n  \
    \      else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TUEFSTTU'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpif4r8278.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpif4r8278.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TUEFSTTU',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    if(letter === \"a\" || letter === \"e\" ||\
    \ letter === \"i\" || letter === \"o\" || letter === \"u\"){\n      newMessage\
    \ += letter;\n    }\n    else{\n      newMessage += letter.charCodeAt(0) - 65\
    \ + 2;\n    }\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'2162021'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_68lk0zv.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_68lk0zv.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '2162021',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for (let i = 0; i < newMessage.length; i++){\n        let letter =\
    \ newMessage.charAt(i);\n        let vowel = \"AEIOUaeiou\";\n        let index\
    \ = vowel.indexOf(letter);\n        if (index != -1){\n            newMessage\
    \ = newMessage.split(letter).join(vowel.charAt(index+2));\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpldcibv4j.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpldcibv4j.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n \
    \   for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var index = alphabet.indexOf(letter);\n        if(index != -1){\n   \
    \         var nextLetter = alphabet[index + 1];\n            var nextIndex = alphabet.indexOf(nextLetter);\n\
    \            if(nextIndex != -1){\n                var nextVowel = alphabet[nextIndex];\n\
    \                newMessage += vowels.indexOf(nextVowel) + letter;\n         \
    \   }else{\n                newMessage += letter;\n            }\n        }else{\n\
    \            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzd87v6bw.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzd87v6bw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = 'aeiouy';\n    var letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    \n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letter.charCodeAt(0) - 97;\n        if(index >= 0){\n   \
    \         result += letters[index];\n        }\n        else{\n            result\
    \ += letter;\n        }\n    }\n    \n    for(var i=0; i<vowels.length; i++){\n\
    \        var letter = vowels.charAt(i);\n        var index = letter.charCodeAt(0)\
    \ - 97;\n        if(index >= 0){\n            result += letters[index];\n    \
    \    }\n        else{\n            result += letter;\n        }\n    }\n    \n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TESTaeiouy'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9y62v1yz.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9y62v1yz.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TESTaeiouy',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage += String.fromCharCode(newLetter);\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_jcl5l0w.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_jcl5l0w.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747173
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = alphabet.indexOf(letter);\n\
    \        var nextVowel = alphabet.indexOf(vowels[index], index + 1);\n       \
    \ newMessage += alphabet.charAt(nextVowel);\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'tgst'\n    at test (/tmp/tmpruuxjfa1.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpruuxjfa1.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"AEIOUaeiou\";\n    var letters\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    \n    for(var\
    \ i = 0; i < message.length; i++){\n        var letter = message.charAt(i);\n\
    \        var index = letters.indexOf(letter);\n        \n        if(index != -1){\n\
    \            var nextLetter = letters[index + 1];\n            \n            if(vowels.indexOf(nextLetter)\
    \ != -1){\n                newMessage += letter;\n            }\n            else{\n\
    \                newMessage += nextLetter;\n            }\n        }\n       \
    \ else{\n            newMessage += letter;\n        }\n    }\n    \n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TFTT'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphx27s09r.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphx27s09r.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TFTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\"){\n            newMessage += letter;\n       \
    \ }\n        else if(letter === \"A\" || letter === \"E\" || letter === \"I\"\
    \ || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter === \"b\" || letter === \"c\" || letter ===\
    \ \"d\" || letter === \"f\" || letter === \"g\" || letter === \"h\" || letter\
    \ === \"j\" || letter === \"k\" || letter === \"l\" || letter === \"m\" || letter\
    \ === \"n\" || letter === \"p\" || letter === \"q\" || letter === \"r\" || letter\
    \ === \"s\" || letter === \"t\" || letter === \"v\" || letter === \"w\" || letter\
    \ === \"x\" || letter === \"y\" || letter === \"z\"){\n            newMessage\
    \ += letter;\n        }\n        else if(letter === \"B\" || letter === \"C\"\
    \ || letter === \"D\" || letter === \"F\" || letter === \"G\" || letter === \"\
    H\" || letter === \"J\" || letter === \"K\" || letter === \"L\" || letter ===\
    \ \"M\" || letter === \"N\" || letter === \"P\" || letter === \"Q\" || letter\
    \ === \"R\" || letter === \"S\" || letter === \"T\" || letter === \"V\" || letter\
    \ === \"W\" || letter === \"X\" || letter === \"Y\" || letter === \"Z\"){\n  \
    \          newMessage += letter.toUpperCase();\n        }\n        else if(letter\
    \ === \"q\" || letter === \"w\" || letter === \"e\" || letter === \"r\" || letter\
    \ === \"t\" || letter === \"y\" || letter === \"u\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"p\" || letter === \"a\" || letter === \"s\"){\n  \
    \          newMessage += letter;\n        }\n        else if(letter === \"Q\"\
    \ || letter === \"W\" || letter === \"E\" || letter === \"R\" || letter === \"\
    T\" || letter === \"Y\" || letter === \"U\" || letter === \"I\" || letter ===\
    \ \"O\" || letter === \"P\" || letter === \"A\" || letter === \"S\"){\n      \
    \      newMessage += letter.toUpperCase();\n        }\n        else if(letter\
    \ === \"z\" || letter === \"x\" || letter === \"v\" || letter === \"b\" || letter\
    \ === \"n\" || letter === \"m\" || letter === \"l\" || letter === \"k\" || letter\
    \ === \"j\" || letter === \"h\" || letter === \"g\" || letter === \"f\" || letter\
    \ === \"d\" || letter === \"c\" || letter === \"b\" || letter === \"a\" || letter\
    \ === \"q\" || letter === \"w\" || letter === \"e\" || letter === \"r\" || letter\
    \ === \"t\" || letter === \"y\" || letter === \"u\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"p\" || \nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpleiq5mkl.js:35\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let index = letters.indexOf(letter);\n    if(index\
    \ != -1){\n      newMessage += letters[index];\n      if(index == letters.length\
    \ - 1){\n        newMessage += letters[index + 1];\n      }\n    }\n    else if(vowels.indexOf(letter)\
    \ != -1){\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'E'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpu9gkiid0.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpu9gkiid0.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'E',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n        encodedMessage += String.fromCharCode(encodedLetter);\n    }\n\
    \    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvyskzke_.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvyskzke_.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    for(var i=0; i<message.length; i++){\n        var letter\
    \ = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n      \
    \  if(letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u'){\n            result += letter;\n            i++;\n        }\n     \
    \   else if(letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O' ||\
    \ letter == 'U'){\n            result += letter;\n            i++;\n        }\n\
    \        else if(letter == 'b' || letter == 'c' || letter == 'd' || letter ==\
    \ 'f' || letter == 'g' || letter == 'h' || letter == 'j' || letter == 'k' || letter\
    \ == 'l' || letter == 'm' || letter == 'n' || letter == 'p' || letter == 'q' ||\
    \ letter == 'r' || letter == 's' || letter == 't' || letter == 'v' || letter ==\
    \ 'w' || letter == 'x' || letter == 'y' || letter == 'z'){\n            result\
    \ += letter;\n            i++;\n        }\n        else if(letter == 'B' || letter\
    \ == 'C' || letter == 'D' || letter == 'F' || letter == 'G' || letter == 'H' ||\
    \ letter == 'J' || letter == 'K' || letter == 'L' || letter == 'M' || letter ==\
    \ 'N' || letter == 'P' || letter == 'Q' || letter == 'R' || letter == 'S' || letter\
    \ == 'T' || letter == 'V' || letter == 'W' || letter == 'X' || letter == 'Y' ||\
    \ letter == 'Z'){\n            result += letter;\n            i++;\n        }\n\
    \        else if(letter == '0' || letter == '1' || letter == '2' || letter ==\
    \ '3' || letter == '4' || letter == '5' || letter == '6' || letter == '7' || letter\
    \ == '8' || letter == '9'){\n            result += letter;\n            i++;\n\
    \        }\n        else if(letter == '!' || letter == '@' || letter == '#' ||\
    \ letter == '$' || letter == '%' || letter == '^' || letter == '&' || letter ==\
    \ '*' || letter == '(' || letter == ')' || letter == '-' || letter == '_' || letter\
    \ == '+' || letter == '=' || letter == '{' || letter == '}' || letter == '[' ||\
    \ letter == ']' || letter == '|' || letter == '\\\\' || letter == ';' || letter\
    \ == ':' || letter == '<' || letter == '>' || letter == '?' || letter == '/' ||\
    \ letter == '\\\\' || letter == '\"' || letter == '\\''){\n            result\
    \ += letter;\n            i++;\n        }\n        else if(letter == '~' || letter\
    \ == '`' || letter == '{' || letter == '}' || letter == '[' || letter == ']' ||\
    \ letter == '|' || letter\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpg2u_wrh9.js:41\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message[i];\n        if(letters.indexOf(letter) > -1){\n\
    \            newMessage += letter;\n        }\n        else if(vowels.indexOf(letter)\
    \ > -1){\n            let index = vowels.indexOf(letter);\n            let nextLetter\
    \ = letters[index + 1];\n            newMessage += letters[(letters.indexOf(letter)\
    \ + index) % letters.length];\n            newMessage += nextLetter;\n       \
    \ }\n        else{\n            newMessage += letter;\n        }\n    }\n    return\
    \ newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TfhST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp55s8dnew.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp55s8dnew.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TfhST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = '';\n  for (var i = 0; i < message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    if (letter === 'a' || letter === 'e' || letter ===\
    \ 'i' || letter === 'o' || letter === 'u'){\n      result += letter;\n    }\n\
    \    else {\n      var index = alphabet.indexOf(letter);\n      result += alphabet[(index\
    \ + 1) % alphabet.length];\n    }\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0dr2q49_.js:19\n      var index = alphabet.indexOf(letter);\n \
    \                 ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmp0dr2q49_.js:19:19)\n    at test (/tmp/tmp0dr2q49_.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0dr2q49_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"y\"){\n            newMessage += \"Y\";\n     \
    \   }else{\n            newMessage += letter;\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplyb2oc4f.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplyb2oc4f.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var index = letters.indexOf(letter);\n\
    \        if(index != -1){\n            var nextLetter = letters[index + 1];\n\
    \            newMessage += nextLetter;\n        }\n        else{\n           \
    \ newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpibltlnmo.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpibltlnmo.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let index = letter.charCodeAt(0) - 97;\n  \
    \  newMessage += String.fromCharCode(index+2);\n  }\n  return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF5\uFFE6\uFFF4\
    \uFFF5'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf6jx1rgr.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf6jx1rgr.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF5\uFFE6\
    \uFFF4\uFFF5',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter == \"a\"){\n       \
    \     newMessage += \"A\";\n        }\n        else if(letter == \"e\"){\n   \
    \         newMessage += \"E\";\n        }\n        else if(letter == \"i\"){\n\
    \            newMessage += \"I\";\n        }\n        else if(letter == \"o\"\
    ){\n            newMessage += \"O\";\n        }\n        else if(letter == \"\
    u\"){\n            newMessage += \"U\";\n        }\n        else if(letter ==\
    \ \"A\"){\n            newMessage += \"a\";\n        }\n        else if(letter\
    \ == \"E\"){\n            newMessage += \"e\";\n        }\n        else if(letter\
    \ == \"I\"){\n            newMessage += \"i\";\n        }\n        else if(letter\
    \ == \"O\"){\n            newMessage += \"o\";\n        }\n        else if(letter\
    \ == \"U\"){\n            newMessage += \"u\";\n        }\n        else{\n   \
    \         newMessage += letter;\n        }\n    }\n    return newMessage;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TeST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsgujipw1.js:57:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsgujipw1.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TeST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message.charAt(i);\n        if (letter === \"a\" || letter\
    \ === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\"){\n  \
    \          newMessage += letter;\n        }\n        else if (letter === \"A\"\
    \ || letter === \"E\" || letter === \"I\" || letter === \"O\" || letter === \"\
    U\"){\n            newMessage += letter.toUpperCase();\n        }\n        else\
    \ if (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n \
    \       }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if (letter === \"a\" || letter === \"e\" || letter ===\
    \ \"i\" || letter === \"o\" || letter === \"u\"){\n            newMessage += letter.toLowerCase();\n\
    \        }\n        else if (letter === \"A\" || letter === \"E\" || letter ===\
    \ \"I\" || letter === \"O\" || letter === \"U\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyhzrwfml.js:60\n        else if (letter === \"A\" || letter ===\
    \ \"E\" || letter === \"I\" || letter === \"O\" || letter === \"U\n          \
    \                                                                            \
    \              ^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        if (letter === \"a\"){\n   \
    \         encodedMessage += \"a\";\n        } else if (letter === \"e\"){\n  \
    \          encodedMessage += \"e\";\n        } else if (letter === \"i\"){\n \
    \           encodedMessage += \"i\";\n        } else if (letter === \"o\"){\n\
    \            encodedMessage += \"o\";\n        } else if (letter === \"u\"){\n\
    \            encodedMessage += \"u\";\n        } else if (letter === \"A\"){\n\
    \            encodedMessage += \"A\";\n        } else if (letter === \"E\"){\n\
    \            encodedMessage += \"E\";\n        } else if (letter === \"I\"){\n\
    \            encodedMessage += \"I\";\n        } else if (letter === \"O\"){\n\
    \            encodedMessage += \"O\";\n        } else if (letter === \"U\"){\n\
    \            encodedMessage += \"U\";\n        } else {\n            encodedMessage\
    \ += letter;\n        }\n    }\n    return encodedMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpb0ycosnb.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpb0ycosnb.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        newMessage += letter;\n      \
    \  if(letter.toLowerCase() === letter){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else{\n            var vowels = \"aeiouAEIOU\";\n        \
    \    var vowelIndex = vowels.indexOf(letter.toLowerCase());\n            if(vowelIndex\
    \ > -1){\n                var vowelLetter = vowels.charAt(vowelIndex+1);\n   \
    \             newMessage += vowelLetter;\n            }\n        }\n    }\n  \
    \  return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEiST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp75lulgmb.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp75lulgmb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEiST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message.charAt(i);\n    let nextLetter = message.charAt(i + 1);\n \
    \   let nextLetterIndex = alphabet.indexOf(nextLetter);\n    let nextLetterLetter\
    \ = alphabet[nextLetterIndex + 1];\n    newMessage += letter.toUpperCase();\n\
    \    newMessage += nextLetterLetter;\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdwg0pxrb.js:16\n    let nextLetterIndex = alphabet.indexOf(nextLetter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmpdwg0pxrb.js:16:27)\n    at test (/tmp/tmpdwg0pxrb.js:29:20)\n\
    \    at Object.<anonymous> (/tmp/tmpdwg0pxrb.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzamp6iyy.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzamp6iyy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 96;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF4\uFFE5\uFFF3\
    \uFFF4'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp37ahqp6m.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp37ahqp6m.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF4\uFFE5\
    \uFFF3\uFFF4',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowelsCount = vowels.length;\n  \
    \  var lettersCount = letters.length;\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message.charAt(i);\n        if(letters.indexOf(letter)\
    \ == -1){\n            newMessage += letter;\n        }else{\n            var\
    \ index = letters.indexOf(letter);\n            var nextLetter = letters.charAt(index\
    \ + 1);\n            if(vowels.indexOf(nextLetter) == -1){\n                newMessage\
    \ += letter;\n            }else{\n                var nextVowel = vowels.indexOf(nextLetter);\n\
    \                var nextVowelIndex = letters.indexOf(nextVowel);\n          \
    \      var nextVowelLetter = letters.charAt(nextVowelIndex + 1);\n           \
    \     newMessage += letters.charAt(nextVowelIndex);\n            }\n        }\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_3wt_jw9.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_3wt_jw9.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let encodedMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let encodedLetter = letter.toUpperCase();\n    let vowels = \"AEIOUaeiou\"\
    ;\n    let vowelIndex = vowels.indexOf(letter);\n    let vowel2Index = vowels.indexOf(letter.toUpperCase());\n\
    \    if(vowelIndex > -1 && vowel2Index > -1){\n      encodedMessage += vowels[vowelIndex\
    \ + 2];\n      encodedMessage += vowels[vowel2Index + 2];\n    }\n    else if(vowelIndex\
    \ > -1){\n      encodedMessage += vowels[vowelIndex + 2];\n    }\n    else if(vowel2Index\
    \ > -1){\n      encodedMessage += vowels[vowel2Index + 2];\n    }\n    else{\n\
    \      encodedMessage += letter;\n    }\n  }\n  return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7ugempf0.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ugempf0.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        var newLetter = letter;\n        for(var\
    \ j=0; j<vowels.length; j++){\n            if(letter == vowels[j]){\n        \
    \        newLetter = vowels[j+1];\n                break;\n            }\n   \
    \     }\n        newMessage += newLetter;\n    }\n    return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpz0c2iopy.js:16\n        for(var j=0; j<vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpz0c2iopy.js:16:24)\n    at test (/tmp/tmpz0c2iopy.js:32:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpz0c2iopy.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = message;\n  for(let i = 0; i < message.length; i++){\n   \
    \ let letter = message[i];\n    let index = english.indexOf(letter);\n    newMessage\
    \ = newMessage.replace(letter, english[index + 2]);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3oj8qq77.js:15\n    let index = english.indexOf(letter);\n    \
    \            ^\n\nReferenceError: english is not defined\n    at encode (/tmp/tmp3oj8qq77.js:15:17)\n\
    \    at test (/tmp/tmp3oj8qq77.js:26:20)\n    at Object.<anonymous> (/tmp/tmp3oj8qq77.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let letterIndex = englishLetters.indexOf(letter);\n\
    \    let vowelIndex = vowels.indexOf(letter);\n    let nextLetter = englishLetters[letterIndex\
    \ + 1];\n    if (vowelIndex > -1){\n      newMessage += nextLetter;\n    } else\
    \ {\n      newMessage += letter;\n    }\n  }\n  return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpssqmvkor.js:15\n    let letterIndex = englishLetters.indexOf(letter);\n\
    \                      ^\n\nReferenceError: englishLetters is not defined\n  \
    \  at encode (/tmp/tmpssqmvkor.js:15:23)\n    at test (/tmp/tmpssqmvkor.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpssqmvkor.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        let vowels = \"AEIOUaeiou\";\n\
    \        let newLetter = vowels.indexOf(letter);\n        if(newLetter === -1){\n\
    \            newLetter = letter.toUpperCase();\n        }\n        newMessage\
    \ += newLetter;\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'T1ST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6rzqpu7n.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6rzqpu7n.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'T1ST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var nextLetter = messageArray[i+1];\n        if(letter == \"a\" || letter\
    \ == \"e\" || letter == \"i\" || letter == \"o\" || letter == \"u\"){\n      \
    \      newMessage += letter;\n        }else if(letter == \"A\" || letter == \"\
    E\" || letter == \"I\" || letter == \"O\" || letter == \"U\"){\n            newMessage\
    \ += letter.toUpperCase();\n        }else if(letter == \"a\" || letter == \"e\"\
    \ || letter == \"i\" || letter == \"o\" || letter == \"u\" || letter == \"A\"\
    \ || letter == \"E\" || letter == \"I\" || letter == \"O\" || letter == \"U\"\
    ){\n            newMessage += letter;\n        }else{\n            newMessage\
    \ += letter.toUpperCase();\n        }\n        if(nextLetter == \"a\" || nextLetter\
    \ == \"e\" || nextLetter == \"i\" || nextLetter == \"o\" || nextLetter == \"u\"\
    ){\n            newMessage += nextLetter;\n        }else if(nextLetter == \"A\"\
    \ || nextLetter == \"E\" || nextLetter == \"I\" || nextLetter == \"O\" || nextLetter\
    \ == \"U\"){\n            newMessage += nextLetter.toUpperCase();\n        }else\
    \ if(nextLetter == \"a\" || nextLetter == \"e\" || nextLetter == \"i\" || nextLetter\
    \ == \"o\" || nextLetter == \"u\" || nextLetter == \"A\" || nextLetter == \"E\"\
    \ || nextLetter == \"I\" || nextLetter == \"O\" || nextLetter == \"U\"){\n   \
    \         newMessage += nextLetter;\n        }else{\n            newMessage +=\
    \ nextLetter.toUpperCase();\n        }\n    }\n    return newMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpylz31qqz.js:33\n            newMessage += nextLetter.toUpperCase();\n\
    \                                     ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'toUpperCase')\n    at encode (/tmp/tmpylz31qqz.js:33:38)\n\
    \    at test (/tmp/tmpylz31qqz.js:44:20)\n    at Object.<anonymous> (/tmp/tmpylz31qqz.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter;\n    for(let j = 0; j < vowels.length;\
    \ j++){\n      if(letter == vowels[j]){\n        newLetter = vowels[j + 2];\n\
    \      }\n    }\n    newMessage += newLetter;\n  }\n  return newMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgeia8288.js:16\n    for(let j = 0; j < vowels.length; j++){\n \
    \                      ^\n\nReferenceError: vowels is not defined\n    at encode\
    \ (/tmp/tmpgeia8288.js:16:24)\n    at test (/tmp/tmpgeia8288.js:31:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpgeia8288.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        newMessage += letter.toUpperCase();\n\
    \    }\n    for(let i = 0; i < newMessage.length; i++){\n        let letter =\
    \ newMessage.charAt(i);\n        let nextLetter = newMessage.charAt(i+1);\n  \
    \      if(letter == \"A\" || letter == \"E\" || letter == \"I\" || letter == \"\
    O\" || letter == \"U\"){\n            newMessage += letter;\n        }\n     \
    \   else if(letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\"){\n            newMessage += letter;\n        }\n \
    \       else if(letter == \"B\" || letter == \"C\" || letter == \"D\" || letter\
    \ == \"F\" || letter == \"G\" || letter == \"H\" || letter == \"J\" || letter\
    \ == \"K\" || letter == \"L\" || letter == \"M\" || letter == \"N\" || letter\
    \ == \"P\" || letter == \"R\" || letter == \"S\" || letter == \"T\" || letter\
    \ == \"V\" || letter == \"W\" || letter == \"X\" || letter == \"Y\" || letter\
    \ == \"Z\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"b\" || letter == \"c\" || letter == \"d\" || letter == \"f\" || letter\
    \ == \"g\" || letter == \"h\" || letter == \"j\" || letter == \"k\" || letter\
    \ == \"l\" || letter == \"m\" || letter == \"n\" || letter == \"p\" || letter\
    \ == \"r\" || letter == \"s\" || letter == \"t\" || letter == \"v\" || letter\
    \ == \"w\" || letter == \"x\" || letter == \"y\" || letter == \"z\"){\n      \
    \      newMessage += letter;\n        }\n        else if(letter == \"0\"){\n \
    \           newMessage += letter;\n        }\n        else if(letter == \"1\"\
    ){\n            newMessage += letter;\n        }\n        else if(letter == \"\
    2\"){\n            newMessage += letter;\n        }\n        else if(letter ==\
    \ \"3\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"4\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"5\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"6\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"7\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"8\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"9\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"/\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"-\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"_\"){\n            newMessage += letter;\n        }\n        else if(letter\
    \ == \"(\"){\n            newMessage += \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy0jy10iu.js:73\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    let vowels = \"aeiouAEIOU\";\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < message.length; i++){\n\
    \        if(letters.indexOf(message[i]) > -1){\n            newMessage += message[i];\n\
    \        }\n        else if(vowels.indexOf(message[i]) > -1){\n            let\
    \ index = vowels.indexOf(message[i]);\n            newMessage += letters[index\
    \ + 2];\n        }\n        else{\n            newMessage += message[i];\n   \
    \     }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TiST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwr7wvq4e.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwr7wvq4e.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TiST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  let vowels = \"aeiouAEIOU\";\n  let letters = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message[i];\n    let index = letters.indexOf(letter);\n    let\
    \ nextLetter = letters[(index+1)%letters.length];\n    newMessage += letters.indexOf(letter)===0\
    \ ? letter : nextLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'aaaa'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprhvsja_k.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprhvsja_k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'aaaa',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message.toLowerCase()\n    let newMessageArray = newMessage.split(\"\
    \")\n    let newMessageArrayLength = newMessageArray.length\n    let newMessageArrayLength2\
    \ = newMessageArrayLength/2\n    let newMessageArrayLength3 = newMessageArrayLength/3\n\
    \    let newMessageArrayLength4 = newMessageArrayLength/4\n    let newMessageArrayLength5\
    \ = newMessageArrayLength/5\n    let newMessageArrayLength6 = newMessageArrayLength/6\n\
    \    let newMessageArrayLength7 = newMessageArrayLength/7\n    let newMessageArrayLength8\
    \ = newMessageArrayLength/8\n    let newMessageArrayLength9 = newMessageArrayLength/9\n\
    \    let newMessageArrayLength10 = newMessageArrayLength/10\n    let newMessageArrayLength11\
    \ = newMessageArrayLength/11\n    let newMessageArrayLength12 = newMessageArrayLength/12\n\
    \    let newMessageArrayLength13 = newMessageArrayLength/13\n    let newMessageArrayLength14\
    \ = newMessageArrayLength/14\n    let newMessageArrayLength15 = newMessageArrayLength/15\n\
    \    let newMessageArrayLength16 = newMessageArrayLength/16\n    let newMessageArrayLength17\
    \ = newMessageArrayLength/17\n    let newMessageArrayLength18 = newMessageArrayLength/18\n\
    \    let newMessageArrayLength19 = newMessageArrayLength/19\n    let newMessageArrayLength20\
    \ = newMessageArrayLength/20\n    let newMessageArrayLength21 = newMessageArrayLength/21\n\
    \    let newMessageArrayLength22 = newMessageArrayLength/22\n    let newMessageArrayLength23\
    \ = newMessageArrayLength/23\n    let newMessageArrayLength24 = newMessageArrayLength/24\n\
    \    let newMessageArrayLength25 = newMessageArrayLength/25\n    let newMessageArrayLength26\
    \ = newMessageArrayLength/26\n    let newMessageArrayLength27 = newMessageArrayLength/27\n\
    \    let newMessageArrayLength28 = newMessageArrayLength/28\n    let newMessageArrayLength29\
    \ = newMessageArrayLength/29\n    let newMessageArrayLength30 = newMessageArrayLength/30\n\
    \    let newMessageArrayLength31 = newMessageArrayLength/31\n    let newMessageArrayLength32\
    \ = newMessageArrayLength/32\n    let newMessageArrayLength33 = newMessageArrayLength/33\n\
    \    let newMessageArrayLength34 = newMessageArrayLength/34\n    let newMessageArrayLength35\
    \ = newMessageArrayLength/35\n    let newMessageArrayLength36 = newMessageArrayLength/36\n\
    \    let newMessageArrayLength37 = newMessageArrayLength/37\n    let newMessageArrayLength38\
    \ = newMessageArrayLength/38\n    let newMessageArrayLength\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpp72pji7f.js:52\n    let newMessageArrayLength\n        ^\n\nSyntaxError:\
    \ Identifier 'newMessageArrayLength' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageArray = message.split(\"\");\n  var newMessage = \"\";\n  for(var\
    \ i = 0; i < messageArray.length; i++){\n    var letter = messageArray[i];\n \
    \   var newLetter = letter.toUpperCase();\n    var newVowel = vowels[letter];\n\
    \    var newVowelIndex = vowels.indexOf(newVowel);\n    var newVowelIndex2 = vowels.indexOf(newVowel.toUpperCase());\n\
    \    var newVowelIndex3 = vowels.indexOf(newVowel.toUpperCase().charAt(0));\n\
    \    var newVowelIndex4 = vowels.indexOf(newVowel.toUpperCase().charAt(1));\n\
    \    var newVowelIndex5 = vowels.indexOf(newVowel.toUpperCase().charAt(2));\n\
    \    var newVowelIndex6 = vowels.indexOf(newVowel.toUpperCase().charAt(3));\n\
    \    var newVowelIndex7 = vowels.indexOf(newVowel.toUpperCase().charAt(4));\n\
    \    var newVowelIndex8 = vowels.indexOf(newVowel.toUpperCase().charAt(5));\n\
    \    var newVowelIndex9 = vowels.indexOf(newVowel.toUpperCase().charAt(6));\n\
    \    var newVowelIndex10 = vowels.indexOf(newVowel.toUpperCase().charAt(7));\n\
    \    var newVowelIndex11 = vowels.indexOf(newVowel.toUpperCase().charAt(8));\n\
    \    var newVowelIndex12 = vowels.indexOf(newVowel.toUpperCase().charAt(9));\n\
    \    var newVowelIndex13 = vowels.indexOf(newVowel.toUpperCase().charAt(10));\n\
    \    var newVowelIndex14 = vowels.indexOf(newVowel.toUpperCase().charAt(11));\n\
    \    var newVowelIndex15 = vowels.indexOf(newVowel.toUpperCase().charAt(12));\n\
    \    var newVowelIndex16 = vowels.indexOf(newVowel.toUpperCase().charAt(13));\n\
    \    var newVowelIndex17 = vowels.indexOf(newVowel.toUpperCase().charAt(14));\n\
    \    var newVowelIndex18 = vowels.indexOf(newVowel.toUpperCase().charAt(15));\n\
    \    var newVowelIndex19 = vowels.indexOf(newVowel.toUpperCase().charAt(16));\n\
    \    var newVowelIndex20 = vowels.indexOf(newVowel.toUpperCase().charAt(17));\n\
    \    var newVowelIndex21 = vowels.indexOf(newVowel.toUpperCase().charAt(18));\n\
    \    var newVowelIndex22 = vowels.indexOf(newVowel.toUpperCase().charAt(19));\n\
    \    var newVowelIndex23 = vowels.indexOf(newVowel.toUpperCase().charAt(20));\n\
    \    var newVow\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpcr52ud63.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for (let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter;\n    let vowels = \"AEIOUaeiou\"\
    ;\n    for (let j = 0; j < vowels.length; j++){\n      if (letter === vowels[j]){\n\
    \        newLetter = vowels[j + 1];\n        break;\n      }\n    }\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TIST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5jhfwq4r.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5jhfwq4r.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++){\n \
    \       let letter = message[i];\n        let letterIndex = alphabet.indexOf(letter);\n\
    \        let nextLetterIndex = letterIndex + 2;\n        if (nextLetterIndex <\
    \ alphabet.length){\n            newMessage += alphabet[nextLetterIndex];\n  \
    \      }\n        else {\n            newMessage += letter;\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph17ytskg.js:15\n        let letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmph17ytskg.js:15:27)\n    at test (/tmp/tmph17ytskg.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmph17ytskg.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i=0; i<message.length; i++){\n      \
    \  var letter = message.charAt(i);\n        newMessage += letter;\n        if(letter.toLowerCase()\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"i\"){\n            newMessage += \"I\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"y\"){\n            newMessage += \"Y\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"y\"){\n            newMessage += \"Y\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"i\"){\n            newMessage += \"I\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"y\"){\n            newMessage += \"Y\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"i\"){\n            newMessage += \"I\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"y\"){\n            newMessage += \"Y\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"i\"){\n            newMessage += \"I\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"o\"){\n            newMessage += \"O\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"u\"){\n            newMessage += \"U\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"y\"){\n            newMessage += \"Y\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"a\"){\n            newMessage += \"A\";\n        }\n        else if(letter.toLowerCase()\
    \ == \"e\"){\n            newMessage += \"E\";\n        }\n        else if(letter.toLowerCase\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7egcy5ig.js:104\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter == \"a\" || letter == \"e\" || letter == \"i\" || letter ==\
    \ \"o\" || letter == \"u\"){\n            newMessage += letter;\n        }\n \
    \       else if(letter == \"A\" || letter == \"E\" || letter == \"I\" || letter\
    \ == \"O\" || letter == \"U\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter == \"b\" || letter == \"c\" || letter == \"\
    d\" || letter == \"f\" || letter == \"g\" || letter == \"h\" || letter == \"j\"\
    \ || letter == \"k\" || letter == \"l\" || letter == \"m\" || letter == \"n\"\
    \ || letter == \"p\" || letter == \"q\" || letter == \"r\" || letter == \"s\"\
    \ || letter == \"t\" || letter == \"v\" || letter == \"w\" || letter == \"x\"\
    \ || letter == \"y\" || letter == \"z\"){\n            newMessage += letter;\n\
    \        }\n        else if(letter == \"B\" || letter == \"C\" || letter == \"\
    D\" || letter == \"F\" || letter == \"G\" || letter == \"H\" || letter == \"J\"\
    \ || letter == \"K\" || letter == \"L\" || letter == \"M\" || letter == \"N\"\
    \ || letter == \"P\" || letter == \"Q\" || letter == \"R\" || letter == \"S\"\
    \ || letter == \"T\" || letter == \"V\" || letter == \"W\" || letter == \"X\"\
    \ || letter == \"Y\" || letter == \"Z\"){\n            newMessage += letter.toUpperCase();\n\
    \        }\n        else if(letter == \"0\"){\n            newMessage += \"0\"\
    ;\n        }\n        else if(letter == \"1\"){\n            newMessage += \"\
    1\";\n        }\n        else if(letter == \"2\"){\n            newMessage +=\
    \ \"2\";\n        }\n        else if(letter == \"3\"){\n            newMessage\
    \ += \"3\";\n        }\n        else if(letter == \"4\"){\n            newMessage\
    \ += \"4\";\n        }\n        else if(letter == \"5\"){\n            newMessage\
    \ += \"5\";\n        }\n        else if(letter == \"6\"){\n            newMessage\
    \ += \"6\";\n        }\n        else if(letter == \"7\"){\n            newMessage\
    \ += \"7\";\n        }\n        else if(letter == \"8\"){\n            newMessage\
    \ += \"8\";\n        }\n        else if(letter == \"9\"){\n            newMessage\
    \ += \"9\";\n        }\n        else if(letter == \"/\"){\n            newMessage\
    \ += \"/\";\n        }\n        else if(letter == \"-\"){\n            newMessage\
    \ += \"-\";\n        }\n        else if(letter == \"_\"){\n            newMessage\
    \ += \"_\";\n        }\n        else if(letter == \"@\"){\n            newMessage\
    \ += \"@\";\n        }\n        else if(letter == \"#\"){\n            newMessage\
    \ += \"#\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqs9jcsnu.js:71\n            newMessage += \"#\n               \
    \           ^^\n\nSyntaxError: Invalid or unexpected token\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter.toUpperCase();\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.toLowerCase();\n    newMessage +=\
    \ newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"A\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"a\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"E\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"e\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"I\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"i\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"O\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"o\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"U\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"u\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"Y\");\n    newMessage\
    \ += newLetter;\n  }\n  for(let i = 0; i < message.length; i++){\n    let letter\
    \ = message[i];\n    let newLetter = letter.replace(vowels, \"y\");\n    newMessage\
    \ += newLetter;\n  }\n  return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplwd89orh.js:25\n    let newLetter = letter.replace(vowels, \"A\"\
    );\n                                   ^\n\nReferenceError: vowels is not defined\n\
    \    at encode (/tmp/tmplwd89orh.js:25:36)\n    at test (/tmp/tmplwd89orh.js:91:20)\n\
    \    at Object.<anonymous> (/tmp/tmplwd89orh.js:98:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        var letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letters.indexOf(letter) > -1){\n            newMessage += letter;\n\
    \        }\n        else if(vowels.indexOf(letter) > -1){\n            newMessage\
    \ += letters[letters.indexOf(letter)+1];\n        }\n        else{\n         \
    \   newMessage += letter;\n        }\n    }\n    return newMessage;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TaST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_vumfjws.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_vumfjws.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TaST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let newMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n    let\
    \ letter = message[i];\n    let newLetter = letter.charCodeAt(0) - 65;\n    newMessage\
    \ += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9ad52ju1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ad52ju1.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747174
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message[i];\n        newMessage += letter.charCodeAt(0) -\
    \ 65;\n    }\n    for(let i = 0; i < message.length; i++){\n        let letter\
    \ = message[i];\n        let index = newMessage.indexOf(letter);\n        newMessage\
    \ = newMessage.substr(0, index) + letter.charCodeAt(0) - 65 + newMessage.substr(index\
    \ + 1);\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'19184191941819'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpm1f4_qf1.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm1f4_qf1.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '19184191941819',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    var vowels = ['a','e','i','o','u'];\n    var letters\
    \ = ['t','h','k','s'];\n    for(var i=0;i<message.length;i++){\n        var letter\
    \ = message.charAt(i);\n        if(vowels.indexOf(letter)>-1){\n            result\
    \ += letters[vowels.indexOf(letter)];\n        }else{\n            result += letter;\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcnk689tr.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcnk689tr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  for(var i=0; i<message.length; i++){\n    var letter\
    \ = message.charAt(i);\n    var index = letter.charCodeAt(0) - 65;\n    result\
    \ += String.fromCharCode(index+2);\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x15\\x06\\\
    x14\\x15'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg1sojtyc.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg1sojtyc.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x15\\x06\\\
    x14\\x15',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for(let i = 0; i < message.length; i++){\n  \
    \  let letter = message.charAt(i);\n    let encodedLetter = letter.charCodeAt(0)\
    \ - 65;\n    encodedMessage += String.fromCharCode(encodedLetter);\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxk8qb1oe.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxk8qb1oe.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var nextLetter = message.charAt(i+1);\n   \
    \ if(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"\
    o\" || letter === \"u\"){\n      newMessage += letter;\n      i++;\n    }\n  \
    \  else if(letter === \"A\" || letter === \"E\" || letter === \"I\" || letter\
    \ === \"O\" || letter === \"U\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"a\" || letter === \"A\"){\n     \
    \ newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter ===\
    \ \"e\" || letter === \"E\"){\n      newMessage += letter.toUpperCase();\n   \
    \   i++;\n    }\n    else if(letter === \"i\" || letter === \"I\"){\n      newMessage\
    \ += letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"o\" ||\
    \ letter === \"O\"){\n      newMessage += letter.toUpperCase();\n      i++;\n\
    \    }\n    else if(letter === \"u\" || letter === \"U\"){\n      newMessage +=\
    \ letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"y\" || letter\
    \ === \"Y\"){\n      newMessage += letter.toUpperCase();\n      i++;\n    }\n\
    \    else if(letter === \"h\" || letter === \"H\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"w\" || letter === \"W\"){\n     \
    \ newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter ===\
    \ \"s\" || letter === \"S\"){\n      newMessage += letter.toUpperCase();\n   \
    \   i++;\n    }\n    else if(letter === \"d\" || letter === \"D\"){\n      newMessage\
    \ += letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"t\" ||\
    \ letter === \"T\"){\n      newMessage += letter.toUpperCase();\n      i++;\n\
    \    }\n    else if(letter === \"m\" || letter === \"M\"){\n      newMessage +=\
    \ letter.toUpperCase();\n      i++;\n    }\n    else if(letter === \"g\" || letter\
    \ === \"G\"){\n      newMessage += letter.toUpperCase();\n      i++;\n    }\n\
    \    else if(letter === \"b\" || letter === \"B\"){\n      newMessage += letter.toUpperCase();\n\
    \      i++;\n    }\n    else if(letter === \"p\" || letter === \"P\"){\n     \
    \ newMessage += letter.toUpperCase();\n      i++;\n    }\n    else if(letter ===\
    \ \"v\" || letter === \"V\"){\n      newMessage += letter.toUpperCase();\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpb5q62zav.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = message;\n    for(let i = 0; i < message.length; i++){\n\
    \        let letter = message.charAt(i);\n        let newLetter = letter.charCodeAt(0)\
    \ - 65;\n        newMessage = newMessage.replace(letter, String.fromCharCode(newLetter));\n\
    \    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\\x13\\x04\\\
    x12\\x13'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppijlfg9l.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmppijlfg9l.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\\x13\\x04\\\
    x12\\x13',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var newMessage = \"\";\n  for(var i = 0; i < message.length; i++){\n    var\
    \ letter = message.charAt(i);\n    var newLetter = letter.charCodeAt(0) - 97;\n\
    \    newMessage += String.fromCharCode(newLetter);\n  }\n  return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'\uFFF3\uFFE4\uFFF2\
    \uFFF3'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwy4d_7ak.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwy4d_7ak.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '\uFFF3\uFFE4\
    \uFFF2\uFFF3',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    let newMessage = \"\";\n    for(let i = 0; i < message.length; i++){\n  \
    \      let letter = message.charAt(i);\n        if(letter === \"a\"){\n      \
    \      newMessage += \"A\";\n        }else if(letter === \"e\"){\n           \
    \ newMessage += \"E\";\n        }else if(letter === \"i\"){\n            newMessage\
    \ += \"I\";\n        }else if(letter === \"o\"){\n            newMessage += \"\
    O\";\n        }else if(letter === \"u\"){\n            newMessage += \"U\";\n\
    \        }else if(letter === \"A\"){\n            newMessage += \"a\";\n     \
    \   }else if(letter === \"E\"){\n            newMessage += \"e\";\n        }else\
    \ if(letter === \"I\"){\n            newMessage += \"i\";\n        }else if(letter\
    \ === \"O\"){\n            newMessage += \"o\";\n        }else if(letter === \"\
    U\"){\n            newMessage += \"u\";\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'e'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyrkzid2w.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyrkzid2w.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'e',\n  expected:\
    \ 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var result = '';\n    for(var i = 0; i < message.length; i++){\n        var\
    \ letter = message.charAt(i);\n        var nextLetter = message.charAt(i+1);\n\
    \        if(letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' ||\
    \ letter == 'u'){\n            result += nextLetter;\n        }\n        else{\n\
    \            result += letter;\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfuhpyfyc.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfuhpyfyc.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n\
    \    let letter = message[i];\n    let encodedLetter = letter.toUpperCase();\n\
    \    let vowelIndex = letter.indexOf(\"A\");\n    let vowel = letter.charAt(vowelIndex\
    \ + 1);\n    let encodedVowel = vowel.toUpperCase();\n    let encodedVowelIndex\
    \ = encodedVowel.indexOf(\"A\");\n    let encodedVowel2 = encodedVowel.charAt(encodedVowelIndex\
    \ + 1);\n    encodedMessage += encodedLetter + encodedVowel2;\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TTEESSTT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmphntq57de.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmphntq57de.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TTEESSTT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    var vowels = \"aeiouAEIOU\";\n    for(var i =\
    \ 0; i < message.length; i++){\n        var letter = message.charAt(i);\n    \
    \    var index = vowels.indexOf(letter);\n        if(index == -1){\n         \
    \   newMessage += letter;\n        }else{\n            var nextLetter = message.charAt(i+1);\n\
    \            var nextIndex = vowels.indexOf(nextLetter);\n            if(nextIndex\
    \ == -1){\n                newMessage += letter;\n            }else{\n       \
    \         newMessage += vowels[index];\n                newMessage += vowels[nextIndex+1];\n\
    \            }\n        }\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph7e20uvz.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph7e20uvz.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var messageArray = message.split(\"\");\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < messageArray.length; i++){\n        var letter = messageArray[i];\n\
    \        var letterIndex = alphabet.indexOf(letter);\n        if(letterIndex >\
    \ -1){\n            var letterIndex = letterIndex + 2;\n            if(letterIndex\
    \ > 26){\n                letterIndex = 0;\n            }\n            newMessage\
    \ += alphabet[letterIndex];\n        }\n        else{\n            newMessage\
    \ += letter;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ollsrtp.js:16\n        var letterIndex = alphabet.indexOf(letter);\n\
    \                          ^\n\nReferenceError: alphabet is not defined\n    at\
    \ encode (/tmp/tmp9ollsrtp.js:16:27)\n    at test (/tmp/tmp9ollsrtp.js:36:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9ollsrtp.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  let messageArray = message.split(\"\");\n  let newMessage = \"\";\n  for(let\
    \ i = 0; i < messageArray.length; i++){\n    let letter = messageArray[i];\n \
    \   let letterIndex = englishAlphabet.indexOf(letter);\n    let letterIndex2 =\
    \ letterIndex + 1;\n    let letterIndex3 = letterIndex2 + 1;\n    let letterIndex4\
    \ = letterIndex3 + 1;\n    let letterIndex5 = letterIndex4 + 1;\n    let letterIndex6\
    \ = letterIndex5 + 1;\n    let letterIndex7 = letterIndex6 + 1;\n    let letterIndex8\
    \ = letterIndex7 + 1;\n    let letterIndex9 = letterIndex8 + 1;\n    let letterIndex10\
    \ = letterIndex9 + 1;\n    let letterIndex11 = letterIndex10 + 1;\n    let letterIndex12\
    \ = letterIndex11 + 1;\n    let letterIndex13 = letterIndex12 + 1;\n    let letterIndex14\
    \ = letterIndex13 + 1;\n    let letterIndex15 = letterIndex14 + 1;\n    let letterIndex16\
    \ = letterIndex15 + 1;\n    let letterIndex17 = letterIndex16 + 1;\n    let letterIndex18\
    \ = letterIndex17 + 1;\n    let letterIndex19 = letterIndex18 + 1;\n    let letterIndex20\
    \ = letterIndex19 + 1;\n    let letterIndex21 = letterIndex20 + 1;\n    let letterIndex22\
    \ = letterIndex21 + 1;\n    let letterIndex23 = letterIndex22 + 1;\n    let letterIndex24\
    \ = letterIndex23 + 1;\n    let letterIndex25 = letterIndex24 + 1;\n    let letterIndex26\
    \ = letterIndex25 + 1;\n    let letterIndex27 = letterIndex26 + 1;\n    let letterIndex28\
    \ = letterIndex27 + 1;\n    let letterIndex29 = letterIndex28 + 1;\n    let letterIndex30\
    \ = letterIndex29 + 1;\n    let letterIndex31 = letterIndex30 + 1;\n    let letterIndex32\
    \ = letterIndex31 + 1;\n    let letterIndex33 = letterIndex32 + 1;\n    let letterIndex34\
    \ = letterIndex33 + 1;\n    let letterIndex35 = letterIndex34 + 1;\n    let letterIndex36\
    \ = letterIndex35 + 1;\n    let letterIndex37 = letterIndex36 + 1;\n    let letterIndex38\
    \ = letterIndex37 + 1;\n    let letterIndex39 = letterIndex38 + 1;\n    let letterIndex40\
    \ = letterIndex39 + 1;\n    let letterIndex41 = letterIndex40 + 1;\n    let letterIndex42\
    \ = letterIndex41 + 1;\n    let letterIndex43 = letterIndex42 + 1;\n    let letterIndex44\
    \ = letterIndex43 + 1;\n    let letterIndex45 = letterIndex44 + 1;\n    let letterIndex46\
    \ = letterIndex45 + 1;\n    let letterIndex47 = letterIndex46 + 1;\n    let letterIndex48\
    \ = letterIndex47 + 1;\n    let letterIndex49 = letterIndex48 + 1;\n    let \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo52dukqr.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659747175
