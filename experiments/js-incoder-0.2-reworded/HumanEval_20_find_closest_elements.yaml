name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number\
    \ = numbers[0];\n\tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\
    \t\t\n\t\tif(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\t\
    closest_numbers.push(second_smallest_number);\n\t\n\treturn closest_numbers;\n\
    }\n", "    var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var result = [];\n    for(var i = smallest; i <= largest; i++){\n\
    \        result.push(i);\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "\tvar closest_elements = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_elements.push(smallest_number);\n\tclosest_elements.push(largest_number);\n\
    \treturn closest_elements;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar distance = numbers[i];\n\
    \t\t\n\t\tfor(var j=0; j<closest_numbers.length; j++){\n\t\t\tvar current_distance\
    \ = closest_numbers[j];\n\t\t\t\n\t\t\tif(current_distance > distance){\n\t\t\t\
    \tclosest_numbers[j] = distance;\n\t\t\t\tclosest_distances[j] = i;\n\t\t\t}\n\
    \t\t}\n\t}\n\t\n\treturn [closest_numbers[closest_distances[0]], closest_numbers[closest_distances[1]]];\n\
    }\n", "  var smallest = Math.min.apply(null, numbers);\n  var largest = Math.max.apply(null,\
    \ numbers);\n  var result = [];\n  for(var i = smallest; i <= largest; i++){\n\
    \    if(numbers.indexOf(i) !== -1){\n      result.push(i);\n    }\n  }\n  return\
    \ result;\n}\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\telse if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  var\
    \ result = [];\n  var smallest;\n  var largest;\n  for(var i=0; i<numbers.length;\
    \ i++){\n    smallest = numbers[i];\n    largest = numbers[i];\n    for(var j=i+1;\
    \ j<numbers.length; j++){\n      if(numbers[j] < smallest){\n        smallest\
    \ = numbers[j];\n      }\n      if(numbers[j] > largest){\n        largest = numbers[j];\n\
    \      }\n    }\n    result.push(smallest);\n    result.push(largest);\n  }\n\
    \  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[closest_index];\n\t\tif(distance < closest_distance){\n\t\t\tclosest_index\
    \ = i;\n\t\t\tclosest_distance = distance;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index + 1]);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    var result = [];\n    var\
    \ smallest = numbers[0];\n    var largest = numbers[0];\n    for(var i = 1; i\
    \ < numbers.length; i++){\n        if(numbers[i] < smallest){\n            smallest\
    \ = numbers[i];\n        }\n        else if(numbers[i] > largest){\n         \
    \   largest = numbers[i];\n        }\n    }\n    result.push(smallest);\n    result.push(largest);\n\
    \    return result;\n}\n", "  var result = [];\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n\
    \  result.push(largest);\n  return result;\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_distance = Number.MAX_VALUE;\n\tvar closest_index = 0;\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar distance = distanceBetween(numbers[i],\
    \ numbers[closest_index]);\n\t\t\n\t\tif(distance < closest_distance){\n\t\t\t\
    closest_distance = distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index + 1]);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "    var closest_numbers = [];\n    var smallest_number = numbers[0];\n\
    \    var largest_number = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] < smallest_number){\n            smallest_number\
    \ = numbers[i];\n        }\n        if(numbers[i] > largest_number){\n       \
    \     largest_number = numbers[i];\n        }\n    }\n    closest_numbers.push(smallest_number);\n\
    \    closest_numbers.push(largest_number);\n    return closest_numbers;\n}\n",
  "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) === -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\
    \tvar closest_index = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tvar j;\n\t\
    var k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\
    \tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\
    \tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\
    \tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\
    \tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\
    \tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\
    \tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\
    \tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\
    \tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\
    \tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\
    \tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\
    \tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\
    \tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\tvar i;\n\tvar j;\n\
    \tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\tvar q;\n\tvar r;\n\
    \tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\tvar y;\n\tvar z;\n\
    \tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;\n\tvar f;\n\tvar g;\n\tvar h;\n\
    \tvar i;\n\tvar j;\n\tvar k;\n\tvar l;\n\tvar m;\n\tvar n;\n\tvar o;\n\tvar p;\n\
    \tvar q;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar v;\n\tvar w;\n\tvar x;\n\
    \tvar y;\n\tvar z;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar d;\n\tvar e;", "\tvar\
    \ smallest_difference = Number.MAX_VALUE;\n\tvar closest_numbers = [];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tvar difference = Math.abs(numbers[i] -\
    \ numbers[i - 1]);\n\t\tif(difference < smallest_difference){\n\t\t\tsmallest_difference\
    \ = difference;\n\t\t\tclosest_numbers = [numbers[i]];\n\t\t}else{\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\t\
    var smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] === smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\
    \t\t}\n\t\tif(numbers[i] === largest_number){\n\t\t\tclosest_numbers.push(largest_number);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar closest_numbers = [smallest_number];\n\tvar closest_number = smallest_number;\n\
    \tvar smallest_difference = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_difference = Math.abs(numbers[i] - closest_number);\n\
    \t\tif(current_difference < smallest_difference){\n\t\t\tsmallest_difference =\
    \ current_difference;\n\t\t\tclosest_number = numbers[i];\n\t\t}\n\t\tclosest_numbers.push(closest_number);\n\
    \t}\n\treturn closest_numbers;\n}\n", "\tvar smallest = Math.min(numbers[0], numbers[1]);\n\
    \tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result = [smallest, largest];\n\
    \tfor(var i = 2; i < numbers.length; i++){\n\t\tvar current = Math.max(numbers[i],\
    \ numbers[i-1]);\n\t\tvar next = Math.min(numbers[i], numbers[i-1]);\n\t\tif(current\
    \ < smallest){\n\t\t\tsmallest = current;\n\t\t\tresult[0] = smallest;\n\t\t}\n\
    \t\tif(current > largest){\n\t\t\tlargest = current;\n\t\t\tresult[1] = largest;\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "    var smallest_number = numbers[0];\n\
    \    var largest_number = numbers[0];\n    var smallest_index = 0;\n    var largest_index\
    \ = 0;\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] <\
    \ smallest_number){\n            smallest_number = numbers[i];\n            smallest_index\
    \ = i;\n        }\n        else if(numbers[i] > largest_number){\n           \
    \ largest_number = numbers[i];\n            largest_index = i;\n        }\n  \
    \  }\n    return [smallest_number, largest_number];\n}\n", "  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n\
    }\n", "  var smallest_diff, smallest_diff_index, largest_diff, largest_diff_index;\n\
    \  smallest_diff = Number.MAX_VALUE;\n  smallest_diff_index = 0;\n  largest_diff\
    \ = Number.MAX_VALUE;\n  largest_diff_index = 0;\n  numbers.forEach(function(number){\n\
    \    var diff = Math.abs(number - numbers[smallest_diff_index]);\n    if(diff\
    \ < smallest_diff){\n      smallest_diff = diff;\n      smallest_diff_index =\
    \ smallest_diff_index + 1;\n    }\n    diff = Math.abs(number - numbers[largest_diff_index]);\n\
    \    if(diff > largest_diff){\n      largest_diff = diff;\n      largest_diff_index\
    \ = largest_diff_index + 1;\n    }\n  });\n  return [numbers[smallest_diff_index],\
    \ numbers[largest_diff_index]];\n}\n", "\tvar smallest = Math.min(numbers);\n\t\
    var largest = Math.max(numbers);\n\tvar result = [];\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tresult.push(smallest);\n\t\t}\n\t\telse\
    \ if(numbers[i] == largest){\n\t\t\tresult.push(largest);\n\t\t}\n\t\telse{\n\t\
    \t\tvar mid = Math.round((smallest + largest)/2);\n\t\t\tif(numbers[i] < mid){\n\
    \t\t\t\tresult.push(mid);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult.push(largest);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers = [];\n\t\
    var closest_distance = Number.MAX_VALUE;\n\tvar closest_index = 0;\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i] - closest_numbers[closest_index];\n\
    \t\t\n\t\tif(current_distance < closest_distance){\n\t\t\tclosest_distance = current_distance;\n\
    \t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\treturn [closest_numbers[closest_index],\
    \ closest_numbers[closest_index + 1]];\n}\n", "\tvar closest_numbers = [];\n\t\
    var smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) > -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "  var result = [];\n  var smallest = numbers[0];\n  var largest\
    \ = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n\
    \      largest = numbers[i];\n    }\n  }\n  if(smallest == largest){\n    result.push(smallest);\n\
    \  }\n  else{\n    result.push(smallest);\n    result.push(largest);\n  }\n  return\
    \ result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number =\
    \ numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] <\
    \ smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\telse if(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest_number, largest_number];\n}\n", "\tvar closest_numbers = [];\n\tvar\
    \ closest_distances = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    var current_distance = numbers[i];\n\t\tvar current_number = numbers[i];\n\t\t\
    \n\t\tfor(var j = i + 1; j < numbers.length; j++){\n\t\t\tvar next_distance =\
    \ numbers[j];\n\t\t\tvar next_number = numbers[j];\n\t\t\t\n\t\t\tvar distance\
    \ = Math.abs(current_number - next_number);\n\t\t\t\n\t\t\tif(distance < current_distance){\n\
    \t\t\t\tcurrent_distance = distance;\n\t\t\t\tcurrent_number = next_number;\n\t\
    \t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\treturn [closest_numbers, closest_distances];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var\
    \ i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) != -1){\n\t\t\t\
    result.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "    var smallest = Math.min.apply(Math,\
    \ numbers);\n    var largest = Math.max.apply(Math, numbers);\n    var result\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] ===\
    \ smallest || numbers[i] === largest){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  var smallest = Math.min(numbers);\n\
    \  var largest = Math.max(numbers);\n  var result = [];\n  for(var i = 0; i<numbers.length;\
    \ i++){\n    if(numbers[i] < smallest || numbers[i] > largest){\n      continue;\n\
    \    }\n    result.push(numbers[i]);\n  }\n  return result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\t\n\tfor(var i = 0; i< numbers.length;\
    \ i++){\n\t\tvar current_distance = numbers[i];\n\t\tvar current_number = numbers[i];\n\
    \t\t\n\t\tfor(var j = i+1; j< numbers.length; j++){\n\t\t\tvar next_distance =\
    \ numbers[j];\n\t\t\tvar next_number = numbers[j];\n\t\t\t\n\t\t\t//Check if the\
    \ next number is closer to the current number\n\t\t\tif(Math.abs(next_number -\
    \ current_number) < Math.abs(current_number - next_number)){\n\t\t\t\tcurrent_number\
    \ = next_number;\n\t\t\t\tcurrent_distance = next_distance;\n\t\t\t}\n\t\t}\n\t\
    \t\n\t\tclosest_numbers.push(current_number);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\tclosest_numbers.sort();\n\tclosest_distances.sort();\n\t\n\treturn\
    \ [closest_numbers[0], closest_numbers[closest_numbers.length-1]];\n}\n", "\t\
    var smallest = Math.min(numbers[0], numbers[1]);\n\tvar largest = Math.max(numbers[0],\
    \ numbers[1]);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tresult.push(i);\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min(numbers);\n\
    \tvar largest = Math.max(numbers);\n\tvar result = [];\n\tvar i;\n\tfor(i = 0;\
    \ i < numbers.length; i++){\n\t\tif(numbers[i] >= smallest && numbers[i] <= largest){\n\
    \t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "    var result\
    \ = [];\n    var smallest = Math.min(numbers[0], numbers[1]);\n    var largest\
    \ = Math.max(numbers[0], numbers[1]);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] < smallest || numbers[i] > largest){\n        \
    \    result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", "\t\
    var closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  \
    \  var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] === smallest){\n            result.push(smallest);\n  \
    \      }\n        else if(numbers[i] === largest){\n            result.push(largest);\n\
    \        }\n        else{\n            result.push(numbers[i]);\n        }\n \
    \   }\n    return result;\n}\n", "  var result = [];\n  var smallest = null;\n\
    \  var largest = null;\n  for(var i = 0; i < numbers.length; i++){\n    if(smallest\
    \ === null || numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n \
    \   if(largest === null || numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  if(smallest !== null){\n    result.push(smallest);\n  }\n  if(largest\
    \ !== null){\n    result.push(largest);\n  }\n  return result;\n}\n", "  var closest_elements\
    \ = [];\n  var smallest_number = numbers[0];\n  var largest_number = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest_number){\n\
    \      smallest_number = numbers[i];\n    }\n    if(numbers[i] > largest_number){\n\
    \      largest_number = numbers[i];\n    }\n  }\n  if(smallest_number == largest_number){\n\
    \    closest_elements.push(smallest_number);\n  }\n  else{\n    closest_elements.push(smallest_number);\n\
    \    closest_elements.push(largest_number);\n  }\n  return closest_elements;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\t\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_numbers[closest_index];\n\t\t\
    \n\t\tif(distance < closest_distance){\n\t\t\tclosest_distance = distance;\n\t\
    \t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_distances.push(closest_distance);\n\t\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_numbers[closest_index];\n\t\t\
    \n\t\tif(distance < closest_distance){\n\t\t\tclosest_distance = distance;\n\t\
    \t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_distances.push(closest_distance);\n\t\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "  var smallest_difference = Number.MAX_VALUE;\n  var closest_numbers =\
    \ [];\n  for(var i = 1; i < numbers.length; i++){\n    var difference = Math.abs(numbers[i]\
    \ - numbers[i - 1]);\n    if(difference < smallest_difference){\n      smallest_difference\
    \ = difference;\n      closest_numbers = [numbers[i]];\n    }\n    else if(difference\
    \ === smallest_difference){\n      closest_numbers.push(numbers[i]);\n    }\n\
    \  }\n  return closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tvar smallest_distance = Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\t\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t}\n\t\t\n\t\tif(current_distance > largest_distance){\n\
    \t\t\tlargest_number = current_number;\n\t\t\tlargest_distance = current_distance;\n\
    \t\t}\n\t\t\n\t\tclosest_numbers.push(smallest_number);\n\t\tclosest_numbers.push(largest_number);\n\
    \t\tclosest_distances.push(smallest_distance);\n\t\tclosest_distances.push(largest_distance);\n\
    \t}\n\t\n\treturn closest_numbers;\n}\n", "    var smallest = Math.min.apply(Math,\
    \ numbers);\n    var largest = Math.max.apply(Math, numbers);\n    var result\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] ===\
    \ smallest || numbers[i] === largest){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar smallest = numbers[0];\n\t\
    var largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = 0;\n\tvar i;\n\tfor(i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_numbers[closest_index];\n\t\t\
    if(closest_distance > distance){\n\t\t\tclosest_numbers[closest_index] = numbers[i];\n\
    \t\t\tclosest_distances[closest_index] = distance;\n\t\t\tclosest_index = i;\n\
    \t\t\tclosest_distance = distance;\n\t\t}\n\t}\n\treturn [closest_numbers[closest_index],\
    \ closest_numbers[closest_index + 1]];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\
    \t\tif(index != -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n",
  "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i = smallest; i <= largest; i++){\n\
    \    if(numbers.indexOf(i) !== -1){\n      result.push(i);\n    }\n  }\n  return\
    \ result;\n}\n", "  var smallest = Math.min(numbers);\n  var largest = Math.max(numbers);\n\
    \  var result = [];\n  var i;\n  for(i = 0; i < numbers.length; i++){\n    if(numbers[i]\
    \ === smallest || numbers[i] === largest){\n      result.push(numbers[i]);\n \
    \   }\n  }\n  return result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tvar i, diff;\n\
    \tfor(i = 0; i < numbers.length; i++){\n\t\tdiff = largest - numbers[i];\n\t\t\
    if(diff === 0){\n\t\t\tresult.push(numbers[i]);\n\t\t}else if(diff < smallest){\n\
    \t\t\tresult.push(numbers[i]);\n\t\t}else{\n\t\t\tresult.push(smallest);\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "    var smallest = Math.min.apply(Math, numbers);\n\
    \    var largest = Math.max.apply(Math, numbers);\n    var result = [];\n    for(var\
    \ i = smallest; i <= largest; i++){\n        result.push(i);\n    }\n    return\
    \ result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number =\
    \ numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] <\
    \ smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > biggest_number){\n\t\t\tbiggest_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest_number, biggest_number];\n}\n", "  var smallest = Math.min.apply(null,\
    \ numbers);\n  var largest = Math.max.apply(null, numbers);\n  var result = [];\n\
    \  for(var i=0;i<numbers.length;i++){\n    if(numbers[i] == smallest){\n     \
    \ result.push(smallest);\n    }\n    else if(numbers[i] == largest){\n      result.push(largest);\n\
    \    }\n    else{\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\t\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i] - numbers[i\
    \ - 1];\n\t\t\n\t\tif(current_distance < 0){\n\t\t\tcurrent_distance = -current_distance;\n\
    \t\t}\n\t\t\n\t\tclosest_numbers.push(numbers[i - 1]);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\tclosest_numbers.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\t\n\
    \tclosest_distances.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\t\n\treturn\
    \ closest_numbers.concat(closest_distances);\n}\n", "  var result = [];\n  var\
    \ smallest = null;\n  var largest = null;\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    if (smallest == null || numbers[i] < smallest){\n      smallest =\
    \ numbers[i];\n    }\n    if (largest == null || numbers[i] > largest){\n    \
    \  largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n  result.push(largest);\n\
    \  return result;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n  var\
    \ largest = Math.max.apply(Math, numbers);\n  return [smallest, largest];\n}\n",
  "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i <\
    \ numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\
    \treturn [smallest, largest];\n}\n", "  var result = [];\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  if(smallest == largest){\n\
    \    result.push(smallest);\n  }\n  else{\n    result.push(smallest);\n    result.push(largest);\n\
    \  }\n  return result;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var\
    \ i=0;i<numbers.length;i++){\n    if(numbers[i] < smallest || numbers[i] > largest){\n\
    \      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\
    \tif(numbers[i] === smallest || numbers[i] === largest){\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i];\n\t\tvar current_number = numbers[i];\n\t\t\n\t\tfor(var j = i\
    \ + 1; j < numbers.length; j++){\n\t\t\tvar next_distance = numbers[j];\n\t\t\t\
    var next_number = numbers[j];\n\t\t\t\n\t\t\t//If the next number is closer than\
    \ the current, then update it\n\t\t\tif(next_distance < current_distance){\n\t\
    \t\t\tcurrent_distance = next_distance;\n\t\t\t\tcurrent_number = next_number;\n\
    \t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\t\tclosest_distances.push(current_distance);\n\
    \t}\n\t\n\treturn [closest_numbers, closest_distances];\n}\n", "    var smallest\
    \ = Math.min(numbers);\n    var largest = Math.max(numbers);\n    var result =\
    \ [];\n    for(var i=0;i<numbers.length;i++){\n        if(numbers[i] == smallest){\n\
    \            result.push(smallest);\n        }\n        else if(numbers[i] ==\
    \ largest){\n            result.push(largest);\n        }\n        else{\n   \
    \         result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n",
  "  var smallest = Math.min.apply(null, numbers);\n  var largest = Math.max.apply(null,\
    \ numbers);\n  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest){\n      result.push(smallest);\n    }\n    else if(numbers[i] ==\
    \ largest){\n      result.push(largest);\n    }\n    else{\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    var results = [];\n    var smallest\
    \ = numbers[0];\n    var largest = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] < smallest || smallest === undefined){\n      \
    \      smallest = numbers[i];\n        }\n        if(numbers[i] > largest || largest\
    \ === undefined){\n            largest = numbers[i];\n        }\n    }\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] === smallest || numbers[i]\
    \ === largest){\n            continue;\n        }\n        results.push(numbers[i]);\n\
    \    }\n    return results;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var\
    \ i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) != -1){\n\t\t\t\
    result.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest_number =\
    \ numbers[0];\n\tvar biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > biggest_number){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - smallest_number;\n\t\tvar current_distance_square = current_distance * current_distance;\n\
    \t\tsmallest_number = current_number;\n\t\tfor(var j = 0; j < closest_numbers.length;\
    \ j++){\n\t\t\tvar closest_number = closest_numbers[j];\n\t\t\tvar closest_distance_square\
    \ = closest_number * closest_number;\n\t\t\tvar closest_distance = current_distance_square\
    \ + closest_distance_square;\n\t\t\tif(closest_distance < closest_distances[j]){\n\
    \t\t\t\tclosest_distances[j] = closest_distance;\n\t\t\t\tclosest_numbers[j] =\
    \ closest_number;\n\t\t\t}\n\t\t}\n\t}\n\tclosest_numbers.sort(function(a, b){\n\
    \t\treturn a - b;\n\t});\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[0];\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_numbers = [numbers[i]];\n\t\t\tclosest_distance = distance;\n\t\t\
    }else{\n\t\t\tclosest_numbers.push(numbers[i]);\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \tvar closest_index = 0;\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar\
    \ current_distance = numbers[i] - closest_numbers[closest_index];\n\t\tif(current_distance\
    \ < closest_distance){\n\t\t\tclosest_index = i;\n\t\t\tclosest_distance = current_distance;\n\
    \t\t}\n\t}\n\tclosest_numbers.push(numbers[closest_index]);\n\treturn closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest_number, largest_number];\n}\n", "\tvar closest_numbers = [];\n\tvar\
    \ closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance =\
    \ 0;\n\tvar current_distance;\n\tvar current_index;\n\tvar i;\n\n\tfor(i = 0;\
    \ i < numbers.length; i++){\n\t\tcurrent_distance = numbers[i];\n\t\tcurrent_index\
    \ = i;\n\t\tclosest_distance = current_distance;\n\t\tclosest_index = i;\n\t\t\
    for(var j = i + 1; j < numbers.length; j++){\n\t\t\tcurrent_distance = numbers[j];\n\
    \t\t\tif(current_distance < closest_distance){\n\t\t\t\tclosest_distance = current_distance;\n\
    \t\t\t\tclosest_index = j;\n\t\t\t}\n\t\t}\n\t\tclosest_numbers.push(numbers[closest_index]);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number\
    \ = numbers[1];\n\tvar closest_numbers = [];\n\t\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(smallest_number > numbers[i]){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\t\n\t\tif(second_smallest_number > numbers[i]){\n\t\t\tsecond_smallest_number\
    \ = numbers[i];\n\t\t}\n\t\t\n\t\tif(smallest_number == second_smallest_number){\n\
    \t\t\tclosest_numbers.push(smallest_number);\n\t\t}\n\t\t\n\t\tif(smallest_number\
    \ < second_smallest_number){\n\t\t\tclosest_numbers.push(second_smallest_number);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "    var smallest = Math.min.apply(Math,\
    \ numbers);\n    var largest = Math.max.apply(Math, numbers);\n    var result\
    \ = [];\n    for(var i = smallest; i <= largest; i++){\n        result.push(i);\n\
    \    }\n    return result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "  var smallest_number\
    \ = numbers[0];\n  var second_smallest_number = numbers[0];\n  var closest_numbers\
    \ = [];\n  var closest_numbers_index = 0;\n  var smallest_difference = Number.MAX_VALUE;\n\
    \  var second_smallest_difference = Number.MAX_VALUE;\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    var current_number = numbers[i];\n    var current_difference = Math.abs(current_number\
    \ - smallest_number);\n    if(current_difference < smallest_difference){\n   \
    \   smallest_difference = current_difference;\n      closest_numbers_index = i;\n\
    \      smallest_number = current_number;\n    }\n    \n    var current_second_difference\
    \ = Math.abs(current_number - second_smallest_number);\n    if(current_second_difference\
    \ < second_smallest_difference){\n      second_smallest_difference = current_second_difference;\n\
    \      closest_numbers_index = i;\n      second_smallest_number = current_number;\n\
    \    }\n  }\n  closest_numbers.push(smallest_number);\n  closest_numbers.push(second_smallest_number);\n\
    \  return closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar\
    \ second_smallest_number = numbers[1];\n\tvar closest_numbers = [];\n\tfor(var\
    \ i=2; i<numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\t\
    smallest_number = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > second_smallest_number){\n\
    \t\t\tsecond_smallest_number = numbers[i];\n\t\t}\n\t\tclosest_numbers.push(numbers[i]);\n\
    \t}\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar distance = calculate_distance(numbers[i],\
    \ numbers[closest_index]);\n\t\t\n\t\tif(distance < closest_distance){\n\t\t\t\
    closest_distance = distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index]);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest = numbers[0];\n\
    \tvar largest = numbers[0];\n\tvar smallest_index = -1;\n\tvar largest_index =\
    \ -1;\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\
    \t\t\tsmallest = numbers[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t\tif(numbers[i]\
    \ > largest){\n\t\t\tlargest = numbers[i];\n\t\t\tlargest_index = i;\n\t\t}\n\t\
    }\n\treturn [smallest, largest];\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) !== -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) > -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tvar i;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] === smallest\
    \ || numbers[i] === largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\t\
    return result;\n}\n", "  var smallest_number = numbers[0];\n  var second_smallest_number\
    \ = numbers[1];\n  var closest_numbers = [smallest_number, second_smallest_number];\n\
    \  for(var i = 2; i < numbers.length; i++){\n    var current_number = numbers[i];\n\
    \    var current_smallest_number = smallest_number;\n    var current_second_smallest_number\
    \ = second_smallest_number;\n    if(current_number < smallest_number){\n     \
    \ smallest_number = current_number;\n      closest_numbers = [smallest_number,\
    \ current_second_smallest_number];\n    }\n    else if(current_number > smallest_number){\n\
    \      second_smallest_number = current_number;\n    }\n  }\n  return closest_numbers;\n\
    }\n", "  var smallest_number = numbers[0];\n  var largest_number = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest_number){\n\
    \      smallest_number = numbers[i];\n    }\n    if(numbers[i] > largest_number){\n\
    \      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i] - numbers[i -\
    \ 1];\n\t\tclosest_numbers.push(numbers[i - 1]);\n\t\tclosest_distances.push(distance);\n\
    \t}\n\tclosest_numbers.sort(function(a, b){\n\t\treturn Math.abs(a) - Math.abs(b);\n\
    \t});\n\tclosest_distances.sort(function(a, b){\n\t\treturn Math.abs(a) - Math.abs(b);\n\
    \t});\n\treturn closest_numbers;\n}\n", "  var smallest_difference = Number.MAX_VALUE;\n\
    \  var closest_numbers = [];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ var difference = Math.abs(numbers[i] - numbers[i - 1]);\n    if(difference <\
    \ smallest_difference){\n      smallest_difference = difference;\n      closest_numbers\
    \ = [numbers[i]];\n    }\n    else if(difference === smallest_difference){\n \
    \     closest_numbers.push(numbers[i]);\n    }\n  }\n  return closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tvar smallest_distance =\
    \ Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\tfor(var i =\
    \ 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\t\tvar\
    \ current_distance = current_number - smallest_number;\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t}\n\t\tif(current_distance > largest_distance){\n\t\
    \t\tlargest_number = current_number;\n\t\t\tlargest_distance = current_distance;\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \tclosest_distances.push(smallest_distance);\n\tclosest_distances.push(largest_distance);\n\
    \treturn closest_numbers;\n}\n", "  var result = [];\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n\
    \  result.push(largest);\n  return result;\n}\n", "  var smallest_number = numbers[0];\n\
    \  var second_smallest_number = numbers[1];\n  var closest_numbers = [smallest_number,\
    \ second_smallest_number];\n  for(var i = 2; i < numbers.length; i++){\n    var\
    \ current_number = numbers[i];\n    if(current_number < smallest_number){\n  \
    \    smallest_number = current_number;\n      closest_numbers[0] = smallest_number;\n\
    \    }\n    else if(current_number > second_smallest_number){\n      second_smallest_number\
    \ = current_number;\n      closest_numbers[1] = second_smallest_number;\n    }\n\
    \  }\n  return closest_numbers;\n}\n", "  var smallest = Math.min.apply(Math,\
    \ numbers);\n  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return\
    \ result;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\
    \tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] ===\
    \ smallest_number){\n\t\t\tclosest_numbers.push(smallest_number);\n\t\t}\n\t\t\
    if(numbers[i] === largest_number){\n\t\t\tclosest_numbers.push(largest_number);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar smallest = numbers[0];\n\t\
    var largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\telse if(numbers[i] >\
    \ largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "    var smallest_difference = Number.MAX_VALUE;\n    var smallest_difference_index\
    \ = -1;\n    var closest_numbers = [];\n    var closest_numbers_index = 0;\n \
    \   var i;\n    for(i = 0; i < numbers.length; i++){\n        var difference =\
    \ Math.abs(numbers[i] - numbers[closest_numbers_index]);\n        if(difference\
    \ < smallest_difference){\n            smallest_difference = difference;\n   \
    \         smallest_difference_index = closest_numbers_index;\n        }\n    \
    \    closest_numbers_index++;\n        if(closest_numbers_index >= numbers.length){\n\
    \            closest_numbers.push(numbers[i]);\n            closest_numbers_index\
    \ = 0;\n        }\n    }\n    if(smallest_difference_index >= 0){\n        closest_numbers.push(numbers[smallest_difference_index]);\n\
    \    }\n    return closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar\
    \ closest_distances = [];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    var distance = numbers[i] - numbers[i - 1];\n\t\tclosest_numbers.push(numbers[i]);\n\
    \t\tclosest_distances.push(distance);\n\t}\n\t\n\tclosest_numbers.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\t\n\treturn [closest_numbers[0], closest_numbers[closest_numbers.length\
    \ - 1]];\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest\
    \ = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i = smallest;\
    \ i <= largest; i++){\n\t\tresult.push(i);\n\t}\n\treturn result;\n}\n", "\tvar\
    \ smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\tvar result\
    \ = [];\n\tvar i;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] >=\
    \ smallest && numbers[i] <= largest){\n\t\t\tresult.push(numbers[i]);\n\t\t}\n\
    \t}\n\treturn result;\n}\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "  var smallest\
    \ = Math.min(numbers);\n  var largest = Math.max(numbers);\n  var result = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return\
    \ result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest\
    \ = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i = smallest;\
    \ i <= largest; i++){\n\t\tif(numbers.indexOf(i) !== -1){\n\t\t\tresult.push(i);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  var smallest_distance = Number.MAX_VALUE;\n\
    \  var closest_numbers = [];\n  var closest_numbers_index = 0;\n  var i;\n  for(i\
    \ = 0; i < numbers.length; i++){\n    var distance = numbers[i] - numbers[closest_numbers_index];\n\
    \    if(distance < smallest_distance){\n      smallest_distance = distance;\n\
    \      closest_numbers_index = i;\n    }\n  }\n  closest_numbers.push(numbers[closest_numbers_index]);\n\
    \  closest_numbers.push(numbers[closest_numbers_index + 1]);\n  return closest_numbers;\n\
    }\n", "  var results = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  results.push(smallest);\n  results.push(largest);\n\
    \  return results;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\
    \t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\t\t\tlargest\
    \ = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "\tvar smallest\
    \ = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\
    \t\tif(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest, largest];\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tvar smallest_distance = Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_number = current_number;\n\t\t\tsmallest_distance\
    \ = current_distance;\n\t\t}\n\t\tif(current_distance > largest_distance){\n\t\
    \t\tlargest_number = current_number;\n\t\t\tlargest_distance = current_distance;\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \tclosest_distances.push(smallest_distance);\n\tclosest_distances.push(largest_distance);\n\
    \treturn closest_numbers;\n}\n", "    var closest_numbers = [];\n    var smallest_number\
    \ = numbers[0];\n    var largest_number = numbers[0];\n    for(var i = 1; i <\
    \ numbers.length; i++){\n        if(numbers[i] < smallest_number){\n         \
    \   smallest_number = numbers[i];\n        }\n        if(numbers[i] > largest_number){\n\
    \            largest_number = numbers[i];\n        }\n    }\n    closest_numbers.push(smallest_number);\n\
    \    closest_numbers.push(largest_number);\n    return closest_numbers;\n}\n",
  "  var result = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  if(smallest == largest){\n    return [smallest,\
    \ smallest];\n  }\n  if(smallest > largest){\n    var temp = smallest;\n    smallest\
    \ = largest;\n    largest = temp;\n  }\n  if(smallest == numbers[0]){\n    return\
    \ [smallest, numbers[0]];\n  }\n  if(largest == numbers[numbers.length - 1]){\n\
    \    return [numbers[numbers.length - 1], largest];\n  }\n  if(smallest == numbers[numbers.length\
    \ - 2]){\n    return [numbers[numbers.length - 2], largest];\n  }\n  if(largest\
    \ == numbers[0]){\n    return [smallest, numbers[0]];\n  }\n  if(largest == numbers[numbers.length\
    \ - 2]){\n    return [numbers[numbers.length - 2], largest];\n  }\n  if(smallest\
    \ == numbers[numbers.length - 3]){\n    return [numbers[numbers.length - 3], largest];\n\
    \  }\n  if(largest == numbers[numbers.length - 4]){\n    return [numbers[numbers.length\
    \ - 4], largest];\n  }\n  if(smallest == numbers[numbers.length - 5]){\n    return\
    \ [numbers[numbers.length - 5], largest];\n  }\n  if(largest == numbers[numbers.length\
    \ - 6]){\n    return [numbers[numbers.length - 6], largest];\n  }\n  if(smallest\
    \ == numbers[numbers.length - 7]){\n    return [numbers[numbers.length - 7], largest];\n\
    \  }\n  if(largest == numbers[numbers.length - 8]){\n    return [numbers[numbers.length\
    \ - 8], largest];\n  }\n  if(smallest == numbers[numbers.length - 9]){\n    return\
    \ [numbers[numbers.length - 9], largest];\n  }\n  if(largest == numbers[numbers.length\
    \ - 10]){\n    return [numbers[numbers.length - 10], largest];\n  }\n  if(smallest\
    \ == numbers[numbers.length - 11]){\n    return [numbers[numbers.length - 11],\
    \ largest];\n  }\n  if(largest == numbers[numbers.length - 12]){\n    return [numbers[numbers.length\
    \ - 12], largest];\n  }\n  if(smallest == numbers[numbers.length - 13]){\n   \
    \ return [numbers[numbers.length - 13], largest];\n  }\n  if(largest == numbers[number",
  "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) > -1) result.push(i);\n\t}\n\treturn result;\n}\n",
  "    var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var result = [];\n    for(var i=0;i<numbers.length;i++){\n  \
    \      if(numbers[i] == smallest || numbers[i] == largest){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  var smallest = Math.min.apply(null,\
    \ numbers);\n  var largest = Math.max.apply(null, numbers);\n  var result = [];\n\
    \  for(var i=0;i<numbers.length;i++){\n    if(numbers[i] == smallest || numbers[i]\
    \ == largest){\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - smallest_number;\n\t\tvar current_distance_square = current_distance * current_distance;\n\
    \t\tsmallest_number = current_number;\n\t\tfor(var j = 0; j < closest_numbers.length;\
    \ j++){\n\t\t\tvar closest_number = closest_numbers[j];\n\t\t\tvar closest_distance_square\
    \ = closest_number * closest_number;\n\t\t\tvar current_distance_square = current_distance\
    \ * current_distance;\n\t\t\tif(current_distance_square < closest_distance_square){\n\
    \t\t\t\tclosest_numbers[j] = current_number;\n\t\t\t\tclosest_distances[j] = current_distance_square;\n\
    \t\t\t}\n\t\t}\n\t}\n\tclosest_numbers.sort(function(a, b){\n\t\treturn a - b;\n\
    \t});\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_distance = numbers[i] - numbers[closest_index];\n\t\t\
    if(current_distance < closest_distance){\n\t\t\tclosest_index = i;\n\t\t\tclosest_distance\
    \ = current_distance;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index - 1]);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\
    \tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest || numbers[i] > largest){\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(numbers[i]);\n\
    \t}\n\treturn result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar biggest_number\
    \ = numbers[0];\n\tvar smallest_index = 0;\n\tvar biggest_index = 0;\n\tfor(var\
    \ i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\
    \tsmallest_number = numbers[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t\tif(numbers[i]\
    \ > biggest_number){\n\t\t\tbiggest_number = numbers[i];\n\t\t\tbiggest_index\
    \ = i;\n\t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "  var\
    \ smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest){\n      result.push(smallest);\n    }\n    else if(numbers[i] ==\
    \ largest){\n      result.push(largest);\n    }\n    else{\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar smallest = Math.min(numbers[0], numbers[1]);\n\
    \tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result = [];\n\tfor(var\
    \ i = 2; i < numbers.length; i++){\n\t\tvar num = numbers[i];\n\t\tif(Math.abs(num\
    \ - smallest) < Math.abs(num - largest)){\n\t\t\tresult.push(smallest);\n\t\t\t\
    smallest = num;\n\t\t}else{\n\t\t\tresult.push(largest);\n\t\t\tlargest = num;\n\
    \t\t}\n\t}\n\tresult.push(largest);\n\treturn result;\n}\n", "\tvar smallest =\
    \ Math.min(numbers[0], numbers[1]);\n\tvar largest = Math.max(numbers[0], numbers[1]);\n\
    \tvar result = [smallest, largest];\n\tfor(var i = 2; i < numbers.length; i++){\n\
    \t\tvar current_smallest = Math.min(numbers[0], numbers[i]);\n\t\tvar current_largest\
    \ = Math.max(numbers[0], numbers[i]);\n\t\tif(current_smallest == smallest &&\
    \ current_largest == largest){\n\t\t\tresult.push(current_smallest);\n\t\t\tresult.push(current_largest);\n\
    \t\t}else if(current_smallest == smallest && current_largest != largest){\n\t\t\
    \tresult.push(current_smallest);\n\t\t\tresult.push(largest);\n\t\t}else if(current_smallest\
    \ != smallest && current_largest == largest){\n\t\t\tresult.push(smallest);\n\t\
    \t\tresult.push(current_largest);\n\t\t}else if(current_smallest != smallest &&\
    \ current_largest != largest){\n\t\t\tresult.push(smallest);\n\t\t\tresult.push(largest);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest = Math.min(numbers);\n\tvar\
    \ largest = Math.max(numbers);\n\tvar result = [];\n\tfor(var i = 0; i <= largest;\
    \ i++){\n\t\tif(numbers[i] === smallest){\n\t\t\tresult.push(smallest);\n\t\t\
    }\n\t\telse if(numbers[i] === largest){\n\t\t\tresult.push(largest);\n\t\t}\n\t\
    \telse{\n\t\t\tvar mid = Math.round((smallest + largest) / 2);\n\t\t\tif(numbers[i]\
    \ < mid){\n\t\t\t\tresult.push(smallest);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult.push(largest);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "  var result = [];\n  var smallest\
    \ = numbers[0];\n  var largest = numbers[0];\n  for(var i = 1; i < numbers.length;\
    \ i++){\n    if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n\
    \    if(numbers[i] > largest){\n      largest = numbers[i];\n    }\n  }\n  if(smallest\
    \ != largest){\n    result.push(smallest);\n    result.push(largest);\n  }\n \
    \ return result;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number =\
    \ numbers[0];\n\tvar largest_number = numbers[0];\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\t\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\t\n\t\t\
    if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t\
    }\n\t\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar closest_numbers\
    \ = [];\n\tvar closest_number = smallest_number;\n\tvar i;\n\tfor(i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t\tclosest_number = smallest_number;\n\t\t}\n\t\telse if(numbers[i] > smallest_number){\n\
    \t\t\tclosest_numbers.push(smallest_number);\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t\tclosest_number = smallest_number;\n\t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(closest_number);\n\
    \t\t\tclosest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(closest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar current_distance\
    \ = numbers[i];\n\t\tvar current_number = numbers[i];\n\t\t\n\t\tfor(var j = i+1;\
    \ j < numbers.length; j++){\n\t\t\tvar next_distance = numbers[j];\n\t\t\tvar\
    \ next_number = numbers[j];\n\t\t\t\n\t\t\t//Check if the current number is closer\
    \ to the next number\n\t\t\tif(Math.abs(current_number - next_number) < Math.abs(current_distance\
    \ - next_distance)){\n\t\t\t\tcurrent_distance = next_distance;\n\t\t\t\tcurrent_number\
    \ = next_number;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(current_number);\n\
    \t\tclosest_distances.push(current_distance);\n\t}\n\t\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n\
    \  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var\
    \ i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return result;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar smallest_distance\
    \ = Number.MAX_VALUE;\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar\
    \ distance = numbers[i] - numbers[i - 1];\n\t\tif(distance < smallest_distance){\n\
    \t\t\tsmallest_distance = distance;\n\t\t}\n\t}\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[i - 1];\n\t\tif(distance < smallest_distance){\n\
    \t\t\tclosest_numbers.push(numbers[i - 1]);\n\t\t\tclosest_distances.push(smallest_distance);\n\
    \t\t}\n\t\telse{\n\t\t\tclosest_numbers.push(numbers[i]);\n\t\t\tclosest_distances.push(distance);\n\
    \t\t}\n\t}\n\t\n\treturn [closest_numbers, closest_distances];\n}\n", "\tvar smallest\
    \ = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\
    \tvar result = [];\n\tvar i;\n\tfor(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ === smallest){\n\t\t\tresult.push(smallest);\n\t\t}\n\t\telse if(numbers[i]\
    \ === largest){\n\t\t\tresult.push(largest);\n\t\t}\n\t\telse{\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar current_distance = numbers[i] - closest_numbers[closest_index];\n\
    \t\t\n\t\tif(current_distance < closest_distance){\n\t\t\tclosest_index = i;\n\
    \t\t\tclosest_distance = current_distance;\n\t\t}\n\t\t\n\t\tif(closest_index\
    \ == 0){\n\t\t\tclosest_numbers[0] = numbers[i];\n\t\t\tclosest_distances[0] =\
    \ current_distance;\n\t\t}\n\t\t\n\t\tif(closest_index == numbers.length - 1){\n\
    \t\t\tclosest_numbers[closest_index] = numbers[i];\n\t\t\tclosest_distances[closest_index]\
    \ = current_distance;\n\t\t}\n\t}\n\t\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\
    \tif(numbers[i] === smallest){\n\t\t\tresult.push(smallest);\n\t\t}\n\t\telse\
    \ if(numbers[i] === largest){\n\t\t\tresult.push(largest);\n\t\t}\n\t\telse{\n\
    \t\t\tresult.push(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var result\
    \ = [];\n  var smallest = numbers[0];\n  var largest = numbers[0];\n  for(var\
    \ i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n      smallest\
    \ = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest = numbers[i];\n\
    \    }\n  }\n  if(smallest == largest){\n    return [smallest, smallest];\n  }\n\
    \  if(smallest > largest){\n    var temp = smallest;\n    smallest = largest;\n\
    \    largest = temp;\n  }\n  if(smallest == numbers[0]){\n    return [smallest,\
    \ numbers[0]];\n  }\n  if(largest == numbers[numbers.length - 1]){\n    return\
    \ [numbers[numbers.length - 1], largest];\n  }\n  var mid = Math.floor((smallest\
    \ + largest) / 2);\n  if(numbers[mid] == smallest){\n    return [smallest, mid];\n\
    \  }\n  if(numbers[mid] == largest){\n    return [mid, largest];\n  }\n  if(numbers[mid]\
    \ > smallest && numbers[mid] < largest){\n    return find_closest_elements([smallest,\
    \ mid, largest]);\n  }\n  return find_closest_elements([mid, smallest, largest]);\n\
    }\n", "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\
    \tvar closest_numbers = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i]\
    \ == smallest || numbers[i] == largest){\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t\telse{\n\t\t\tvar difference = Math.abs(numbers[i] - smallest);\n\t\t\
    \tif(difference < Math.abs(numbers[i] - largest)){\n\t\t\t\tclosest_numbers.push(smallest);\n\
    \t\t\t\tclosest_numbers.push(largest);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tclosest_numbers.push(largest);\n\
    \t\t\t\tclosest_numbers.push(smallest);\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "  var closest_elements = [];\n  var smallest_number = numbers[0];\n  var\
    \ largest_number = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n \
    \   if(numbers[i] < smallest_number){\n      smallest_number = numbers[i];\n \
    \   }\n    if(numbers[i] > largest_number){\n      largest_number = numbers[i];\n\
    \    }\n  }\n  if(smallest_number == largest_number){\n    closest_elements.push(smallest_number);\n\
    \  }\n  else{\n    closest_elements.push(smallest_number);\n    closest_elements.push(largest_number);\n\
    \  }\n  return closest_elements;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) > -1) result.push(i);\n\
    \t}\n\treturn result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tvar smallest_distance = Number.MAX_VALUE;\n\tvar largest_distance = Number.MAX_VALUE;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = current_number - smallest_number;\n\t\t\n\t\tif(current_distance\
    \ < smallest_distance){\n\t\t\tsmallest_distance = current_distance;\n\t\t\tsmallest_number\
    \ = current_number;\n\t\t}\n\t\t\n\t\tif(current_distance > largest_distance){\n\
    \t\t\tlargest_distance = current_distance;\n\t\t\tlargest_number = current_number;\n\
    \t\t}\n\t\t\n\t\tclosest_numbers.push(smallest_number);\n\t\tclosest_numbers.push(largest_number);\n\
    \t\tclosest_distances.push(smallest_distance);\n\t\tclosest_distances.push(largest_distance);\n\
    \t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar\
    \ closest_distances = [];\n\t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar\
    \ distance = numbers[i] - numbers[0];\n\t\t\n\t\tif(closest_distances.length ==\
    \ 0 || distance < closest_distances[0]){\n\t\t\tclosest_numbers[0] = numbers[i];\n\
    \t\t\tclosest_distances[0] = distance;\n\t\t}\n\t\t\n\t\tif(closest_distances.length\
    \ == 0 || distance < closest_distances[1]){\n\t\t\tclosest_numbers[1] = numbers[i];\n\
    \t\t\tclosest_distances[1] = distance;\n\t\t}\n\t\t\n\t\tclosest_numbers.push(numbers[i]);\n\
    \t\tclosest_distances.push(distance);\n\t}\n\t\n\treturn closest_numbers;\n}\n",
  "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - numbers[closest_index];\n\t\tif(distance\
    \ < closest_distance){\n\t\t\tclosest_distance = distance;\n\t\t\tclosest_index\
    \ = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \t\n\treturn closest_numbers;\n}\n", "    var smallest = Math.min.apply(null,\
    \ numbers);\n    var largest = Math.max.apply(null, numbers);\n    var result\
    \ = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(numbers[i] >=\
    \ smallest && numbers[i] <= largest){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  var smallest = Math.min.apply(Math,\
    \ numbers);\n  var largest = Math.max.apply(Math, numbers);\n  var result = [];\n\
    \  for(var i = smallest; i <= largest; i++){\n    result.push(i);\n  }\n  return\
    \ result;\n}\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "\tvar closest_elements\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_elements.push(smallest_number);\n\
    \tclosest_elements.push(largest_number);\n\treturn closest_elements;\n}\n", " \
    \ var smallest_difference = Number.MAX_VALUE;\n  var closest_elements = [];\n\
    \  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[1];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    var difference = numbers[i] -\
    \ smallest_number;\n    if(Math.abs(difference) < smallest_difference){\n    \
    \  smallest_difference = Math.abs(difference);\n      closest_elements = [smallest_number];\n\
    \      smallest_number = numbers[i];\n    }else{\n      if(difference < 0){\n\
    \        second_smallest_number = smallest_number;\n        smallest_number =\
    \ numbers[i];\n      }else{\n        closest_elements.push(smallest_number);\n\
    \        smallest_number = numbers[i];\n      }\n    }\n  }\n  closest_elements.push(smallest_number);\n\
    \  closest_elements.push(second_smallest_number);\n  return closest_elements;\n\
    }\n", "  var smallest_number = numbers[0];\n  var second_smallest_number = numbers[0];\n\
    \  var closest_numbers = [];\n  var closest_numbers_index = 0;\n  var i;\n  for(i\
    \ = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest_number){\n    \
    \  smallest_number = numbers[i];\n      closest_numbers_index = i;\n    }\n  \
    \  if(numbers[i] > second_smallest_number){\n      second_smallest_number = numbers[i];\n\
    \    }\n  }\n  closest_numbers.push(smallest_number);\n  closest_numbers.push(second_smallest_number);\n\
    \  return closest_numbers;\n}\n", "    var smallest = Math.min.apply(Math, numbers);\n\
    \    var largest = Math.max.apply(Math, numbers);\n    var result = [];\n    for(var\
    \ i = smallest; i <= largest; i++){\n        result.push(i);\n    }\n    return\
    \ result;\n}\n", "\tvar smallest = Math.min(numbers[0], numbers[1]);\n\tvar largest\
    \ = Math.max(numbers[0], numbers[1]);\n\tvar result = [];\n\tfor(var i = 2; i\
    \ < numbers.length; i++){\n\t\tif(numbers[i] < smallest || numbers[i] > largest){\n\
    \t\t\tbreak;\n\t\t}\n\t\tresult.push(numbers[i]);\n\t}\n\treturn result;\n}\n",
  "\tvar smallest = Math.min(numbers[0], numbers[1]);\n\tvar largest = Math.max(numbers[0],\
    \ numbers[1]);\n\tvar result = [];\n\tfor(var i = 2; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest || numbers[i] > largest){\n\t\t\tbreak;\n\t\t}\n\t\
    \tresult.push(numbers[i]);\n\t}\n\treturn result;\n}\n", "  var results = [];\n\
    \  var smallest = Math.min(numbers[0], numbers[1]);\n  var largest = Math.max(numbers[0],\
    \ numbers[1]);\n  for(var i = 2; i < numbers.length; i++){\n    var current =\
    \ numbers[i];\n    if(current < smallest || smallest == Number.POSITIVE_INFINITY\
    \ || current > largest){\n      continue;\n    }\n    if(current < smallest){\n\
    \      smallest = current;\n    }\n    if(current > largest){\n      largest =\
    \ current;\n    }\n  }\n  results.push(smallest);\n  results.push(largest);\n\
    \  return results;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[closest_numbers.length - 1];\n\t\t\n\t\tif(closest_numbers.length\
    \ == 0 || distance < closest_distances[closest_numbers.length - 1])\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\telse\n\t\t\tclosest_distances.push(distance);\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "  var smallest_diff, smallest_diff_index;\n  smallest_diff = numbers[0];\n\
    \  smallest_diff_index = 0;\n  numbers.forEach(function(number, index){\n    if\
    \ (Math.abs(number - smallest_diff) < Math.abs(smallest_diff - number)){\n   \
    \   smallest_diff = number;\n      smallest_diff_index = index;\n    }\n  });\n\
    \  return [smallest_diff, numbers[smallest_diff_index]];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tvar smallest_distance = Number.MAX_VALUE;\n\
    \tvar largest_distance = Number.MAX_VALUE;\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - smallest_number;\n\t\tif(current_distance < smallest_distance){\n\t\t\tsmallest_number\
    \ = current_number;\n\t\t\tsmallest_distance = current_distance;\n\t\t}\n\t\t\
    if(current_distance > largest_distance){\n\t\t\tlargest_number = current_number;\n\
    \t\t\tlargest_distance = current_distance;\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\tclosest_distances.push(smallest_distance);\n\
    \tclosest_distances.push(largest_distance);\n\treturn closest_numbers;\n}\n",
  "  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  var result = [];\n  for(var i=0;i<numbers.length;i++){\n    if(numbers[i]\
    \ == smallest){\n      result.push(smallest);\n    }\n    else if(numbers[i] ==\
    \ largest){\n      result.push(largest);\n    }\n    else{\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \tvar closest_number = numbers[0];\n\t\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tvar distance = numbers[i] - closest_number;\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_number = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t\t\
    closest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(closest_number);\n\t\
    closest_distances.push(closest_distance);\n\t\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_number;\n\t\tif(distance < closest_distance){\n\
    \t\t\tclosest_number = numbers[i];\n\t\t\tclosest_distance = distance;\n\t\t\t\
    closest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(closest_number);\n\t\
    closest_distances.push(closest_distance);\n\t\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = 0;\n\tvar closest_number = numbers[0];\n\tvar\
    \ closest_distance = numbers[0];\n\tvar i;\n\tfor(i = 1; i < numbers.length; i++){\n\
    \t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - closest_number;\n\t\tif(current_distance < closest_distance){\n\t\t\tclosest_number\
    \ = current_number;\n\t\t\tclosest_distance = current_distance;\n\t\t}\n\t\tclosest_numbers.push(closest_number);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar current_distance\
    \ = find_closest_distance(numbers[i], numbers);\n\t\t\n\t\tif(current_distance\
    \ < closest_distances.length){\n\t\t\tclosest_numbers.push(numbers[i]);\n\t\t\t\
    closest_distances.push(current_distance);\n\t\t}\n\t}\n\t\n\treturn closest_numbers;\n\
    }\n", "  var smallest = Math.min(numbers[0], numbers[1]);\n  var largest = Math.max(numbers[0],\
    \ numbers[1]);\n  var result = [];\n  for(var i = 0; i <= numbers.length; i++){\n\
    \    if(numbers[i] < smallest || numbers[i] > largest){\n      continue;\n   \
    \ }\n    result.push(numbers[i]);\n  }\n  return result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar closest_index = 0;\n\tvar closest_distance\
    \ = 0;\n\tvar closest_number = numbers[0];\n\tvar closest_distance = numbers[1];\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar current_number = numbers[i];\n\
    \t\tvar current_distance = numbers[i-1];\n\t\t\n\t\tif(current_distance < closest_distance){\n\
    \t\t\tclosest_number = current_number;\n\t\t\tclosest_distance = current_distance;\n\
    \t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(closest_number);\n\
    \tclosest_distances.push(closest_distance);\n\t\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "  var smallest = numbers[0];\n  var largest\
    \ = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n\
    \      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n",
  "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\tvar\
    \ results = [];\n\tfor(var i=0;i<numbers.length;i++){\n\t\tif(numbers[i] == smallest){\n\
    \t\t\tresults.push(smallest);\n\t\t}\n\t\telse if(numbers[i] == largest){\n\t\t\
    \tresults.push(largest);\n\t\t}\n\t\telse{\n\t\t\tresults.push(numbers[i]);\n\t\
    \t}\n\t}\n\treturn results;\n}\n", "\tvar smallest = numbers[0];\n\tvar largest\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest){\n\
    \t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n}\n",
  "  var result = [];\n  var smallest;\n  var largest;\n  for (var i = 0; i < numbers.length;\
    \ i++){\n    smallest = numbers[i];\n    largest = numbers[i];\n    for (var j\
    \ = 0; j < numbers.length; j++){\n      if (numbers[j] < smallest && numbers[j]\
    \ > largest){\n        smallest = numbers[j];\n        largest = numbers[j];\n\
    \      }\n    }\n    result.push(smallest);\n    result.push(largest);\n  }\n\
    \  return result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\t\
    var largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tvar i;\n\t\
    for(i = 0; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest || numbers[i]\
    \ > largest){\n\t\t\tcontinue;\n\t\t}\n\t\tresult.push(numbers[i]);\n\t}\n\treturn\
    \ result;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\tvar largest\
    \ = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i = smallest;\
    \ i <= largest; i++){\n\t\tif(numbers.indexOf(i) != -1){\n\t\t\tresult.push(i);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar\
    \ largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\
    \tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t\
    }\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\
    \t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "  var smallest =\
    \ numbers[0];\n  var largest = numbers[0];\n  var smallest_index = -1;\n  var\
    \ largest_index = -1;\n  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i]\
    \ < smallest){\n      smallest = numbers[i];\n      smallest_index = i;\n    }\n\
    \    if(numbers[i] > largest){\n      largest = numbers[i];\n      largest_index\
    \ = i;\n    }\n  }\n  return [smallest, largest];\n}\n", "\tvar smallest = Math.min(numbers);\n\
    \tvar largest = Math.max(numbers);\n\tvar result = [];\n\tfor(var i = smallest;\
    \ i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\t\tif(index != -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar closest_distances = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tvar current_number = numbers[i];\n\t\tvar current_distance = current_number\
    \ - smallest_number;\n\t\tvar current_distance_square = current_distance * current_distance;\n\
    \t\tsmallest_number = current_number;\n\t\tfor(var j = 0; j < closest_numbers.length;\
    \ j++){\n\t\t\tvar closest_number = closest_numbers[j];\n\t\t\tvar closest_distance_square\
    \ = closest_number * closest_number;\n\t\t\tvar current_distance_square = current_distance\
    \ * current_distance;\n\t\t\tif(current_distance_square < closest_distance_square){\n\
    \t\t\t\tclosest_numbers[j] = current_number;\n\t\t\t\tclosest_distances[j] = current_distance_square;\n\
    \t\t\t}\n\t\t}\n\t\tlargest_number = current_number;\n\t}\n\tclosest_numbers.push(largest_number);\n\
    \tclosest_distances.push(largest_number * largest_number);\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "\tvar smallest = Math.min(numbers[0], numbers[1]);\n\
    \tvar largest = Math.max(numbers[0], numbers[1]);\n\tvar result = [smallest, largest];\n\
    \tfor(var i = 2; i < numbers.length; i++){\n\t\tvar current = Math.max(numbers[i],\
    \ numbers[i-1]);\n\t\tvar next = Math.min(numbers[i], numbers[i-1]);\n\t\tif(current\
    \ < smallest){\n\t\t\tsmallest = current;\n\t\t}\n\t\tif(next > largest){\n\t\t\
    \tlargest = next;\n\t\t}\n\t}\n\tresult.push(smallest);\n\tresult.push(largest);\n\
    \treturn result;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn\
    \ [smallest_number, largest_number];\n}\n", "\tvar closest_numbers = [];\n\tvar\
    \ closest_distances = [];\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar distance\
    \ = find_closest_distance(numbers[i], numbers);\n\t\tclosest_numbers.push(numbers[i]);\n\
    \t\tclosest_distances.push(distance);\n\t}\n\treturn [closest_numbers[closest_distances.indexOf(Math.min.apply(Math,\
    \ closest_distances))], closest_numbers[closest_distances.indexOf(Math.max.apply(Math,\
    \ closest_distances))]]\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\
    \tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var\
    \ i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) != -1){\n\t\t\t\
    result.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar smallest = numbers[0];\n\
    \tvar largest = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t\
    if(numbers[i] < smallest){\n\t\t\tsmallest = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest){\n\t\t\tlargest = numbers[i];\n\t\t}\n\t}\n\treturn [smallest, largest];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar closest_numbers = [];\n\tvar\
    \ closest_numbers_index = 0;\n\tvar smallest_difference = Number.MAX_VALUE;\n\t\
    var closest_difference = Number.MAX_VALUE;\n\tvar i;\n\tfor(i = 1; i < numbers.length;\
    \ i++){\n\t\tvar difference = Math.abs(numbers[i] - smallest_number);\n\t\tif(difference\
    \ < smallest_difference){\n\t\t\tsmallest_difference = difference;\n\t\t\tclosest_numbers_index\
    \ = i;\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(numbers[closest_numbers_index]);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distance\
    \ = Number.MAX_VALUE;\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar distance\
    \ = numbers[i] - numbers[0];\n\t\tif(distance < closest_distance){\n\t\t\tclosest_numbers\
    \ = [numbers[i]];\n\t\t\tclosest_distance = distance;\n\t\t}else{\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar biggest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(biggest_number < numbers[i]){\n\t\t\tbiggest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, biggest_number];\n}\n", "    var closest_numbers\
    \ = [];\n    var closest_distances = [];\n    var smallest_number = numbers[0];\n\
    \    var largest_number = numbers[0];\n    var smallest_distance = Number.MAX_VALUE;\n\
    \    var largest_distance = Number.MAX_VALUE;\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        var current_number = numbers[i];\n        var current_distance\
    \ = current_number - smallest_number;\n        if(current_distance < smallest_distance){\n\
    \            smallest_number = current_number;\n            smallest_distance\
    \ = current_distance;\n        }\n        if(current_distance > largest_distance){\n\
    \            largest_number = current_number;\n            largest_distance =\
    \ current_distance;\n        }\n    }\n    closest_numbers.push(smallest_number);\n\
    \    closest_numbers.push(largest_number);\n    closest_distances.push(smallest_distance);\n\
    \    closest_distances.push(largest_distance);\n    return closest_numbers;\n\
    }\n", "\tvar closest_numbers = [];\n\tvar closest_distances = [];\n\tvar closest_index\
    \ = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\t\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar distance = numbers[i] - closest_numbers[closest_index];\n\t\t\
    if(distance < closest_distance){\n\t\t\tclosest_distance = distance;\n\t\t\tclosest_index\
    \ = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\tclosest_distances.push(closest_distance);\n\
    \t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - closest_numbers[closest_index];\n\t\tif(distance < closest_distance){\n\t\t\
    \tclosest_distance = distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_distances.push(closest_distance);\n\t\n\treturn [closest_numbers, closest_distances];\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number = numbers[1];\n\
    \tvar closest_numbers = numbers.slice(2);\n\t\n\tfor(var i = 0; i < closest_numbers.length;\
    \ i++){\n\t\tif(closest_numbers[i] < smallest_number){\n\t\t\tsmallest_number\
    \ = closest_numbers[i];\n\t\t}\n\t\t\n\t\tif(closest_numbers[i] > second_smallest_number){\n\
    \t\t\tsecond_smallest_number = closest_numbers[i];\n\t\t}\n\t}\n\t\n\treturn [smallest_number,\
    \ second_smallest_number];\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\telse if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "  var result = [];\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n\
    \  result.push(largest);\n  return result;\n}\n", "\tvar smallest_number = numbers[0];\n\
    \tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\tvar i;\n\n\t\
    for(i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\t\
    \t\tsmallest_number = numbers[i];\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\t\
    }\n\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(numbers[closest_numbers_index]);\n\
    \n\treturn closest_numbers;\n}\n", "  var smallest_number = numbers[0];\n  var\
    \ second_smallest_number = numbers[1];\n  var closest_numbers = [smallest_number,\
    \ second_smallest_number];\n  for(var i = 2; i < numbers.length; i++){\n    if(Math.abs(smallest_number\
    \ - numbers[i]) < Math.abs(second_smallest_number - numbers[i])){\n      smallest_number\
    \ = numbers[i];\n      closest_numbers = [smallest_number, second_smallest_number];\n\
    \    }else{\n      second_smallest_number = numbers[i];\n    }\n  }\n  return\
    \ closest_numbers;\n}\n", "\tvar smallest = Math.min.apply(Math, numbers);\n\t\
    var largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\tfor(var i\
    \ = smallest; i <= largest; i++){\n\t\tvar index = numbers.indexOf(i);\n\t\tif(index\
    \ != -1){\n\t\t\tresult.push(i);\n\t\t\tnumbers.splice(index, 1);\n\t\t}\n\t}\n\
    \treturn result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tvar distance = find_closest_distance(numbers[i],\
    \ numbers);\n\t\t\n\t\tif(closest_distances.length == 0 || distance < closest_distances[closest_distances.length\
    \ - 1]){\n\t\t\tclosest_distances.push(distance);\n\t\t\tclosest_numbers.push(numbers[i]);\n\
    \t\t}\n\t}\n\t\n\treturn closest_numbers;\n}\n", "\tvar smallest = Math.min.apply(Math,\
    \ numbers);\n\tvar largest = Math.max.apply(Math, numbers);\n\tvar result = [];\n\
    \tfor(var i = smallest; i <= largest; i++){\n\t\tif(numbers.indexOf(i) !== -1){\n\
    \t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var result = [];\n\
    \  var smallest = Math.min.apply(Math, numbers);\n  var largest = Math.max.apply(Math,\
    \ numbers);\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] ===\
    \ smallest){\n      result.push(smallest);\n    }\n    else if(numbers[i] ===\
    \ largest){\n      result.push(largest);\n    }\n    else{\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = 0;\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\t\n\t\tvar current_distance = numbers[i];\n\
    \t\t\n\t\tfor(var j = i+1; j < numbers.length; j++){\n\t\t\t\n\t\t\tvar next_distance\
    \ = numbers[j];\n\t\t\t\n\t\t\tif(next_distance < current_distance){\n\t\t\t\t\
    \n\t\t\t\tcurrent_distance = next_distance;\n\t\t\t\tclosest_index = j;\n\t\t\t\
    \tclosest_distance = current_distance;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosest_numbers.push(closest_index);\n\
    \t\tclosest_distances.push(closest_distance);\n\t}\n\t\n\treturn [closest_numbers,\
    \ closest_distances];\n}\n", "  var smallest = Math.min.apply(null, numbers);\n\
    \  var largest = Math.max.apply(null, numbers);\n  var result = [];\n  var i;\n\
    \  for(i = 0; i < numbers.length; i++){\n    if(numbers[i] < smallest || numbers[i]\
    \ > largest){\n      continue;\n    }\n    result.push(numbers[i]);\n  }\n  return\
    \ result;\n}\n", "  var smallest = Math.min.apply(Math, numbers);\n  var largest\
    \ = Math.max.apply(Math, numbers);\n  var result = [];\n  for(var i = smallest;\
    \ i <= largest; i++){\n    result.push(i);\n  }\n  return result;\n}\n", "\tvar\
    \ smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\tvar closest_numbers\
    \ = [];\n\tfor(var i = smallest; i <= largest; i++){\n\t\tfor(var j = smallest;\
    \ j <= largest; j++){\n\t\t\tif(Math.abs(i-j) < Math.abs(smallest-largest)){\n\
    \t\t\t\tclosest_numbers.push(i);\n\t\t\t\tclosest_numbers.push(j);\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn closest_numbers;\n}\n", "\tvar closest_numbers =\
    \ [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  var\
    \ smallest_diff, smallest_diff_index;\n  var largest_diff, largest_diff_index;\n\
    \n  smallest_diff = Number.MAX_VALUE;\n  smallest_diff_index = -1;\n  largest_diff\
    \ = Number.MAX_VALUE;\n  largest_diff_index = -1;\n\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    var diff = numbers[i] - numbers[smallest_diff_index];\n    if(diff\
    \ < smallest_diff){\n      smallest_diff = diff;\n      smallest_diff_index =\
    \ i;\n    }\n    diff = numbers[i] - numbers[largest_diff_index];\n    if(diff\
    \ > largest_diff){\n      largest_diff = diff;\n      largest_diff_index = i;\n\
    \    }\n  }\n\n  return [numbers[smallest_diff_index], numbers[largest_diff_index]];\n\
    }\n", "\tvar smallest = Math.min(numbers);\n\tvar largest = Math.max(numbers);\n\
    \tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\tfor(var i=0;i<numbers.length;i++){\n\
    \t\tif(numbers[i] == smallest){\n\t\t\tclosest_numbers.push(smallest);\n\t\t\t\
    closest_numbers_index = i;\n\t\t}\n\t\telse if(numbers[i] == largest){\n\t\t\t\
    closest_numbers.push(largest);\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\t\t\
    else{\n\t\t\tclosest_numbers.push(numbers[i]);\n\t\t}\n\t}\n\treturn closest_numbers;\n\
    }\n", "  var results = [];\n  var smallest;\n  var largest;\n  var smallest_index;\n\
    \  var largest_index;\n  var i;\n  var j;\n  var k;\n  var l;\n  var smallest_diff;\n\
    \  var largest_diff;\n  var diff;\n  var diffs;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n  var diffs_length;\n\
    \  var diffs_length;\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
