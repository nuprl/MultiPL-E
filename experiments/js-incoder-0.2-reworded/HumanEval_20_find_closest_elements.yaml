name: HumanEval_20_find_closest_elements
language: js
prompt: "//From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_closest_elements;\n  assert.deepEqual(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
  \ 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0, 5.9, 4.0, 5.0]),[5.0,\
  \ 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]),[2.0, 2.2]);\n\
  \  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]),[2.2, 3.1]);\n}\n\ntest();"
completions: ["\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\t\
    var largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\
    \t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\
    \t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar closest_numbers = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\tclosest_numbers.push(largest_number);\n\
    \treturn closest_numbers;\n}\n", "\tvar smallest_number = numbers[0];\n\tvar second_smallest_number\
    \ = numbers[0];\n\tvar closest_numbers = [];\n\tvar closest_numbers_index = 0;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t\tclosest_numbers_index = i;\n\t\t}\n\
    \t\t\n\t\tif(numbers[i] > second_smallest_number){\n\t\t\tsecond_smallest_number\
    \ = numbers[i];\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(smallest_number);\n\t\
    closest_numbers.push(second_smallest_number);\n\t\n\treturn closest_numbers;\n\
    }\n", "    var smallest = Math.min.apply(Math, numbers);\n    var largest = Math.max.apply(Math,\
    \ numbers);\n    var result = [];\n    for(var i = smallest; i <= largest; i++){\n\
    \        result.push(i);\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "\tvar closest_elements = [];\n\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\tif(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\tclosest_elements.push(smallest_number);\n\tclosest_elements.push(largest_number);\n\
    \treturn closest_elements;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\t\n\tfor(var i=0; i<numbers.length; i++){\n\t\tvar distance = numbers[i];\n\
    \t\t\n\t\tfor(var j=0; j<closest_numbers.length; j++){\n\t\t\tvar current_distance\
    \ = closest_numbers[j];\n\t\t\t\n\t\t\tif(current_distance > distance){\n\t\t\t\
    \tclosest_numbers[j] = distance;\n\t\t\t\tclosest_distances[j] = i;\n\t\t\t}\n\
    \t\t}\n\t}\n\t\n\treturn [closest_numbers[closest_distances[0]], closest_numbers[closest_distances[1]]];\n\
    }\n", "  var smallest = Math.min.apply(null, numbers);\n  var largest = Math.max.apply(null,\
    \ numbers);\n  var result = [];\n  for(var i = smallest; i <= largest; i++){\n\
    \    if(numbers.indexOf(i) !== -1){\n      result.push(i);\n    }\n  }\n  return\
    \ result;\n}\n", "  var smallest = numbers[0];\n  var largest = numbers[0];\n\
    \  for(var i = 1; i < numbers.length; i++){\n    if(numbers[i] < smallest){\n\
    \      smallest = numbers[i];\n    }\n    if(numbers[i] > largest){\n      largest\
    \ = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n", "\tvar smallest_number\
    \ = numbers[0];\n\tvar largest_number = numbers[0];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\
    \t\t}\n\t\telse if(numbers[i] > largest_number){\n\t\t\tlargest_number = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest_number, largest_number];\n}\n", "\tvar closest_numbers\
    \ = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "  var\
    \ result = [];\n  var smallest;\n  var largest;\n  for(var i=0; i<numbers.length;\
    \ i++){\n    smallest = numbers[i];\n    largest = numbers[i];\n    for(var j=i+1;\
    \ j<numbers.length; j++){\n      if(numbers[j] < smallest){\n        smallest\
    \ = numbers[j];\n      }\n      if(numbers[j] > largest){\n        largest = numbers[j];\n\
    \      }\n    }\n    result.push(smallest);\n    result.push(largest);\n  }\n\
    \  return result;\n}\n", "\tvar closest_numbers = [];\n\tvar closest_distances\
    \ = [];\n\tvar closest_index = 0;\n\tvar closest_distance = Number.MAX_VALUE;\n\
    \t\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tvar distance = numbers[i]\
    \ - numbers[closest_index];\n\t\tif(distance < closest_distance){\n\t\t\tclosest_index\
    \ = i;\n\t\t\tclosest_distance = distance;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index + 1]);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest = numbers[0];\n\tvar largest = numbers[0];\n\tfor(var i\
    \ = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest){\n\t\t\tsmallest\
    \ = numbers[i];\n\t\t}\n\t\telse if(numbers[i] > largest){\n\t\t\tlargest = numbers[i];\n\
    \t\t}\n\t}\n\treturn [smallest, largest];\n}\n", "    var result = [];\n    var\
    \ smallest = numbers[0];\n    var largest = numbers[0];\n    for(var i = 1; i\
    \ < numbers.length; i++){\n        if(numbers[i] < smallest){\n            smallest\
    \ = numbers[i];\n        }\n        else if(numbers[i] > largest){\n         \
    \   largest = numbers[i];\n        }\n    }\n    result.push(smallest);\n    result.push(largest);\n\
    \    return result;\n}\n", "  var result = [];\n  var smallest = numbers[0];\n\
    \  var largest = numbers[0];\n  for(var i = 1; i < numbers.length; i++){\n   \
    \ if(numbers[i] < smallest){\n      smallest = numbers[i];\n    }\n    if(numbers[i]\
    \ > largest){\n      largest = numbers[i];\n    }\n  }\n  result.push(smallest);\n\
    \  result.push(largest);\n  return result;\n}\n", "\tvar closest_numbers = [];\n\
    \tvar closest_distance = Number.MAX_VALUE;\n\tvar closest_index = 0;\n\t\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tvar distance = distanceBetween(numbers[i],\
    \ numbers[closest_index]);\n\t\t\n\t\tif(distance < closest_distance){\n\t\t\t\
    closest_distance = distance;\n\t\t\tclosest_index = i;\n\t\t}\n\t}\n\t\n\tclosest_numbers.push(numbers[closest_index]);\n\
    \tclosest_numbers.push(numbers[closest_index + 1]);\n\t\n\treturn closest_numbers;\n\
    }\n", "\tvar smallest_number = numbers[0];\n\tvar largest_number = numbers[0];\n\
    \tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i] < smallest_number){\n\
    \t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i] > largest_number){\n\
    \t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\treturn [smallest_number, largest_number];\n\
    }\n", "    var closest_numbers = [];\n    var smallest_number = numbers[0];\n\
    \    var largest_number = numbers[0];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] < smallest_number){\n            smallest_number\
    \ = numbers[i];\n        }\n        if(numbers[i] > largest_number){\n       \
    \     largest_number = numbers[i];\n        }\n    }\n    closest_numbers.push(smallest_number);\n\
    \    closest_numbers.push(largest_number);\n    return closest_numbers;\n}\n",
  "\tvar closest_numbers = [];\n\tvar smallest_number = numbers[0];\n\tvar largest_number\
    \ = numbers[0];\n\tfor(var i = 1; i < numbers.length; i++){\n\t\tif(numbers[i]\
    \ < smallest_number){\n\t\t\tsmallest_number = numbers[i];\n\t\t}\n\t\tif(numbers[i]\
    \ > largest_number){\n\t\t\tlargest_number = numbers[i];\n\t\t}\n\t}\n\tclosest_numbers.push(smallest_number);\n\
    \tclosest_numbers.push(largest_number);\n\treturn closest_numbers;\n}\n", "\t\
    var smallest = Math.min.apply(Math, numbers);\n\tvar largest = Math.max.apply(Math,\
    \ numbers);\n\tvar result = [];\n\tfor(var i = smallest; i <= largest; i++){\n\
    \t\tif(numbers.indexOf(i) === -1){\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
