name: HumanEval_43_pairs_sum_to_zero
language: js
prompt: "//pairs_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are two distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n\
  // false\nfunction pairs_sum_to_zero(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),false);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([2,\
  \ 4, -5, 3, 5, 7]),true);\n  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    var pairs = _.zip(l, l.slice(1));\n    return _.all(pairs, function(pair){\n\
    \        return pair[0] === pair[1];\n    });\n}\n", "  var pairs = l.slice();\n\
    \  var sum = 0;\n  for(var i=0; i<pairs.length; i++){\n    sum += pairs[i];\n\
    \    if(sum === 0){\n      return true;\n    }\n  }\n  return false;\n}\n", " \
    \ if(l.length < 2){\n    return false;\n  }\n  var pairs = l.slice(1).map(function(x){\n\
    \    return [x, l[0]];\n  });\n  var sum = 0;\n  for(var i = 0; i < pairs.length;\
    \ i++){\n    sum += pairs[i][0];\n  }\n  return sum === 0;\n}\n", "  var pairs\
    \ = l.slice();\n  var sum = 0;\n  for(var i=0; i<pairs.length; i++){\n    sum\
    \ += pairs[i];\n  }\n  return sum === 0;\n}\n", "  var pairs = l.slice();\n  var\
    \ sum = 0;\n  for(var i=0; i<pairs.length; i++){\n    sum += pairs[i];\n  }\n\
    \  return sum === 0;\n}\n", "  var pairs = l.slice();\n  var sum = 0;\n  for(var\
    \ i=0; i<pairs.length; i++){\n    sum += pairs[i];\n    if(sum === 0){\n     \
    \ return true;\n    }\n  }\n  return false;\n}\n", "  var pairs = _.pairs(l);\n\
    \  var sum = 0;\n  _.each(pairs, function(pair){\n    sum += pair[1];\n  });\n\
    \  return sum === 0;\n}\n", "  var pairs = l.slice();\n  var sum = 0;\n  for(var\
    \ i=0; i<pairs.length; i++){\n    sum += pairs[i];\n    if(sum === 0){\n     \
    \ return true;\n    }\n  }\n  return false;\n}\n", "  var pairs = l.slice();\n\
    \  var sum = 0;\n  for(var i=0; i<pairs.length; i++){\n    sum += pairs[i];\n\
    \    if(sum === 0){\n      return true;\n    }\n  }\n  return false;\n}\n", " \
    \ var pairs = _.pairs(l);\n  var sum = 0;\n  _.each(pairs, function(pair){\n \
    \   sum += pair[1];\n  });\n  return sum === 0;\n}\n", "\tlet pairs = l.map(function(x){\n\
    \t\treturn [x, -x];\n\t});\n\tlet sums = pairs.map(function(x){\n\t\treturn x.reduce(function(a,\
    \ b){\n\t\t\treturn a + b;\n\t\t});\n\t});\n\treturn sums.filter(function(x){\n\
    \t\treturn x === 0;\n\t}).length === 0;\n}\n", "  if(l.length < 2){\n    return\
    \ false;\n  }\n  if(l.length == 2){\n    return l[0] === l[1];\n  }\n  var pairs\
    \ = l.slice(1).reduce(function(p,c){\n    return p + c;\n  });\n  return pairs\
    \ === 0;\n}\n", "    var sum = 0;\n    for(var i=0; i<l.length; i++){\n      \
    \  sum += l[i];\n    }\n    return sum === 0;\n}\n", "    var sum = 0;\n    for(var\
    \ i in l){\n        sum += l[i];\n    }\n    return sum == 0;\n}\n", "    var\
    \ sum = 0;\n    for(var i=0;i<l.length;i++){\n        sum += l[i];\n    }\n  \
    \  for(var i=0;i<l.length;i++){\n        sum += l[i];\n        if(sum === 0){\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "    var\
    \ pairs = [];\n    for(var i = 0; i < l.length; i++){\n        var pair = [l[i],\
    \ l[(i+1)%l.length]];\n        if(pairs.indexOf(pair) == -1){\n            pairs.push(pair);\n\
    \        }\n    }\n    return pairs.length == 2;\n}\n", "  var pairs = _.zip(l,\
    \ l.slice(1));\n  return _.all(pairs, function(pair){\n    return pair[0] ===\
    \ pair[1];\n  });\n}\n", "    var i, j, sum;\n    for(i = 0; i < l.length; i++){\n\
    \        sum = 0;\n        for(j = 0; j < l.length; j++){\n            sum +=\
    \ l[j];\n            if(sum === 0){\n                return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\n", "  var pairs = l.slice(0);\n\
    \  var sum = 0;\n  for (var i = 0; i < pairs.length; i++){\n    sum += pairs[i];\n\
    \    if (sum === 0){\n      return true;\n    }\n  }\n  return false;\n}\n", " \
    \ if(l.length < 2){\n    return false;\n  }\n  var pairs = l.slice(1).reduce(function(p,\
    \ c){\n    return p + c;\n  }, 0);\n  if(pairs === 0){\n    return true;\n  }\n\
    \  return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
