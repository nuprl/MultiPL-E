name: HumanEval_111_histogram
language: js
results:
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  letters.forEach(function(letter){\n\
    \    histogram[letter] = (histogram[letter] || 0) + 1;\n  });\n  return histogram;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpoyu5aldx.js:30:10)\n    at Object.<anonymous> (/tmp/tmpoyu5aldx.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var result =\
    \ {};\n  var letters = test.split(\" \");\n  letters.forEach(function(letter){\n\
    \    result[letter] = result[letter] ? result[letter] + 1 : 1;\n  });\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp7wgc82ko.js:30:10)\n    at Object.<anonymous> (/tmp/tmp7wgc82ko.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  for(var i = 0; i < letters.length;\
    \ i++){\n    var letter = letters[i];\n    if(histogram[letter] == undefined){\n\
    \      histogram[letter] = 1;\n    }else{\n      histogram[letter]++;\n    }\n\
    \  }\n  return histogram;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpqzaty23i.js:35:10)\n    at Object.<anonymous> (/tmp/tmpqzaty23i.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(' '),\n        letter,\n        letterCounts = {},\n        letterCount;\n\
    \n    for(var i = 0, len = letters.length; i < len; i++){\n        letter = letters[i];\n\
    \        letterCounts[letter] = letterCounts[letter] ? letterCounts[letter] +\
    \ 1 : 1;\n    }\n\n    for(letter in letterCounts){\n        letterCount = letterCounts[letter];\n\
    \        if(letterCount > letterCounts[letter]){\n            letterCounts[letter]\
    \ = letterCount;\n        }\n    }\n\n    return letterCounts;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg19lpn_g.js:42:10)\n    at Object.<anonymous> (/tmp/tmpg19lpn_g.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  for (var i = 0; i < letters.length;\
    \ i++){\n    var letter = letters[i];\n    histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1;\n  }\n  return histogram;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpscq8ui_c.js:31:10)\n    at Object.<anonymous> (/tmp/tmpscq8ui_c.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(\" \");\n    var histogram = {};\n    for(var i = 0; i < letters.length;\
    \ i++){\n        var letter = letters[i];\n        if(histogram[letter] == undefined){\n\
    \            histogram[letter] = 1;\n        } else {\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpkjjyyu2v.js:35:10)\n    at Object.<anonymous> (/tmp/tmpkjjyyu2v.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var result\
    \ = {};\n    var words = test.split(\" \");\n    for(var i = 0; i < words.length;\
    \ i++){\n        var letter = words[i];\n        if(result[letter] == undefined){\n\
    \            result[letter] = 1;\n        }else{\n            result[letter]++;\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp6gsyx8ax.js:35:10)\n    at Object.<anonymous> (/tmp/tmp6gsyx8ax.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  for (var i = 0; i < letters.length;\
    \ i++){\n    var letter = letters[i];\n    if (histogram[letter] == undefined){\n\
    \      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n\
    \  }\n  return histogram;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmplau3gfcv.js:35:10)\n    at Object.<anonymous> (/tmp/tmplau3gfcv.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(' ').map(function(letter){\n        return letter.toLowerCase();\n\
    \    });\n    var counts = {};\n    letters.forEach(function(letter){\n      \
    \  counts[letter] = counts[letter] ? counts[letter] + 1 : 1;\n    });\n    return\
    \ counts;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpjhai6t8g.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjhai6t8g.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  for (var i = 0; i < letters.length;\
    \ i++){\n    var letter = letters[i];\n    if (histogram[letter] == undefined){\n\
    \      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n\
    \  }\n  return histogram;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpvvshsueo.js:35:10)\n    at Object.<anonymous> (/tmp/tmpvvshsueo.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  for(var i = 0; i < letters.length;\
    \ i++){\n    var letter = letters[i];\n    if(histogram[letter] == undefined){\n\
    \      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n\
    \  }\n  return histogram;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpva7t7247.js:35:10)\n    at Object.<anonymous> (/tmp/tmpva7t7247.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  letters.forEach(function(letter){\n\
    \    histogram[letter] = letters.filter(function(letter){\n      return letter\
    \ === letter;\n    }).length;\n  });\n  return histogram;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 4,\n \
    \ b: 4\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n    at test (/tmp/tmpv1x3qf5o.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv1x3qf5o.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 4, b:\
    \ 4 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var result\
    \ = {};\n    var letters = test.split(\" \");\n    var letter;\n    var count;\n\
    \    for(var i=0; i<letters.length; i++){\n        letter = letters[i];\n    \
    \    count = result[letter] ? result[letter]+1 : 1;\n        result[letter] =\
    \ count;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpoozrp5u5.js:34:10)\n    at Object.<anonymous> (/tmp/tmpoozrp5u5.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var histogram\
    \ = {};\n  test.split(\" \").forEach(function(letter){\n    histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1;\n  });\n  return histogram;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp4rblaq7q.js:29:10)\n    at Object.<anonymous> (/tmp/tmp4rblaq7q.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var letters\
    \ = test.split(\" \");\n  var histogram = {};\n  for(var i=0; i<letters.length;\
    \ i++){\n    if(histogram[letters[i]] == undefined){\n      histogram[letters[i]]\
    \ = 0;\n    }\n    histogram[letters[i]]++;\n  }\n  return histogram;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp7fxc90oc.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7fxc90oc.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var histogram\
    \ = {}\n  test.split(\" \").forEach(function(letter){\n    histogram[letter] =\
    \ (histogram[letter] || 0) + 1\n  })\n  return histogram\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp45_gazsn.js:29:10)\n    at Object.<anonymous> (/tmp/tmp45_gazsn.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(\" \");\n    var histogram = {};\n    for(var i = 0; i < letters.length;\
    \ i++){\n        if(histogram[letters[i]] === undefined){\n            histogram[letters[i]]\
    \ = 1;\n        }else{\n            histogram[letters[i]]++;\n        }\n    }\n\
    \    return histogram;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmp61meqcog.js:34:10)\n    at Object.<anonymous> (/tmp/tmp61meqcog.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(\" \");\n    var histogram = {};\n    for(var i = 0; i < letters.length;\
    \ i++){\n        var letter = letters[i];\n        if(histogram[letter] == undefined){\n\
    \            histogram[letter] = 1;\n        }else{\n            histogram[letter]++;\n\
    \        }\n    }\n    return histogram;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpk8v5ud3t.js:35:10)\n    at Object.<anonymous> (/tmp/tmpk8v5ud3t.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(\" \");\n    var histogram = {};\n    for(var i = 0; i < letters.length;\
    \ i++){\n        if(histogram[letters[i]] == undefined){\n            histogram[letters[i]]\
    \ = 1;\n        }else{\n            histogram[letters[i]]++;\n        }\n    }\n\
    \    return histogram;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpedrq23cz.js:34:10)\n    at Object.<anonymous> (/tmp/tmpedrq23cz.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ an object\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b\
    \ c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\"\
    : 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var letters\
    \ = test.split(\" \");\n    var histogram = {};\n    for(var i = 0; i < letters.length;\
    \ i++){\n        if(histogram[letters[i]] === undefined){\n            histogram[letters[i]]\
    \ = 1;\n        } else {\n            histogram[letters[i]]++;\n        }\n  \
    \  }\n    return histogram;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{\n  a: 2,\n \
    \ b: 2,\n  c: 1\n}\n\nshould loosely deep-equal\n\n{\n  a: 2,\n  b: 2\n}\n   \
    \ at test (/tmp/tmpg_o4e45f.js:34:10)\n    at Object.<anonymous> (/tmp/tmpg_o4e45f.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
