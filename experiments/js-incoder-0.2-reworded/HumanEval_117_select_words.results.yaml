name: HumanEval_117_select_words
language: js
results:
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar arr = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j=0; j<word.length; j++){\n\
    \t\t\tif(word[j].length == n){\n\t\t\t\tarr.push(word[j]);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp2dnxu_tu.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2dnxu_tu.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet arr = [];\n\tlet words = [];\n\t\
    let count = 0;\n\tlet index = 0;\n\tlet last = 0;\n\tlet isWord = false;\n\tlet\
    \ isWord2 = false;\n\tlet isWord3 = false;\n\tlet isWord4 = false;\n\tlet isWord5\
    \ = false;\n\tlet isWord6 = false;\n\tlet isWord7 = false;\n\tlet isWord8 = false;\n\
    \tlet isWord9 = false;\n\tlet isWord10 = false;\n\tlet isWord11 = false;\n\tlet\
    \ isWord12 = false;\n\tlet isWord13 = false;\n\tlet isWord14 = false;\n\tlet isWord15\
    \ = false;\n\tlet isWord16 = false;\n\tlet isWord17 = false;\n\tlet isWord18 =\
    \ false;\n\tlet isWord19 = false;\n\tlet isWord20 = false;\n\tlet isWord21 = false;\n\
    \tlet isWord22 = false;\n\tlet isWord23 = false;\n\tlet isWord24 = false;\n\t\
    let isWord25 = false;\n\tlet isWord26 = false;\n\tlet isWord27 = false;\n\tlet\
    \ isWord28 = false;\n\tlet isWord29 = false;\n\tlet isWord30 = false;\n\tlet isWord31\
    \ = false;\n\tlet isWord32 = false;\n\tlet isWord33 = false;\n\tlet isWord34 =\
    \ false;\n\tlet isWord35 = false;\n\tlet isWord36 = false;\n\tlet isWord37 = false;\n\
    \tlet isWord38 = false;\n\tlet isWord39 = false;\n\tlet isWord40 = false;\n\t\
    let isWord41 = false;\n\tlet isWord42 = false;\n\tlet isWord43 = false;\n\tlet\
    \ isWord44 = false;\n\tlet isWord45 = false;\n\tlet isWord46 = false;\n\tlet isWord47\
    \ = false;\n\tlet isWord48 = false;\n\tlet isWord49 = false;\n\tlet isWord50 =\
    \ false;\n\tlet isWord51 = false;\n\tlet isWord52 = false;\n\tlet isWord53 = false;\n\
    \tlet isWord54 = false;\n\tlet isWord55 = false;\n\tlet isWord56 = false;\n\t\
    let isWord57 = false;\n\tlet isWord58 = false;\n\tlet isWord59 = false;\n\tlet\
    \ isWord60 = false;\n\tlet isWord61 = false;\n\tlet isWord62 = false;\n\tlet isWord63\
    \ = false;\n\tlet isWord64 = false;\n\tlet isWord65 = false;\n\tlet isWord66 =\
    \ false;\n\tlet isWord67 = false;\n\tlet isWord68 = false;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxprpow7y.js:106\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar arr = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar word = s.split(\" \");\n\t\tfor(var j = 0; j<word.length; j++){\n\
    \t\t\tif(word[j].length == n){\n\t\t\t\tarr.push(word[j]);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmprdu_80gu.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmprdu_80gu.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tvar letter = s[i];\n\t\tvar count = 0;\n\t\tfor(var j = 0; j<s.length;\
    \ j++){\n\t\t\tif(j != i){\n\t\t\t\tif(s[j] == letter){\n\t\t\t\t\tcount++;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(count == n){\n\t\t\twords.push(letter);\n\t\t\
    }\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmplvmuyeko.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmplvmuyeko.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var word = s.split(\" \");\n    for(var j=0; j<word.length; j++){\n\
    \      if(word[j].length == n){\n        arr.push(word[j]);\n      }\n    }\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpcc3on23m.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcc3on23m.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var arr = [];\n    for(var i = 0;\
    \ i<s.length; i++){\n        var word = s.split(\" \");\n        for(var j = 0;\
    \ j<word.length; j++){\n            if(word[j].length == n){\n               \
    \ arr.push(word[j]);\n            }\n        }\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp5_2dl5g8.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5_2dl5g8.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar arr = [];\n\t\n\tfor(var i = 0;\
    \ i <= s.length; i++){\n\t\tvar word = s.substr(0, i);\n\t\t\n\t\tfor(var j =\
    \ 0; j < word.length; j++){\n\t\t\tif(word.charAt(j) == \" \"){\n\t\t\t\tif(word.length\
    \ == n){\n\t\t\t\t\tarr.push(word);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\t\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp68gw6vjt.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp68gw6vjt.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpbki5dlyh.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbki5dlyh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  s = s.split(\" \");\n\
    \  for(var i=0;i<s.length;i++){\n    if(s.indexOf(s[i])==n){\n      arr.push(s[i]);\n\
    \    }\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'lamb'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpspxlxwje.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpspxlxwje.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\
    \twords.push(word);\n\t\t}\n\t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpx7p3gpmv.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx7p3gpmv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var words = [];\n    \n    for(var\
    \ i = 0; i<s.length; i++){\n        if(s.charAt(i) == \" \"){\n            words.push(s.substr(0,\
    \ i));\n            s = s.substr(i+1);\n        }\n    }\n    \n    for(var i\
    \ = 0; i<s.length; i++){\n        if(s.charAt(i) == \" \" && words.length == n){\n\
    \            words.push(s.substr(0, i));\n            s = s.substr(i+1);\n   \
    \     }\n    }\n    \n    return words;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a',\n  'little'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n\
    \    at test (/tmp/tmpfq92_1dm.js:42:10)\n    at Object.<anonymous> (/tmp/tmpfq92_1dm.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a', 'little' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar words = [];\n\tfor(var i=0; i<s.length;\
    \ i++){\n\t\tvar word = s.substr(i, n);\n\t\tif(word.length == n){\n\t\t\twords.push(word);\n\
    \t\t}\n\t}\n\treturn words;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'ary ',\n  'ry h',\n  'y ha',\n  ' had',\n  'had ',\n  'ad a',\n  'd a ',\n\
    \  ' a l',\n  'a li',\n  ' lit',\n  'litt',\n  'ittl',\n  'ttle',\n  'tle ',\n\
    \  'le l',\n  'e la',\n  ' lam',\n  'lamb'\n]\n\nshould loosely deep-equal\n\n\
    [\n  'little'\n]\n    at test (/tmp/tmpb17rjtfb.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb17rjtfb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'ary ', 'ry h',\n    'y ha', ' had', 'had ',\n    'ad a', 'd a ', ' a l',\n\
    \    'a li', ' lit', 'litt',\n    'ittl', 'ttle', 'tle ',\n    'le l', 'e la',\
    \ ' lam',\n    'lamb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet count = 0;\n\t\
    let index = 0;\n\tlet letter;\n\twhile(index < s.length){\n\t\tletter = s.charAt(index);\n\
    \t\tcount++;\n\t\tif(letter == \" \"){\n\t\t\twords.push(s.substring(index, index+count));\n\
    \t\t\tindex += count;\n\t\t\tcount = 0;\n\t\t}\n\t\telse if(letter == \"a\"){\n\
    \t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"e\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"i\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter == \"o\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\
    \telse if(letter == \"u\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter\
    \ == \"y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"\
    y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"s\"){\n\t\
    \t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"t\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"h\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter == \"l\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\
    \telse if(letter == \"d\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter\
    \ == \"e\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"\
    a\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"t\"){\n\t\
    \t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"e\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"s\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter == \"s\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\
    \telse if(letter == \"a\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter\
    \ == \"m\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"\
    y\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"a\"){\n\t\
    \t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"t\"){\n\t\t\tindex++;\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if(letter == \"e\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(letter == \"s\"){\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\
    \telse if(letter == \"s\"){\n\t\t\tindex++;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi1074afb.js:147\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    if(s.charAt(i) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+2);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) == \" \"){\n      arr.push(s.substr(0, i));\n    \
    \  s = s.substr(i+1);\n    }\n  }\n  for(var i=0; i<s.length; i++){\n    if(s.charAt(i)\
    \ == \" \" && s.charAt(i+1) != \" \"){\n      arr.push(s.substr(0, i\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfsea6jz3.js:93\n      arr.push(s.substr(0, i\n                \
    \           ^\n\nSyntaxError: missing ) after argument list\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  for(var i=0; i<s.length;\
    \ i++){\n    var word = s.split(\" \");\n    for(var j=0; j<word.length; j++){\n\
    \      if(word[j].length == n){\n        arr.push(word[j]);\n      }\n    }\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n\
    \  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n  'lamb',\n  'Mary',\n\
    \  'lamb'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpzb5puzka.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzb5puzka.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'Mary',\
    \ 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary', 'lamb',\n\
    \    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb', 'Mary',\
    \ 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary', 'lamb',\
    \ 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb', 'Mary',\n    'lamb', 'Mary',\
    \ 'lamb', 'Mary', 'lamb',\n    'Mary', 'lamb', 'Mary', 'lamb'\n  ],\n  expected:\
    \ [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet result = [];\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile(i < s.length){\n\t\twhile(j < s.length && s[j] === s[i]){\n\t\
    \t\tj++;\n\t\t}\n\t\tif(j === s.length){\n\t\t\tresult.push(s.slice(i, i + n));\n\
    \t\t\ti += n;\n\t\t\tj = 0;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n    var result = [];\n    var vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowel_counter = 0;\n    var vowel_counter2\
    \ = 0;\n    var vowel_counter3 = 0;\n    var vowel_counter4 = 0;\n    var vowel_counter5\
    \ = 0;\n    var vowel_counter6 = 0;\n    var vowel_counter7 = 0;\n    var vowel_counter8\
    \ = 0;\n    var vowel_counter9 = 0;\n    var vowel_counter10 = 0;\n    var vowel_counter11\
    \ = 0;\n    var vowel_counter12 = 0;\n    var vowel_counter13 = 0;\n    var vowel_counter14\
    \ = 0;\n    var vowel_counter15 = 0;\n    var vowel_counter16 = 0;\n    var vowel_counter17\
    \ = 0;\n    var vowel_counter18 = 0;\n    var vowel_counter19 = 0;\n    var vowel_counter20\
    \ = 0;\n    var vowel_counter21 = 0;\n    var vowel_counter22 = 0;\n    var vowel_counter23\
    \ = 0;\n    var vowel_counter24 = 0;\n    var vowel_counter25 = 0;\n    var vowel_counter26\
    \ = 0;\n    var vowel_counter27 = 0;\n    var vowel_counter28 = 0;\n    var vowel_counter29\
    \ = 0;\n    var vowel_counter30 = 0;\n    var vowel_counter31 = 0;\n    var vowel_counter32\
    \ = 0;\n    var vowel_counter33 = 0;\n    var vowel_counter34 = 0;\n    var vowel_counter35\
    \ = 0;\n    var vowel_counter36 = 0;\n    var vowel_counter37 = 0;\n    var vowel_counter38\
    \ = 0;\n    var vowel_counter39 = 0;\n    var vowel_counter40 = 0;\n    var vowel_counter41\
    \ = 0;\n    var vowel_counter42 = 0;\n    var vowel_counter43 = 0;\n    var vowel_counter44\
    \ = 0;\n    var vowel_counter45 = 0;\n    var vowel_counter46 = 0;\n    var vowel_counter47\
    \ = 0;\n    var vowel_counter48 = 0;\n    var vowel_counter49 = 0;\n    var vowel_counter50\
    \ = 0;\n    var vowel_counter51 = 0;\n    var vowel_counter52 = 0;\n    var vowel_counter53\
    \ = 0;\n    var vowel_counter54 = 0;\n    var vowel_counter55 = 0;\n    var vowel_counter56\
    \ = 0;\n    var vowel_counter57 = 0;\n    var vowel_counter58 = 0;\n    var vowel_counter59\
    \ = 0;\n    var vowel_counter60 = 0;\n    var vowel_counter61 = 0;\n    var vowel_counter62\
    \ = 0;\n    var vowel_counter63 = 0;\n    var vowel_counter64 = 0;\n    var vowel_counter65\
    \ = 0;\n    var vowel_counter66 = 0;\n    var vowel_counter67 = 0;\n    var vowel_counter68\
    \ = 0;\n    var vowel_counter69 = 0;\n    var vowel_counter70 = 0;\n    var vowel_counter71\
    \ = 0;\n    var vowel_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt0m4z_96.js:106\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tlet words = [];\n\tlet i = 0;\n\twhile(i\
    \ < s.length){\n\t\tlet word = s.slice(i, i+n);\n\t\tif(!word.length) break;\n\
    \t\twords.push(word);\n\t\ti += n;\n\t}\n\treturn words;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  ' had',\n  ' a l',\n  'ittl',\n  'e la',\n  'mb'\n]\n\nshould loosely deep-equal\n\
    \n[\n  'little'\n]\n    at test (/tmp/tmp2ytdymka.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ytdymka.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ ' had', ' a l', 'ittl', 'e la', 'mb' ],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n  var arr = [];\n  if(s.length == 0){\n\
    \    return arr;\n  }\n  for(var i = 0; i <= s.length; i++){\n    var count =\
    \ 0;\n    for(var j = 0; j < s.length; j++){\n      if(s.charAt(j) == s.charAt(i)){\n\
    \        count++;\n      }\n    }\n    if(count == n){\n      arr.push(s.slice(i,\
    \ i + s.length));\n    }\n  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'ary had\
    \ a little lamb',\n  ' had a little lamb',\n  'ad a little lamb',\n  ' a little\
    \ lamb',\n  'a little lamb',\n  ' little lamb',\n  ' lamb',\n  'amb'\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmpjls6ixjh.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjls6ixjh.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'ary\
    \ had a little lamb',\n    ' had a little lamb',\n    'ad a little lamb',\n  \
    \  ' a little lamb',\n    'a little lamb',\n    ' little lamb',\n    ' lamb',\n\
    \    'amb'\n  ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s and a natural number n, you have been tasked to implement\
    \ \n// a function that returns an array of all words from string s that contain\
    \ exactly \n// n consonants, in order these words appear in the string s.\n//\
    \ If the string s is empty then the function should return an empty array.\n//\
    \ Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"\
    ]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"\
    ]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s, n){\n\tvar arr = [];\n\tfor(var i = 0; i<s.length;\
    \ i++){\n\t\tif(s.charAt(i) == \" \"){\n\t\t\tarr.push(s.substr(0, i));\n\t\t\t\
    s = s.substr(i+1);\n\t\t}\n\t\tfor(var j = 0; j<s.length; j++){\n\t\t\tif(s.charAt(j)\
    \ == s.charAt(j+1)){\n\t\t\t\ts = s.substr(0, j);\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif(s.length == n){\n\t\t\tarr.push(s);\n\t\t}\n\t}\n\treturn arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  stdout: ''
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mary',\n\
    \  'had a'\n]\n\nshould loosely deep-equal\n\n[\n  'little'\n]\n    at test (/tmp/tmp8g90w6z5.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8g90w6z5.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'had a' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.6.0\n"
  exit_code: 1
  status: AssertionError
