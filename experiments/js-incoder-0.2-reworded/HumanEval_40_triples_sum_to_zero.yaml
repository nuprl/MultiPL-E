name: HumanEval_40_triples_sum_to_zero
language: js
prompt: "//triples_sum_to_zero takes an array of integers as an input.\n// it returns\
  \ true if there are three distinct elements in the array that\n// sum to zero, and\
  \ false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n\
  // false\nfunction triples_sum_to_zero(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = triples_sum_to_zero;\n  assert.deepEqual(candidate([1, 3, 5, 0]),false);\n \
  \ assert.deepEqual(candidate([1, 3, 5, -1]),false);\n  assert.deepEqual(candidate([1,\
  \ 3, -2, 1]),true);\n  assert.deepEqual(candidate([1, 2, 3, 7]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 5, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 9, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([1, 3,\
  \ 5, -100]),false);\n  assert.deepEqual(candidate([100, 3, 5, -100]),false);\n}\n\
  \ntest();"
completions: ["    var sum = 0;\n    var triples = [];\n    for(var i=0; i<l.length;\
    \ i++){\n        sum += l[i];\n        if(sum > 0){\n            triples.push([sum,\
    \ l[i]]);\n        }\n    }\n    return triples.filter(function(triplet){\n  \
    \      return triplet.length == 3;\n    }).length == 0;\n}\n", "  var sum = 0;\n\
    \  for (var i = 0; i < l.length; i++){\n    sum += l[i];\n  }\n  var triples =\
    \ l.filter(function(x){\n    return x % 3 === 0 && sum === 0;\n  });\n  return\
    \ triples.length === 3;\n}\n", "    var sum = 0;\n    for(var i=0; i<l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum == 0;\n}\n", "  var sum =\
    \ 0;\n  for(var i=0; i<l.length; i++){\n    sum += l[i];\n  }\n  if(sum < 0){\n\
    \    return false;\n  }\n  for(var i=0; i<l.length; i++){\n    sum += l[i];\n\
    \    if(sum < 0){\n      return false;\n    }\n  }\n  return true;\n}\n", "  \
    \  var sum = 0;\n    for(var i=0;i<l.length;i++){\n        sum += l[i];\n    }\n\
    \    return sum == 0;\n}\n", "  var sum = 0;\n  for(var i=0; i<l.length; i++){\n\
    \    sum += l[i];\n  }\n  if(sum == 0){\n    return true;\n  }\n  else{\n    return\
    \ false;\n  }\n}\n", "    var triples_sum_to_zero = false;\n    for(var i = 0;\
    \ i < l.length; i++){\n        var current_triple = l[i];\n        for(var j =\
    \ i + 1; j < l.length; j++){\n            var next_triple = l[j];\n          \
    \  if(current_triple.sumTo(next_triple) == 0){\n                triples_sum_to_zero\
    \ = true;\n                break;\n            }\n        }\n    }\n    return\
    \ triples_sum_to_zero;\n}\n", "    var sum = 0;\n    for(var i = 0; i < l.length;\
    \ i++){\n        sum += l[i];\n    }\n    return sum === 0;\n}\n", "  var sum\
    \ = 0;\n  for (var i = 0; i < l.length; i++){\n    sum += l[i];\n  }\n  return\
    \ sum === 0;\n}\n", "    var sum = 0;\n    for(var i=0;i<l.length;i++){\n    \
    \    sum += l[i];\n    }\n    return sum == 0;\n}\n", "    var triples_sum_to_zero\
    \ = true;\n    for(var i=0; i<l.length; i++){\n        if(l[i]+l[i+1]+l[i+2] ==\
    \ 0){\n            triples_sum_to_zero = false;\n            break;\n        }\n\
    \    }\n    return triples_sum_to_zero;\n}\n", "  var sum = 0;\n  for(var i=0;\
    \ i<l.length; i++){\n    sum += l[i];\n  }\n  return sum == 0;\n}\n", "    var\
    \ sum = 0;\n    for(var i=0;i<l.length;i++){\n        sum += l[i];\n    }\n  \
    \  for(var i=0;i<l.length;i++){\n        sum += l[i];\n        if(sum == 0){\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "    var\
    \ triples_sum_to_zero = true;\n    for(var i = 0; i < l.length; i++){\n      \
    \  var sum = 0;\n        for(var j = 0; j < l.length; j++){\n            sum +=\
    \ l[j];\n        }\n        if(sum != 0){\n            triples_sum_to_zero = false;\n\
    \            break;\n        }\n    }\n    return triples_sum_to_zero;\n}\n",
  "    var sum = 0;\n    for(var i=0; i<l.length; i++){\n        sum += l[i];\n  \
    \  }\n    var triples = l.filter(function(x){return x===sum;});\n    return triples.length===3;\n\
    }\n", "    var triples_sum_to_zero = true;\n    for(var i=0; i<l.length; i++){\n\
    \        var triples_sum_to_zero = false;\n        for(var j=0; j<l.length; j++){\n\
    \            if(l[i] + l[j] == 0){\n                triples_sum_to_zero = true;\n\
    \                break;\n            }\n        }\n        if(!triples_sum_to_zero){\n\
    \            break;\n        }\n    }\n    return triples_sum_to_zero;\n}\n",
  "  var sum = 0;\n  for(var i=0; i<l.length; i++){\n    sum += l[i];\n  }\n  return\
    \ sum == 0;\n}\n", "  var sum = 0;\n  for(var i=0; i<l.length; i++){\n    sum\
    \ += l[i];\n  }\n  if(sum == 0){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\n", "  var sum = 0;\n  for(var i=0; i<l.length; i++){\n    sum += l[i];\n\
    \  }\n  if(sum === 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n\
    }\n", "  var sum = 0;\n  for (var i = 0; i < l.length; i++){\n    sum += l[i];\n\
    \  }\n  return sum === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
