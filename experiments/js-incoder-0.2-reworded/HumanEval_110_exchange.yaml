name: HumanEval_110_exchange
language: js
prompt: "//In this problem, you will implement a function that takes two arrays of\
  \ numbers,\n// and determines whether it is possible to perform an exchange of elements\n\
  // between them to make lst1 an array of only even numbers.\n// There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2,\
  \ 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be\
  \ non-empty.\nfunction exchange(lst1, lst2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\"\
  );\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2,\
  \ 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n\
  \  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n\
  \  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"
completions: ["    // Your code here\n}\n", "    \n}\n", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 8: Write a function that takes two arrays of numbers,\
    \ and determines whether it is possible to perform an exchange of elements to\
    \ make lst1 an array of only even numbers.\nThe function should return \"YES\"\
    \ if it is possible to perform an exchange of elements to make lst1 an array of\
    \ only even numbers, and \"NO\" otherwise.\nThe function should return \"YES\"\
    \ if the input arrays are non-empty, and \"NO\" otherwise.\nIt is assumed that\
    \ the input arrays will be non-empty.\nFor example, if the input arrays are:\n\
    lst1 = [1, 2, 3, 4]\nlst2 = [1, 5, 3, 4]\nThe output should be:\n>>> exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n\"YES\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\
    \"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"", "    var even = []\n    for(var\
    \ i = 0; i<lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n\
    \        }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i]\
    \ % 2 === 0){\n            even.push(lst2[i])\n        }\n    }\n    return even.length\
    \ ? \"YES\" : \"NO\"\n}\n", "    // Your code here\n}\n", "    var even = []\n\
    \    for(var i = 0; i<lst1.length; i++){\n        if(lst1[i] % 2 == 0){\n    \
    \        even.push(lst1[i])\n        }\n    }\n    for(var i = 0; i<lst2.length;\
    \ i++){\n        if(lst2[i] % 2 == 0){\n            even.push(lst2[i])\n     \
    \   }\n    }\n    if(even.length == lst1.length){\n        return \"YES\"\n  \
    \  }\n    else{\n        return \"NO\"\n    }\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n", "\t\n}\n", "    \n}\n", "   \
    \ // Write your code here\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Run this cell to check your answer\nq1.check()\n</cell>\n<cell>\n# Run this\
    \ cell to submit your answer\n# You might need to run this cell twice if the first\
    \ time didn't do anything\nfrom qc_grader import submit_exchange_even\nsubmit_exchange_even(exchange)\n\
    </cell>\n<text>\nPart 2: Combining Arrays\nNow that you have learned about how\
    \ to combine arrays, let's see another important concept in Python: slicing.\n\
    \nSlicing allows you to access parts of an array. For example, if you have an\
    \ array of length 5, and you want to access the 2nd, 3rd, and 4th elements, you\
    \ can do so by writing lst[3:5]. Slicing is often used in combination with functions\
    \ like append, insert, and pop.\n\nHere is an example:\n\n\n</text>\n<cell>\n\
    lst = [1, 2, 3, 4, 5]\n</cell>\n<cell>\nlst\n</cell>\n<cell>\nlst[2:4]\n</cell>\n\
    <cell>\nlst[3:5]\n</cell>\n<cell>\nlst[3:-1]\n</cell>\n<cell>\nlst[3:]\n</cell>\n\
    <cell>\nlst[:4]\n</cell>\n<cell>\nlst[4:]\n</cell>\n<cell>\nlst[4:-1]\n</cell>\n\
    <cell>\nlst[4:-1]\n</cell>\n<cell>\nlst\n</cell>\n<text>\nSlicing can be used\
    \ to access any range of elements in the array. For example, if we want to access\
    \ the 2nd, 3rd, and 4th elements in the list, we can write lst[2:4].\n\nHere is\
    \ an example:\n\n\n</text>\n<cell>\nlst = [1, 2, 3, 4, 5]\n</cell>\n<cell>\nlst[2:4]\n\
    </cell>\n<cell>\nlst[3:5]\n</cell>\n<cell>\nlst[3:-1]\n</cell>\n<cell>\nlst[3:]\n\
    </cell>\n<cell>\nlst[:4]\n</cell>\n<cell>\nlst[4:]\n</cell>\n<cell>\nlst[4:-1]\n\
    </cell>\n<cell>\nlst[4:-1]\n</cell>\n<cell>\nlst\n</cell>\n<text>\nSlicing can\
    \ also be used to access any element in the array. For example, if we want to\
    \ access the first element in the list, we can write lst[0].\n\nHere is an example:\n\
    \n\n</text>\n<cell>\nlst = [", "\t\n}\n", "    // Write your code here\n}\n",
  "    \n}\n", "    \n}\n", "  // Write your code here\n}\n", "  if(lst1.length ==\
    \ 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 !=\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "    var even = [];\n    for(var i = 0; i<lst1.length;\
    \ i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i]);\n   \
    \     }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i] %\
    \ 2 === 0){\n            even.push(lst2[i]);\n        }\n    }\n    return even.length\
    \ === lst1.length;\n}\n", "    \n}\n", "    \n}\n", "\tlet even = [];\n\tlet odd\
    \  = [];\n\tlet evenCount = 0;\n\tlet oddCount  = 0;\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i]);\n\t\t\tevenCount++;\n\
    \t\t}else{\n\t\t\todd.push(lst1[i]);\n\t\t\toddCount++;\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i]);\n\
    \t\t\tevenCount++;\n\t\t}else{\n\t\t\todd.push(lst2[i]);\n\t\t\toddCount++;\n\t\
    \t}\n\t}\n\tif(evenCount === even.length){\n\t\treturn \"YES\";\n\t}else{\n\t\t\
    return \"NO\";\n\t}\n}\n", "\tlet even = lst1.filter(x => x % 2 === 0);\n\tlet\
    \ odd = lst2.filter(x => x % 2 === 1);\n\tlet evenOdd = even.concat(odd);\n\t\
    let evenOddEven = evenOdd.filter(x => x % 2 === 0);\n\tlet evenOddOddEven = evenOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOdd = evenOddEvenOdd.filter(x => x % 2 ===\
    \ 0);\n\tlet evenOddEvenOddEven = evenOddEvenOddEven.filter(x => x % 2 === 1);\n\
    \tlet evenOddEvenOddOdd = evenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEven\
    \ = evenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEven\
    \ = evenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n", " \
    \   let even = [];\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i]\
    \ % 2 === 0){\n            even.push(lst1[i]);\n        }\n    }\n    for(let\
    \ i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i]);\n\
    \        }\n    }\n    return even.length === lst1.length;\n}\n", "  // Your code\
    \ here\n}\n", "    let even = [];\n    for(let i = 0; i < lst1.length; i++){\n\
    \        if(lst1[i] % 2 === 0){\n            even.push(lst1[i]);\n        }\n\
    \    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 ===\
    \ 0){\n            even.push(lst2[i]);\n        }\n    }\n    return even.length\
    \ === lst1.length;\n}\n", "    let even = []\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n    \
    \    }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] %\
    \ 2 === 0){\n            even.push(lst2[i])\n        }\n    }\n    for(let i =\
    \ 0; i < even.length; i++){\n        if(even[i] !== lst1[i]){\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n", "  // Your code here\n}\n",
  "    \n}\n", "    // Your code here\n}\n", "    \n}\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 7: Find all possible combinations of k numbers\
    \ from n\nGiven a list of numbers, return all possible combinations of k numbers\
    \ from the list.\n\nFor example, given k = 3 and n = 2, a solution is:\n\n[\n\
    \  [3],\n  [2],\n  [2, 3],\n  [2, 3],\n  [1, 3],\n  [1, 3],\n  [1, 3],\n  [1,\
    \ 2, 3],\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 3],\n  [1, 3],\n  [1, 3],\n  [1, 2,\
    \ 3]\n]\n\n</text>\n<cell>", "    // Your code here\n}\n", "    let even = []\n\
    \    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n \
    \           even.push(lst1[i])\n        }\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n    \
    \    }\n    }\n    if(even.length === lst1.length){\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    // Your code here\n}\n", "\tlet even = []\n\
    \tlet odds = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 ===\
    \ 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todds.push(lst1[i])\n\t\t}\n\
    \t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\
    \teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\t\t}\n\t}\n\tlet\
    \ even1 = even.sort()\n\tlet odds1 = odds.sort()\n\tlet even2 = even1.sort()\n\
    \tlet odds2 = odds1.sort()\n\tlet even3 = even2.sort()\n\tlet odds3 = odds2.sort()\n\
    \tlet even4 = even3.sort()\n\tlet odds4 = odds3.sort()\n\tlet even5 = even4.sort()\n\
    \tlet odds5 = odds4.sort()\n\tlet even6 = even5.sort()\n\tlet odds6 = odds5.sort()\n\
    \tlet even7 = even6.sort()\n\tlet odds7 = odds6.sort()\n\tlet even8 = even7.sort()\n\
    \tlet odds8 = odds7.sort()\n\tlet even9 = even8.sort()\n\tlet odds9 = odds8.sort()\n\
    \tlet even10 = even9.sort()\n\tlet odds10 = odds9.sort()\n\tlet even11 = even10.sort()\n\
    \tlet odds11 = odds10.sort()\n\tlet even12 = even11.sort()\n\tlet odds12 = odds11.sort()\n\
    \tlet even13 = even12.sort()\n\tlet odds13 = odds12.sort()\n\tlet even14 = even13.sort()\n\
    \tlet odds14 = odds13.sort()\n\tlet even15 = even14.sort()\n\tlet odds15 = odds14.sort()\n\
    \tlet even16 = even15.sort()\n\tlet odds16 = odds15.sort()\n\tlet even17 = even16.sort()\n\
    \tlet odds17 = odds16.sort()\n\tlet even18 = even17.sort()\n\tlet odds18 = odds17.sort()\n\
    \tlet even19 = even18.sort()\n\tlet odds19 = odds18.sort()\n\tlet even20 = even19.sort()\n\
    \tlet odds20 = odds19.sort()\n\tlet even21 = even20.sort()\n\tlet odds21 = odds20.sort()\n\
    \tlet even22 = even21.sort()\n\tlet odds22 = odds21.sort()\n\tlet even23 = even22.",
  "    // Your code here\n}\n", "    // Your code here\n}\n", "    var even = lst1.filter(function(num){\n\
    \        return num%2 === 0;\n    });\n    var odd = lst2.filter(function(num){\n\
    \        return num%2 !== 0;\n    });\n    return even.length === lst1.length\
    \ && odd.length === lst2.length;\n}\n", "    var even = [];\n    for(var i=0;i<lst1.length;i++){\n\
    \        if(lst1[i]%2==0){\n            even.push(lst1[i]);\n        }\n    }\n\
    \    for(var i=0;i<lst2.length;i++){\n        if(lst2[i]%2==0){\n            even.push(lst2[i]);\n\
    \        }\n    }\n    return even.length==lst1.length;\n}\n</code>\n<|/ a tags=arrays,javascript,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `exchange([1,2,3,4,5,6],[1,2,3,4,5,6])`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `exchange([1,2,3,4,5,6],[1,2,3,4,5,6,7])`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `exchange([1,2,3,4,5,6],[1,2,3,4,5,6,7])`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `exchange([1,2,3,4,5,6],[1,2,3,4,5,6,7])`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `exchange([1,2,3,4,5,6],[1,2,3,4,5,6,7])`\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    \n}\n", "    // Your code here\n}\n",
  "    \n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 7: Exchange Arrays\nWrite a function that takes two arrays of\
    \ numbers, and exchanges elements between them so that all the elements of lst1\
    \ are even.\nThe function should return \"YES\" if the exchange is possible, and\
    \ \"NO\" otherwise.\nFor example:\n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\"\
    YES\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n\
    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"\
    NO\"\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"NO\"\n>>> exchange([1, 2, 3,\
    \ 4], [", "    // Your code here\n}\n", "    // Your code here\n}\n", "    //\
    \ Your code here\n}\n", "    var even = []\n    for(var i=0; i<lst1.length; i++){\n\
    \        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n        }\n \
    \   }\n    for(var i=0; i<lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n\
    \            even.push(lst2[i])\n        }\n    }\n    return even.length ===\
    \ lst1.length\n}\n", "    // Your code here\n}\n", "    // Write your code here\n\
    }\n", "\tlet even = []\n\tlet odds = []\n\tfor(let i = 0; i < lst1.length; i++){\n\
    \t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todds.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\t\t}\n\t}\n\t\
    for(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\
    \t\t\tif(even[i] === even[j]){\n\t\t\t\tif(even[i] % 2 === 0){\n\t\t\t\t\teven.splice(j,\
    \ 1)\n\t\t\t\t}else{\n\t\t\t\t\todds.splice(j, 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor(let i = 0; i < odds.length; i++){\n\t\tfor(let j = 0; j < odds.length;\
    \ j++){\n\t\t\tif(odds[i] === odds[j]){\n\t\t\t\tif(odds[i] % 2 === 0){\n\t\t\t\
    \t\todds.splice(j, 1)\n\t\t\t\t}else{\n\t\t\t\t\teven.splice(j, 1)\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length; i++){\n\t\tfor(let j =\
    \ 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\t\t\t\tif(even[i]\
    \ % 2 === 0){\n\t\t\t\t\teven.splice(j, 1)\n\t\t\t\t}else{\n\t\t\t\t\todds.splice(j,\
    \ 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odds.length; i++){\n\
    \t\tfor(let j = 0; j < odds.length; j++){\n\t\t\tif(odds[i] === odds[j]){\n\t\t\
    \t\tif(odds[i] % 2 === 0){\n\t\t\t\t\todds.splice(j, 1)\n\t\t\t\t}else{\n\t\t\t\
    \t\teven.splice(j, 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(even.length === 0){\n\
    \t\treturn \"NO\"\n\t}else if(even.length === lst1.length){\n\t\treturn \"YES\"\
    \n\t}else{\n\t\treturn \"NO\"\n\t}\n}\n", "    let even = lst1.filter(x => x %\
    \ 2 === 0);\n    let odd = lst2.filter(x => x % 2 === 1);\n    let evenIndex =\
    \ even.indexOf(lst2[0]);\n    let oddIndex = odd.indexOf(lst2[0]);\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex !== -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ !== -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1) {\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 ", "    // Your code here\n}\n", "    var even = [];\n    for(var i =\
    \ 0; i<lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i]);\n\
    \        }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i]\
    \ % 2 === 0){\n            even.push(lst2[i]);\n        }\n    }\n    for(var\
    \ i = 0; i<even.length; i++){\n        if(even[i] === lst1[i]){\n            even.splice(i,\
    \ 1);\n        }\n    }\n    if(even.length === 0){\n        return \"YES\";\n\
    \    }else{\n        return \"NO\";\n    }\n}", "    // Your code here\n}\n",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\n\
    q2.check()\n</cell>\n<cell>\n# Lines below will give you a hint or solution code\n\
    #q2.hint()\n#q2.solution()\n</cell>\n<text>\nPart 3: Finding The Longest Common\
    \ Subsequence\nIn this section, you will write code to find the longest common\
    \ subsequence (LCS) of two given sequences.\n\nThe longest common subsequence\
    \ is the longest sequence of elements that appear in\nboth sequences. For example,\
    \ in the following two sequences, the longest common\nsubsequence is \"abc\":\n\
    \nA = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\nB = [ \"a\", \"b\", \"c\", \"d\"\
    , \"f\" ]\n\nThe LCS between them is \"abc\".\n\nWrite a function to find the\
    \ longest common subsequence between two sequences.\nThe function should return\
    \ the length of that subsequence. If there is no common subsequence,\nit should\
    \ return 0.\n\nThe function should preferably use only comparisons with items\
    \ in constant time.\nYour algorithm should run in O(n) time and use only constant\
    \ space. If your algorithm\ntakes too long to run, you should rewrite your algorithm\
    \ to use less space.\n\n\n</text>\n<cell>\n# Run this cell to check your answer\n\
    q3.check()\n</cell>\n<cell>\n# Lines below will give you a hint or solution code\n\
    #q3.hint()\n#q3.solution()\n</cell>\n<text>\nPart 4: Longest Increasing Subsequence\n\
    In this section, you will write code to find the longest increasing subsequence\
    \ (LISE) of two given sequences.\n\nThe LISE is the longest increasing subsequence\
    \ (LISE) of a given sequence. For example,\nin the following two sequences, the\
    \ LISE is \"abc\":\n\nA = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\nB = [ \"a\",\
    \ \"b\", \"c\", \"d\", \"f\" ]\n\nThe LISE of them is \"abc\".\n\nWrite a function\
    \ to find the longest increasing subsequence between two sequences.\nThe function\
    \ should return the length of that subsequence. If there is no LISE, it\nshould\
    \ return 0.\n\nThe function should preferably use only comparisons with items\
    \ in constant time.\nYour algorithm should run in O(n) time and use only constant\
    \ space. If your algorithm\ntakes too long to run, you should rewrite your algorithm\
    \ to use less space.\n\n\n</text>\n<cell>\n# Run this cell to check your answer\n\
    q4.check()\n</cell>\n<cell>\n# Lines below will give you a hint or ", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 &&\
    \ lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1.length == 1){\n    return lst2[0]\
    \ % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst2.length == 1){\n    return lst1[0]\
    \ % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n\
    \    return exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 == 0){\n    return exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    // Your code here\n\
    }\n", "\tlet even = lst1.filter(x => x % 2 === 0);\n\tlet odd = lst2.filter(x\
    \ => x % 2 === 1);\n\tlet evenAndOdd = even.concat(odd);\n\tlet evenAndOddSet\
    \ = new Set(evenAndOdd);\n\treturn evenAndOddSet.size === evenAndOdd.length;\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell\
    \ to check your answer\nq1.check()\n</cell>\n<cell>\n# Run this cell to receive\
    \ credit\nq1.hint()\n</cell>\n<text>\nPart B\nWrite a function that takes two\
    \ arrays of numbers, and returns an array of the same length\nwhere each element\
    \ is the sum of the corresponding elements of the two input arrays.\nFor example,\
    \ if the input arrays are lst1 = [1, 2, 3, 4] and lst2 = [5, 6, 7, 8],\nthe output\
    \ should be [6, 8, 10, 12].\n\nThe input arrays can be assumed to be non-empty.\n\
    The output array will have the same length as the input arrays.\nThe output array\
    \ will consist of only even numbers.\nThe output array will consist of only odd\
    \ numbers.\nIf there are any even numbers in the input arrays, there must be an\
    \ odd number in the output array.\nIf there are any odd numbers in the input arrays,\
    \ there must be an even number in the output array.\nIf there are no even or odd\
    \ numbers in the input arrays, return an empty array.\nIf there are multiple even\
    \ numbers in the input arrays, there must be an odd number in the output array.\n\
    If there are multiple odd numbers in the input arrays, there must be an even number\
    \ in the output array.\nIf there are no even or odd numbers in the input arrays,\
    \ return an empty array.\n\n</text>\n<cell>\n# Write your function here\ndef sum_of_two_arrays(lst1,\
    \ lst2):\n    \n</cell>\n<cell>\n# Run this cell to check your function\nq2.check()\n\
    </cell>\n<cell>\n# Run this cell to receive credit\nq2.hint()\n</cell>\n<text>\n\
    Part C\nWrite a function that takes two arrays of numbers, and returns an array\
    \ of the same length\nwhere each element is the product of the corresponding elements\
    \ of the two input arrays.\nFor example, if the input arrays are lst1 = [1, 2,\
    \ 3, 4] and lst2 = [5, 6, 7, 8],\nthe output should be [120, 60, 40, 24].\n\n\
    The input arrays can be assumed to be non-empty.\nThe output array will have the\
    \ same length as the input arrays.\nThe output array will consist of only even\
    \ numbers.\nThe output array will consist of only odd numbers.\nIf there are any\
    \ even numbers in the input arrays, there must be an odd number in the output\
    \ array.\nIf there are any odd numbers in the input arrays, there must be an even\
    \ number in the output array.\nIf there are no even or odd numbers in the input\
    \ arrays, return an empty array.\nIf there are multiple even numbers in the input\
    \ arrays, there must be an odd number in the output array.\nIf there are multiple\
    \ odd numbers in the input arrays, there must be an even number in the output\
    \ array.\nIf there are no ", "\tlet even = []\n\tlet odd = []\n\tfor(let i = 0;\
    \ i < lst1.length; i++){\n\t\tif(lst1[i] % 2 == 0){\n\t\t\teven.push(lst1[i])\n\
    \t\t}else{\n\t\t\todd.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length;\
    \ i++){\n\t\tif(lst2[i] % 2 == 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\
    \todd.push(lst2[i])\n\t\t}\n\t}\n\tlet result = even.concat(odd)\n\tfor(let i\
    \ = 0; i < result.length; i++){\n\t\tif(result[i] % 2 == 0){\n\t\t\tresult[i]\
    \ = result[i]/2\n\t\t}\n\t}\n\tfor(let i = 0; i < result.length; i++){\n\t\tif(result[i]\
    \ % 2 != 0){\n\t\t\treturn \"NO\"\n\t\t}\n\t}\n\treturn \"YES\"\n}\n", "\tlet\
    \ even = []\n\tlet odd = []\n\tlet evenIndex = 0\n\tlet oddIndex = 0\n\tlet evenCount\
    \ = 0\n\tlet oddCount = 0\n\tlet evenIndex2 = 0\n\tlet oddIndex2 = 0\n\tlet evenCount2\
    \ = 0\n\tlet oddCount2 = 0\n\tlet evenIndex3 = 0\n\tlet oddIndex3 = 0\n\tlet evenCount3\
    \ = 0\n\tlet oddCount3 = 0\n\tlet evenIndex4 = 0\n\tlet oddIndex4 = 0\n\tlet evenCount4\
    \ = 0\n\tlet oddCount4 = 0\n\tlet evenIndex5 = 0\n\tlet oddIndex5 = 0\n\tlet evenCount5\
    \ = 0\n\tlet oddCount5 = 0\n\tlet evenIndex6 = 0\n\tlet oddIndex6 = 0\n\tlet evenCount6\
    \ = 0\n\tlet oddCount6 = 0\n\tlet evenIndex7 = 0\n\tlet oddIndex7 = 0\n\tlet evenCount7\
    \ = 0\n\tlet oddCount7 = 0\n\tlet evenIndex8 = 0\n\tlet oddIndex8 = 0\n\tlet evenCount8\
    \ = 0\n\tlet oddCount8 = 0\n\tlet evenIndex9 = 0\n\tlet oddIndex9 = 0\n\tlet evenCount9\
    \ = 0\n\tlet oddCount9 = 0\n\tlet evenIndex10 = 0\n\tlet oddIndex10 = 0\n\tlet\
    \ evenCount10 = 0\n\tlet oddCount10 = 0\n\tlet evenIndex11 = 0\n\tlet oddIndex11\
    \ = 0\n\tlet evenCount11 = 0\n\tlet oddCount11 = 0\n\tlet evenIndex12 = 0\n\t\
    let oddIndex12 = 0\n\tlet evenCount12 = 0\n\tlet oddCount12 = 0\n\tlet evenIndex13\
    \ = 0\n\tlet oddIndex13 = 0\n\tlet evenCount13 = 0\n\tlet oddCount13 = 0\n\tlet\
    \ evenIndex14 = 0\n\tlet oddIndex14 = 0\n\tlet evenCount14 = 0\n\tlet oddCount14\
    \ = 0\n\tlet evenIndex15 = 0\n\tlet oddIndex15 = 0\n\tlet evenCount15 = 0\n\t\
    let oddCount15 = 0\n\tlet evenIndex16 = 0\n\tlet oddIndex16 = 0\n\tlet evenCount16\
    \ = 0\n\tlet oddCount16 = 0\n\tlet evenIndex17 = 0\n\tlet oddIndex17 = 0\n\tlet\
    \ evenCount17 = 0\n\tlet oddCount17 = 0\n\tlet evenIndex18 = 0\n\tlet oddIndex18\
    \ = 0\n\tlet evenCount18 = 0\n\tlet oddCount18 = 0\n\tlet ", "    // Your code\
    \ here\n}\n", "\tlet even = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\
    \todd.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\t\
    if(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todd.push(lst2[i])\n\
    \t\t}\n\t}\n\tlet evenLength = 0\n\tlet oddLength = 0\n\tfor(let i = 0; i < even.length;\
    \ i++){\n\t\tif(even[i] % 2 === 0){\n\t\t\tevenLength++\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < odd.length; i++){\n\t\tif(odd[i] % 2 === 0){\n\t\t\toddLength++\n\
    \t\t}\n\t}\n\tif(evenLength === oddLength){\n\t\treturn \"YES\"\n\t}else{\n\t\t\
    return \"NO\"\n\t}\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n# Write\
    \ your solution below:\n\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ an array of numbers and returns the sum of the numbers in the array.\nThe function\
    \ should handle an empty array gracefully.\nThe function should handle non-numeric\
    \ values gracefully.\nThe function should handle negative numbers gracefully.\n\
    The function should handle numbers greater than the maximum signed 32-bit integer\
    \ gracefully.\nThe function should handle numbers less than the minimum signed\
    \ 32-bit integer gracefully.\nThe function should handle numbers outside the range\
    \ of 32-bit signed integer gracefully.\nThe function should handle numbers outside\
    \ the range of 64-bit signed integer gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gracefully.\nThe function\
    \ should handle numbers outside the range of 64-bit floating point number gracefully.\n\
    The function should handle numbers outside the range of 64-bit floating point\
    \ number gracefully.\nThe function should handle numbers outside the range of\
    \ 64-bit floating point number gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gracefully.\nThe function\
    \ should handle numbers outside the range of 64-bit floating point number gracefully.\n\
    The function should handle numbers outside the range of 64-bit floating point\
    \ number gracefully.\nThe function should handle numbers outside the range of\
    \ 64-bit floating point number gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gracefully.\nThe function\
    \ should handle numbers outside the range of 64-bit floating point number gracefully.\n\
    The function should handle numbers outside the range of 64-bit floating point\
    \ number gracefully.\nThe function should handle numbers outside the range of\
    \ 64-bit floating point number gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gracefully.\nThe function\
    \ should handle numbers outside the range of 64-bit floating point number gracefully.\n\
    The function should handle numbers outside the range of 64-bit floating point\
    \ number gracefully.\nThe function should handle numbers outside the range of\
    \ 64-bit floating point number gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gracefully.\nThe function\
    \ should handle numbers outside the range of 64-bit floating point number gracefully.\n\
    The function should handle numbers outside the range of 64-bit floating point\
    \ number gracefully.\nThe function should handle numbers outside the range of\
    \ 64-bit floating point number gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gracefully.\nThe function\
    \ should handle numbers outside the range of 64-bit floating point number gracefully.\n\
    The function should handle numbers outside the range of 64-bit floating point\
    \ number gracefully.\nThe function should handle numbers outside the range of\
    \ 64-bit floating point number gracefully.\nThe function should handle numbers\
    \ outside the range of 64-bit floating point number gra", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    var even = []\n    for(var i = 0; i<lst1.length;\
    \ i++){\n        if(lst1[i] % 2 == 0){\n            even.push(lst1[i])\n     \
    \   }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i] % 2\
    \ == 0){\n            even.push(lst2[i])\n        }\n    }\n    if(even.length\
    \ == lst1.length){\n        return \"YES\"\n    }\n    else{\n        return \"\
    NO\"\n    }\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>",
  "    // Your code here\n}\n", "\tlet even = lst1.filter(x => x % 2 === 0);\n\tlet\
    \ odd = lst2.filter(x => x % 2 === 1);\n\tlet evenOdd = even.concat(odd);\n\t\
    let evenOddEven = evenOdd.filter(x => x % 2 === 0);\n\tlet evenOddOdd = evenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOdd = evenOddEven.concat(evenOddOdd);\n\t\
    let evenOddEvenOddOdd = evenOddEvenOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddOddOdd\
    \ = evenOddEvenOddOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOdd =\
    \ evenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\t\
    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd", "    // Write your code\
    \ here\n}\n", "    // Your code here\n}\n", "    var even = [];\n    var odd \
    \ = [];\n    \n    for(var i=0; i<lst1.length; i++){\n        if(lst1[i] % 2 ==\
    \ 0){\n            even.push(lst1[i]);\n        }else{\n            odd.push(lst1[i]);\n\
    \        }\n    }\n    \n    for(var i=0; i<lst2.length; i++){\n        if(lst2[i]\
    \ % 2 == 0){\n            even.push(lst2[i]);\n        }else{\n            odd.push(lst2[i]);\n\
    \        }\n    }\n    \n    if(even.length == lst1.length && even.length == lst2.length){\n\
    \        return \"YES\";\n    }else{\n        return \"NO\";\n    }\n}\n", " \
    \   var even = [];\n    for(var i = 0; i<lst1.length; i++){\n        if(lst1[i]\
    \ % 2 == 0){\n            even.push(lst1[i]);\n        }\n    }\n    for(var i\
    \ = 0; i<lst2.length; i++){\n        if(lst2[i] % 2 == 0){\n            even.push(lst2[i]);\n\
    \        }\n    }\n    for(var i = 0; i<even.length; i++){\n        if(even[i]\
    \ != even[even.length-1]){\n            return \"NO\";\n        }\n    }\n   \
    \ return \"YES\";\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,algorithm\
    \ |>\n<code>", "    \n}\n", "    // Your code here\n}\n</cell>\n<cell>", "   \
    \ // Your code here\n}\n", "\t\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Run this cell to check your answer\nq1.check()\n</cell>\n<cell>\n# Lines below\
    \ will give you a hint or solution code\n#q1.hint()\n#q1.solution()\n</cell>\n\
    <text>\nPart 2: Combining Arrays\nNow that you have learned how to combine two\
    \ arrays, let's combine them with another array.\n\nThe function combine_arrays\
    \ takes two arrays as arguments, and returns an array that contains all the elements\
    \ of the first array followed by the elements of the second array.\n\nThe function\
    \ combine_arrays should return an array that contains all the elements of the\
    \ first array followed by the elements of the second array. If there are any duplicate\
    \ elements in the input arrays, they should be listed only once.\n\nFor example,\
    \ combine_arrays([1, 2, 3], [4, 5, 6]) should return [1, 2, 3, 4, 5, 6].\n\nIf\
    \ there are any duplicate elements in the input arrays, they should be listed\
    \ only once.\n\n\n</text>\n<cell>\n# combine_arrays([1, 2, 3], [4, 5, 6]) should\
    \ return [1, 2, 3, 4, 5, 6]\ndef combine_arrays(lst1, lst2){\n    # Your code\
    \ here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\nq2.check()\n\
    </cell>\n<cell>\n# Lines below will give you a hint or solution code\n#q2.hint()\n\
    #q2.solution()\n</cell>\n<text>\nPart 3: Sorting Arrays\nNow that you have learned\
    \ how to combine two arrays, let's combine them with another array.\n\nThe function\
    \ sort_arrays takes two arrays as arguments, and returns an array that contains\
    \ all the elements of the first array in ascending order followed by the elements\
    \ of the second array in ascending order.\n\nThe function sort_arrays should return\
    \ an array that contains all the elements of the first array in ascending order\
    \ followed by the elements of the second array in ascending order. If there are\
    \ any duplicate elements in the input arrays, they should be listed only once.\n\
    \nFor example, sort_arrays([1, 2, 3], [4, 5, 6]) should return [1, 2, 3, 4, 5,\
    \ 6].\n\nIf there are any duplicate elements in the input arrays, they should\
    \ be listed only once.\n\n\n</text>\n<cell>\n# sort_arrays([1, 2, 3], [4, 5, 6])\
    \ should return [1, 2, 3, 4, 5, 6]\ndef sort_arrays(lst1, lst2){\n    # Your code\
    \ here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\nq3.check()\n\
    </cell>\n<cell>\n# Lines below will give you a hint or solution code\n#q3.hint()\n\
    #q3.solution()\n</cell>\n", "    // Your code here\n}\n", "    var even = [];\n\
    \    var odd  = [];\n    for(var i = 0; i < lst1.length; i++){\n        if(lst1[i]\
    \ % 2 === 0){\n            even.push(lst1[i]);\n        }\n        else{\n   \
    \         odd.push(lst1[i]);\n        }\n    }\n    for(var i = 0; i < lst2.length;\
    \ i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i]);\n   \
    \     }\n        else{\n            odd.push(lst2[i]);\n        }\n    }\n   \
    \ if(even.length === lst1.length && even.length === lst2.length){\n        return\
    \ \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n", "  // Write\
    \ your code here\n}\n", "}\n", "    // Your code here\n}\n", "    // Your code\
    \ here\n}\n", "    \n}\n", "    \n}\n", "    \n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your\
    \ answer\nq1.check()\n</cell>\n<cell>\n# Run this cell to submit your answer\n\
    # You might need to run this cell twice if the first time didn't do anything\n\
    # Make sure you only need to run it once!\nq1.submit()\n</cell>\n<text>\nPart\
    \ B\nNow let's try another problem. Given two arrays of numbers, determine whether\
    \ it is possible to obtain a sorted array by performing exchanges between the\
    \ elements. For example:\n\n\n</text>\n<cell>\nlst1 = [4, 6, 2, 8, 1, 3]\nlst2\
    \ = [4, 6, 2, 8, 1, 3]\n</cell>\n<cell>\n# Your code here\n</cell>\n<cell>\n#\
    \ Check your answer below\nq2.check()\n</cell>\n<cell>\n# Submit your answer.\
    \ You can re-submit at any time.\n# Even if you re-submit, others may have beaten\
    \ you to the punch.\n# If you need to re-submit on Friday evening, it is better\
    \ to go back to your \n# previous bid submission and work on that problem. \n\
    # Even if you have to re-submit on Friday evening, it is better to come back\n\
    # later to check your solution and maybe make another submission. \n# than to\
    \ spend several hours figuring out what happened.\n# Even if you have to resubmit\
    \ on Friday evening, it is OK to ask again later\n# if you have made a submission\
    \ before.\n# You only need to submit your solution to ONE of the two places above.\n\
    # People have different expectations on what constitutes a good Python\n# solution.\
    \ So, please don't assume we will get points for providing a \n# complete solution.\
    \ \n# But feel free to submit your solution to multiple places. \n# As long as\
    \ you do not remove your solution, others will have access\n# to your solution.\
    \ \n# If you do remove your solution, only people who have submitted your solution\n\
    # will know that your solution does not work. \n</cell>\n<cell>\n# Check your\
    \ answer below\nq2.submit()\n</cell>\n<text>\nPart C\nNow let's try another problem.\
    \ Given two arrays of numbers, determine whether it is possible to perform an\
    \ exchange of elements to make lst1 an array of only even numbers.\n\n\n</text>\n\
    <cell>\nlst1 = [4, 6, 2, 8, 1, 3]\nlst2 = [4, 6, 2, 8, 1, 3]\n</cell>\n<cell>",
  "\tlet even = []\n\tlet odds = []\n\tlet evenIndex = 0\n\tlet oddIndex = 0\n\tfor(let\
    \ i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\
    \t\t\tevenIndex++\n\t\t}\n\t\telse{\n\t\t\todds.push(lst1[i])\n\t\t\toddIndex++\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t\tevenIndex++\n\t\t}\n\t\telse{\n\t\t\todds.push(lst2[i])\n\
    \t\t\toddIndex++\n\t\t}\n\t}\n\tif(evenIndex === lst1.length){\n\t\treturn \"\
    YES\"\n\t}\n\telse if(oddIndex === lst2.length){\n\t\treturn \"NO\"\n\t}\n\telse{\n\
    \t\tlet evenIndex2 = 0\n\t\tlet oddIndex2 = 0\n\t\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\t\tif(lst1[i] % 2 === 0){\n\t\t\t\teven.push(lst1[i])\n\t\t\t\tevenIndex2++\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\todds.push(lst1[i])\n\t\t\t\toddIndex2++\n\t\t\t\
    }\n\t\t}\n\t\tfor(let i = 0; i < lst2.length; i++){\n\t\t\tif(lst2[i] % 2 ===\
    \ 0){\n\t\t\t\teven.push(lst2[i])\n\t\t\t\tevenIndex2++\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\todds.push(lst2[i])\n\t\t\t\toddIndex2++\n\t\t\t}\n\t\t}\n\t\tif(evenIndex2\
    \ === lst1.length){\n\t\t\treturn \"YES\"\n\t\t}\n\t\telse if(oddIndex2 === lst2.length){\n\
    \t\t\treturn \"NO\"\n\t\t}\n\t\telse{\n\t\t\tlet evenIndex3 = 0\n\t\t\tlet oddIndex3\
    \ = 0\n\t\t\tfor(let i = 0; i < lst1.length; i++){\n\t\t\t\tif(lst1[i] % 2 ===\
    \ 0){\n\t\t\t\t\teven.push(lst1[i])\n\t\t\t\t\tevenIndex3++\n\t\t\t\t}\n\t\t\t\
    \telse{\n\t\t\t\t\todds.push(lst1[i])\n\t\t\t\t\toddIndex3++\n\t\t\t\t}\n\t\t\t\
    }\n\t\t\tfor(let i = 0; i < lst2.length; i++){\n\t\t\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\t\t\teven.push(lst2[i])\n\t\t\t\t\tevenIndex3++\n\t\t\t\t}\n\t\t\t\telse{\n\
    \t\t\t\t\todds.push(lst2[i])\n\t\t\t\t\toddIndex3++\n\t\t\t\t}\n\t\t\t}\n\t\t\t\
    if(evenIndex3 === lst1.length){\n\t\t\t\treturn \"YES\"\n\t\t\t}\n\t\t\telse if(oddIndex3\
    \ === lst2.length){\n\t\t\t\treturn \"NO\"\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlet\
    \ evenIndex4 = 0\n\t\t\t\tlet oddIndex4", "    \n}\n", "    // Your code here\n\
    }\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    \n}\n", "\tlet even\
    \ = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i]\
    \ % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}\n\t\telse{\n\t\t\todd.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}\n\t\telse{\n\t\t\todd.push(lst2[i])\n\t\t}\n\t\
    }\n\tif(even.length === lst1.length){\n\t\treturn \"YES\"\n\t}\n\telse{\n\t\t\
    return \"NO\"\n\t}\n}\n", "    // Your code here\n}\n", "\t\n}\n", "    \n}\n",
  "  // Your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "    let even = []\n    let odds = []\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n    \
    \    }else{\n            odds.push(lst1[i])\n        }\n    }\n    for(let i =\
    \ 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        }else{\n            odds.push(lst2[i])\n        }\n    }\n    for(let\
    \ i = 0; i < even.length; i++){\n        if(even[i] === even[even.length - 1])\n\
    \            even.pop()\n    }\n    for(let i = 0; i < odds.length; i++){\n  \
    \      if(odds[i] === odds[odds.length - 1])\n            odds.pop()\n    }\n\
    \    if(even.length === 0){\n        return \"YES\"\n    }else{\n        return\
    \ \"NO\"\n    }\n}\n", "    // Your code here\n}\n", "    var even = [];\n   \
    \ for(var i = 0; i<lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n      \
    \      even.push(lst1[i]);\n        }\n    }\n    for(var i = 0; i<lst2.length;\
    \ i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i]);\n   \
    \     }\n    }\n    if(even.length === lst1.length){\n        return \"YES\";\n\
    \    }\n    return \"NO\";\n}\n", "    var even = [];\n    for(var i = 0; i<lst1.length;\
    \ i++){\n        if(lst1[i] % 2 == 0){\n            even.push(lst1[i]);\n    \
    \    }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i] % 2\
    \ == 0){\n            even.push(lst2[i]);\n        }\n    }\n    even = even.filter(function(item){\n\
    \        return item % 2 == 0;\n    });\n    if(even.length == lst1.length){\n\
    \        return \"YES\";\n    }\n    else{\n        return \"NO\";\n    }\n}\n",
  "    // Your code here\n}\n", "    var even = [];\n    for(var i=0;i<lst1.length;i++){\n\
    \        if(lst1[i]%2==0){\n            even.push(lst1[i]);\n        }\n    }\n\
    \    for(var i=0;i<lst2.length;i++){\n        if(lst2[i]%2==0){\n            even.push(lst2[i]);\n\
    \        }\n    }\n    if(even.length==lst1.length){\n        return \"YES\";\n\
    \    }else{\n        return \"NO\";\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `exchange([1,3,5,7,9],[1,3,5,7,9])`\n<|/\
    \ c |>\n<| c |>\nIt doesn't work because you didn't test the case where lst1 and\
    \ lst2 are the same length. Try it with `exchange([1,3,5,7,9],[1,3,5,7,9])`\n\
    <|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>", "    // Your\
    \ code here\n}\n", "\tlet even = lst1.filter(x => x % 2 === 0);\n\tlet odd = lst2.filter(x\
    \ => x % 2 === 1);\n\tlet evenIndex = 0;\n\tlet oddIndex = 0;\n\tlet evenCount\
    \ = 0;\n\tlet oddCount = 0;\n\twhile (evenIndex < even.length && oddIndex < odd.length){\n\
    \t\tif (even[evenIndex] === odd[oddIndex]){\n\t\t\teven[evenIndex] = even[evenIndex\
    \ + 1];\n\t\t\tevenCount++;\n\t\t\tevenIndex++;\n\t\t\todd[oddIndex] = odd[oddIndex\
    \ + 1];\n\t\t\toddCount++;\n\t\t\toddIndex++;\n\t\t}\n\t\telse if (even[evenIndex]\
    \ < odd[oddIndex]){\n\t\t\teven[evenIndex] = even[evenIndex + 1];\n\t\t\tevenCount++;\n\
    \t\t\tevenIndex++;\n\t\t}\n\t\telse{\n\t\t\todd[oddIndex] = odd[oddIndex + 1];\n\
    \t\t\toddCount++;\n\t\t\toddIndex++;\n\t\t}\n\t}\n\tif (evenCount === even.length){\n\
    \t\treturn \"YES\";\n\t}\n\telse{\n\t\treturn \"NO\";\n\t}\n}\n", "\tlet even\
    \ = [];\n\tlet odds = [];\n\tlet evenCount = 0;\n\tlet oddCount = 0;\n\tfor(let\
    \ i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i]);\n\
    \t\t\tevenCount++;\n\t\t}else{\n\t\t\todds.push(lst1[i]);\n\t\t\toddCount++;\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i]);\n\t\t\tevenCount++;\n\t\t}else{\n\t\t\todds.push(lst2[i]);\n\
    \t\t\toddCount++;\n\t\t}\n\t}\n\tif(evenCount === even.length){\n\t\treturn \"\
    YES\";\n\t}else if(oddCount === odds.length){\n\t\treturn \"NO\";\n\t}else{\n\t\
    \treturn \"NO\";\n\t}\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n  \
    \  return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "  // Write your code here\n}\n", "    // Your code here\n}\n", " \
    \   \n}\n</cell>\n<text>\nProblem 8\nWrite a function that takes an array of numbers\
    \ and returns the number of elements in the array that are less than or equal\
    \ to 10.\n\n\n</text>\n<cell>", "  // Your code here\n}\n", "    // Your code\
    \ here\n}\n", "    // Your code here\n}\n", "    // Write your code here\n}\n",
  "    \n}\n", "    // Your code here\n}\n", "    var even = [];\n    var odd  = [];\n\
    \    for(var i = 0; i<lst1.length; i++){\n        if(lst1[i] % 2 == 0){\n    \
    \        even.push(lst1[i]);\n        }\n        else{\n            odd.push(lst1[i]);\n\
    \        }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i]\
    \ % 2 == 0){\n            even.push(lst2[i]);\n        }\n        else{\n    \
    \        odd.push(lst2[i]);\n        }\n    }\n    if(even.length == lst1.length\
    \ && even.length == lst2.length){\n        return \"YES\";\n    }\n    else{\n\
    \        return \"NO\";\n    }\n}", "\t\n}\n", "    // Your code here\n}\n", " \
    \   \n}\n", "\tlet even = []\n\tlet odds = []\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\
    \todds.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\t\
    if(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\
    \t\t}\n\t}\n\tlet even1 = even.sort()\n\tlet odds1 = odds.sort()\n\tfor(let i\
    \ = 0; i < even1.length; i++){\n\t\tif(even1[i] !== odds1[i]){\n\t\t\treturn \"\
    NO\"\n\t\t}\n\t}\n\treturn \"YES\"\n}\n", "    // Your code here\n}\n</cell>\n\
    <cell>\n# Run this cell to check your answer\nq1.check()\n</cell>\n<cell>\n# Run\
    \ this cell to submit your answer\nq1.submit()\n</cell>\n<text>\nPart B\nWrite\
    \ a function that takes two arrays of numbers, and determines whether it is possible\
    \ to perform an exchange of elements\nbetween them to make lst1 an array of only\
    \ even numbers.\nIf it is possible to exchange elements between the lst1 and lst2\
    \ to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return\
    \ \"NO\".\nFor example:\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\n>>>\
    \ exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\"NO\"\nIt is assumed that the input arrays\
    \ will be non-empty.\nHint: You may want to use Python's built-in function zip().\n\
    \n\n</text>\n<cell>\n# Run this cell to check your answer\nq2.check()\n</cell>\n\
    <cell>\n# Run this cell to submit your answer\nq2.submit()\n</cell>\n<text>\n\
    Part C\nWrite a function that takes two arrays of numbers, and determines whether\
    \ it is possible to perform an exchange of elements\nbetween them to make lst1\
    \ an array of only even numbers.\nIf it is possible to exchange elements between\
    \ the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\"\
    .\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n\"YES\"\n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\"NO\"\nIt is assumed\
    \ that the input arrays will be non-empty.\nHint: You may want to use Python's\
    \ built-in function zip().\n\n\n</text>\n<cell>\n# Run this cell to check your\
    \ answer\nq3.check()\n</cell>\n<cell>\n# Run this cell to submit your answer\n\
    q3.submit()\n</cell>\n<text>\nPart D\nWrite a function that takes two arrays of\
    \ numbers, and determines whether it is possible to perform an exchange of elements\n\
    between them to make lst1 an array of only even numbers.\nIf it is possible to\
    \ exchange elements between the lst1 and lst2 to make\nall the elements of lst1\
    \ to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\
    \"NO\"\nIt is assumed that the input arrays will be non-empty.\nHint: You may\
    \ want to use Python's built-in function zip().\n\n\n</text>\n<cell>\n# Run ",
  "    let even = []\n    let odd = []\n    for(let i = 0; i < lst1.length; i++){\n\
    \        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n        }\n \
    \       else{\n            odd.push(lst1[i])\n        }\n    }\n    for(let i\
    \ = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        }\n        else{\n            odd.push(lst2[i])\n        }\n    }\n \
    \   for(let i = 0; i < even.length; i++){\n        for(let j = 0; j < even.length;\
    \ j++){\n            if(even[i] === even[j]){\n                even.splice(j,\
    \ 1)\n            }\n        }\n    }\n    for(let i = 0; i < odd.length; i++){\n\
    \        for(let j = 0; j < odd.length; j++){\n            if(odd[i] === odd[j]){\n\
    \                odd.splice(j, 1)\n            }\n        }\n    }\n    if(even.length\
    \ === 0){\n        return \"NO\"\n    }\n    else if(odd.length === 0){\n    \
    \    return \"YES\"\n    }\n    else if(even.length === odd.length){\n       \
    \ return \"YES\"\n    }\n    else{\n        return \"NO\"\n    }\n}\n", "    let\
    \ even = [];\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] %\
    \ 2 === 0){\n            even.push(lst1[i]);\n        }\n    }\n    for(let i\
    \ = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i]);\n\
    \        }\n    }\n    if(even.length === lst1.length){\n        return \"YES\"\
    ;\n    }else{\n        return \"NO\";\n    }\n}\n", "    let even = lst1.filter(x\
    \ => x % 2 === 0);\n    let odd = lst2.filter(x => x % 2 === 1);\n    let evenIndex\
    \ = even.indexOf(lst2[0]);\n    let oddIndex = odd.indexOf(lst2[0]);\n    if (evenIndex\
    \ === -1 && oddIndex === -1){\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex !== -1){\n        return \"NO\";\n    }\n    if (evenIndex\
    \ !== -1 && oddIndex === -1){\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex === -1){\n        return \"NO\";\n    }\n    if (evenIndex\
    \ === -1 && oddIndex !== -1){\n        return \"NO\";\n    }\n    if (evenIndex\
    \ !== -1 && oddIndex !== -1){\n        return \"YES\";\n    }\n}\n", "\t\n}\n",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your output.\
    \ If there is no output, then your code is correct.\n\nexchange([1,2,3,4,5,6,7,8,9],\
    \ [1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nProblem 8\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list. For example,\
    \ the list [1,2,3,4,5,6,7,8,9] should return 45.\n\nThe function will take in\
    \ two parameters: a list of numbers, and a number that represents the number that\
    \ you want to add up all of the numbers in the list.\n\nFor example, if the list\
    \ was [1,2,3,4,5,6,7,8,9], and the number you wanted to add up was 10, the output\
    \ should be 45.\n\nThe function will always return an integer.\n\n\n</text>\n\
    <cell>\n# Problem 8\n# Write your function below.\ndef sum_list(lst,num): \n \
    \   sum = 0\n    for i in lst:\n        sum += i\n    return sum + num\n    \n\
    </cell>\n<cell>\n# Run this cell to check your output. If there is no output,\
    \ then your code is correct.\n\nsum_list([1,2,3,4,5,6,7,8,9], 10)\n</cell>\n<text>\n\
    Problem 9\nWrite a function that takes in a list of numbers and returns the product\
    \ of the numbers in the list. For example, the list [1,2,3,4,5,6,7,8,9] should\
    \ return $45$.\n\nThe function will take in two parameters: a list of numbers,\
    \ and a number that represents the number that you want to multiply all of the\
    \ numbers in the list.\n\nFor example, if the list was [1,2,3,4,5,6,7,8,9], and\
    \ the number you wanted to multiply was 10, the output should be $45$.\n\nThe\
    \ function will always return an integer.\n\n\n</text>\n<cell>\n# Problem 9\n\
    # Write your function below.\ndef product_list(lst,num): \n    product = 1\n \
    \   for i in lst:\n        product *= i\n    return product * num\n    \n</cell>\n\
    <cell>\n# Run this cell to check your output. If there is no output, then your\
    \ code is correct.\n\nproduct_list([1,2,3,4,5,6,7,8,9], 10)\n</cell>\n<text>\n\
    Problem 10\nWrite a function that takes in a list of numbers and returns the largest\
    \ number in the list. For example, the list [1,2,3,4,5,6,7,8,9] should return\
    \ 9.\n\nThe function will take in two parameters: a list of numbers, and a number\
    \ that represents the number that you want to find the largest number in the list.\n\
    \nFor example, if the list was [1,2,3,4,5,6,7,8,9], and the number you wanted\
    \ to find the largest number was 9, the output should be 9.\n\nThe function will\
    \ always ", "    // Your code here\n}\n</cell>\n<cell>\n# Write your solution\
    \ below:\n\ndef exchange(lst1, lst2):\n    \n    lst1 = sorted(lst1)\n    lst2\
    \ = sorted(lst2)\n    \n    lst1_even = []\n    lst2_even = []\n    \n    for\
    \ i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1_even.append(lst1[i])\n\
    \        else:\n            lst2_even.append(lst2[i])\n    \n    lst1_even = sorted(lst1_even)\n\
    \    lst2_even = sorted(lst2_even)\n    \n    if lst1_even == lst2_even:\n   \
    \     return \"YES\"\n    else:\n        return \"NO\"\n</cell>\n<cell>\n# Check\
    \ your solution below:\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<cell>\n\
    # Check your solution below:\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n\
    <text>\nProblem 8: Find all possible combinations of k numbers that sum to n\n\
    Given a list of numbers and an integer k, return all possible combinations of\
    \ k numbers that sum to n.\n\nFor example, given [10, 15, 3, 7] and k of 2, a\
    \ solution is:\n\n10, 10\n10 + 15, 10 + 3\n10 + 15, 15 + 3\n10 + 15, 3 + 7\n15\
    \ + 3, 10 + 7\n15 + 3, 7 + 7\n3 + 7, 10 + 7\n3 + 7, 7 + 7\n\n\n</text>\n<cell>\n\
    # Write your solution below:\n\ndef combinations(nums, k):\n    \n    # Your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    // Write\
    \ your code here\n}\n", "    // Your code here\n}\n", "    // Write your code\
    \ here\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n}\n", "    // Write your code\
    \ here\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "\t\
    let even = lst1.filter(x => x % 2 === 0);\n\tlet odd = lst2.filter(x => x % 2\
    \ === 1);\n\tlet evenIndex = even.indexOf(lst2[0]);\n\tlet oddIndex = odd.indexOf(lst2[0]);\n\
    \tlet evenCount = even.length;\n\tlet oddCount = odd.length;\n\tlet exchanged\
    \ = false;\n\t\n\tfor(let i = 0; i < evenCount; i++){\n\t\tif(evenIndex === i){\n\
    \t\t\teven.splice(i, 1);\n\t\t\texchanged = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    \n\tfor(let i = 0; i < oddCount; i++){\n\t\tif(oddIndex === i){\n\t\t\todd.splice(i,\
    \ 1);\n\t\t\texchanged = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif(exchanged){\n\
    \t\treturn \"YES\";\n\t}\n\telse{\n\t\treturn \"NO\";\n\t}\n}\n", "    // Your\
    \ code here\n}\n", "    let even = []\n    for(let i = 0; i < lst1.length; i++){\n\
    \        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n        }\n \
    \   }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n\
    \            even.push(lst2[i])\n        }\n    }\n    if(even.length === lst1.length){\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    var even = [];\n\
    \    for(var i=0;i<lst1.length;i++){\n        if(lst1[i]%2==0){\n            even.push(lst1[i]);\n\
    \        }\n    }\n    for(var i=0;i<lst2.length;i++){\n        if(lst2[i]%2==0){\n\
    \            even.push(lst2[i]);\n        }\n    }\n    return even;\n}\n", " \
    \   // Your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n</cell>\n<cell>", "    // Your code here\n}\n", "  // Your code here\n}\n",
  "    var even = [];\n    for(var i=0;i<lst1.length;i++){\n        if(lst1[i] % 2\
    \ == 0){\n            even.push(lst1[i]);\n        }\n    }\n    for(var i=0;i<lst2.length;i++){\n\
    \        if(lst2[i] % 2 == 0){\n            even.push(lst2[i]);\n        }\n \
    \   }\n    return even.length == lst1.length;\n}\n", "    // Your code here\n\
    }\n", "    \n}\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe input string may contain\
    \ spaces, punctuation, and other non-word characters.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore all non-word\
    \ characters and split on spaces.\nThe function should ignore all spaces and split\
    \ on punctuation.\nThe function should ignore all punctuation and split on spaces.\n\
    The function should ignore all non-word characters and split on spaces.\nThe function\
    \ should ignore all spaces and split on punctuation.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore all non-word\
    \ characters and split on spaces.\nThe function should ignore all spaces and split\
    \ on punctuation.\nThe function should ignore all punctuation and split on spaces.\n\
    The function should ignore all non-word characters and split on spaces.\nThe function\
    \ should ignore all spaces and split on punctuation.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore all non-word\
    \ characters and split on spaces.\nThe function should ignore all spaces and split\
    \ on punctuation.\nThe function should ignore all punctuation and split on spaces.\n\
    The function should ignore all non-word characters and split on spaces.\nThe function\
    \ should ignore all spaces and split on punctuation.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore all non-word\
    \ characters and split on spaces.\nThe function should ignore all spaces and split\
    \ on punctuation.\nThe function should ignore all punctuation and split on spaces.\n\
    The function should ignore all non-word characters and split on spaces.\nThe function\
    \ should ignore all spaces and split on punctuation.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore all non-word\
    \ characters and split on spaces.\nThe function should ignore all spaces and split\
    \ on punctuation.\nThe function should ignore all punctuation and split on spaces.\n\
    The function should ignore all non-word characters and split on spaces.\nThe function\
    \ should ignore all spaces and split on punctuation.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore all non-word\
    \ characters and split on spaces.\nThe function should ignore all spaces and split\
    \ on punctuation.\nThe function should ignore all punctuation and split on spaces.\n\
    The function should ignore all non-word characters and split on spaces.\nThe function\
    \ should ignore all spaces and split on punctuation.\nThe function should ignore\
    \ all punctuation and split on spaces.\nThe function should ignore ", "}\n", " \
    \   // Write your code here\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n}\n", "    \n}\n", "    // Your code here\n}\n</cell>\n<cell>\n#\
    \ Run this cell to check your output. If there is no output, then your code is\
    \ correct.\n\nexchange([1,2,3,4,5], [1,5,3,4,5])\n</cell>\n<text>\nProblem 4\n\
    Write a function that takes in a list of numbers and returns the number of elements\
    \ in the list that are greater than 0.\n\n\n</text>\n<cell>\n# Run this cell to\
    \ check your output.\n# Note that this cell uses \"Run All\" above\ndef count_greater_zero(lst):\n\
    \    # Your code here\n    return 0\n</cell>\n<cell>\n# Run this cell to check\
    \ your output. If there is no output, then your code is correct.\n\ncount_greater_zero([1,2,3,4,5])\n\
    </cell>\n<text>\nProblem 5\nWrite a function that takes in a list of numbers and\
    \ returns the number of elements in the list that are less than 0.\n\n\n</text>\n\
    <cell>\n# Run this cell to check your output.\n# Note that this cell uses \"Run\
    \ All\" above\ndef count_less_zero(lst):\n    # Your code here\n    return 0\n\
    </cell>\n<cell>\n# Run this cell to check your output. If there is no output,\
    \ then your code is correct.\n\ncount_less_zero([1,2,3,4,5])\n</cell>\n<text>\n\
    Problem 6\nWrite a function that takes in a list of numbers and returns the number\
    \ of elements in the list that are even.\n\n\n</text>\n<cell>\n# Run this cell\
    \ to check your output.\n# Note that this cell uses \"Run All\" above\ndef count_even(lst):\n\
    \    # Your code here\n    return 0\n</cell>\n<cell>\n# Run this cell to check\
    \ your output. If there is no output, then your code is correct.\n\ncount_even([1,2,3,4,5])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes in a list of numbers and\
    \ returns the number of elements in the list that are odd.\n\n\n</text>\n<cell>\n\
    # Run this cell to check your output.\n# Note that this cell uses \"Run All\"\
    \ above\ndef count_odd(lst):\n    # Your code here\n    return 0\n</cell>\n<cell>\n\
    # Run this cell to check your output. If there is no output, then your code is\
    \ correct.\n\ncount_odd([1,2,3,4,5])\n</cell>\n<text>\nProblem 8\nWrite a function\
    \ that takes in a list of numbers and returns True if there are two elements in\
    \ the list that add up to a multiple of 3.\n\n\n</text>\n<cell>\n# Run this cell\
    \ to check your output.\n# Note that this cell uses \"Run All\" above\ndef has_multiple_of_three(lst):\n\
    \    # ", "    // Your code here\n}\n", "    // Write your code here\n}\n", " \
    \   \n}\n", "\tlet even = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\
    \todd.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\t\
    if(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todd.push(lst2[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < odd.length;\
    \ j++){\n\t\t\tif(even[i] === odd[j]){\n\t\t\t\teven.splice(i, 1)\n\t\t\t\todd.splice(j,\
    \ 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length;\
    \ i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\
    \t\t\t\teven.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < odd.length; i++){\n\t\tfor(let j = 0; j < odd.length; j++){\n\t\t\
    \tif(odd[i] === odd[j]){\n\t\t\t\todd.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length; i++){\n\t\tfor(let j =\
    \ 0; j < odd.length; j++){\n\t\t\tif(even[i] === odd[j]){\n\t\t\t\teven.splice(i,\
    \ 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odd.length;\
    \ i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\t\tif(odd[i] === even[j]){\n\
    \t\t\t\todd.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\
    \t\tif(even[i] === even[j]){\n\t\t\t\teven.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\t\
    j--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odd.length; i++){\n\t\tfor(let\
    \ j = 0; j < odd.length; j++){\n\t\t\tif(odd[i] === odd[j]){\n\t\t\t\todd.splice(i,\
    \ 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length;\
    \ i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\
    \t\t\t\teven.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < odd.length; i++){\n\t\tfor(let j = 0; j < odd.length; j", "    let\
    \ even = lst1.filter(x => x % 2 === 0);\n    let odd = lst2.filter(x => x % 2\
    \ === 1);\n    let evenOdd = even.concat(odd);\n    let evenOddEven = evenOdd.filter(x\
    \ => x % 2 === 0);\n    let evenOddOdd = evenOdd.filter(x => x % 2 === 1);\n \
    \   let evenOddEvenOdd = evenOddEven.concat(evenOddOdd);\n    let evenOddEvenOddEven\
    \ = evenOddEvenOdd.filter(x => x % 2 === 0);\n    let evenOddEvenOddOdd = evenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n    let evenOddEvenOddEvenOdd = evenOddEvenOddEven.concat(evenOddEvenOddOdd);\n\
    \    let evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOdd.filter(x => x % 2 ===\
    \ 0);\n    let evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x => x % 2\
    \ === 1);\n    let evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEven.concat(evenOddEvenOddEvenOddOdd);\n\
    \    let evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEven.filter(x => x %\
    \ 2 === 0);\n    let evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x =>\
    \ x % 2 === 1);\n    let evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEven.concat(evenOddEvenOddEvenOddOdd);\n\
    \    let evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n    let evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n    let evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEven.concat(evenOddEvenOddEvenOddOdd);\n\
    \    let evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEven.filter(",
  "    let even = [];\n    let odds = [];\n    for (let i = 0; i < lst1.length; i++){\n\
    \        if (lst1[i] % 2 === 0){\n            even.push(lst1[i]);\n        } else\
    \ {\n            odds.push(lst1[i]);\n        }\n    }\n    for (let i = 0; i\
    \ < lst2.length; i++){\n        if (lst2[i] % 2 === 0){\n            even.push(lst2[i]);\n\
    \        } else {\n            odds.push(lst2[i]);\n        }\n    }\n    for\
    \ (let i = 0; i < even.length; i++){\n        if (even[i] === even[even.length-1]){\n\
    \            even.pop();\n        } else {\n            odds.push(even[i]);\n\
    \        }\n    }\n    for (let i = 0; i < odds.length; i++){\n        if (odds[i]\
    \ === odds[odds.length-1]){\n            odds.pop();\n        } else {\n     \
    \       even.push(odds[i]);\n        }\n    }\n    if (even.length === 0){\n \
    \       return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", " \
    \ // Your code here\n}\n", "\t\n}\n", "    var even = true;\n    for(var i=0;\
    \ i<lst1.length; i++){\n        if(lst1[i] % 2 != 0 && lst2[i] % 2 == 0){\n  \
    \          even = false;\n        }\n    }\n    return even;\n}\n", "    // Your\
    \ code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that takes two arrays\
    \ of numbers, and determines whether it is possible to perform an exchange of\
    \ elements from one array to another to make the second array only contain even\
    \ numbers.\nThe function should return \"YES\" if it is possible to perform the\
    \ exchange, and \"NO\" otherwise.\nFor example:\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\
    \"YES\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5],\
    \ [1,3,5,4,2])\n\"NO\"\n>>> exchange([1,2,3,4,5], [1,3,5,4,2])\n\"NO\"\n>>> exchange",
  "    // Your code here\n}\n", "    \n}\n", "    // Your code here\n}\n", "    //\
    \ Your code here\n}\n", "    var even = [];\n    var odds = [];\n    for(var i\
    \ = 0; i<lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i]);\n\
    \        }else{\n            odds.push(lst1[i]);\n        }\n    }\n    for(var\
    \ i = 0; i<lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i]);\n\
    \        }else{\n            odds.push(lst2[i]);\n        }\n    }\n    even.sort();\n\
    \    odds.sort();\n    for(var i = 0; i<even.length; i++){\n        if(even[i]\
    \ !== odds[i]){\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    // Your code here\n}\n", "    var even = []\n    for(var i=0;i<lst1.length;i++){\n\
    \        if(lst1[i]%2==0){\n            even.push(lst1[i])\n        }\n    }\n\
    \    for(var i=0;i<lst2.length;i++){\n        if(lst2[i]%2==0){\n            even.push(lst2[i])\n\
    \        }\n    }\n    if(even.length==lst1.length){\n        return \"YES\"\n\
    \    }else{\n        return \"NO\"\n    }\n}", "    // Your code here\n}\n", " \
    \   // Your code here\n}\n", "    // Your code here\n}\n", "    let even = lst1.filter(function(num){\n\
    \        return num % 2 === 0;\n    });\n    let odd = lst2.filter(function(num){\n\
    \        return num % 2 !== 0;\n    });\n    let evenCount = even.length;\n  \
    \  let oddCount = odd.length;\n    let exchangeCount = evenCount + oddCount;\n\
    \    let exchanged = [];\n    for(let i = 0; i < exchangeCount; i++){\n      \
    \  exchanged.push(even[i % evenCount] + odd[i % oddCount]);\n    }\n    return\
    \ exchanged.length === lst1.length ? \"YES\" : \"NO\";\n}\n", "    // Your code\
    \ here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\nq1.check()\n\
    </cell>\n<cell>\n# Lines below will give you a hint or solution code\n#q1.hint()\n\
    #q1.solution()\n</cell>\n<text>\nPart B\nWrite a function that takes two arrays\
    \ of numbers, and returns an array of the even numbers that are in lst1 but not\
    \ in lst2.\n\n\n</text>\n<cell>\n# Write your function here\ndef not_in_both(lst1,\
    \ lst2){\n    # Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your\
    \ answer\nq2.check()\n</cell>\n<cell>\n# Lines below will give you a hint or solution\
    \ code\n#q2.hint()\n#q2.solution()\n</cell>\n<text>\nPart C\nWrite a function\
    \ that takes two arrays of numbers, and returns an array of the even numbers that\
    \ are in lst1 but not in lst2.\n\n\n</text>\n<cell>\n# Write your function here\n\
    def not_in_both(lst1, lst2){\n    # Your code here\n}\n</cell>\n<cell>\n# Run\
    \ this cell to check your answer\nq3.check()\n</cell>\n<cell>\n# Lines below will\
    \ give you a hint or solution code\n#q3.hint()\n#q3.solution()\n</cell>\n<text>\n\
    Part D\nWrite a function that takes two arrays of numbers, and returns an array\
    \ of the even numbers that are in lst1 but not in lst2.\n\n\n</text>\n<cell>\n\
    # Write your function here\ndef not_in_both(lst1, lst2){\n    # Your code here\n\
    }\n</cell>\n<cell>\n# Run this cell to check your answer\nq4.check()\n</cell>\n\
    <cell>\n# Lines below will give you a hint or solution code\n#q4.hint()\n#q4.solution()\n\
    </cell>\n<text>\nPart E\nWrite a function that takes two arrays of numbers, and\
    \ returns an array of the even numbers that are in lst1 but not in lst2.\n\n\n\
    </text>\n<cell>\n# Write your function here\ndef not_in_both(lst1, lst2){\n  \
    \  # Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your answer\n\
    q5.check()\n</cell>\n<cell>\n# Lines below will give you ", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 &&\
    \ lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "  if(lst1.length != lst2.length){\n    return \"\
    NO\";\n  }\n  \n  for(let i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 ==\
    \ 0 && lst2[i] % 2 == 0){\n      lst1[i] = lst2[i];\n      lst2[i] = lst1[i];\n\
    \    }\n  }\n  \n  return \"YES\";\n}\n", "    let even = []\n    for(let i =\
    \ 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n\
    \        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i]\
    \ % 2 === 0){\n            even.push(lst2[i])\n        }\n    }\n    if(even.length\
    \ === lst1.length){\n        return \"YES\"\n    }else{\n        return \"NO\"\
    \n    }\n}\n", "    // Your code here\n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n    lst1.shift();\n\
    \    lst2.shift();\n    return exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 == 0){\n    lst1.shift();\n    lst2.shift();\n    return exchange(lst1,\
    \ lst2);\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    lst1.shift();\n\
    \    lst2.shift();\n    return exchange(lst1, lst2);\n  }\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n", "    var even = [];\n    for(var\
    \ i = 0; i<lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i]);\n\
    \        }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i]\
    \ % 2 === 0){\n            even.push(lst2[i]);\n        }\n    }\n    for(var\
    \ i = 0; i<even.length; i++){\n        if(even[i] === lst1[i]){\n            even.splice(i,\
    \ 1);\n        }\n    }\n    if(even.length === 0){\n        return \"YES\";\n\
    \    }else{\n        return \"NO\";\n    }\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
