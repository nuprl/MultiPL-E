name: HumanEval_144_simplify
language: js
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns true if x * n evaluates to a whole number and false\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n\
  // >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\"\
  )\n// false\nfunction simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["  // Your code here\n}\n</cell>\n<cell>", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nThe function below takes a string as input and\
    \ returns the number of characters in the string. \nThe function should ignore\
    \ spaces and punctuation, and should ignore capitalization.\n\n\n</text>\n<cell>",
  "    \n}\n", "    // Your code here\n}\n", "    // Write your code here\n}\n</cell>\n\
    <cell>", "    \n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate\
    \ a mathematical expression given as a string. \nThe function should return true\
    \ if the expression can be evaluated and false otherwise.\nThe function should\
    \ return false if the expression contains any unrecognized symbols.\nThe function\
    \ should return false if the expression contains any unrecognized operators.\n\
    The function should return false if the expression contains any unrecognized numbers.\
    \ \nThe function should return false if the expression contains any unrecognized\
    \ operators.\nThe function should return false if the expression contains any\
    \ unrecognized numbers. \nThe function should return false if the expression contains\
    \ any unrecognized operators.\nThe function should return false if the expression\
    \ contains any unrecognized numbers. \nThe function should return false if the\
    \ expression contains any unrecognized operators.\nThe function should return\
    \ false if the expression contains any unrecognized numbers. \nThe function should\
    \ return false if the expression contains any unrecognized operators.\nThe function\
    \ should return false if the expression contains any unrecognized numbers. \n\
    The function should return false if the expression contains any unrecognized operators.\n\
    The function should return false if the expression contains any unrecognized numbers.\
    \ \nThe function should return false if the expression contains any unrecognized\
    \ operators.\nThe function should return false if the expression contains any\
    \ unrecognized numbers. \nThe function should return false if the expression contains\
    \ any unrecognized operators.\nThe function should return false if the expression\
    \ contains any unrecognized numbers. \nThe function should return false if the\
    \ expression contains any unrecognized operators.\nThe function should return\
    \ false if the expression contains any unrecognized numbers. \nThe function should\
    \ return false if the expression contains any unrecognized operators.\nThe function\
    \ should return false if the expression contains any unrecognized numbers. \n\
    The function should return false if the expression contains any unrecognized operators.\n\
    The function should return false if the expression contains any unrecognized numbers.\
    \ \nThe function should return false if the expression contains any unrecognized\
    \ operators.\nThe function should return false if the expression contains any\
    \ unrecognized numbers. \nThe function should return false if the expression contains\
    \ any unrecognized operators.\nThe function should return false if the expression\
    \ contains any unrecognized numbers. \nThe function should return false if the\
    \ expression contains any unrecognized operators.\nThe function should return\
    \ false if the expression contains any unrecognized numbers. \nThe function should\
    \ return false if the expression contains any unrecognized operators.\nThe function\
    \ should return false if the expression contains any unrecognized numbers. \n\
    The function should return false if the expression contains any unrecognized operators.\n\
    The function should return false if the expression contains any unrecognized numbers.\
    \ \nThe function should return false if the expression contains any ", "  // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take\
    \ two fractions as arguments and return true if they are equal and false otherwise.\n\
    >>> fraction1 = Fraction(\"1/5\")\n>>> fraction2 = Fraction(\"1/5\")\n>>> fraction3\
    \ = Fraction(\"1/6\")\n>>> fraction4 = Fraction(\"1/6\")\n>>> fraction5 = Fraction(\"\
    7/10\")\n>>> fraction6 = Fraction(\"7/10\")\n>>> fraction7 = Fraction(\"7/10\"\
    )\n>>> fraction8 = Fraction(\"7/10\")\n>>> fraction9 = Fraction(\"7/10\")\n>>>\
    \ fraction10 = Fraction(\"7/10\")\n>>> fraction11 = Fraction(\"7/10\")\n>>> fraction12\
    \ = Fraction(\"7/10\")\n>>> fraction13 = Fraction(\"7/10\")\n>>> fraction14 =\
    \ Fraction(\"7/10\")\n>>> fraction15 = Fraction(\"7/10\")\n>>> fraction16 = Fraction(\"\
    7/10\")\n>>> fraction17 = Fraction(\"7/10\")\n>>> fraction18 = Fraction(\"7/10\"\
    )\n>>> fraction19 = Fraction(\"7/10\")\n>>> fraction20 = Fraction(\"7/10\")\n\
    >>> fraction21 = Fraction(\"7/10\")\n>>> fraction22 = Fraction(\"7/10\")\n>>>\
    \ fraction23 = Fraction(\"7/10\")\n>>> fraction24 = Fraction(\"7/10\")\n>>> fraction25\
    \ = Fraction(\"7/10\")\n>>> fraction26 = Fraction(\"7/10\")\n>>> fraction27 =\
    \ Fraction(\"7/10\")\n>>> fraction28 = Fraction(\"7/10\")\n>>> fraction29 = Fraction(\"\
    7/10\")\n>>> fraction30 = Fraction(\"7/10\")\n>>> fraction31 = Fraction(\"7/10\"\
    )\n>>> fraction32 = Fraction(\"7/10\")\n>>> fraction33 = Fraction(\"7/10\")\n\
    >>> fraction34 = Fraction(\"7/10\")\n>>> fraction35 = Fraction(\"7/10\")\n>>>\
    \ fraction36 = Fraction(\"7/10\")\n>>> fraction37 = Fraction(\"7/10\")\n>>> fraction38\
    \ = Fraction(\"7/10\")\n>>> fraction39 = Fraction(\"7/10\")\n>>> fraction40 =\
    \ Fraction(\"7/10\")\n>>> fraction41 = Fraction(\"7/10\")\n>>> fraction42 = Fraction(\"\
    7/10\")\n>>> fraction43 = Fraction(\"7/10\")\n>>> fraction44 = Fraction(\"7/10\"\
    )\n>>> fraction45 = Fraction(\"7/10\")\n>>> fraction46 = Fraction(\"7/10\")\n\
    >>> fraction47 = Fraction(\"7/10\")\n>>> fraction48 = Fraction(\"7/10\")\n>>>\
    \ fraction49 = Fraction(\"7/10\")\n>>> fraction", "    var xNum = parseInt(x.split(\"\
    /\")[0]);\n    var xDenom = parseInt(x.split(\"/\")[1]);\n    var nNum = parseInt(n.split(\"\
    /\")[0]);\n    var nDenom = parseInt(n.split(\"/\")[1]);\n    if(xNum == nNum){\n\
    \        if(xDenom == nDenom){\n            return true;\n        }\n    }\n \
    \   return false;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis\
    \ doesn't work. Try simplify(\"1/5\", \"5/1\")\n<|/ c |>\n<| c |>\nI fixed the\
    \ problem you mentioned, thank you for pointing it out. Now it works as expected.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try simplify(\"1/5\", \"5/1\")\n<|/ c |>\n\
    <| c |>\nI fixed the problem you mentioned, thank you for pointing it out. Now\
    \ it works as expected.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  // Your code\
    \ here\n}\n", "    // Write your code here\n}\n", "    var xNum = parseInt(x.split(\"\
    /\")[0]);\n    var xDenom = parseInt(x.split(\"/\")[1]);\n    var nNum = parseInt(n.split(\"\
    /\")[0]);\n    var nDenom = parseInt(n.split(\"/\")[1]);\n    if(xNum == nNum){\n\
    \        if(xDenom == nDenom){\n            return true;\n        }\n    }\n \
    \   return false;\n}\n", "  // Your code here\n}\n</cell>\n<cell>", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that will take\
    \ a string as input and return the string with all consecutive spaces replaced\
    \ by a single space. For example, if the input is \"Hello World\", the output\
    \ should be \"Hello World\".\n\n\n</text>\n<cell>", "  if(x.includes(\"/\")){\n\
    \    let [numerator, denominator] = x.split(\"/\");\n    if(numerator === \"\"\
    \ || denominator === \"\"){\n      return false;\n    }\n    if(numerator ===\
    \ \"\" || denominator === \"\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" || denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator !== \"0\"){\n      return false;\n    }\n    if(numerator\
    \ !== \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return true;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n      return false;\n    }\n    if(numerator\
    \ === \"0\" && denominator === \"0\"){\n", "    \n}\n</cell>\n<text>\nProblem\
    \ 7\nImplement a function that will evaluate a polynomial expression represented\
    \ as a string. \nThe string contains only numbers and operators. \nThe function\
    \ should return true if the expression can be evaluated and false otherwise.\n\
    The function should return false if the expression is of the wrong format. \n\
    The function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the expression contains invalid numbers.\
    \ \nThe function should return false if the expression contains invalid operators.\
    \ \nThe function should return false if the ", "    var nums = x.split(\"/\");\n\
    \    var dens = n.split(\"/\");\n    var numsSum = 0;\n    var densSum = 0;\n\
    \    var numsLength = 0;\n    var densLength = 0;\n    var isNum = false;\n  \
    \  var isDen = false;\n    var isNumOrDen = false;\n    var isNumAndDen = false;\n\
    \    var isNumOrDenAndDen = false;\n    var isNumOrDenOrDen = false;\n    var\
    \ isNumAndDenOrDen = false;\n    var isNumOrDenAndDenOrDen = false;\n    var isNumOrDenOrDenAndDen\
    \ = false;\n    var isNumOrDenAndDenOrDen = false;\n    var isNumOrDenOrDenAndDenOrDen\
    \ = false;\n    var isNumAndDenOrDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumOrDenOrDenAndDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumAndDenOrDenOrDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumOrDenOrDenAndDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumAndDenOrDenOrDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumOrDenOrDenAndDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumAndDenOrDenOrDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumOrDenOrDenAndDenOrDen = false;\n    var isNumAndDenOrDenOrDenOrDen\
    \ = false;\n    var isNumOrDenAndDenOrDenOrDen = false;\n    var isNumOrDenOrDenAndDenOrDen\
    \ = false;\n    var isNumAndDenOrDenOrDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumOrDenOrDenAndDenOrDen = false;\n    var isNumAndDenOrDenOrDenOrDen\
    \ = false;\n    var isNumOrDenAndDenOrDenOrDen = false;\n    var isNumOrDenOrDenAndDenOrDen\
    \ = false;\n    var isNumAndDenOrDenOrDenOrDen = false;\n    var isNumOrDenAndDenOrDenOrDen\
    \ = false;\n    var isNumOrDenOrDenAndDenOrDen = false;\n    var isNumAndDenOrDenOrDenOrDen\
    \ = false;\n    var isNumOrDenAndDenOrDenOrDen = false;\n", "  // Write your code\
    \ here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nThe\
    \ function below takes a string as input and returns the number of words in the\
    \ string. \nThe input string can contain spaces, commas, and periods.\n\n\n</text>\n\
    <cell>", "    var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n   \
    \ var numsLength = nums.length;\n    var densLength = dens.length;\n    var result\
    \ = false;\n    \n    if(numsLength != densLength){\n        return false;\n \
    \   }\n    \n    for(var i = 0; i < numsLength; i++){\n        if(nums[i] == \"\
    \" || dens[i] == \"\"){\n            return false;\n        }\n        \n    \
    \    if(nums[i] == \"0\" && dens[i] == \"0\"){\n            continue;\n      \
    \  }\n        \n        if(nums[i] == \"0\" && dens[i] != \"\"){\n           \
    \ return false;\n        }\n        \n        if(nums[i] != dens[i]){\n      \
    \      return false;\n        }\n    }\n    \n    return true;\n}\n", "    var\
    \ a = x.split(\"/\");\n    var b = n.split(\"/\");\n    var c = a[1] + \"/\" +\
    \ b[1];\n    var d = b[1] + \"/\" + a[1];\n    return c === d;\n}\n", "    //\
    \ Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take a string as input and return the string with all consecutive vowels removed.\n\
    \n>>> removeVowels(\"Hello World\")\n\"Hello World\"\n>>> removeVowels(\"Hello\
    \ World!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\
    \n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello\
    \ World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that will convert a fraction to its decimal equivalent. For example,\n>>> fraction_to_decimal(\"\
    1/5\")\n0.125\n>>> fraction_to_decimal(\"2/3\")\n0.6666666666666666\n>>> fraction_to_decimal(\"\
    1/3\")\n0.3333333333333333\n>>> fraction_to_decimal(\"1/2\")\n0.5\n>>> fraction_to_decimal(\"\
    1/1\")\n1\n>>> fraction_to_decimal(\"1/0\")\n0\n>>> fraction_to_decimal(\"0/0\"\
    )\n0\n>>> fraction_to_decimal(\"0/1\")\n0\n>>> fraction_to_decimal(\"1/-1\")\n\
    0.1111111111111111\n>>> fraction_to_decimal(\"-1/-1\")\n-0.1111111111111111\n\
    >>> fraction_to_decimal(\"-1/-2\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    -2/-1\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"-2/-2\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"-1/-2\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    -1/-1\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"-1/0\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"0/-1\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    0/-2\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"0/-3\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"0/-4\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    0/-5\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"0/-6\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"0/-7\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    0/-8\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"0/-9\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"0/-10\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    0/-11\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"0/-12\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"0/-13\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    0/-14\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"0/-15\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal(\"0/-16\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"\
    0/-17\")\n-0.8333333333333334\n>>> fraction_to_decimal(\"0/-18\")\n-0.8333333333333334\n\
    >>> fraction_to_decimal", "  if(x === n || x === \"\" || n === \"\"){\n    return\
    \ true;\n  }\n  if(x.includes(\"/\") && n.includes(\"/\")){\n    return simplify(x.split(\"\
    /\").join(\"\"), n.split(\"/\").join(\"\"));\n  }\n  if(x.includes(\"/\") && !n.includes(\"\
    /\")){\n    return simplify(x.split(\"/\").join(\"\"), 1);\n  }\n  if(!x.includes(\"\
    /\") && n.includes(\"/\")){\n    return simplify(1, n.split(\"/\").join(\"\"));\n\
    \  }\n  return false;\n}\n", "    var parts = x.split(\"/\");\n    var numerator\
    \ = parts[0];\n    var denominator = parts[1];\n    var wholeNumber = numerator\
    \ / denominator;\n    return wholeNumber === parseInt(wholeNumber);\n}\n", " \
    \   var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLength\
    \ = nums.length;\n    var densLength = dens.length;\n    var numsSum = 0;\n  \
    \  var densSum = 0;\n    var i = 0;\n    while(i < numsLength && i < densLength){\n\
    \        numsSum += parseInt(nums[i]);\n        densSum += parseInt(dens[i]);\n\
    \        i++;\n    }\n    if(numsLength == densLength){\n        if(numsSum ==\
    \ densSum){\n            return true;\n        }\n    }\n    return false;\n}\n",
  "    // Your code here\n}\n</cell>\n<cell>", "    // Your code goes here\n}\n</cell>\n\
    <cell>\n# Run this cell to test your solution\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will convert a fraction to a decimal number. Assume that both fractions are\
    \ valid and do not have zero as denominator. You may assume that the fractions\
    \ are valid and do not contain any decimal points. You may assume that the fractions\
    \ are valid and do not contain any minus signs.\n\n\n</text>\n<cell>", "    \n\
    }\n", "    if (x === n || x === \"\" || n === \"\"){\n        return true;\n \
    \   }\n    var x = x.split(\"/\");\n    var n = n.split(\"/\");\n    var xNum\
    \ = parseInt(x[0]);\n    var xDen = parseInt(x[1]);\n    var nNum = parseInt(n[0]);\n\
    \    var nDen = parseInt(n[1]);\n    if (xNum === 0){\n        return false;\n\
    \    }\n    if (nNum === 0){\n        return false;\n    }\n    if (xNum < nNum){\n\
    \        return false;\n    }\n    if (xNum > nNum){\n        return true;\n \
    \   }\n    if (xNum === nNum){\n        if (xDen === nDen){\n            return\
    \ true;\n        }\n        if (xDen > nDen){\n            return false;\n   \
    \     }\n    }\n    return false;\n}\n", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 3\nThe function below takes in a string representing a fraction\
    \ and returns the fraction represented by the string. For example, simplify(\"\
    1/5\", \"5/1\") returns \"1/5\". The function should return false if the string\
    \ does not represent a fraction.\n\n>>> simplify(\"1/5\", \"5/1\")\n'1/5'\n>>>\
    \ simplify(\"1/6\", \"2/1\")\n'1/6'\n>>> simplify(\"7/10\", \"10/2\")\n'7/2'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"10/0\")\n'7/10'\n\
    >>> simplify(\"7/10\", \"10/0\")\n'7/10'\n>>> simplify(\"7/10\", \"", "  // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate\
    \ a mathematical expression and return its value.\n\nThe function should take\
    \ two arguments, an expression and a variable name. The function should evaluate\
    \ the expression and return its value.\n\n>>> evaluate(\"(1/2)*(2+3)\", \"x\"\
    )\n1.5\n>>> evaluate(\"(1/2)*(2+3)\", \"y\")\n4.5\n>>> evaluate(\"(1/2)*(2+3)\"\
    , \"z\")\n0\n>>> evaluate(\"(1/2)*(2+3)\", \"a\")\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in evaluate\nNameError: name 'a' is not defined\n>>> evaluate(\"(1/2)*(2+3)\"\
    , \"b\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in evaluate\nNameError: name 'b' is not defined\n\
    >>> evaluate(\"(1/2)*(2+3)\", \"c\")\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in evaluate\n\
    NameError: name 'c' is not defined\n>>> evaluate(\"(1/2)*(2+3)\", \"d\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in evaluate\nNameError: name 'd' is not defined\n>>> evaluate(\"\
    (1/2)*(2+3)\", \"e\")\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in evaluate\nNameError: name\
    \ 'e' is not defined\n>>> evaluate(\"(1/2)*(2+3)\", \"f\")\nTraceback (most recent\
    \ call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line\
    \ 2, in evaluate\nNameError: name 'f' is not defined\n>>> evaluate(\"(1/2)*(2+3)\"\
    , \"g\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in evaluate\nNameError: name 'g' is not defined\n\
    >>> evaluate(\"(1/2)*(2+3)\", \"h\")\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in evaluate\n\
    NameError: name 'h' is not defined\n>>> evaluate(\"(1/2)*(2+3)\", \"i\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in evaluate\nNameError: name 'i' is not defined\n>>> evaluate(\"\
    (1/2)*(2+3)\", \"j\")\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, ", "  // Write your code here\n}\n", "  // Your code here\n}\n</cell>\n\
    <cell>", "    var a = x.split(\"/\");\n    var b = n.split(\"/\");\n    var c\
    \ = [];\n    var d = [];\n    var e = [];\n    var f = [];\n    var g = [];\n\
    \    var h = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l =\
    \ 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var\
    \ q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n   \
    \ var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n\
    \    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n\
    \    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n\
    \    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n\
    \    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n\
    \    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n\
    \    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n\
    \    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n\
    \    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n\
    \    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n\
    \    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var ", " \
    \   // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ will calculate the factorial of a number. Factorial of a number is defined as\
    \ $n! = n * (n - 1)!$. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120. Make\
    \ sure you handle non-positive integers properly.\n\n\n</text>\n<cell>", "   \
    \ var numerator=parseInt(x.split(\"/\")[0]);\n    var denominator=parseInt(x.split(\"\
    /\")[1]);\n    if(numerator*denominator==0){\n        return true;\n    }\n  \
    \  if(numerator==0){\n        return false;\n    }\n    if(numerator<0){\n   \
    \     numerator=numerator*-1;\n    }\n    if(denominator<0){\n        denominator=denominator*-1;\n\
    \    }\n    if(numerator>denominator){\n        return false;\n    }\n    if(numerator==denominator){\n\
    \        return true;\n    }\n    if(numerator>0){\n        numerator=numerator/denominator;\n\
    \    }\n    if(denominator>0){\n        denominator=denominator/numerator;\n \
    \   }\n    if(numerator*denominator==0){\n        return true;\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't\
    \ work. `simplify(\"1/5\", \"5/1\")` returns `true` while it should return `false`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added a test case to the answer.\
    \ Can you please check it again?\n<|/ c |>\n<| c |>\nIt doesn't work. Try simplifying\
    \ `1/5` to `1/2`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a test\
    \ case to the answer. Can you please check it again?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try simplifying `1/5` to `1/2`.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take a string as input and return the string with all consecutive vowels\
    \ removed.\n\n>>> removeVowels(\"Hello World\")\n'Hll WoRl'\n>>> removeVowels(\"\
    Hello World!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n\
    >>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\"\
    )\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n\
    >>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\"\
    )\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n\
    >>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\"\
    )\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n\
    >>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\"\
    )\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"\
    Hello World!!!\")\n'Hll WoRlD'\n>>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n\
    >>> removeVowels(\"Hello World!!!\")\n'Hll WoRlD'\n>>> remove", "    // Write\
    \ your code here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function below will return the number of digits in an integer.\n\n\n\
    </text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will return the number of digits in an integer.\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will evaluate a polynomial expression. Your function should take two arguments,\
    \ the first one being the expression to evaluate, and the second one being the\
    \ variable that holds the value of the expression. Your function should return\
    \ a boolean value indicating whether the expression evaluates to a whole number.\n\
    \n>>> evaluate(\"x^2 + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\",\
    \ \"y\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"\
    x^2 + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"y\")\nFalse\n>>>\
    \ evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"\
    x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"y\")\nFalse\n>>> evaluate(\"x^2 +\
    \ 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"\
    x^2 + 3x + 4\", \"y\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"\
    y\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2\
    \ + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"y\")\nFalse\n>>>\
    \ evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"\
    x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"y\")\nFalse\n>>> evaluate(\"x^2 +\
    \ 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"\
    x^2 + 3x + 4\", \"y\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"\
    y\")\nFalse\n>>> evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2\
    \ + 3x + 4\", \"x\")\nTrue\n>>> evaluate(\"x^2 + 3x + 4\", \"y\")\nFalse\n>>>\
    \ evaluate(\"x^2 + 3x + 4\", \"z\")\nFalse\n>>> evaluate(\"x^2 + 3", "    var\
    \ xNum = parseInt(x, 10);\n    var xDeno = parseInt(n, 10);\n    var xNumDeno\
    \ = xNum/xDeno;\n    var xNumMod = xNum % xDeno;\n    var xDenoMod = xDeno%xDeno;\n\
    \    var xNumModDeno = xNumMod/xDenoMod;\n    var xNumModDenoMod = xNumModDeno%xDenoMod;\n\
    \    var xNumModDenoModDeno = xNumModDenoMod/xDenoModDeno;\n    var xNumModDenoModDenoMod\
    \ = xNumModDenoModDeno%xDenoModDeno;\n    var xNumModDenoModDenoModDeno = xNumModDenoModDenoMod/xDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoMod = xNumModDenoModDenoModDeno%xDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoMod = xNumModDenoModDenoModDenoMod/xDenoModDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoModDeno = xNumModDenoModDenoModDenoModDeno%xDenoModDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoModDeno = xNumModDenoModDenoModDenoModDeno%xDenoModDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoModDenoMod = xNumModDenoModDenoModDenoModDenoModDeno%xDenoModDenoModDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoModDenoModDeno = xNumModDenoModDenoModDenoModDenoModDeno%xDenoModDenoModDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoModDenoModDeno = xNumModDenoModDenoModDenoModDenoModDenoModDeno%xDenoModDenoModDenoModDenoModDenoModDeno;\n\
    \    var xNumModDenoModDenoModDenoModDeno", "  // Your code here\n}\n</cell>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will take a string of any length and return true if the string is a valid\
    \ fraction.\n\nThe string can contain any characters, including spaces. You may\
    \ assume that the string does not contain any leading or trailing spaces.\n\n\
    >>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2 3/4\")\nTrue\n>>> fraction(\"\
    1/2 3/4 5/6\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8\")\nTrue\n>>> fraction(\"\
    1/2 3/4 5/6 7/8 9/10\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10 11/12\")\n\
    True\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10 11/12 13/14\")\nTrue\n>>> fraction(\"\
    1/2 3/4 5/6 7/8 9/10 11/12 13/14 15/16\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8\
    \ 9/10 11/12 13/14 15/16 17/18\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10 11/12\
    \ 13/14 15/16 17/18 19/20\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10 11/12\
    \ 13/14 15/16 17/18 19/20 21/22\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10\
    \ 11/12 13/14 15/16 17/18 19/20 21/22 23/24\")\nTrue\n>>> fraction(\"1/2 3/4 5/6\
    \ 7/8 9/10 11/12 13/14 15/16 17/18 19/20 21/22 23/24 25/26\")\nTrue\n>>> fraction(\"\
    1/2 3/4 5/6 7/8 9/10 11/12 13/14 15/16 17/18 19/20 21/22 23/24 25/26 27/28\")\n\
    True\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10 11/12 13/14 15/16 17/18 19/20 21/22\
    \ 23/24 25/26 27/28 29/30\")\nTrue\n>>> fraction(\"1/2 3/4 5/6 7/8 9/10 11/12\
    \ 13/14 15/16 17/18 19/20 21/22 23/24 25/26 27/28 29/30 31/32\")\nTrue\n>>> fraction(\"\
    1/2 3/4 5/6 7/8 9/10 11/12 13/14 15/16 17/18 19/20 21/22 23/24 25/26 27/28 29/30\
    \ 31/32 33/34\")", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will take a string as input and will return the number of\
    \ characters in the string. \nThe function should ignore all non-numeric characters\
    \ and return 0 if the input string contains only numeric characters.\n\n>>> count_characters(\"\
    abc\")\n3\n>>> count_characters(\"123\")\n3\n>>> count_characters(\"abc123\")\n\
    0\n>>> count_characters(\"abc123def\")\n6\n>>> count_characters(\"abc123def456\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"abc123def456ghi\"\
    )\n0\n>>> count_characters(\"abc123def456ghi\")\n0\n>>> count_characters(\"",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take a string of any length, and return a new string where all occurrences\
    \ of \"x\" have been replaced with \"y\".\n>>> replaceAll(\"abxcd\", \"x\", \"\
    y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"\
    abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n\
    >>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"\
    x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"\
    abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n\
    >>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"\
    x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"\
    abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n\
    >>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"\
    x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"\
    abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n\
    >>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"\
    x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"\
    abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n\
    >>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"\
    x\", \"y\")\n'ybcd'\n>>> replaceAll(\"abxcd\", \"x\", \"y\")\n'ybcd'\n>>> replaceAll(\"\
    abxcd\", \"x\", \"y\")", "  // Write your code here\n}\n", "    var nums = x.split(\"\
    /\");\n    var dens = n.split(\"/\");\n    var numsLength = nums.length;\n   \
    \ var densLength = dens.length;\n    var result = false;\n    \n    if(numsLength\
    \ != densLength){\n        return false;\n    }\n    \n    for(var i = 0; i <\
    \ numsLength; i++){\n        if(nums[i] == \"0\" && dens[i] == \"0\"){\n     \
    \       continue;\n        }\n        else if(nums[i] == \"0\" && dens[i] != 0){\n\
    \            return false;\n        }\n        else if(nums[i] != dens[i]){\n\
    \            return false;\n        }\n    }\n    \n    return true;\n}\n", " \
    \   // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ will return the number of digits in an integer.\n\n>>> count_digits(123)\n3\n\
    >>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(0)\n1\n>>>\
    \ count_digits(0)\n1\n>>> count_digits(0)\n1\n>>> count_digits(-1)\n1\n>>> count_digits(-1)\n\
    1\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n\
    >>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>>\
    \ count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n\
    2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n\
    >>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>>\
    \ count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n\
    2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n\
    >>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>>\
    \ count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n\
    2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n\
    >>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>>\
    \ count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n\
    2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n\
    >>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>> count_digits(-2)\n2\n>>>\
    \ count_digits(", "    var numerator,\n        denominator,\n        fraction,\n\
    \        fractionParts,\n        wholeNumber,\n        wholeNumberParts,\n   \
    \     i,\n        j,\n        fractionLength,\n        fractionLengthParts,\n\
    \        fractionPart,\n        wholeNumberLength,\n        wholeNumberLengthParts,\n\
    \        wholeNumberPart,\n        fractionalPart,\n        wholeNumberFractionalPart,\n\
    \        wholeNumberFractionalParts,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLengthParts,\n        wholeNumberFractionalPartsLengthPart,\n\
    \        fractionalParts,\n        wholeNumberFractionalPartsLengthParts,\n  \
    \      wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLengthPart,\n\
    \        fractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n \
    \       wholeNumberFractionalPartsLengthPart,\n        wholeNumberFractionalPartsLengthParts,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLengthParts,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPartsLength,\n        wholeNumberFractionalPartsLength,\n\
    \        wholeNumberFractionalPar", "    var a = x.split(\"/\");\n    var b =\
    \ n.split(\"/\");\n    var c = a[1] + \"/\" + b[1];\n    return a[0] + \"/\" +\
    \ b[0] === c;\n}\n", "    var numerator = parseInt(x.split(\"/\")[0]);\n    var\
    \ denominator = parseInt(x.split(\"/\")[1]);\n    if(isNaN(numerator) || isNaN(denominator)){\n\
    \        return false;\n    }\n    if(numerator == 0 && denominator == 0){\n \
    \       return true;\n    }\n    if(numerator == 0){\n        return false;\n\
    \    }\n    if(denominator == 0){\n        return false;\n    }\n    if(numerator\
    \ > denominator){\n        return false;\n    }\n    if(numerator < denominator){\n\
    \        return true;\n    }\n    if(numerator == denominator){\n        return\
    \ true;\n    }\n    if(numerator % denominator == 0){\n        return true;\n\
    \    }\n    return false;\n}\n", "  // Write your code here\n}\n", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will take\
    \ a fraction as an input and return the fraction simplified to a whole number.\n\
    \n\n</text>\n<cell>", "  if(n.indexOf(\"/\") !== -1){\n    var nums = x.split(\"\
    /\");\n    var dens = n.split(\"/\");\n    var numsLength = nums.length;\n   \
    \ var densLength = dens.length;\n    var isNumsEqual = true;\n    var isDensEqual\
    \ = true;\n    for(var i=0; i<numsLength; i++){\n      if(nums[i] !== \"0\"){\n\
    \        isNumsEqual = false;\n      }\n    }\n    for(var i=0; i<densLength;\
    \ i++){\n      if(dens[i] !== \"0\"){\n        isDensEqual = false;\n      }\n\
    \    }\n    if(isNumsEqual && isDensEqual){\n      return true;\n    }\n  }\n\
    \  return false;\n}\n", "  // Write your code here\n}\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will return the number\
    \ of digits in a given fraction. Both fraction and numerator are strings, and\
    \ have the following format, <numerator>/<denominator>. Assume that both numerator\
    \ and denominator are positive whole numbers. You can assume that x, and n are\
    \ valid fractions, and do not have zero as denominator.\n\n\n</text>\n<cell>",
  "  if(x.includes(\"/\")){\n    let [numer, denom] = x.split(\"/\");\n    if(numer\
    \ === \"0\" && denom === \"0\"){\n      return true;\n    }\n    if(numer ===\
    \ \"0\"){\n      return false;\n    }\n    if(denom === \"0\"){\n      return\
    \ true;\n    }\n    if(numer === \"1\" && denom === \"1\"){\n      return true;\n\
    \    }\n    if(numer === \"1\" && denom === \"0\"){\n      return true;\n    }\n\
    \    if(numer === \"1\" && denom === \"1\"){\n      return true;\n    }\n    if(numer\
    \ === \"1\" && denom === \"2\"){\n      return true;\n    }\n    if(numer ===\
    \ \"1\" && denom === \"3\"){\n      return true;\n    }\n    if(numer === \"1\"\
    \ && denom === \"4\"){\n      return true;\n    }\n    if(numer === \"1\" && denom\
    \ === \"5\"){\n      return true;\n    }\n    if(numer === \"1\" && denom ===\
    \ \"6\"){\n      return true;\n    }\n    if(numer === \"1\" && denom === \"7\"\
    ){\n      return true;\n    }\n    if(numer === \"1\" && denom === \"8\"){\n \
    \     return true;\n    }\n    if(numer === \"1\" && denom === \"9\"){\n     \
    \ return true;\n    }\n    if(numer === \"1\" && denom === \"10\"){\n      return\
    \ true;\n    }\n    if(numer === \"1\" && denom === \"11\"){\n      return true;\n\
    \    }\n    if(numer === \"1\" && denom === \"12\"){\n      return true;\n   \
    \ }\n    if(numer === \"1\" && denom === \"13\"){\n      return true;\n    }\n\
    \    if(numer === \"1\" && denom === \"14\"){\n      return true;\n    }\n   \
    \ if(numer === \"1\" && denom === \"15\"){\n      return true;\n    }\n    if(numer\
    \ === \"1\" && denom === \"16\"){\n      return true;\n    }\n    if(numer ===\
    \ \"1\" && denom === \"17\"){\n      return true;\n    }\n    if(numer === \"\
    1\" && denom === \"18\"){\n      return true;\n    }\n    if(numer === \"1\" &&\
    \ denom === \"19\"){\n      return true;\n    }\n    if(numer === \"1\" && denom\
    \ === \"20\"){\n      return true;\n    }\n    if(numer === \"1\" && denom ===\
    \ \"21\"){\n      return true;\n    }\n    if(numer === \"1\" && denom === \"\
    22\"){\n      return true;\n    }\n    if(numer === \"1\" && denom === \"23\"\
    ){\n      return true;\n    }\n    if(numer === \"1\" && denom === \"24\"){\n\
    \      return true;\n    }\n    if(numer === \"1\" && denom === \"25\"){\n   \
    \   return true;\n    }\n    if(num", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 4\nWrite a function that will take two fractions as input and\
    \ return the greatest common divisor of them. Both fractions are represented as\
    \ strings. The function should return an integer that represents the greatest\
    \ common divisor of both fractions.\n\n\n</text>\n<cell>", "    var a = x.split(\"\
    /\");\n    var b = n.split(\"/\");\n    var c = [];\n    var d = [];\n    var\
    \ e = [];\n    var f = [];\n    var g = [];\n    var h = [];\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var A = 0;\n    var B = 0;\n    var C = 0;\n\
    \    var D = 0;\n    var E = 0;\n    var F = 0;\n    var G = 0;\n    var H = 0;\n\
    \    var I = 0;\n    var J = 0;\n    var K = 0;\n    var L = 0;\n    var M = 0;\n\
    \    var N = 0;\n    var O = 0;\n    var P = 0;\n    var Q = 0;\n    var R = 0;\n\
    \    var S = 0;\n    var T = 0;\n    var U = 0;\n    var V = 0;\n    var W = 0;\n\
    \    var X = 0;\n    var Y = 0;\n    var Z = 0;\n    var a = 0;\n    var b = 0;\n\
    \    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n\
    \    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n\
    \    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n\
    \    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var A = 0;\n\
    \    var B = 0;\n    var C = 0;\n    var D = 0;\n    var E = 0;\n    var F = 0;\n\
    \    var G = 0;\n    var H = 0;\n    var I = 0;\n    var J = 0;\n    var K = 0;\n\
    \    var L = 0;\n    var M = 0;\n    var N = 0;\n    var O = 0;\n    var P = 0;\n\
    \    var Q = 0;\n    var R = 0;\n    var S = 0;\n    var T = 0;\n    var U = 0;\n\
    \    var V = 0;\n    var W = 0;\n    var X = 0;\n    var Y = 0;\n    var Z = 0;\n\
    \    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n\
    \    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n\
    \    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take a fraction as input and return the fraction after simplification.\nThe\
    \ function should take two parameters: a string representing a fraction, and an\
    \ integer representing a power of 10. \nThe function should return true if and\
    \ only if the input string can be simplified to a fraction with the same denominator\
    \ as the input fraction, \nand false otherwise.\n\n>>> simplify(\"1/5\", \"5/1\"\
    )\nTrue\n>>> simplify(\"1/6\", \"2/1\")\nFalse\n>>> simplify(\"7/10\", \"10/2\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/2\")\nTrue\n>>> simplify(\"1/10\", \"1/10\"\
    )\nTrue\n>>> simplify(\"1/10\", \"1/2\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10\", \"1/10\"\
    )\nFalse\n>>> simplify(\"1/10\", \"1/10\")\nFalse\n>>> simplify(\"1/10", "   \
    \ // Your code here\n}\n</cell>\n<cell>", "  // Write your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will evaluate a mathematical expression.\
    \ Your function should take two parameters: a string representing the expression,\
    \ and a dictionary that maps variable names to their values. Your function should\
    \ return a dictionary that maps variable names to their values. For example, given\
    \ the following expression:\n\n$x + y$\n\nYour function should return the following\
    \ dictionary:\n\n{'x': 1, 'y': 1}\n\n</text>\n<cell>", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will take two fractions\
    \ as input and return the greatest common divisor of them. Both fractions are\
    \ valid fractions. You can assume that both fractions do not have zero as denominator.\
    \ Your function should return 0 if both fractions are invalid.\n\n\n</text>\n\
    <cell>", "    // Write your code here\n}\n</cell>\n<text>\nTask 3\nImplement a\
    \ function that will evaluate a mathematical expression given as a string. \n\
    The function should return a boolean value indicating whether the expression evaluates\
    \ to true or false. \nThe function should return false if the expression is invalid,\
    \ for example if the expression is missing a closing parenthesis, or a number\
    \ that does not have a valid fraction representation. \nThe function should return\
    \ true if the expression is valid and can be evaluated successfully.\n\n>>> evaluate(\"\
    (2 + 3) * 4\")\nTrue\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> evaluate(\"(2\
    \ + 3) * 4\")\nFalse\n>>> evaluate(\"(2 + 3) * 4\")\nFalse\n>>> ", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes a string\
    \ as input and returns the number of characters in the string. \nThe function\
    \ should ignore spaces and punctuation characters. \nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ignore\
    \ leading zeros in the numerator and denominator.\nThe function should ignore\
    \ trailing zeros in the numerator and denominator.\nThe function should ", " \
    \   // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take two fractions as input and return the greatest common denominator\
    \ of the two fractions. You can assume that both fractions have valid denominators.\n\
    \n\n</text>\n<cell>", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that will take a string as input and return the number of\
    \ characters in the string.\n\n\n</text>\n<cell>", "  // Write your code here\n\
    }\n</cell>\n<text>\nTask 3: Write a function that will convert a fraction to a\
    \ decimal number. Both fraction and decimal number have the following format,\n\
    <numerator>/<denominator>. Both numerator and denominator are positive whole numbers.\
    \ You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\
    >>> fraction_to_decimal(\"1/5\")\n0.125\n>>> fraction_to_decimal(\"2/3\")\n0.66\n\
    >>> fraction_to_decimal(\"1/6\")\n0.16666666666666666\n>>> fraction_to_decimal(\"\
    7/10\")\n0.14285714285714285\n>>> fraction_to_decimal(\"10/2\")\n0.14285714285714285\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"0/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 0/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"0/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 0/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"0/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 0/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"0/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 0/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"0/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <", "    // Write your code here\n}\n", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 4\nThe function below will return the greatest common divisor\
    \ of positive integers x and y. The function should return 0 if the two numbers\
    \ are the same.\n\n>>> greatest_common_divisor(100, 10)\n0\n>>> greatest_common_divisor(100,\
    \ 5)\n5\n>>> greatest_common_divisor(100, 7)\n7\n>>> greatest_common_divisor(100,\
    \ 1)\n1\n>>> greatest_common_divisor(100, 0)\n0\n>>> greatest_common_divisor(100,\
    \ -1)\n0\n>>> greatest_common_divisor(100, -5)\n5\n>>> greatest_common_divisor(100,\
    \ -7)\n7\n>>> greatest_common_divisor(100, -1)\n1\n>>> greatest_common_divisor(100,\
    \ -5)\n5\n>>> greatest_common_divisor(100, -7)\n7\n>>> greatest_common_divisor(100,\
    \ 0)\n0\n>>> greatest_common_divisor(100, 1)\n1\n>>> greatest_common_divisor(100,\
    \ 2)\n1\n>>> greatest_common_divisor(100, 3)\n2\n>>> greatest_common_divisor(100,\
    \ 4)\n2\n>>> greatest_common_divisor(100, 5)\n5\n>>> greatest_common_divisor(100,\
    \ 6)\n5\n>>> greatest_common_divisor(100, 7)\n7\n>>> greatest_common_divisor(100,\
    \ 8)\n7\n>>> greatest_common_divisor(100, 9)\n7\n>>> greatest_common_divisor(100,\
    \ 10)\n10\n>>> greatest_common_divisor(100, 11)\n10\n>>> greatest_common_divisor(100,\
    \ 12)\n10\n>>> greatest_common_divisor(100, 13)\n10\n>>> greatest_common_divisor(100,\
    \ 14)\n10\n>>> greatest_common_divisor(100, 15)\n10\n>>> greatest_common_divisor(100,\
    \ 16)\n10\n>>> greatest_common_divisor(100, 17)\n10\n>>> greatest_common_divisor(100,\
    \ 18)\n10\n>>> greatest_common_divisor(100, 19)\n10\n>>> greatest_common_divisor(100,\
    \ 20)\n10\n>>> greatest_common_divisor(100, 21)\n10\n>>> greatest_common_divisor(100,\
    \ 22)\n10\n>>> greatest_common_divisor(100, 23)\n10\n>>> greatest_common_divisor(100,\
    \ 24)\n10\n>>> greatest_common_divisor(100, 25)\n10\n>>> greatest_common_divisor(100,\
    \ 26)\n10\n>>> greatest_", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will evaluate a mathematical expression in prefix\
    \ notation. For example, given an expression like \"(5 + 3) * (6 - 2)\", the function\
    \ should return \"(15 - 2) * (6 + 3)\". The function should return null if the\
    \ expression is invalid or malformed.\n\nThe function should return null if the\
    \ expression is invalid or malformed.\n\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\
    \"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 +\
    \ 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"\
    (5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\"\
    )\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6\
    \ + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"\
    (5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\"\
    )\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6\
    \ + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"\
    (5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\"\
    )\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6\
    \ + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"\
    (5 + 3) * (6 - 2)\")\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\"\
    )\n\"(15 - 2) * (6 + 3)\"\n>>> evaluate(\"(5 + 3) * (6 - 2)\")\n\"(15 - ", " \
    \ // Write your code here\n}\n", "    var numerator = x[0]\n    var denominator\
    \ = x[1]\n    var numeratorPart = numerator.split(\"/\")[0]\n    var denominatorPart\
    \ = denominator.split(\"/\")[0]\n    var numeratorIntegerPart = numerator.split(\"\
    /\")[1]\n    var denominatorIntegerPart = denominator.split(\"/\")[1]\n    var\
    \ numeratorDecimalPart = numerator.split(\"/\")[2]\n    var denominatorDecimalPart\
    \ = denominator.split(\"/\")[2]\n    var numeratorDecimalIntegerPart = numerator.split(\"\
    /\")[3]\n    var denominatorDecimalIntegerPart = denominator.split(\"/\")[3]\n\
    \    var numeratorDecimalIntegerPartPart = (numeratorDecimalIntegerPart.split(\"\
    .\"))[0]\n    var denominatorDecimalIntegerPartPart = (denominatorDecimalIntegerPart.split(\"\
    .\"))[0]\n    var numeratorDecimalIntegerPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[1]\n    var denominatorDecimalIntegerPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[1]\n    var numeratorDecimalIntegerPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[2]\n    var denominatorDecimalIntegerPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[2]\n    var numeratorDecimalIntegerPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[3]\n    var denominatorDecimalIntegerPartPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[3]\n    var numeratorDecimalIntegerPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[4]\n    var denominatorDecimalIntegerPartPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[4]\n    var numeratorDecimalIntegerPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[5]\n    var denominatorDecimalIntegerPartPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[5]\n    var numeratorDecimalIntegerPartPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[6]\n    var denominatorDecimalIntegerPartPartPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[6]\n    var numeratorDecimalIntegerPartPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[7]\n    var denominatorDecimalIntegerPartPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[7]\n    var numeratorDecimalIntegerPartPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[8]\n    var denominatorDecimalIntegerPartPartPartPartPart = (denominatorDecimalIntegerPartPart.split(\"\
    .\"))[8]\n    var numeratorDecimalIntegerPartPartPartPartPartPart = (numeratorDecimalIntegerPartPart.split(\"\
    .\"))[9]\n    var denominatorDecimalIntegerPartPartPartPartPartPart = (denominatorDecimal",
  "  if(n.includes(\"/\")){\n    let [numerator, denominator] = n.split(\"/\");\n\
    \    if(numerator == \"\" || denominator == \"\"){\n      return false;\n    }\n\
    \    if(numerator == 0 && denominator == 0){\n      return true;\n    }\n    if(numerator\
    \ == \"\"){\n      numerator = \"0\";\n    }\n    if(denominator == \"\"){\n \
    \     denominator = \"1\";\n    }\n    if(numerator.includes(\".\")){\n      numerator\
    \ = numerator.replace(\".\", \"\");\n    }\n    if(denominator.includes(\".\"\
    )){\n      denominator = denominator.replace(\".\", \"\");\n    }\n    if(numerator\
    \ == \"\"){\n      numerator = \"0\";\n    }\n    if(denominator == \"\"){\n \
    \     denominator = \"1\";\n    }\n    if(numerator == \"\"){\n      numerator\
    \ = \"0\";\n    }\n    if(denominator == \"\"){\n      denominator = \"1\";\n\
    \    }\n    if(numerator == \"\"){\n      numerator = \"0\";\n    }\n    if(denominator\
    \ == \"\"){\n      denominator = \"1\";\n    }\n    if(numerator == \"\"){\n \
    \     numerator = \"0\";\n    }\n    if(denominator == \"\"){\n      denominator\
    \ = \"1\";\n    }\n    if(numerator == \"\"){\n      numerator = \"0\";\n    }\n\
    \    if(denominator == \"\"){\n      denominator = \"1\";\n    }\n    if(numerator\
    \ == \"\"){\n      numerator = \"0\";\n    }\n    if(denominator == \"\"){\n \
    \     denominator = \"1\";\n    }\n    if(numerator == \"\"){\n      numerator\
    \ = \"0\";\n    }\n    if(denominator == \"\"){\n      denominator = \"1\";\n\
    \    }\n    if(numerator == \"\"){\n      numerator = \"0\";\n    }\n    if(denominator\
    \ == \"\"){\n      denominator = \"1\";\n    }\n    if(numerator == \"\"){\n \
    \     numerator = \"0\";\n    }\n    if(denominator == \"\"){\n      denominator\
    \ = \"1\";\n    }\n    if(numerator == \"\"){\n      numerator = \"0\";\n    }\n\
    \    if(denominator == \"\"){\n      denominator = \"1\";\n    }\n    if(numerator\
    \ == \"\"){\n      numerator = \"0\";\n    }\n    if(denominator == \"\"){\n \
    \     denominator = \"1\";\n    }\n    if(numerator == \"\"){\n      numerator\
    \ = \"0\";\n    }\n    if(denominator == \"\"){\n      denominator = \"1\";\n\
    \    }\n    if(numerator == \"\"){\n      numerator = \"0\";\n    }\n    if(",
  "    \n}\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that will return the number of digits in an integer.\n\n\n</text>\n\
    <cell>", "    var xNum = parseInt(x.split(\"/\")[0]);\n    var xDenom = parseInt(x.split(\"\
    /\")[1]);\n    var nNum = parseInt(n.split(\"/\")[0]);\n    var nDenom = parseInt(n.split(\"\
    /\")[1]);\n    if(xNum == nNum && xDenom == nDenom){\n        return true;\n \
    \   }\n    return false;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n<| c\
    \ |>\nThis doesn't work for `simplify(\"1/2\", \"1/2\")`\n<|/ c |>\n<| c |>\n\
    Yes, it doesn't. That's why I said \"You can assume that x, and n are valid fractions,\
    \ and do not have zero as denominator.\"\n<|/ c |>\n<| c |>\nI see. But it still\
    \ doesn't work for `simplify(\"1/2\", \"1/3\")`\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it and it works. I edited my answer to include a link to a working\
    \ fiddle that shows it working.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ and it works. I edited my answer to include a link to a working fiddle that\
    \ shows it working.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 7\nImplement a function that will evaluate a polynomial\
    \ expression given as a string in the form of <polynomial>/<variable>. For example,\
    \ \"1/x\" is a valid expression, and \"1/x\" evaluates to \"x\". Assume that all\
    \ variables are valid strings, and do not contain any spaces.\n\n>>> evaluate(\"\
    1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>>\
    \ evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\"\
    )\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"\
    1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>>\
    \ evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\"\
    )\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"\
    1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>>\
    \ evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\"\
    )\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"\
    1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>>\
    \ evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\"\
    )\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"\
    1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>>\
    \ evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\"\
    )\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"1/x\")\n\"x\"\n>>> evaluate(\"",
  "  // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below will take\
    \ a string as input and return the string with the first letter of each word capitalized.\
    \ For example, if the input string is \"I like Python\", the output should be\
    \ \"I like Python\".\n\n\n</text>\n<cell>", "    // Write your code here\n}\n\
    </cell>\n<text>\nProblem 7\nWrite a function that will take two fractions as input\
    \ and return the greatest common denominator of the two fractions. You can assume\
    \ that both fractions have valid denominators.\n\n\n</text>\n<cell>", "    //\
    \ Your code here\n}\n</cell>\n<text>\nPart III: Implement a function to evaluate\
    \ a polynomial expression\n\n</text>\n<text>\nThe function should accept two arguments:\
    \ a string representing a polynomial expression and an integer representing a\
    \ power of x. The function should return a string representing the value of the\
    \ polynomial expression evaluated at x.\n\nThe function should return an error\
    \ message if the input is not valid. For example, if the input is a string that\
    \ does not represent a polynomial expression or if the input is an integer that\
    \ does not represent a power of x.\n\nThe function should return an error message\
    \ if the input is not valid. For example, if the input is a string that does not\
    \ represent a polynomial expression or if the input is an integer that does not\
    \ represent a power of x.\n\nThe function should return an error message if the\
    \ input is not valid. For example, if the input is a string that does not represent\
    \ a polynomial expression or if the input is an integer that does not represent\
    \ a power of x.\n\nThe function should return an error message if the input is\
    \ not valid. For example, if the input is a string that does not represent a polynomial\
    \ expression or if the input is an integer that does not represent a power of\
    \ x.\n\nThe function should return an error message if the input is not valid.\
    \ For example, if the input is a string that does not represent a polynomial expression\
    \ or if the input is an integer that does not represent a power of x.\n\nThe function\
    \ should return an error message if the input is not valid. For example, if the\
    \ input is a string that does not represent a polynomial expression or if the\
    \ input is an integer that does not represent a power of x.\n\nThe function should\
    \ return an error message if the input is not valid. For example, if the input\
    \ is a string that does not represent a polynomial expression or if the input\
    \ is an integer that does not represent a power of x.\n\nThe function should return\
    \ an error message if the input is not valid. For example, if the input is a string\
    \ that does not represent a polynomial expression or if the input is an integer\
    \ that does not represent a power of x.\n\nThe function should return an error\
    \ message if the input is not valid. For example, if the input is a string that\
    \ does not represent a polynomial expression or if the input is an integer that\
    \ does not represent a power of x.\n\nThe function should return an error message\
    \ if the input is not valid. For example, if the input is a string that does not\
    \ represent a polynomial expression or if the input is an integer that does not\
    \ represent a power of x.\n\nThe function should return an error message if the\
    \ input is not valid. For example, if the input is a string that does not represent\
    \ a polynomial expression or if the input is an integer that does not represent\
    \ a power of x.\n\nThe function should return an error message if the input is\
    \ not valid. For example, if the input is a string that does not represent a polynomial\
    \ expression or if the input is an integer that does not represent a power of\
    \ x.\n\nThe function should return an error message if the input is not valid.\
    \ For example, if the input is a string that does not represent a polynomial expression\
    \ or if the input is an integer that does not represent ", "  // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will convert a fraction\
    \ to a decimal number. Your function should take two arguments, a fraction string\
    \ and a decimal number. Your function should return a new decimal number that\
    \ is the fraction in the decimal number. For example, if the fraction string was\
    \ \"1/5\" and decimal number was 5, your function should return 3.\n\n>>> fraction_to_decimal(\"\
    1/5\", 5)\n3\n>>> fraction_to_decimal(\"1/5\", 10)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 15)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 20)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 25)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 30)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 35)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 40)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 45)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 50)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 55)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 60)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 65)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 70)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 75)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 80)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 85)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 90)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 95)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 100)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 105)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 110)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 115)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 120)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 125)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"1/5\", 130)\n3.3333333333333335\n>>> fraction_to_decimal(\"\
    1/5\", 135)\n3.3333333333333335\n>>> fraction_to_decimal(\"1/5\", 140)\n3.3333333333333335\n\
    >>> fraction_to_decimal(\"", "    \n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that will evaluate a mathematical expression given in string form and return\
    \ its value.\n\n>>> evaluate(\"(5 + 3) * 2\")\n18\n>>> evaluate(\"(5 + 3) * 2\
    \ + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3)\
    \ * 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2\")\n18\n\
    >>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3)\
    \ * 2 + 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 +\
    \ 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\
    \ + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\"\
    )\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\"\
    )\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\
    \ + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 +\
    \ 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2\
    \ + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 +\
    \ 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"\
    (5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 +\
    \ 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\
    \ + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 +\
    \ 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\"\
    )\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\
    \ + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 +\
    \ 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 +\
    \ 2 + 2\")\n18\n>>> evaluate(\"(5 + 3) * 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2\
    \ + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + ", "    \n    // Your code\
    \ goes here\n    \n}\n", "  // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function should return true if the given fraction is equal to the given\
    \ fraction, modulo the\ngiven modulus. Both fractions are strings, and both fractions\
    \ consist of two positive whole numbers,\nseparated by a slash. For example, the\
    \ fraction \"1/3\" can be simplified to \"1/2\" by multiplying the\nnumerator\
    \ by 2, and the denominator by 3, or by dividing the numerator by 3, and the denominator\
    \ by\n2. Both fractions also consist of two positive whole numbers, separated\
    \ by a slash.\n\nThe function should return false if the given fraction is not\
    \ equal to the given fraction, modulo the\ngiven modulus. Both fractions are strings,\
    \ and both fractions consist of two positive whole numbers,\nseparated by a slash.\
    \ For example, the fraction \"1/3\" can be simplified to \"1/2\" by multiplying\
    \ the\nnumerator by 2, and the denominator by 3, or by dividing the numerator\
    \ by 3, and the denominator by\n2. Both fractions also consist of two positive\
    \ whole numbers, separated by a slash.\n\nThe function should return false if\
    \ the given fraction is not equal to the given fraction, modulo the\ngiven modulus.\
    \ Both fractions are strings, and both fractions consist of two positive whole\
    \ numbers,\nseparated by a slash. For example, the fraction \"1/3\" can be simplified\
    \ to \"1/2\" by multiplying the\nnumerator by 2, and the denominator by 3, or\
    \ by dividing the numerator by 3, and the denominator by\n2. Both fractions also\
    \ consist of two positive whole numbers, separated by a slash.\n\nThe function\
    \ should return false if the given fraction is not equal to the given fraction,\
    \ modulo the\ngiven modulus. Both fractions are strings, and both fractions consist\
    \ of two positive whole numbers,\nseparated by a slash. For example, the fraction\
    \ \"1/3\" can be simplified to \"1/2\" by multiplying the\nnumerator by 2, and\
    \ the denominator by 3, or by dividing the numerator by 3, and the denominator\
    \ by\n2. Both fractions also consist of two positive whole numbers, separated\
    \ by a slash.\n\nThe function should return false if the given fraction is not\
    \ equal to the given fraction, modulo the\ngiven modulus. Both fractions are strings,\
    \ and both fractions consist of two positive whole numbers,\nseparated by a slash.\
    \ For example, the fraction \"1/3\" can be simplified to \"1/2\" by multiplying\
    \ the\nnumerator by 2, and the denominator by 3, or by dividing the numerator\
    \ by 3, and the denominator by\n2. Both fractions also consist of two positive\
    \ whole numbers, separated by a slash.\n\nThe ", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nImplement a function that will calculate the factorial of a\
    \ number. Factorial of a number is the product of all positive integers less than\
    \ or equal to that number.\n\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(100)\nTraceback (most recent call last):\n  File \"<stdin>\", line\
    \ 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n  File \"<stdin>\"\
    , line 2, in <genexpr>\nTypeError: unsupported operand type(s) for *: 'int' and\
    \ 'str'\n>>> factorial(-1)\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n  File \"<stdin>\"\
    , line 2, in <genexpr>\nTypeError: unsupported operand type(s) for *: 'int' and\
    \ 'str'\n>>> factorial(\"-1\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n  File\
    \ \"<stdin>\", line 2, in <genexpr>\nTypeError: unsupported operand type(s) for\
    \ *: 'int' and 'str'\n>>> factorial(\"1/2\")\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    \  File \"<stdin>\", line 2, in <genexpr>\nTypeError: unsupported operand type(s)\
    \ for *: 'int' and 'str'\n>>> factorial(\"1/0\")\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in factorial\n  File \"<stdin>\", line 2, in <genexpr>\nTypeError: unsupported\
    \ operand type(s) for *: 'int' and 'str'\n>>> factorial(\"1/-1\")\nTraceback (most\
    \ recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\"\
    , line 2, in factorial\n  File \"<stdin>\", line 2, in <genexpr>\nTypeError: unsupported\
    \ operand type(s) for *: 'int' and 'str'\n>>> factorial(\"1/-2\")\nTraceback (most\
    \ recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\"\
    , line 2, in factorial\n  File \"<stdin>\", line 2, in <genexpr>\nTypeError: unsupported\
    \ operand type(s) for *: 'int' and 'str'\n>>> factorial(\"1/-3\")\nTraceback (most\
    \ recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\"\
    , line 2, in factorial\n  File \"<stdin>\", line 2, in <genexpr>\nTypeError: unsupported\
    \ operand type(s) for *: 'int' and 'str", "    // Write your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will return the number of digits in an\
    \ integer.\n\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(0)\n\
    0\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(0)\n0\n\
    >>> count_digits(5)\n1\n>>> count_digits(5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n\
    1\n>>> count_digits(0)\n0\n>>> count_digits(5)\n1\n>>> count_digits(5)\n1\n>>>\
    \ count_digits(-5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(0)\n0\n>>> count_digits(5)\n\
    1\n>>> count_digits(5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n1\n\
    >>> count_digits(0)\n0\n>>> count_digits(5)\n1\n>>> count_digits(5)\n1\n>>> count_digits(-5)\n\
    1\n>>> count_digits(-5)\n1\n>>> count_digits(0)\n0\n>>> count_digits(5)\n1\n>>>\
    \ count_digits(5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(0)\n\
    0\n>>> count_digits(5)\n1\n>>> count_digits(5)\n1\n>>> count_digits(-5)\n1\n>>>\
    \ count_digits(-5)\n1\n>>> count_digits(0)\n0\n>>> count_digits(5)\n1\n>>> count_digits(5)\n\
    1\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(0)\n0\n\
    >>> count_digits(5)\n1\n>>> count_digits(5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n\
    1\n>>> count_digits(0)\n0\n>>> count_digits(5)\n1\n>>> count_digits(5)\n1\n>>>\
    \ count_digits(-5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(0)\n0\n>>> count_digits(5)\n\
    1\n>>> count_digits(5)\n1\n>>> count_digits(-5)\n1\n>>> count_digits(-5)\n1\n\
    >>> count_digits(0)\n0\n>>> count_digits(5)\n1\n>>> count_digits(5)", "    var\
    \ nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLength =\
    \ nums.length;\n    var densLength = dens.length;\n    var result = false;\n \
    \   for(var i=0; i<numsLength; i++){\n        if(nums[i]==dens[i]){\n        \
    \    result = true;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `simplify(\"1/5\", \"5/1\")` returns `true`\
    \ when it should be `false`.\n<|/ c |>\n<| c |>\nYes, I missed that. Thanks for\
    \ pointing it out. Updated the answer.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. `simplify(\"1/5\", \"5/1\")` returns `true` when it should be `false`.\n\
    <|/ c |>\n<| c |>\nYes, I missed that. Thanks for pointing it out. Updated the\
    \ answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nThe function below will take a string of any length,\
    \ and will return the number of words in the string.\nThe function will ignore\
    \ all characters that are not letters, numbers, spaces, or punctuation.\nThe function\
    \ will ignore all empty strings.\nThe function will ignore all strings containing\
    \ only whitespace.\nThe function will ignore all strings containing only numbers.\n\
    The function will ignore all strings containing only punctuation.\nThe function\
    \ will ignore all strings containing only letters a-z.\nThe function will ignore\
    \ all strings containing only letters A-Z.\nThe function will ignore all strings\
    \ containing only letters a-z and A-Z.\nThe function will ignore all strings containing\
    \ only letters a-z, A-Z, and 0-9.\nThe function will ignore all strings containing\
    \ only letters a-z, A-Z, 0-9, and spaces.\nThe function will ignore all strings\
    \ containing only letters a-z, A-Z, 0-9, punctuation, and spaces.\nThe function\
    \ will ignore all strings containing only letters a-z, A-Z, 0-9, punctuation,\
    \ spaces, and numbers.\nThe function will ignore all strings containing only letters\
    \ a-z, A-Z, 0-9, punctuation, spaces, numbers, and spaces.\nThe function will\
    \ ignore all strings containing only letters a-z, A-Z, 0-9, punctuation, spaces,\
    \ numbers, spaces, and punctuation.\nThe function will ignore all strings containing\
    \ only letters a-z, A-Z, 0-9, punctuation, spaces, numbers, spaces, punctuation,\
    \ and spaces.\nThe function will ignore all strings containing only letters a-z,\
    \ A-Z, 0-9, punctuation, spaces, numbers, spaces, punctuation, spaces, and numbers.\n\
    The function will ignore all strings containing only letters a-z, A-Z, 0-9, punctuation,\
    \ spaces, numbers, spaces, punctuation, spaces, numbers, and spaces.\nThe function\
    \ will ignore all strings containing only letters a-z, A-Z, 0-9, punctuation,\
    \ spaces, numbers, spaces, punctuation, spaces, numbers, spaces, and punctuation.\n\
    The function will ignore all strings containing only letters a-z, A-Z, 0-9, punctuation,\
    \ spaces, numbers, spaces, punctuation, spaces, numbers, spaces, punctuation,\
    \ spaces, and punctuation.\nThe function will ignore all strings containing only\
    \ letters a-z, A-Z, 0-9, punctuation, spaces, numbers, spaces, punctuation, spaces,\
    \ numbers, spaces, punctuation, spaces, numbers, and spaces.\nThe function will\
    \ ignore all strings containing only letters a-z, A-Z, 0-9, punctuation, spaces,\
    \ numbers, spaces, punctuation, spaces, numbers, spaces, punctuation, spaces,\
    \ numbers, spaces, and punctu", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 7\nWrite a function that will convert a fraction to its decimal equivalent.\
    \ For example, converting the fraction 3/4 to decimal is 0.(6). Assume that both\
    \ numerator and denominator are positive whole numbers, and do not have zero as\
    \ denominator. Assume that x is a valid fraction.\n\n\n</text>\n<cell>", "   \
    \ // Your code here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will evaluate a mathematical expression given\
    \ as a string. The function should return true if the expression evaluates to\
    \ a whole number and false otherwise. Both x and n, are string representation\
    \ of a fraction, and have the following format, <numerator>/<denominator> where\
    \ both numerator and denominator are positive whole numbers.\nYou can assume that\
    \ x, and n are valid fractions, and do not have zero as denominator.\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will take a string as input and return the string with all the digits reversed.\
    \ The input string can contain any number of digits.\n\n\n</text>\n<cell>", " \
    \   // Write your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ will convert a fraction to its decimal representation. For example, converting\
    \ the fraction 1/3 to decimal is 0.66.\n\n\n</text>\n<cell>", "    var a = x.split(\"\
    /\");\n    var b = n.split(\"/\");\n    var c = a[1] + \"/\" + b[1];\n    return\
    \ c === b[0] && c === a[0] && c === a[1] && b[1] === b[0] && b[1] === a[1];\n\
    }\n", "    var numerator=x.split(\"/\");\n    var denominator=n.split(\"/\");\n\
    \    var result=false;\n    if(numerator.length==1 && numerator[0]==numerator[1]){\n\
    \        result=true;\n    }\n    if(denominator.length==1 && denominator[0]==denominator[1]){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(numerator.length==0 && denominator.length==0){\n\
    \        result=true;\n    }\n    if(numerator.length==1 && denominator.length==1){\n\
    \        result=true;\n    }\n    if(", "    // Write your code here\n}\n</cell>\n\
    <cell>", "  if(x === \"0\"){\n    return true;\n  }\n  if(x === \"1\"){\n    return\
    \ true;\n  }\n  if(x === \"1/2\"){\n    return true;\n  }\n  if(x === \"1/3\"\
    ){\n    return true;\n  }\n  if(x === \"1/4\"){\n    return true;\n  }\n  if(x\
    \ === \"1/5\"){\n    return true;\n  }\n  if(x === \"1/6\"){\n    return true;\n\
    \  }\n  if(x === \"1/7\"){\n    return true;\n  }\n  if(x === \"1/8\"){\n    return\
    \ true;\n  }\n  if(x === \"1/9\"){\n    return true;\n  }\n  if(x === \"1/10\"\
    ){\n    return true;\n  }\n  if(x === \"1/11\"){\n    return true;\n  }\n  if(x\
    \ === \"1/12\"){\n    return true;\n  }\n  if(x === \"1/13\"){\n    return true;\n\
    \  }\n  if(x === \"1/14\"){\n    return true;\n  }\n  if(x === \"1/15\"){\n  \
    \  return true;\n  }\n  if(x === \"1/16\"){\n    return true;\n  }\n  if(x ===\
    \ \"1/17\"){\n    return true;\n  }\n  if(x === \"1/18\"){\n    return true;\n\
    \  }\n  if(x === \"1/19\"){\n    return true;\n  }\n  if(x === \"1/20\"){\n  \
    \  return true;\n  }\n  if(x === \"1/21\"){\n    return true;\n  }\n  if(x ===\
    \ \"1/22\"){\n    return true;\n  }\n  if(x === \"1/23\"){\n    return true;\n\
    \  }\n  if(x === \"1/24\"){\n    return true;\n  }\n  if(x === \"1/25\"){\n  \
    \  return true;\n  }\n  if(x === \"1/26\"){\n    return true;\n  }\n  if(x ===\
    \ \"1/27\"){\n    return true;\n  }\n  if(x === \"1/28\"){\n    return true;\n\
    \  }\n  if(x === \"1/29\"){\n    return true;\n  }\n  if(x === \"1/30\"){\n  \
    \  return true;\n  }\n  if(x === \"1/31\"){\n    return true;\n  }\n  if(x ===\
    \ \"1/32\"){\n    return true;\n  }\n  if(x === \"1/33\"){\n    return true;\n\
    \  }\n  if(x === \"1/34\"){\n    return true;\n  }\n  if(x === \"1/35\"){\n  \
    \  return true;\n  }\n  if(x === \"1/36\"){\n    return true;\n  }\n  if(x ===\
    \ \"1/37\"){\n    return true;\n  }\n  if(x === \"1/38\"){\n    return true;\n\
    \  }\n  if(x === \"1/39\"){\n    return true;\n  }\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take two fractions\
    \ as arguments and return true if they are equal and false otherwise. Both fractions\
    \ are valid fractions and do not have zero as denominator. You may assume that\
    \ both fractions have the same number of numerator and denominator components.\n\
    \n>>> fraction1 = Fraction(\"1/5\")\n>>> fraction2 = Fraction(\"1/5\")\n>>> fraction3\
    \ = Fraction(\"1/6\")\n>>> fraction4 = Fraction(\"2/1\")\n>>> fraction5 = Fraction(\"\
    7/10\")\n>>> fraction6 = Fraction(\"7/10\")\n>>> fraction7 = Fraction(\"7/10\"\
    )\n>>> fraction8 = Fraction(\"7/10\")\n>>> fraction9 = Fraction(\"7/10\")\n>>>\
    \ fraction10= Fraction(\"7/10\")\n>>> fraction11 = Fraction(\"7/10\")\n>>> fraction12\
    \ = Fraction(\"7/10\")\n>>> fraction13 = Fraction(\"7/10\")\n>>> fraction14 =\
    \ Fraction(\"7/10\")\n>>> fraction15 = Fraction(\"7/10\")\n>>> fraction16 = Fraction(\"\
    7/10\")\n>>> fraction17 = Fraction(\"7/10\")\n>>> fraction18 = Fraction(\"7/10\"\
    )\n>>> fraction19 = Fraction(\"7/10\")\n>>> fraction20 = Fraction(\"7/10\")\n\
    >>> fraction21 = Fraction(\"7/10\")\n>>> fraction22 = Fraction(\"7/10\")\n>>>\
    \ fraction23 = Fraction(\"7/10\")\n>>> fraction24 = Fraction(\"7/10\")\n>>> fraction25\
    \ = Fraction(\"7/10\")\n>>> fraction26 = Fraction(\"7/10\")\n>>> fraction27 =\
    \ Fraction(\"7/10\")\n>>> fraction28 = Fraction(\"7/10\")\n>>> fraction29 = Fraction(\"\
    7/10\")\n>>> fraction30 = Fraction(\"7/10\")\n>>> fraction31 = Fraction(\"7/10\"\
    )\n>>> fraction32 = Fraction(\"7/10\")\n>>> fraction33 = Fraction(\"7/10\")\n\
    >>> fraction34 = Fraction(\"7/10\")\n>>> fraction35 = Fraction(\"7/10\")\n>>>\
    \ fraction36 = Fraction(\"7/10\")\n>>> fraction37 = Fraction(\"7/10\")\n>>> fraction38\
    \ = Fraction(\"7/10\")\n>>> fraction39 = Fraction(\"7/10\")\n>>> fraction40 =\
    \ Fraction(\"7/10\")\n>>> fraction41 = Fraction(\"7/10\")\n>>> fraction42 = Fraction(\"\
    7/10\")\n>>> fraction43 = Fraction(\"7/10\")\n>>> fraction44 = Fraction(\"7/10\"\
    )\n>>> fraction45 = Fraction(\"7/10\")\n>>> fraction46 = Fraction(\"7/10\")\n\
    >>> fraction47 = Fraction", "  // Your code goes here\n}\n", "    var xNum = parseInt(x.split(\"\
    /\")[0]);\n    var xDenom = parseInt(x.split(\"/\")[1]);\n    var nNum = parseInt(n.split(\"\
    /\")[0]);\n    var nDenom = parseInt(n.split(\"/\")[1]);\n    if(xNum == nNum\
    \ && xDenom == nDenom){\n        return true;\n    }\n    return false;\n}\n",
  "    var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLength\
    \ = nums.length;\n    var densLength = dens.length;\n    var isWholeNum = true;\n\
    \    var isWholeDen = true;\n    for(var i=0; i<numsLength; i++){\n        if(nums[i]\
    \ != dens[i]){\n            isWholeNum = false;\n        }\n    }\n    for(var\
    \ i=0; i<densLength; i++){\n        if(dens[i] != nums[i]){\n            isWholeDen\
    \ = false;\n        }\n    }\n    if(isWholeNum && isWholeDen){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    var a = x.split(\"/\");\n    var\
    \ b = n.split(\"/\");\n    var c = [];\n    var d = [];\n    var e = [];\n   \
    \ var f = [];\n    var g = [];\n    var h = [];\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n\
    \    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n\
    \    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n\
    \    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n\
    \    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\
    \    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n\
    \    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n\
    \    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n\
    \    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n\
    \    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n\
    \    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n\
    \    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n\
    \    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n\
    \    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n\
    \    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n\
    \    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n\
    \    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n\
    \    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n\
    \    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n\
    \    var ", "    // Write your code here\n}\n", "    // Write your code here\n\
    }\n", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to check your\
    \ answer\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Write your code here\n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 8\nWrite a function that will evaluate a mathematical expression and return\
    \ the result as a float.\n\nThe function should take two arguments: an expression\
    \ and a variable name. The function should evaluate the expression and return\
    \ the result as a float.\n\n>>> evaluate(\"(1/3)*4\", \"x\")\n1.5\n>>> evaluate(\"\
    (1/3)*4\", \"y\")\n0\n>>> evaluate(\"(1/3)*4\", \"z\")\n0\n>>> evaluate(\"(1/3)*4\"\
    , \"a\")\n0\n>>> evaluate(\"(1/3)*4\", \"b\")\n0\n>>> evaluate(\"(1/3)*4\", \"\
    c\")\n0\n>>> evaluate(\"(1/3)*4\", \"d\")\n0\n>>> evaluate(\"(1/3)*4\", \"e\"\
    )\n0\n>>> evaluate(\"(1/3)*4\", \"f\")\n0\n>>> evaluate(\"(1/3)*4\", \"g\")\n\
    0\n>>> evaluate(\"(1/3)*4\", \"h\")\n0\n>>> evaluate(\"(1/3)*4\", \"i\")\n0\n\
    >>> evaluate(\"(1/3)*4\", \"j\")\n0\n>>> evaluate(\"(1/3)*4\", \"k\")\n0\n>>>\
    \ evaluate(\"(1/3)*4\", \"l\")\n0\n>>> evaluate(\"(1/3)*4\", \"m\")\n0\n>>> evaluate(\"\
    (1/3)*4\", \"n\")\n0\n>>> evaluate(\"(1/3)*4\", \"o\")\n0\n>>> evaluate(\"(1/3)*4\"\
    , \"p\")\n0\n>>> evaluate(\"(1/3)*4\", \"q\")\n0\n>>> evaluate(\"(1/3)*4\", \"\
    r\")\n0\n>>> evaluate(\"(1/3)*4\", \"s\")\n0\n>>> evaluate(\"(1/3)*4\", \"t\"\
    )\n0\n>>> evaluate(\"(1/3)*4\", \"u\")\n0\n>>> evaluate(\"(1/3)*4\", \"v\")\n\
    0\n>>> evaluate(\"(1/3)*4\", \"w\")\n0\n>>> evaluate(\"(1/3)*4\", \"x\")\n1.5\n\
    >>> evaluate(\"(1/3)*4\", \"y\")\n0\n>>> evaluate(\"(1/3)*4\", \"z\")\n0\n>>>\
    \ evaluate(\"(1/3)*4\", \"a\")\n0\n>>> evaluate(\"(1/3)*4\", \"b\")\n0\n>>> evaluate(\"\
    (1/3)*4\", \"c\")\n0\n>>> evaluate(\"(1/3)*4\", \"d\")\n0\n>>> evaluate(\"(1/",
  "    // Write your code here\n}\n", "  if(n.indexOf(\"/\")==-1){\n    return x*n==parseInt(x*n)\n\
    \  }\n  else{\n    var a=x.split(\"/\");\n    var b=n.split(\"/\");\n    var c=0;\n\
    \    for(var i=0;i<a.length;i++){\n      if(a[i]!=0){\n        c+=parseInt(a[i]/b[i]);\n\
    \      }\n    }\n    return c==parseInt(c*b[0])\n  }\n}\n", "    // Write your\
    \ code here\n}\n", "    var numerator=x.split(\"/\");\n    var denominator=n.split(\"\
    /\");\n    var numerator=numerator[0];\n    var denominator=denominator[0];\n\
    \    var result=false;\n    if(numerator==\"\" || denominator==\"\"){\n      \
    \  result=true;\n    }\n    if(numerator==\"\"){\n        result=false;\n    }\n\
    \    if(denominator==\"\"){\n        result=false;\n    }\n    if(numerator>denominator){\n\
    \        result=true;\n    }\n    if(numerator<denominator){\n        result=false;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=javascript,math |>\n<| c |>\n\
    This doesn't work if the numerator is greater than the denominator. For example,\
    \ \"1/5\" will evaluate to true when it should evaluate to false.\n<|/ c |>\n\
    <| c |>\nYes, I realized that after I posted my answer. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a tags=javascript,math |>\n<code>", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 7\nThe function below takes a string as input and\
    \ returns the number of times the string occurs in the input. \nThe string can\
    \ contain only lowercase letters, uppercase letters, and digits. \nThe function\
    \ should ignore spaces.\nThe function should ignore special characters like !,\
    \ @, #, $, %, ^, etc.\nThe function should ignore case. \nThe function should\
    \ ignore punctuation. \nThe function should ignore the empty string. \nThe function\
    \ should ignore the string \"0\".\nThe function should ignore the string \"1\"\
    .\nThe function should ignore the string \"-1\".\nThe function should ignore the\
    \ string \"1/2\".\nThe function should ignore the string \"1/3\".\nThe function\
    \ should ignore the string \"-1/2\".\nThe function should ignore the string \"\
    -1/3\".\nThe function should ignore the string \"1/-2\".\nThe function should\
    \ ignore the string \"1/-3\".\nThe function should ignore the string \"-1/-2\"\
    .\nThe function should ignore the string \"-1/-3\".\nThe function should ignore\
    \ the string \"1/-4\".\nThe function should ignore the string \"1/-5\".\nThe function\
    \ should ignore the string \"-1/-4\".\nThe function should ignore the string \"\
    -1/-5\".\nThe function should ignore the string \"1/-6\".\nThe function should\
    \ ignore the string \"1/-7\".\nThe function should ignore the string \"-1/-6\"\
    .\nThe function should ignore the string \"-1/-7\".\nThe function should ignore\
    \ the string \"1/-8\".\nThe function should ignore the string \"1/-9\".\nThe function\
    \ should ignore the string \"-1/-8\".\nThe function should ignore the string \"\
    -1/-9\".\nThe function should ignore the string \"1/-10\".\nThe function should\
    \ ignore the string \"1/-11\".\nThe function should ignore the string \"-1/-10\"\
    .\nThe function should ignore the string \"-1/-11\".\nThe function should ignore\
    \ the string \"1/-12\".\nThe function should ignore the string \"1/-13\".\nThe\
    \ function should ignore the string \"-1/-12\".\nThe function should ignore the\
    \ string \"-1/-13\".\nThe function should ignore the string \"1/-14\".\nThe function\
    \ should ignore the string \"1/-15\".\nThe function should ignore the string \"\
    -1/-14\".\nThe function should ignore the string \"-1/-15\".\nThe function should\
    \ ignore the string \"1/-16\".\nThe function should ignore the ", "    \n}\n",
  "    var numerator=parseInt(x.split(\"/\")[0]);\n    var denominator=parseInt(x.split(\"\
    /\")[1]);\n    if(numerator==0 && denominator==0){\n        return true;\n   \
    \ }\n    if(numerator==0 && denominator!=0){\n        return false;\n    }\n \
    \   if(numerator!=0){\n        if(denominator==0){\n            return false;\n\
    \        }\n        if(denominator==1){\n            return true;\n        }\n\
    \    }\n    if(numerator==0 && denominator!=0){\n        return false;\n    }\n\
    \    if(numerator==0 && denominator==0){\n        return false;\n    }\n    if(numerator==0\
    \ && denominator==0){\n        return false;\n    }\n    if(numerator==0 && denominator==0){\n\
    \        return false;\n    }\n    if(numerator==0 && denominator==0){\n     \
    \   return false;\n    }\n    if(numerator==0 && denominator==0){\n        return\
    \ false;\n    }\n    if(numerator==0 && denominator==0){\n        return false;\n\
    \    }\n    if(numerator==0 && denominator==0){\n        return false;\n    }\n\
    \    if(numerator==0 && denominator==0){\n        return false;\n    }\n    if(numerator==0\
    \ && denominator==0){\n        return false;\n    }\n    if(numerator==0 && denominator==0){\n\
    \        return false;\n    }\n    if(numerator==0 && denominator==0){\n     \
    \   return false;\n    }\n    if(numerator==0 && denominator==0){\n        return\
    \ false;\n    }\n    if(numerator==0 && denominator==0){\n        return false;\n\
    \    }\n    if(numerator==0 && denominator==0){\n        return false;\n    }\n\
    \    if(numerator==0 && denominator==0){\n        return false;\n    }\n    if(numerator==0\
    \ && denominator==0){\n        return false;\n    }\n    if(numerator==0 && denominator==0){\n\
    \        return false;\n    }\n    if(numerator==0 && denominator==0){\n     \
    \   return false;\n    }\n    if(numerator==0 && denominator==0){\n        return\
    \ false;\n    }\n    if(numerator==0 && denominator==0){\n        return false;\n\
    \    }\n    if(numerator==0 && denominator==0){\n        return false;\n    }\n\
    \    if(numerator==0 && denominator==0){\n        return false;\n    }\n    if(numerator==0\
    \ && denominator==0){\n        return false;\n    }\n    if(numerator==0 && denominator==0){\n\
    \        return false;\n    }\n    if(numerator==0 && denominator==0){\n     \
    \   return false;\n    }\n    if(numerator==0 && denominator==0){\n        return\
    \ false;\n    }\n    if(numerator==0 && denominator==0){\n        return false;\n\
    \    }\n    if(numerator==0 && denominator==0){\n        return false;\n    }\n\
    \    if(numerator==0 && denominator==0){\n        return false;\n    }\n    if(numerator==0\
    \ && denominator==0){\n        return false;\n    }\n    if(numer", "    \n}\n\
    </cell>\n<text>\nProblem 3\nWrite a function that will take a string of any length,\
    \ and return true if the string is a valid fraction, false otherwise.\nThe string\
    \ can contain any characters, including spaces, numbers, and symbols. For example,\
    \ the string \"1/2\" is a valid fraction.\n\n>>> fraction(\"1/2\")\nTrue\n>>>\
    \ fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\n\
    True\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"\
    1/2\")\nTrue\n>>> fraction(\"1/2\")\nTrue\n>>> fraction(\"1/2\")", "    // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will return\
    \ the number of digits in a number. For example, given x = 123, return 3.\n\n\
    The function should work for negative numbers as well. For example, given x =\
    \ -123, return -2.\n\nThe function should work for fractions as well. For example,\
    \ given x = 1/2, return 1.\n\nThe function should work for numbers with decimals.\
    \ For example, given x = 0.123, return 0.\n\nThe function should work for numbers\
    \ with scientific notation. For example, given x = 1.2e3, return 3.\n\nThe function\
    \ should work for numbers with scientific notation. For example, given x = 1.2e+3,\
    \ return 3.\n\n\n</text>\n<cell>", "    var nums = x.split(\"/\");\n    var dens\
    \ = n.split(\"/\");\n    var numsSum = 0, densSum = 0;\n    var isNum = true;\n\
    \    for(var i = 0; i < nums.length; i++){\n        if(nums[i] === \"0\") isNum\
    \ = false;\n        numsSum += parseInt(nums[i]);\n    }\n    for(var i = 0; i\
    \ < dens.length; i++){\n        if(dens[i] === \"0\") isNum = false;\n       \
    \ densSum += parseInt(dens[i]);\n    }\n    if(isNum){\n        if(numsSum ===\
    \ densSum){\n            return true;\n        }\n    }\n    return false;\n}\n",
  "  // Your code here\n}\n</cell>\n<cell>", "  // Your code here\n}\n", "  if(n.indexOf('/')\
    \ != -1){\n    var nums = n.split('/');\n    var num1 = parseInt(nums[0]);\n \
    \   var num2 = parseInt(nums[1]);\n    if(num1 > 0 && num2 > 0){\n      if(num1\
    \ > num2){\n        var temp = num1;\n        num1 = num2;\n        num2 = temp;\n\
    \      }\n      if(num1 % num2 == 0){\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 4\nWrite a function that will take a string of any length and return the\
    \ number of words in the string.\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n8\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n8\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \")\n8\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  The\"\
    )\n8\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy\
    \ dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox jumps\
    \ over the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy\
    \ dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox jumps\
    \ over the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy\
    \ dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox jumps\
    \ over the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy\
    \ dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox jumps\
    \ over the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy\
    \ dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox jumps\
    \ over the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy\
    \ dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox jumps\
    \ over the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick\
    \ brown fox jumps over the lazy dog.  The quick brown fox jumps over the lazy ",
  "  // Write your code here\n}\n", "    if (x.indexOf(\"/\") === -1){\n        return\
    \ false;\n    }\n    var parts = x.split(\"/\");\n    var numerator = parts[0];\n\
    \    var denominator = parts[1];\n    var wholeNumber = numerator + denominator;\n\
    \    if (wholeNumber.indexOf(\"0\") === -1){\n        return false;\n    }\n \
    \   var wholeNumberAsString = wholeNumber.toString();\n    var wholeNumberAsArray\
    \ = wholeNumberAsString.split(\".\");\n    var wholeNumberAsArrayLength = wholeNumberAsArray.length;\n\
    \    var wholeNumberAsArrayFirstElement = wholeNumberAsArray[0];\n    var wholeNumberAsArraySecondElement\
    \ = wholeNumberAsArray[1];\n    var wholeNumberAsArrayThirdElement = wholeNumberAsArray[2];\n\
    \    var wholeNumberAsArrayFourthElement = wholeNumberAsArray[3];\n    var wholeNumberAsArrayFifthElement\
    \ = wholeNumberAsArray[4];\n    var wholeNumberAsArraySixthElement = wholeNumberAsArray[5];\n\
    \    var wholeNumberAsArraySeventhElement = wholeNumberAsArray[6];\n    var wholeNumberAsArrayEighthElement\
    \ = wholeNumberAsArray[7];\n    var wholeNumberAsArrayNinthElement = wholeNumberAsArray[8];\n\
    \    var wholeNumberAsArrayTenthElement = wholeNumberAsArray[9];\n    var wholeNumberAsArrayEleventhElement\
    \ = wholeNumberAsArray[10];\n    var wholeNumberAsArrayTwelfthElement = wholeNumberAsArray[11];\n\
    \    var wholeNumberAsArrayThirteenthElement = wholeNumberAsArray[12];\n    var\
    \ wholeNumberAsArrayFourteenthElement = wholeNumberAsArray[13];\n    var wholeNumberAsArrayFifteenthElement\
    \ = wholeNumberAsArray[14];\n    var wholeNumberAsArraySixteenthElement = wholeNumberAsArray[15];\n\
    \    var wholeNumberAsArraySeventeenthElement = wholeNumberAsArray[16];\n    var\
    \ wholeNumberAsArrayEighteenthElement = wholeNumberAsArray[17];\n    var wholeNumberAsArrayNineteenthElement\
    \ = wholeNumberAsArray[18];\n    var wholeNumberAsArrayTwentyFirstElement = wholeNumberAsArray[19];\n\
    \    var wholeNumberAsArrayTwentySecondElement = wholeNumberAsArray[20];\n   \
    \ var wholeNumberAsArrayTw", "    // Write your code here\n}\n</cell>\n<cell>",
  "  // Your code here\n}\n</cell>\n<cell>", "  // Write your code here\n}\n</cell>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nExercise 2\nImplement a function\
    \ that will return the greatest common divisor (GCD) of two positive integers.\
    \ You can assume that both integers are valid fractions, and do not have zero\
    \ as denominator. GCD of any two positive integers is a positive integer that\
    \ divides both numbers without remainder. GCD of any two negative integers is\
    \ negative.\n\n>>> gcd(2, 5)\n2\n>>> gcd(-5, -2)\n-2\n>>> gcd(2, -5)\n-2\n>>>\
    \ gcd(-2, 2)\n2\n>>> gcd(2, 0)\n0\n>>> gcd(0, 2)\n0\n>>> gcd(0, 0)\n0\n>>> gcd(-1,\
    \ -1)\n1\n>>> gcd(-1, 0)\n1\n>>> gcd(0, 0)\n0\n>>> gcd(1, 0)\n1\n>>> gcd(1, -1)\n\
    1\n>>> gcd(2, 1)\n1\n>>> gcd(2, 2)\n1\n>>> gcd(2, 3)\n1\n>>> gcd(2, 4)\n1\n>>>\
    \ gcd(2, 5)\n1\n>>> gcd(2, 6)\n1\n>>> gcd(2, 7)\n1\n>>> gcd(2, 8)\n1\n>>> gcd(2,\
    \ 9)\n1\n>>> gcd(3, 3)\n1\n>>> gcd(3, 4)\n1\n>>> gcd(3, 5)\n1\n>>> gcd(3, 6)\n\
    1\n>>> gcd(3, 7)\n1\n>>> gcd(3, 8)\n1\n>>> gcd(3, 9)\n1\n>>> gcd(4, 4)\n1\n>>>\
    \ gcd(4, 5)\n1\n>>> gcd(4, 6)\n1\n>>> gcd(4, 7)\n1\n>>> gcd(4, 8)\n1\n>>> gcd(4,\
    \ 9)\n1\n>>> gcd(5, 5)\n1\n>>> gcd(5, 6)\n1\n>>> gcd(5, 7)\n1\n>>> gcd(5, 8)\n\
    1\n>>> gcd(5, 9)\n1\n>>> gcd(6, 6)\n1\n>>> gcd(6, 7)\n1\n>>> gcd(6, 8)\n1\n>>>\
    \ gcd(6, 9)\n1\n>>> gcd(7, 7)\n1\n>>> gcd(7, 8)\n1\n>>> gcd(7, 9)\n1\n>>> gcd(8,\
    \ 8)\n1\n>>> gcd(8, 9)\n1\n>>> gcd(9, 9)\n1\n>>> gcd(10, 10)\n1\n>>> gcd(10, 11)\n\
    1\n>>> gcd(10, 12)\n1\n>>> gcd(10, 13)\n1\n>>> gcd(10, 14)\n1\n>>> gcd(10, 15)\n\
    1\n>>> gcd(10, 16)\n1\n>>> gcd(10, 17)\n1\n>>> gcd(10, 18)\n1\n>>> gcd(10, 19)\n\
    1\n>>> gcd(10, 20)\n1\n>>> gcd(10, 21)\n1\n>>> gcd(", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take a string\
    \ as input and return the string with all occurences of \"-\" replaced by \"+\"\
    . For example, simplify(\"123-456-789\") should return \"123+456+789\".\n\nHint:\
    \ You can use the replace() method of the String object.\n\n\n</text>\n<cell>",
  "    var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsLen\
    \ = nums.length;\n    var densLen = dens.length;\n    var numsSum = 0;\n    var\
    \ densSum = 0;\n    var isNum = true;\n    var isDen = true;\n    for(var i=0;\
    \ i<numsLen; i++){\n        if(nums[i]!=0){\n            isNum = false;\n    \
    \    }\n    }\n    for(var i=0; i<densLen; i++){\n        if(dens[i]!=0){\n  \
    \          isDen = false;\n        }\n    }\n    if(isNum && isDen){\n       \
    \ for(var i=0; i<numsLen; i++){\n            numsSum += parseInt(nums[i]);\n \
    \       }\n        for(var i=0; i<densLen; i++){\n            densSum += parseInt(dens[i]);\n\
    \        }\n        if(numsSum == densSum){\n            return true;\n      \
    \  }\n    }\n    return false;\n}\n</code>\n<|/ a tags=javascript,algorithm |>\n\
    <| c |>\nThis doesn't work. Try simplify(\"1/3\", \"3/1\").\n<|/ c |>\n<| c |>\n\
    It works. Try simplify(\"1/3\", \"3/1\").\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try simplify(\"1/3\", \"3/1\").\n<|/ c |>\n<| c |>\nIt works. Try simplify(\"\
    1/3\", \"3/1\").\n<|/ c |>\n<| c |>\nIt doesn't work. Try simplify(\"1/3\", \"\
    3/1\").\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    // Write your code here\n}\n\
    </cell>\n<text>\nProblem 3\nThe function below takes a string as input and returns\
    \ the number of characters in the string.\n\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_characters(\"abracadabra\")\n12\n>>> count_characters(\"abracadabra\"\
    )\n12\n>>> count_", "  // Write your code here\n}\n", "  // Write your code here\n\
    }\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string and returns\
    \ the number of words in the string. Words are separated by spaces.\n\n\n</text>\n\
    <cell>", "    \n    // Your code here\n    \n}\n", "  // Your code goes here\n\
    }\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will convert a fraction to its decimal representation. For example,\n>>>\
    \ fraction_to_decimal(\"1/5\")\n0.125\n>>> fraction_to_decimal(\"2/3\")\n0.66666666666666663\n\
    >>> fraction_to_decimal(\"1/3\")\n0.33333333333333331\n>>> fraction_to_decimal(\"\
    1/2\")\n0.5\n>>> fraction_to_decimal(\"1/1\")\n1\n>>> fraction_to_decimal(\"1/0\"\
    )\n0\n>>> fraction_to_decimal(\"0/0\")\n0\n>>> fraction_to_decimal(\"0/1\")\n\
    0\n>>> fraction_to_decimal(\"1/-1\")\n0.11111111111111111\n>>> fraction_to_decimal(\"\
    -1/-1\")\n-0.11111111111111111\n>>> fraction_to_decimal(\"1/-2\")\n-0.22222222222222222\n\
    >>> fraction_to_decimal(\"2/-2\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    -1/-2\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"-1/-3\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"1/-3\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    -1/-4\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"1/-4\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"-1/-5\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    1/-5\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"-1/-6\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"1/-6\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    -1/-7\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"1/-7\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"-1/-8\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    1/-8\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"-1/-9\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"1/-9\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    -1/-10\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"1/-10\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"-1/-11\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    1/-11\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"-1/-12\")\n-0.33333333333333331\n\
    >>> fraction_to_decimal(\"1/-12\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"\
    -1/-13\")\n-0.33333333333333331\n>>> fraction_to_decimal(\"1/-13\")\n-0.33333333333333331\n\
    >>> ", "    // Your code here\n}\n</cell>\n<cell>", "  if(x === \"0\") return\
    \ false;\n  if(x === \"1\") return true;\n  if(n.indexOf(\"/\") === -1){\n   \
    \ return x === n.replace(/\\d/, \"\");\n  }\n  var nums = x.split(\"/\");\n  var\
    \ dens = n.split(\"/\");\n  var numsLength = nums.length;\n  var densLength =\
    \ dens.length;\n  if(numsLength !== densLength){\n    return false;\n  }\n  for(var\
    \ i = 0; i < numsLength; i++){\n    if(nums[i] !== dens[i]){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    \n}\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will simplify a fraction to its lowest terms. For example, the\
    \ fraction \"1/3\" can be simplified to \"1/2\".\n\nThe function should return\
    \ true if the fraction is simplified, false otherwise.\n\n>>> simplify(\"1/3\"\
    , \"3/1\")\ntrue\n>>> simplify(\"1/3\", \"2/1\")\nfalse\n>>> simplify(\"1/3\"\
    , \"3/2\")\ntrue\n>>> simplify(\"1/3\", \"3/3\")\ntrue\n>>> simplify(\"1/3\",\
    \ \"3/4\")\nfalse\n>>> simplify(\"1/3\", \"3/5\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/6\")\ntrue\n>>> simplify(\"1/3\", \"3/7\")\nfalse\n>>> simplify(\"1/3\"\
    , \"3/8\")\ntrue\n>>> simplify(\"1/3\", \"3/9\")\ntrue\n>>> simplify(\"1/3\",\
    \ \"3/10\")\nfalse\n>>> simplify(\"1/3\", \"3/11\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/12\")\ntrue\n>>> simplify(\"1/3\", \"3/13\")\nfalse\n>>> simplify(\"1/3\"\
    , \"3/14\")\ntrue\n>>> simplify(\"1/3\", \"3/15\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/16\")\ntrue\n>>> simplify(\"1/3\", \"3/17\")\nfalse\n>>> simplify(\"1/3\"\
    , \"3/18\")\ntrue\n>>> simplify(\"1/3\", \"3/19\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/20\")\ntrue\n>>> simplify(\"1/3\", \"3/21\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/22\")\ntrue\n>>> simplify(\"1/3\", \"3/23\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/24\")\ntrue\n>>> simplify(\"1/3\", \"3/25\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/26\")\ntrue\n>>> simplify(\"1/3\", \"3/27\")\nfalse\n>>> simplify(\"1/3\"\
    , \"3/28\")\ntrue\n>>> simplify(\"1/3\", \"3/29\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/30\")\ntrue\n>>> simplify(\"1/3\", \"3/31\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/32\")\ntrue\n>>> simplify(\"1/3\", \"3/33\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/34\")\ntrue\n>>> simplify(\"1/3\", \"3/35\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/36\")\ntrue\n>>> simplify(\"1/3\", \"3/37\")\nfalse\n>>> simplify(\"1/3\"\
    , \"3/38\")\ntrue\n>>> simplify(\"1/3\", \"3/39\")\ntrue\n>>> simplify(\"1/3\"\
    , \"3/40\")\ntrue\n>>> simplify(\"1/3\", \"3/41\")\ntrue\n", "    // Write your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate\
    \ a mathematical expression given as a string and return the result as a float.\n\
    The expression should contain only valid mathematical operators (+, -, *, /, ^,\
    \ =, <, >, <=, >=, ==, !=, &&, ||, !, ~, (), [], {}, and ,) and be enclosed in\
    \ parentheses.\nThe function should return 0 if the expression is valid and throw\
    \ a SyntaxError exception if the expression is invalid.\n>>> evaluate(\"1+2*3\"\
    )\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"\
    1+2*3\")\n7\n>>> evaluate(\"1+2*3\")\n7\n>>> evaluate(\"1+2*3\")", "    var a\
    \ = x.split(\"/\");\n    var b = n.split(\"/\");\n    var c = [];\n    var d =\
    \ [];\n    for(var i=0;i<a.length;i++){\n        c.push(a[i]*1);\n    }\n    for(var\
    \ i=0;i<b.length;i++){\n        d.push(b[i]*1);\n    }\n    var sum = 0;\n   \
    \ for(var i=0;i<c.length;i++){\n        sum += c[i];\n    }\n    for(var i=0;i<d.length;i++){\n\
    \        sum += d[i];\n    }\n    if(sum == 0){\n        return true;\n    }\n\
    \    return false;\n}\n", "    var parts = x.split(\"/\");\n    var numer = parts[0];\n\
    \    var denom = parts[1];\n    if(numer == \"\" || denom == \"\"){\n        return\
    \ false;\n    }\n    var numParts = numer.split(\"/\");\n    var numerator = numParts[0];\n\
    \    var denominator = numParts[1];\n    if(numerator == \"\" || denominator ==\
    \ \"\"){\n        return false;\n    }\n    if(numerator == denominator){\n  \
    \      return true;\n    }\n    if(numerator == \"\"){\n        return false;\n\
    \    }\n    if(numerator % denominator == 0){\n        return true;\n    }\n \
    \   return false;\n}\n", "  // Your code here\n}\n", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that will take a string containing\
    \ an arithmetic expression and evaluate it using eval().\n\nThe function should\
    \ return an integer representing the value of the expression. For example, if\
    \ the expression was \"(5 + 3) * (6 - 2)\", the function should return 50.\n\n\
    >>> evaluate(\"(5 + 3) * (6 - 2)\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n\
    >>> evaluate(\"(5 + 3) * 6 - 2\")\n50\n>>> evaluate(\"(5 + 3) * 6 - 2\")\n50",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ will return the number of digits in an integer.\n\n>>> digits(12345)\n4\n>>>\
    \ digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will return the number of digits in an integer.\n\n>>> count_digits(123)\n3\n\
    >>> count_digits(123)\n3\n>>> count_digits(0)\n0\n>>> count_digits(-5)\n0\n>>>\
    \ count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n\
    0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n\
    >>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>>\
    \ count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n\
    0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n\
    >>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>>\
    \ count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n\
    0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n\
    >>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>>\
    \ count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n\
    0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n\
    >>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>>\
    \ count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n\
    0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n\
    >>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n>>> count_digits(-5)\n0\n",
  "    // Your code here\n}\n", "    var a = x.split(\"/\");\n    var b = n.split(\"\
    /\");\n    var c = a[1]/b[1];\n    if(c == 0){\n        return true;\n    }\n\
    \    if(c == 1){\n        return false;\n    }\n    var d = a[0]/b[0];\n    if(d\
    \ == 0){\n        return true;\n    }\n    if(d == 1){\n        return false;\n\
    \    }\n    var e = a[0]/b[0];\n    var f = a[1]/b[1];\n    var g = a[0]/b[1];\n\
    \    var h = a[1]/b[0];\n    var i = a[0]/b[1];\n    var j = a[1]/b[0];\n    var\
    \ k = a[0]/b[1];\n    var l = a[1]/b[0];\n    var m = a[0]/b[1];\n    var n =\
    \ a[1]/b[0];\n    var o = a[0]/b[1];\n    var p = a[1]/b[0];\n    var q = a[0]/b[1];\n\
    \    var r = a[1]/b[0];\n    var s = a[0]/b[1];\n    var t = a[1]/b[0];\n    var\
    \ u = a[0]/b[1];\n    var v = a[1]/b[0];\n    var w = a[0]/b[1];\n    var x =\
    \ a[1]/b[0];\n    var y = a[0]/b[1];\n    var z = a[1]/b[0];\n    var a = a[0]/b[1];\n\
    \    var b = a[1]/b[0];\n    var c = a[0]/b[1];\n    var d = a[1]/b[0];\n    var\
    \ e = a[0]/b[1];\n    var f = a[1]/b[0];\n    var g = a[0]/b[1];\n    var h =\
    \ a[1]/b[0];\n    var i = a[0]/b[1];\n    var j = a[1]/b[0];\n    var k = a[0]/b[1];\n\
    \    var l = a[1]/b[0];\n    var m = a[0]/b[1];\n    var n = a[1]/b[0];\n    var\
    \ o = a[0]/b[1];\n    var p = a[1]/b[0];\n    var q = a[0]/b[1];\n    var r =\
    \ a[1]/b[0];\n    var s = a[0]/b[1];\n    var t = a[1]/b[0];\n    var u = a[0]/b[1];\n\
    \    var v = a[1]/b[0];\n    var w = a[0]/b[1];\n    var x = a[1]/b[0];\n    var\
    \ y = a[0]/b[1];\n    var z = a[1]/b[0];\n    var a = a[0]/b[1];\n    var b =\
    \ a[1]/b[0];\n    var c = a[0]/b[1];\n    var d = a[1]/b[0];\n    var e = a[0]/b[1];\n\
    \    var f = a[1]/b[0];\n    var g = a[0]/b[1];\n    var h = a[1]/b[0];\n    var\
    \ i = a[0]/b[1];\n    var j = a[1]/b[0];\n    var k = a[0]/b[1];\n    var l =\
    \ a[1]/b[0];\n    var m = a[0]/b[1];\n    var n = a[1]/b[0];\n    var o = a[0]/b[1];\n\
    \    var p = a[1]/b", "    // Write your code here\n}\n", "  if(n.indexOf(\"/\"\
    ) > -1){\n    var nums = n.split(\"/\");\n    var dens = x.split(\"/\");\n   \
    \ var numsLength = nums.length;\n    var densLength = dens.length;\n    if(numsLength\
    \ > densLength){\n      return false;\n    }\n    for(var i = 0; i < numsLength;\
    \ i++){\n      if(nums[i] > dens[i]){\n        return false;\n      }\n    }\n\
    \    return true;\n  }\n  if(n.indexOf(\"*\") > -1){\n    var nums = n.split(\"\
    *\");\n    var dens = x.split(\"*\");\n    var numsLength = nums.length;\n   \
    \ var densLength = dens.length;\n    if(numsLength > densLength){\n      return\
    \ false;\n    }\n    for(var i = 0; i < numsLength; i++){\n      if(nums[i] >\
    \ dens[i]){\n        return false;\n      }\n    }\n    return true;\n  }\n  if(n.indexOf(\"\
    +\") > -1){\n    var nums = n.split(\"+\");\n    var dens = x.split(\"+\");\n\
    \    var numsLength = nums.length;\n    var densLength = dens.length;\n    if(numsLength\
    \ > densLength){\n      return false;\n    }\n    for(var i = 0; i < numsLength;\
    \ i++){\n      if(nums[i] > dens[i]){\n        return false;\n      }\n    }\n\
    \    return true;\n  }\n  return false;\n}\n", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string. \nThe function should ignore\
    \ all non-numeric characters and return the number of characters in the string.\n\
    The function should ignore all spaces and tabs.\nThe function should ignore all\
    \ newline characters.\nThe function should ignore all non-alphanumeric characters\
    \ and return the number of characters in the string.\nThe function should ignore\
    \ all non-alphanumeric characters and return the number of characters in the string.\n\
    The function should ignore all non-alphanumeric characters and return the number\
    \ of characters in the string.\nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nThe function\
    \ should ignore all non-alphanumeric characters and return the number of characters\
    \ in the string.\nThe function should ignore all non-alphanumeric characters and\
    \ return the number of characters in the string.\nThe function should ignore all\
    \ non-alphanumeric characters and return the number of characters in the string.\n\
    The function should ignore all non-alphanumeric characters and return the number\
    \ of characters in the string.\nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nThe function\
    \ should ignore all non-alphanumeric characters and return the number of characters\
    \ in the string.\nThe function should ignore all non-alphanumeric characters and\
    \ return the number of characters in the string.\nThe function should ignore all\
    \ non-alphanumeric characters and return the number of characters in the string.\n\
    The function should ignore all non-alphanumeric characters and return the number\
    \ of characters in the string.\nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nThe function\
    \ should ignore all non-alphanumeric characters and return the number of characters\
    \ in the string.\nThe function should ignore all non-alphanumeric characters and\
    \ return the number of characters in the string.\nThe function should ignore all\
    \ non-alphanumeric characters and return the number of characters in the string.\n\
    The function should ignore all non-alphanumeric characters and return the number\
    \ of characters in the string.\nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nThe function\
    \ should ignore all non-alphanumeric characters and return the number of characters\
    \ in the string.\nThe function should ignore all non-alphanumeric characters and\
    \ return the number of characters in the string.\nThe function should ignore all\
    \ non-alphanumeric characters and return the number of characters in the string.\n\
    The function should ignore all non-alphanumeric characters and return the number\
    \ of characters in the string.\nThe function should ignore all non-alphanumeric\
    \ characters and return the number of characters in the string.\nThe function\
    \ should ignore all non-alphanumeric characters and return the number of characters\
    \ in the string.\nThe function should ignore all non-alphanumeric characters and\
    \ return the number of characters in the string.\nThe function should ignore all\
    \ non-alphanum", "    // Write your code here\n}\n</cell>\n<text>\nProblem 7\n\
    Write a function that will take a string as input and return the string with all\
    \ consecutive vowels removed.\n\n>>> removeVowels(\"Hello World\")\n\"Hello World\"\
    \n>>> removeVowels(\"Hello World!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello\
    \ World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello\
    \ World\"\n>>> removeVowels(\"Hello World!!!\")\n\"Hello World\"\n>>> removeVowels(\"\
    Hello World!!!\")\n\"Hello World\"\n", "  // Write your code here\n}\n</cell>\n\
    <text>\nProblem 4\nWrite a function that will evaluate a mathematical expression\
    \ given as a string. The function should return true if the expression evaluates\
    \ to a number, and false otherwise.\n\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\n\
    True\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"(1 + 1)\")\nTrue\n>>> evaluate(\"\
    (1 + 1)\")\nTrue", "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will accept a fraction as an argument and return the fraction\
    \ simplified into lowest terms. For example, simplify(\"1/5\", \"5/1\") should\
    \ return \"1/2\".\n\nYou can assume that x, and n are valid fractions, and do\
    \ not have zero as denominator.\n\n>>> simplify(\"1/5\", \"5/1\")\n'1/2'\n>>>\
    \ simplify(\"1/6\", \"2/1\")\n'1/2'\n>>> simplify(\"7/10\", \"10/2\")\n'7/2'\n\
    >>> simplify(\"7/10\", \"2/1\")\n'7/2'\n>>> simplify(\"7/10\", \"1/1\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/2\")\n'7/1'\n>>> simplify(\"7/10\", \"1/3\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/4\")\n'7/1'\n>>> simplify(\"7/10\", \"1/5\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/6\")\n'7/1'\n>>> simplify(\"7/10\", \"1/7\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/8\")\n'7/1'\n>>> simplify(\"7/10\", \"1/9\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/10\")\n'7/1'\n>>> simplify(\"7/10\", \"1/11\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/12\")\n'7/1'\n>>> simplify(\"7/10\", \"1/13\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/14\")\n'7/1'\n>>> simplify(\"7/10\", \"1/15\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/16\")\n'7/1'\n>>> simplify(\"7/10\", \"1/17\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/18\")\n'7/1'\n>>> simplify(\"7/10\", \"1/19\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/20\")\n'7/1'\n>>> simplify(\"7/10\", \"1/21\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/22\")\n'7/1'\n>>> simplify(\"7/10\", \"1/23\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/24\")\n'7/1'\n>>> simplify(\"7/10\", \"1/25\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/26\")\n'7/1'\n>>> simplify(\"7/10\", \"1/27\")\n'7/1'\n\
    >>> simplify(\"7/10\", \"1/28\")\n'7/1'\n>>> simplify(\"7/", "    var numerator\
    \ = x[0]\n    var denominator = x[1]\n    var numeratorString = \"\"\n    var\
    \ denominatorString = \"\"\n    var numeratorDecimalPlaces = numerator.split(\"\
    .\")[0].length\n    var denominatorDecimalPlaces = denominator.split(\".\")[0].length\n\
    \    var wholeNumbers = numerator.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[0].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = wholeNumbers.split(\".\")[1]\n    var wholeNumbersDecimalPlaces\
    \ = wholeNumbers.split(\".\")[1].length\n    var wholeNumbersString = wholeNumbers.split(\"\
    .\")[1]\n    var wholeNumbersDecimalPlaces = wholeNumbers.split(\".\")[1].length\n\
    \    var wholeNumbersString = ", "    // Write your code here\n}\n</cell>\n<cell>",
  "    // Write your code here\n}\n</cell>\n<text>\nTask 7: Implement a function that\
    \ will evaluate a polynomial expression. Your function should take two arguments:\
    \ a string expression and a variable that represents the coefficients of the polynomial.\
    \ The function should return true if the expression is valid and false otherwise.\
    \ Both expression and coefficient are strings, and have the following format,\
    \ <variable>/<coefficient>. For example, if the expression is \"1/5\", the coefficient\
    \ is \"1/5\".\n\n\n</text>\n<cell>", "    if (n.indexOf(\"/\") !== -1){\n    \
    \    var a = x.split(\"/\");\n        var b = n.split(\"/\");\n        var c =\
    \ a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n      \
    \  return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"*\") !==\
    \ -1){\n        var a = x.split(\"*\");\n        var b = n.split(\"*\");\n   \
    \     var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    +\") !== -1){\n        var a = x.split(\"+\");\n        var b = n.split(\"+\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    -\") !== -1){\n        var a = x.split(\"-\");\n        var b = n.split(\"-\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    (\") !== -1){\n        var a = x.split(\"(\");\n        var b = n.split(\"(\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    )\") !== -1){\n        var a = x.split(\")\");\n        var b = n.split(\")\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    %\") !== -1){\n        var a = x.split(\"%\");\n        var b = n.split(\"%\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    ^\") !== -1){\n        var a = x.split(\"^\");\n        var b = n.split(\"^\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    =\") !== -1){\n        var a = x.split(\"=\");\n        var b = n.split(\"=\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b[1]);\n\
    \        return d === parseInt(c) ? true : false;\n    }\n    if (n.indexOf(\"\
    !\") !== -1){\n        var a = x.split(\"!\");\n        var b = n.split(\"!\"\
    );\n        var c = a[1] + \"/\" + b[1];\n        var d = parseInt(c) + parseInt(b",
  "    // Your code here\n}\n", "  // Your code here\n}\n", "    if (x === \"\" ||\
    \ x === \"0\") return false;\n    var parts = x.split(\"/\");\n    var numerator\
    \ = parts[0];\n    var denominator = parts[1];\n    var numeratorIsValid = numerator\
    \ !== \"0\";\n    var denominatorIsValid = denominator !== \"0\";\n    if (numeratorIsValid\
    \ && denominatorIsValid){\n        var numeratorFraction = numerator.split(\"\
    /\");\n        var denominatorFraction = denominator.split(\"/\");\n        var\
    \ numeratorFractionLength = numeratorFraction.length;\n        var denominatorFractionLength\
    \ = denominatorFraction.length;\n        if (numeratorFractionLength > denominatorFractionLength){\n\
    \            return false;\n        }\n        var numeratorFractionRemainder\
    \ = numeratorFraction[numeratorFractionLength-1];\n        var denominatorFractionRemainder\
    \ = denominatorFraction[denominatorFractionLength-1];\n        var numeratorFractionRemainderIsValid\
    \ = numeratorFractionRemainder !== \"0\";\n        var denominatorFractionRemainderIsValid\
    \ = denominatorFractionRemainder !== \"0\";\n        if (numeratorFractionRemainderIsValid\
    \ && denominatorFractionRemainderIsValid){\n            var numeratorFractionRemainderLength\
    \ = numeratorFractionRemainder.length;\n            var denominatorFractionRemainderLength\
    \ = denominatorFractionRemainder.length;\n            if (numeratorFractionRemainderLength\
    \ > denominatorFractionRemainderLength){\n                return false;\n    \
    \        }\n            var numeratorFractionRemainderRemainder = numeratorFractionRemainder.split(\"\
    /\");\n            var denominatorFractionRemainderRemainder = denominatorFractionRemainder.split(\"\
    /\");\n            var numeratorFractionRemainderRemainderLength = numeratorFractionRemainderRemainder.length;\n\
    \            var denominatorFractionRemainderRemainderLength = denominatorFractionRemainderRemainder.length;\n\
    \            if (numeratorFractionRemainderRemainderLength > denominatorFractionRemainderRemainderLength){\n\
    \                return false;\n            }\n            var numeratorFractionRemainderRemainderRemainder\
    \ = numeratorFractionRemainderRemainder[numeratorFractionRemainderRemainderLength-1];\n\
    \            var denominatorFractionRemainderRemainderRemainder = denominatorFractionRemainderRemainder[denominatorFractionRemainderRemainderLength-1];\n\
    \            var numeratorFractionRemainderRemainderIsValid = numeratorFractionRemainderRemainderRemainder\
    \ !== \"0\";\n            var denominatorFractionRemainderRemainderIsValid = denominatorFractionRemainderRemainderRemainder\
    \ !== \"0\";\n            if (numeratorFractionRemainderRemainderIsValid && denominatorFractionRemainderRemainderIsValid){\n\
    \                var numeratorFractionRemainderRemainderRemainderLength = numeratorFractionRemainderRemainderRemainder.length;\n\
    \                var denominatorFractionRemainderRemainderRemainderLength = denominatorFractionRemainderRemainderRemainder.length;\n\
    \                if (numeratorFractionRemainderRemainderRemain", "    // Write\
    \ your code here\n}\n", "    // Your code here\n}\n</cell>\n<cell>", "  // Write\
    \ your code here\n}\n</cell>\n<cell>", "    var a = x.split(\"/\");\n    var b\
    \ = n.split(\"/\");\n    var c = [];\n    var d = [];\n    var e = [];\n    var\
    \ f = [];\n    var g = [];\n    var h = [];\n    var i = 1;\n    var j = 1;\n\
    \    var k = 1;\n    var l = 1;\n    var m = 1;\n    var n = 1;\n    var o = 1;\n\
    \    var p = [];\n    var q = [];\n    var r = 1;\n    var s = 1;\n    var t =\
    \ 1;\n    var u = 1;\n    var v = 1;\n    var w = 1;\n    var x = 1;\n    var\
    \ y = 1;\n    var z = 1;\n    var A = 1;\n    var B = 1;\n    var C = 1;\n   \
    \ var D = 1;\n    var E = 1;\n    var F = 1;\n    var G = 1;\n    var H = 1;\n\
    \    var I = 1;\n    var J = 1;\n    var K = 1;\n    var L = 1;\n    var M = 1;\n\
    \    var N = 1;\n    var O = 1;\n    var P = 1;\n    var Q = 1;\n    var R = 1;\n\
    \    var S = 1;\n    var T = 1;\n    var U = 1;\n    var V = 1;\n    var W = 1;\n\
    \    var X = 1;\n    var Y = 1;\n    var Z = 1;\n    var A1 = 1;\n    var B1 =\
    \ 1;\n    var C1 = 1;\n    var D1 = 1;\n    var E1 = 1;\n    var F1 = 1;\n   \
    \ var G1 = 1;\n    var H1 = 1;\n    var I1 = 1;\n    var J1 = 1;\n    var K1 =\
    \ 1;\n    var L1 = 1;\n    var M1 = 1;\n    var N1 = 1;\n    var O1 = 1;\n   \
    \ var P1 = 1;\n    var Q1 = 1;\n    var R1 = 1;\n    var S1 = 1;\n    var T1 =\
    \ 1;\n    var U1 = 1;\n    var V1 = 1;\n    var W1 = 1;\n    var X1 = 1;\n   \
    \ var Y1 = 1;\n    var Z1 = 1;\n    var A2 = 1;\n    var B2 = 1;\n    var C2 =\
    \ 1;\n    var D2 = 1;\n    var E2 = 1;\n    var F2 = 1;\n    var G2 = 1;\n   \
    \ var H2 = 1;\n    var I2 = 1;\n    var J2 = 1;\n    var K2 = 1;\n    var L2 =\
    \ 1;\n    var M2 = 1;\n    var N2 = 1;\n    var O2 = 1;\n    var P2 = 1;\n   \
    \ var Q2 = 1;\n    var R2 = 1;\n    var S2 = 1;\n    var T2 = 1;\n    var U2 =\
    \ 1;\n    var V2 = 1;\n    var W2 = 1;\n    var X2 = 1;\n    var Y2 = 1;\n   \
    \ var Z2 = 1;\n    var A3 = 1;\n    var B3 = 1;\n    var C3 = 1;\n    var D3 =\
    \ 1;\n    var E3 = 1;\n    var F3 = 1;\n    var G3 = 1;\n    var H3 = 1;\n   \
    \ var I3 = 1;\n    var J3 = 1;\n    var K3 = 1;\n    var L3 = 1;\n    var M3 =\
    \ 1;\n    var N3 = 1;\n    var O3 = 1;\n    var P3 = 1;\n", "    // Write your\
    \ code here\n}\n</cell>\n<cell>", "  // Your code here\n}\n</cell>\n<cell>", " \
    \ // Write your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes\
    \ a string and returns the number of words in the string.\nThe string can contain\
    \ spaces, commas, and periods.\n\n\n</text>\n<cell>", "    // Your code here\n\
    }\n", "    // Write your code here\n}\n</cell>\n<text>\nProblem 8\nWrite a function\
    \ that will accept two fractions as arguments and return true if they are equal.\n\
    The function should return false if either of the arguments are invalid fractions.\n\
    \n\n</text>\n<cell>", "    var nums = x.split(\"/\");\n    var dens = n.split(\"\
    /\");\n    var numsLen = nums.length;\n    var densLen = dens.length;\n    var\
    \ numsSum = 0, densSum = 0;\n    var numsMul = 1, densMul = 1;\n    var isNum\
    \ = true;\n    var isDen = true;\n    for(var i=0; i<numsLen; i++){\n        if(nums[i].indexOf(\"\
    0\") !== -1){\n            isNum = false;\n        }\n        if(dens[i].indexOf(\"\
    0\") !== -1){\n            isDen = false;\n        }\n        if(isNum && isDen){\n\
    \            numsMul = parseInt(nums[i]);\n            densMul = parseInt(dens[i]);\n\
    \        }\n        if(!isNum && !isDen){\n            numsSum += parseInt(nums[i]);\n\
    \            densSum += parseInt(dens[i]);\n        }\n    }\n    if(isNum){\n\
    \        numsMul = parseInt(numsSum);\n    }\n    if(isDen){\n        densMul\
    \ = parseInt(densSum);\n    }\n    if(numsMul === 1 && densMul === 1){\n     \
    \   return true;\n    }\n    if(numsMul === 0){\n        return false;\n    }\n\
    \    if(densMul === 0){\n        return false;\n    }\n    if(numsMul === densMul){\n\
    \        return true;\n    }\n    return false;\n}\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will calculate the\
    \ factorial of a number. Factorial of a number is the number of times a number\
    \ divides itself. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120. Your function should\
    \ take in a number as an argument and return the factorial of that number.\n\n\
    >>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n1.8446744e+19\n\
    >>> factorial(1000)\n6.208015e+23\n>>> factorial(10000)\n1.8446744e+19\n>>> factorial(100000)\n\
    6.208015e+23\n>>> factorial(1000000)\n1.8446744e+19\n>>> factorial(10000000)\n\
    6.208015e+23\n>>> factorial(100000000)\n1.8446744e+19\n>>> factorial(1000000000)\n\
    6.208015e+23\n>>> factorial(10000000000)\n1.8446744e+19\n>>> factorial(100000000000)\n\
    6.208015e+23\n>>> factorial(1000000000000)\n1.8446744e+19\n>>> factorial(10000000000000)\n\
    6.208015e+23\n>>> factorial(100000000000000)\n1.8446744e+19\n>>> factorial(1000000000000000)\n\
    6.208015e+23\n>>> factorial(10000000000000000)\n1.8446744e+19\n>>> factorial(100000000000000000)\n\
    6.208015e+23\n>>> factorial(1000000000000000000)\n1.8446744e+19\n>>> factorial(10000000000000000000)\n\
    6.208015e+23\n>>> factorial(100000000000000000000)\n1.8446744e+19\n>>> factorial(1000000000000000000000)\n\
    6.208015e+23\n>>> factorial(10000000000000000000000)\n1.8446744e+19\n>>> factorial(100000000000000000000000)\n\
    6.208015e+23\n>>> factorial(1000000000000000000000000)\n1.8446744e+19\n>>> factorial(10000000000000000000000000)\n\
    6.208015e+23\n>>> factorial(100000000000000000000000000)\n1.8446744e+19\n>>> factorial(1000000000000000000000000000)\n\
    6.208015e+23\n>>> factorial(10000000000000000000000000000)\n1.8446744e+19\n>>>\
    \ factorial(100000000000000000000000000000)\n6.208015e+23\n>>> factorial(1000000000000000000000000000000)\n\
    1.8446744e+19\n>>> factorial(10000000000000000000000000000000)\n6.208015e+23\n\
    >>> ", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below\
    \ takes a string representing a fraction and returns the fraction represented\
    \ as a string. \nThe function should return false if the fraction cannot be represented\
    \ as a fraction, true otherwise. \nThe function should also return false if the\
    \ fraction string is not in the correct format. \nThe function should also return\
    \ false if the fraction string has zero as its denominator. \nThe function should\
    \ also return false if the fraction string has negative numerator or denominator.\n\
    \n\n</text>\n<cell>", "  // Your code goes here\n}\n</cell>\n<cell>", "    if\
    \ (x.indexOf('/') !== -1 && x.indexOf('/') === x.lastIndexOf('/')){\n        x\
    \ = x.slice(0, x.lastIndexOf('/'));\n    }\n    if (n.indexOf('/') !== -1 && n.indexOf('/')\
    \ === n.lastIndexOf('/')){\n        n = n.slice(0, n.lastIndexOf('/'));\n    }\n\
    \    if (x.indexOf('/') === -1 && n.indexOf('/') === -1){\n        return false;\n\
    \    }\n    if (x.indexOf('/') === -1 && n.indexOf('/') !== -1){\n        return\
    \ false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/') !== -1){\n  \
    \      return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/') !==\
    \ -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/')\
    \ !== -1){\n        return false;\n    }\n    if (x.indexOf('/') !== -1 && n.indexOf('/",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will evaluate a mathematical expression given as a string. Your function should\
    \ return true if the expression evaluates to a number, and false otherwise. For\
    \ example, given the following expression:\n\n$x^2 + 3x + 5$\n\nYour function\
    \ should return true, since $x^2 + 3x + 5$ is a valid mathematical expression.\
    \ Given the following expression:\n\n$x^2 + 3x + 5$\n\nYour function should return\
    \ false, since $x^2 + 3x + 5$ is not a valid mathematical expression.\n\nYou can\
    \ assume that x, and n are valid fractions, and do not have zero as denominator.\n\
    \n>>> evaluate(\"x^2 + 3x + 5\")\nTrue\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + 5\")\nFalse\n\
    >>> evaluate(\"x^2 + 3x + 5\")\nFalse\n>>> evaluate(\"x^2 + 3x + ", "  // Write\
    \ your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will return\
    \ the number of digits in an integer.\n\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n3\n>>> count_digits(123)\n\
    3\n>>> count_digits(123)\n3", "    // Your code here\n}\n</cell>\n<cell>", " \
    \   // Write your code here\n}\n", "    var a = x.split(\"/\");\n    var b = n.split(\"\
    /\");\n    var c = a[1] + \"/\" + b[1];\n    var d = a[0] + \"/\" + b[0];\n  \
    \  return c==d;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ But I still don't understand how this would work. Could you please explain it\
    \ a little more? Thanks!\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But I still don't\
    \ understand how this would work. Could you please explain it a little more? Thanks!\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer! But I still don't understand how this would work.\
    \ Could you please explain it a little more? Thanks!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    // Write your code here\n}\n", "    var splitX = x.split(\"\
    /\");\n    var splitN = n.split(\"/\");\n    var splitXN = splitX[0].split(\"\
    /\");\n    var splitXN2 = splitXN[1].split(\"/\");\n    var splitN2 = splitN[0].split(\"\
    /\");\n    var splitN21 = splitN2[1].split(\"/\");\n    var splitN22 = splitN2[2].split(\"\
    /\");\n    var splitN2N1 = splitN22[0].split(\"/\");\n    var splitN2N2 = splitN22[1].split(\"\
    /\");\n    var splitN2N21 = splitN2N2[2].split(\"/\");\n    var splitN2N22 = splitN2N2[1].split(\"\
    /\");\n    var splitN2N2N1 = splitN2N22[0].split(\"/\");\n    var splitN2N2N2\
    \ = splitN2N22[1].split(\"/\");\n    var splitN2N2N21 = splitN2N2N2[2].split(\"\
    /\");\n    var splitN2N2N22 = splitN2N2N2[1].split(\"/\");\n    var splitN2N2N2N1\
    \ = splitN2N2N22[0].split(\"/\");\n    var splitN2N2N2N2 = splitN2N2N22[1].split(\"\
    /\");\n    var splitN2N2N2N21 = splitN2N2N2N2[2].split(\"/\");\n    var splitN2N2N2N22\
    \ = splitN2N2N2N2[1].split(\"/\");\n    var splitN2N2N2N2N1 = splitN2N2N2N22[0].split(\"\
    /\");\n    var splitN2N2N2N2N2 = splitN2N2N2N22[1].split(\"/\");\n    var splitN2N2N2N2N21\
    \ = splitN2N2N2N2N2[2].split(\"/\");\n    var splitN2N2N2N2N22 = splitN2N2N2N2N2[1].split(\"\
    /\");\n    var splitN2N2N2N2N2N1 = splitN2N2N2N2N2N22[0].split(\"/\");\n    var\
    \ splitN2N2N2N2N2N2 = splitN2N2N2N2N2N22[1].split(\"/\");\n    var splitN2N2N2N2N2N21\
    \ = splitN2N2N2N2N2N", "    // Write your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that will convert a fraction to its decimal equivalent.\
    \ Assume that both fractions are valid and do not have zero as denominator. Assume\
    \ that both fractions are represented as strings with numerator and denominator\
    \ separated by forward slash \"/\".\n\n>>> fraction_to_decimal(\"1/5\")\n0.125\n\
    >>> fraction_to_decimal(\"2/3\")\n0.6666666666666666\n>>> fraction_to_decimal(\"\
    5/1\")\n5\n>>> fraction_to_decimal(\"1/2\")\n0.5\n>>> fraction_to_decimal(\"1/0\"\
    )\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction\
    \ 1/0\n>>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"1/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 1/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"1/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 1/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"1/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 1/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"1/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in fraction_to_decimal\nValueError: Invalid fraction 1/0\n\
    >>> fraction_to_decimal(\"1/0\")\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in fraction_to_decimal\n\
    ValueError: Invalid fraction 1/0\n>>> fraction_to_decimal(\"1/0\")\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, ", "    var numerator=Number(x.split(\"\
    /\")[0]);\n    var denominator=Number(x.split(\"/\")[1]);\n    var result=false;\n\
    \    if(numerator>0 && denominator>0){\n        if(numerator%denominator==0){\n\
    \            result=true;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| a dscore=0 |>\n<code>", "  // Your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will take a string\
    \ as input and return the number of characters in the string. \nThe function should\
    \ ignore spaces and punctuation marks.\n\n>>> count_characters(\"Hello World\"\
    )\n12\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"Hello\
    \ World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!! \")\n13\n>>> count_characters(\"Hello World!!! !\")\n13\n>>> count_characters(\"\
    Hello World!!! !  \")\n13\n>>> count_characters(\"Hello World!!! !  !\")\n13\n\
    >>> count_characters(\"Hello World!!! !  !  \")\n13\n>>> count_characters(\"Hello\
    \ World!!! !  !  !  \")\n13\n>>> count_characters(\"Hello World!!! !  !  !  !\
    \  \")\n13\n>>> count_characters(\"Hello World!!! !  !  !  !  !  \")\n13\n>>>\
    \ count_characters(\"Hello World!!! !  !  !  !  !  !  !\")\n13\n>>> count_characters(\"\
    Hello World!!! !  !  !  !  !  !  !  !  \")\n13\n>>> count_characters(\"Hello World!!!\
    \ !  !  !  !  !  !  !  !  !  !\")\n13\n>>> count_characters(\"Hello World!!! !\
    \  !  !  !  !  !  !  !  !  !  !  \")\n13\n>>> count_characters(\"Hello World!!!\
    \ !  !  !  !  !  !  !  !  !  !  !  !  !  \")\n13\n>>> count_characters(\"Hello\
    \ World!!! !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  \")\n13\n>>> count_characters(\"\
    Hello World!!! !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  \")\n13\n>>> count_characters(\"\
    Hello World!!! !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  \")\n13\n\
    >>> count_characters(\"Hello World!!! !  !  ", "    // Write your code here\n\
    }\n</cell>\n<text>\nProblem 7\nWrite a function that will take two fractions as\
    \ input and return the greatest common denominator of the two fractions. You can\
    \ assume that both fractions have the same denominator.\n\n\n</text>\n<cell>",
  "    // Write your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below\
    \ takes a string as input and returns the number of times the string occurs in\
    \ the input. For example, if the input is \"abcabc\", the function should return\
    \ 3.\n\nThe function should return -1 if the input string does not contain any\
    \ character from the alphabet. Otherwise, if the input string contains any character\
    \ from the alphabet, the function should return 0.\n\nThe function should handle\
    \ multiple occurrences of the same character in the input string. For example,\
    \ if the input string is \"abcabc\", the function should return 3.\n\nThe function\
    \ should handle input strings with different alphabets. For example, if the input\
    \ string is \"abcabc\", the function should return 3.\n\n\n</text>\n<cell>", " \
    \   var nums = x.split(\"/\");\n    var dens = n.split(\"/\");\n    var numsSum\
    \ = 0;\n    var densSum = 0;\n    var numsSumDens = 0;\n    var densSumDens =\
    \ 0;\n    var isNum = true;\n    var isDen = true;\n    for(var i=0; i<nums.length;\
    \ i++){\n        if(nums[i]==0){\n            isNum = false;\n        }\n    \
    \    if(dens[i]==0){\n            isDen = false;\n        }\n        if(isNum\
    \ && isDen){\n            numsSumDens += parseInt(nums[i]);\n            densSumDens\
    \ += parseInt(dens[i]);\n        }\n        if(isNum){\n            numsSum +=\
    \ parseInt(nums[i]);\n        }\n        if(isDen){\n            densSum += parseInt(dens[i]);\n\
    \        }\n    }\n    if(numsSumDens == 0){\n        return false;\n    }\n \
    \   if(densSumDens == 0){\n        return true;\n    }\n    if(numsSum == 0){\n\
    \        return false;\n    }\n    if(densSum == 0){\n        return true;\n \
    \   }\n    if(numsSumDens == densSum){\n        return true;\n    }\n    if(numsSumDens\
    \ > densSum){\n        return false;\n    }\n    return false;\n}\n</code>\n<|/\
    \ a tags=javascript,algorithm |>\n<| c |>\nThis doesn't work. Try simplifying\
    \ \"1/5\" and \"5/1\"\n<|/ c |>\n<| c |>\nI tested it and it works. I even tested\
    \ it on \"1/5\" and \"5/1\" and it returned true.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for \"1/5\" and \"5/1\"\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ even tested it on \"1/5\" and \"5/1\" and it returned true.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work for \"1/5\" and \"5/1\"\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\n<code>", "    // Write your code here\n}\n</cell>\n<text>\nProblem 7: Write\
    \ a function that will evaluate an arithmetic expression with two numbers and\
    \ return its value.\nThe function should return false if the expression is invalid,\
    \ and true if it is valid.\nThe function should accept two strings as arguments:\
    \ x and y, where x and y are valid arithmetic expressions.\n>>> evaluate(\"1/2\"\
    , \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/3\")\nFalse\n>>> evaluate(\"1/2\"\
    , \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/2\",\
    \ \"1/2\")\nTrue\n>>> evaluate(\"1/2\", \"1/2\")\nTrue\n>>> evaluate(\"1/", " \
    \   // Write your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will evaluate a mathematical expression given as a string. For example, the\
    \ string \"(x + y)\" should evaluate to 5 + x, where x and y are numbers. You\
    \ can assume that x and y are valid expressions, and do not have zero as denominator.\
    \ You may assume that all operators are valid and do not contain any parentheses.\n\
    \n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"\
    (x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>>\
    \ evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x +\
    \ y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"\
    (x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>>\
    \ evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x +\
    \ y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"\
    (x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>>\
    \ evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x +\
    \ y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"\
    (x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>>\
    \ evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x +\
    \ y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"\
    (x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>>\
    \ evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x +\
    \ y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"(x + y)\")\n5\n>>> evaluate(\"\
    (x + y)\")\n5\n>>> evaluate(\"", "    var numerator = x.split(\"/\").map(Number);\n\
    \    var denominator = n.split(\"/\").map(Number);\n    var wholeNumber = numerator[0]\
    \ === numerator[1] && numerator[0] === numerator[2];\n    var isWholeNumber =\
    \ numerator[0] === numerator[1] && numerator[0] === numerator[2];\n    var isNegative\
    \ = numerator[0] < 0;\n    var isPositive = numerator[0] > 0;\n    var isNegativeWholeNumber\
    \ = numerator[0] < 0 && numerator[1] < 0;\n    var isPositiveWholeNumber = numerator[0]\
    \ > 0 && numerator[1] > 0;\n    var isWholeNumberNegative = numerator[0] < 0 &&\
    \ numerator[1] > 0;\n    var isWholeNumberPositive = numerator[0] > 0 && numerator[1]\
    \ > 0;\n    var isWholeNumberNegativeWholeNumber = numerator[0] < 0 && numerator[1]\
    \ > 0 && numerator[2] < 0;\n    var isWholeNumberPositiveWholeNumber = numerator[0]\
    \ > 0 && numerator[1] > 0 && numerator[2] > 0;\n    var isWholeNumberNegativeWholeNumberPositive\
    \ = numerator[0] < 0 && numerator[1] > 0 && numerator[2] > 0 && numerator[3] <\
    \ 0;\n    var isWholeNumberPositiveWholeNumberPositive = numerator[0] > 0 && numerator[1]\
    \ > 0 && numerator[2] > 0 && numerator[3] > 0;\n    var isWholeNumberNegativeWholeNumberNegative\
    \ = numerator[0] < 0 && numerator[1] > 0 && numerator[2] > 0 && numerator[3] >\
    \ 0 && numerator[4] < 0;\n    var isWholeNumberPositiveWholeNumberNegative = numerator[0]\
    \ > 0 && numerator[1] > 0 && numerator[2] > 0 && numerator[3] > 0 && numerator[4]\
    \ > 0;\n    var isWholeNumberNegativeWholeNumberPositive = numerator[0] < 0 &&\
    \ numerator[1] > 0 && numerator[2] > 0 && numerator[3] > 0 && numerator[4] > 0\
    \ && numerator[5] < 0;\n    var isWholeNumberPositiveWholeNumberPositive = numerator[0]\
    \ > 0 && numerator[1] > 0 && numerator[2] > 0 && numerator[3] > 0 && numerator[4]\
    \ > 0 && numerator[5] > 0;\n    var isWholeNumberNegativeWholeNumberNegativeWholeNumber\
    \ = numerator[0] < 0 && numerator[1] > 0 && numerator[2] > 0 && numerator[3] >\
    \ 0 && numerator[4] > 0 && numerator[5] > 0 && numerator[6] < 0;\n    var isWholeNumberPositiveWholeNumberNegativeWholeNumber\
    \ = numerator[0] > 0 && numerator[1] > 0 && numerator[2] > 0 && numerator[3] >\
    \ 0 && numerator[4] > 0 && ", "    // Write your code here\n}\n</cell>\n<text>\n\
    Problem 3\nWrite a function that will evaluate a mathematical expression. Your\
    \ function should take two parameters: a string expression and a variable name.\
    \ The function should evaluate the expression and return the value of the variable.\
    \ For example, if the expression is \"x + y\", the function should return \"y\"\
    . Your function should raise an exception if the expression is not a valid mathematical\
    \ expression. For example, if the expression is \"x + y\", the function should\
    \ raise an exception if the variable name is not \"x\" or \"y\".\n\n\n</text>\n\
    <cell>", "    var numerator=x.split(\"/\")[0],\n        denominator=x.split(\"\
    /\")[1];\n    if(numerator==\"\" || denominator==\"\"){\n        return false;\n\
    \    }\n    if(numerator==n && denominator==n){\n        return true;\n    }\n\
    \    if(numerator==n && denominator!=\"1\"){\n        return false;\n    }\n \
    \   if(numerator!=\"1\" && denominator==n){\n        return false;\n    }\n  \
    \  if(numerator!=\"1\" && denominator!=\"1\"){\n        return true;\n    }\n\
    \    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain me the code you wrote? I mean the function you wrote.\
    \ I am not able to understand it.\n<|/ c |>\n<| c |>\nThe function `simplify`\
    \ will take two parameters. The first one is the string representation of fraction\
    \ and the second one is the string representation of fraction. `simplify(\"1/5\"\
    , \"5/1\")` will return `true` because `1/5` can be simplified to `1` and `5/1`\
    \ can be simplified to `1`. The function `simplify` will take two parameters.\
    \ The first one is the string representation of fraction and the second one is\
    \ the string representation of fraction. `simplify(\"1/5\", \"5/1\")` will return\
    \ `true` because `1/5` can be simplified to `1` and `5/1` can be simplified to\
    \ `1`. The function `simplify` will take two parameters. The first one is the\
    \ string representation of fraction and the second one is the string representation\
    \ of fraction. `simplify(\"1/5\", \"5/1\")` will return `true` because `1/5` can\
    \ be simplified to `1` and `5/1` can be simplified to `1`. The function `simplify`\
    \ will take two parameters. The first one is the string representation of fraction\
    \ and the second one is the string representation of fraction. `simplify(\"1/5\"\
    , \"5/1\")` will return `true` because `1/5` can be simplified to `1` and `5/1`\
    \ can be simplified to `1`. The function `simplify` will take two parameters.\
    \ The first one is the string representation of fraction and the second one is\
    \ the string representation of fraction. `simplify(\"1/5\", \"5/1\")` will return\
    \ `true` because `1/5` can be simplified to `1` and `5/1` can be simplified to\
    \ `1`. The function `simplify` will take two parameters. The first one is the\
    \ string representation of fraction and the second one is the string representation\
    \ of fraction. `simplify(\"1/5\", \"5/1\")` will return `true` because `1/5` can\
    \ be simplified to `1` and `5/1` can be simplified to `1`. The function `simplify`\
    \ will take two ", "    \n}\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ will take a fraction as input and return the fraction with the denominator equal\
    \ to the specified integer.\n\n\n</text>\n<cell>", "    // Your code here\n}\n\
    </cell>\n<text>\nProblem 3\nThe function should return true if the given string\
    \ is a valid fraction and false otherwise.\nThe function should return false if\
    \ the string does not contain any fractional part.\nThe function should return\
    \ false if the string contains any fractional part with zero as denominator.\n\
    The function should return false if the string contains any fractional part with\
    \ negative denominator.\nThe function should return false if the string contains\
    \ any fractional part with non-positive denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator.\n\
    The function should return false if the string contains any fractional part with\
    \ non-positive numerator and zero as denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator\
    \ and negative denominator.\nThe function should return false if the string contains\
    \ any fractional part with non-positive numerator and non-positive denominator.\n\
    The function should return false if the string contains any fractional part with\
    \ non-positive numerator and non-positive denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator\
    \ and non-positive denominator.\nThe function should return false if the string\
    \ contains any fractional part with non-positive numerator and non-positive denominator.\n\
    The function should return false if the string contains any fractional part with\
    \ non-positive numerator and non-positive denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator\
    \ and non-positive denominator.\nThe function should return false if the string\
    \ contains any fractional part with non-positive numerator and non-positive denominator.\n\
    The function should return false if the string contains any fractional part with\
    \ non-positive numerator and non-positive denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator\
    \ and non-positive denominator.\nThe function should return false if the string\
    \ contains any fractional part with non-positive numerator and non-positive denominator.\n\
    The function should return false if the string contains any fractional part with\
    \ non-positive numerator and non-positive denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator\
    \ and non-positive denominator.\nThe function should return false if the string\
    \ contains any fractional part with non-positive numerator and non-positive denominator.\n\
    The function should return false if the string contains any fractional part with\
    \ non-positive numerator and non-positive denominator.\nThe function should return\
    \ false if the string contains any fractional part with non-positive numerator\
    \ and non-positive denominator.\nThe function should return false if the ", " \
    \ if(n.indexOf(\"/\") !== -1){\n    var nums = x.split(\"/\");\n    var dens =\
    \ n.split(\"/\");\n    var numsSum = 0;\n    var densSum = 0;\n    for(var i =\
    \ 0; i < nums.length; i++){\n      if(nums[i] !== \"\"){\n        numsSum += parseInt(nums[i]);\n\
    \      }\n    }\n    for(var i = 0; i < dens.length; i++){\n      if(dens[i] !==\
    \ \"\"){\n        densSum += parseInt(dens[i]);\n      }\n    }\n    if(numsSum\
    \ === densSum){\n      return true;\n    }\n  }\n  return false;\n}\n", "    if\
    \ (x === null || x === undefined){\n        return false;\n    }\n    if (n ===\
    \ null || n === undefined){\n        return false;\n    }\n    if (n.indexOf('/')\
    \ === -1){\n        return false;\n    }\n    var nums = x.split('/');\n    var\
    \ num1 = nums[0];\n    var num2 = nums[1];\n    var num1Num = parseInt(num1);\n\
    \    var num2Num = parseInt(num2);\n    if (num1Num === 0){\n        return false;\n\
    \    }\n    if (num2Num === 0){\n        return false;\n    }\n    if (num1Num\
    \ > num2Num){\n        return false;\n    }\n    var num1Fraction = num1Num -\
    \ num2Num;\n    var num2Fraction = num2Num - num1Num;\n    var num1FractionStr\
    \ = num1Fraction.toString();\n    var num2FractionStr = num2Fraction.toString();\n\
    \    var num1FractionFraction = num1FractionStr.split('.')[1];\n    var num2FractionFraction\
    \ = num2FractionStr.split('.')[1];\n    if (num1FractionFraction === num2FractionFraction){\n\
    \        return true;\n    }\n    return false;\n}\n", "    // Write your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate a mathematical\
    \ expression. Your function should take two arguments, the first one being the\
    \ expression to evaluate, and the second one being the variable in which to store\
    \ the result. Your function should return true if the expression evaluates to\
    \ a whole number, and false otherwise. Your function should also handle cases\
    \ like \"1/2\" which evaluates to 0.5 and \"1/3\" which evaluates to 0.333.\n\n\
    \n</text>\n<cell>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
