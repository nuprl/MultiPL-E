name: HumanEval_56_correct_bracketing
language: js
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
  <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
  ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
  >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n\
  }\n\ntest();"
completions: ["    var opening_brackets = brackets.split(\"\");\n    var closing_brackets\
    \ = [];\n    for(var i=0; i<opening_brackets.length; i++){\n        var opening_bracket\
    \ = opening_brackets[i];\n        if(opening_bracket == \"<\"){\n            closing_brackets.push(\"\
    </\"+opening_bracket+\">\");\n        }\n        else if(opening_bracket == \"\
    >\"){\n            closing_brackets.push(opening_bracket+\"</\");\n        }\n\
    \        else{\n            closing_brackets.push(opening_bracket+\"/>\");\n \
    \       }\n    }\n    return closing_brackets.join(\"\") == brackets;\n}\n", "\t\
    brackets = brackets.split(\"\");\n\tvar opening_brackets = brackets.filter(function(b){return\
    \ b==\"<\"});\n\tvar closing_brackets = brackets.filter(function(b){return b>=\"\
    <\"});\n\treturn opening_brackets.length == closing_brackets.length;\n}\n", "\t\
    var opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\t\
    \n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tclosing_brackets.push(opening_brackets[i]);\n\
    \t\tclosing_brackets.push(opening_brackets[i+1]);\n\t}\n\t\n\treturn closing_brackets.join(\"\
    \") == brackets;\n}\n", "    var opening_brackets = brackets.split(\"\");\n  \
    \  var closing_brackets = [];\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] == \"<\"){\n            closing_brackets.push(\"\
    </\" + opening_brackets[i] + \">\");\n        }\n        else if(opening_brackets[i]\
    \ == \">\"){\n            closing_brackets.push(opening_brackets[i] + \"</\");\n\
    \        }\n        else{\n            closing_brackets.push(opening_brackets[i]\
    \ + \"/>\");\n        }\n    }\n    return closing_brackets.join(\"\") == brackets;\n\
    }\n", "  var opening_brackets = brackets.split(\"\");\n  var closing_brackets\
    \ = [];\n  for(var i = 0; i < opening_brackets.length; i++){\n    var opening_bracket\
    \ = opening_brackets[i];\n    var closing_bracket = opening_brackets[(i + 1) %\
    \ opening_brackets.length];\n    if(opening_bracket === closing_bracket){\n  \
    \    closing_brackets.push(opening_bracket);\n    }\n  }\n  return closing_brackets.join(\"\
    \") === brackets;\n}\n", "\tbrackets = brackets.split(\"\");\n\tvar opening_brackets\
    \ = [];\n\tvar closing_brackets = [];\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tvar bracket = brackets[i];\n\t\tif (bracket == \"<\"){\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket == \">\"){\n\t\t\tclosing_brackets.push(bracket);\n\t\t\
    }\n\t}\n\treturn (opening_brackets.length == closing_brackets.length);\n}\n",
  "\tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets = [];\n\t\
    \n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\t\n\t\
    \tfor(var j = i + 1; j < opening_brackets.length; j++){\n\t\t\tvar opening_bracket2\
    \ = opening_brackets[j];\n\t\t\t\n\t\t\tif(opening_bracket == opening_bracket2){\n\
    \t\t\t\tclosing_bracket = opening_bracket2;\n\t\t\t\topening_brackets.splice(j,\
    \ 1);\n\t\t\t\tj--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\t\n\treturn opening_brackets.length == closing_brackets.length;\n}\n", "\t\
    var opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ !== closing_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n", "\tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets\
    \ = brackets.split(\">\");\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \tvar all_opening_brackets_set = all_opening_brackets.filter(function(val){\n\t\
    \treturn val != \"\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.map(function(val){\n\
    \t\treturn val.toLowerCase();\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \">\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"<\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"/\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"\\\\\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"|\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"&\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"!\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"=\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"?\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"!\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"=\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"?\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val){\n\
    \t\treturn val != \"!\";\n\t});\n\tvar all_opening_brackets_set = all_opening_brackets_set.filter(function(val",
  "    var opening_brackets = brackets.split(\"\");\n    var closing_brackets = [];\n\
    \    var opening_brackets_length = opening_brackets.length;\n    for(var i=0;\
    \ i<opening_brackets_length; i++){\n        var opening_bracket = opening_brackets[i];\n\
    \        var closing_bracket = opening_bracket;\n        for(var j=i+1; j<opening_brackets_length;\
    \ j++){\n            closing_bracket = closing_brackets[j] + closing_bracket;\n\
    \        }\n        closing_brackets.push(closing_bracket);\n    }\n    return\
    \ closing_brackets.join(\"\") === brackets;\n}\n", "\tvar opening_brackets = brackets.match(/\\\
    <+/g);\n\tvar closing_brackets = brackets.match(/\\>+/g);\n\t\n\tfor(var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "\tbrackets = brackets.split(\"\
    \");\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"<\"\
    ){\n\t\t\tif(brackets[i+1] === \"<\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t\telse if(brackets[i] === \">\"){\n\t\t\tif(brackets[i-1] === \">\"){\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "\tvar opening_brackets\
    \ = brackets.split(\"\");\n\tvar correct_bracketing = true;\n\tfor (var i = 0;\
    \ i < opening_brackets.length; i++){\n\t\tif (opening_brackets[i] === \"<\"){\n\
    \t\t\tif (opening_brackets[i+1] !== \"<\"){\n\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t}\n\t\t}\n\t\telse if (opening_brackets[i] === \">\"){\n\t\t\tif (opening_brackets[i-1]\
    \ !== \"<\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ correct_bracketing;\n}\n", "    var opening_brackets = brackets.split(\"\");\n\
    \    var correct_bracketing = true;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"\
    <\" && opening_brackets[i] !== \">\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i]\
    \ !== \"<\" && opening_brackets[i] !== \"<\" && opening_brackets[i] !== \"<\"\
    \ && opening_brackets[i] !== \"<\" && opening_bra", "  var opening_brackets =\
    \ brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\").reverse();\n\
    \  for(var i=0; i<opening_brackets.length; i++){\n    if(opening_brackets[i] !==\
    \ closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n}\n",
  "\tvar opening_brackets = brackets.split(\"<\");\n\tvar closing_brackets = brackets.split(\"\
    >\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets[i]\
    \ != opening_brackets[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n\
    }\n", "\tvar opening_brackets = brackets.split(\"\");\n\tvar closing_brackets\
    \ = [];\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tvar opening_bracket\
    \ = opening_brackets[i];\n\t\tvar closing_bracket = opening_bracket;\n\t\tfor(var\
    \ j = i + 1; j < opening_brackets.length; j++){\n\t\t\tvar opening_bracket2 =\
    \ opening_brackets[j];\n\t\t\tif(opening_bracket2 == \">\"){\n\t\t\t\tclosing_bracket\
    \ = opening_bracket2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tclosing_brackets.push(closing_bracket);\n\
    \t}\n\treturn closing_brackets.join(\"|\") == brackets;\n}\n", "    var opening_brackets\
    \ = brackets.match(/\\<+/g);\n    var closing_brackets = brackets.match(/\\>+/g);\n\
    \    var correct = true;\n    opening_brackets.forEach(function(opening_bracket){\n\
    \        closing_brackets.forEach(function(closing_bracket){\n            if(opening_bracket\
    \ === closing_bracket){\n                correct = false;\n            }\n   \
    \     });\n    });\n    return correct;\n}\n", "    var opening_brackets = brackets.split(\"\
    <\");\n    var closing_brackets = brackets.split(\">\");\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ != closing_brackets[i]){\n            correct_bracketing = false;\n        \
    \    break;\n        }\n    }\n    return correct_bracketing;\n}\n", "  var opening_brackets\
    \ = brackets.split(\"\");\n  var closing_brackets = brackets.split(\"\").reverse();\n\
    \  for(var i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i]\
    \ !== closing_brackets[i]){\n      return false;\n    }\n  }\n  return true;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
