name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let even = arr.filter(x => x % 2 === 0);\n    let smallest = even.sort((a,b)\
    \ => a - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(arr[i] < min){\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    return [min, minIndex];\n}\n", " \
    \   arr.sort((a,b)=>a-b);\n    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(minValue < arr[i]){\n                minValue = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for\
    \ (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n       \
    \     minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n  \
    \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   return [minValue, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "  let evens = [];\n  let minIndex =\
    \ 0;\n  let minValue = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i]\
    \ % 2 === 0){\n      evens.push(arr[i]);\n      if(minValue < arr[i]){\n     \
    \   minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return evens.indexOf(minValue)\
    \ === -1 ? [] : [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            result.push([arr[i].value, i]);\n        }\n    }\n   \
    \ if(result.length){\n        result.sort((a,b) => a[0] - b[0]);\n        return\
    \ result;\n    }\n    return [];\n}\n", "    let evenArr = [];\n    let smallest;\n\
    \    let smallestIndex;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenArr.push(arr[i]);\n        }\n    }\n    smallest\
    \ = evenArr[0];\n    smallestIndex = 0;\n    for(let i = 0; i < evenArr.length;\
    \ i++){\n        if(smallest > evenArr[i]){\n            smallest = evenArr[i];\n\
    \            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let evenNodes\
    \ = [];\n    let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(evenNodes.length === 1){\n                smallestIndex = i;\n       \
    \     }\n        }\n    }\n    if(evenNodes.length === 0){\n        return [];\n\
    \    }\n    if(evenNodes.length === 1){\n        return [evenNodes[0], smallestIndex];\n\
    \    }\n    let smallestValue = evenNodes[0];\n    let smallestIndexes = [];\n\
    \    for(let i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < smallestValue){\n\
    \            smallestValue = evenNodes[i];\n            smallestIndexes = [];\n\
    \        }\n        if(evenNodes[i] === smallestValue){\n            smallestIndexes.push(i);\n\
    \        }\n    }\n    if(smallestIndexes.length === 0){\n        return [];\n\
    \    }\n    if(smallestIndexes.length === 1){\n        return [smallestValue,\
    \ smallestIndexes[0]];\n    }\n    let smallestIndexesValues = [];\n    for(let\
    \ i = 0; i < smallestIndexes.length; i++){\n        smallestIndexesValues.push(evenNodes[smallestIndexes[i]]);\n\
    \    }\n    return smallestIndexesValues;\n}\n", "    let minIndex = -1;\n   \
    \ let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minValue = arr[0];\n\
    \    let minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestIndex = even.map(node => even.indexOf(node)).sort((a,\
    \ b) => a - b)[0];\n    let smallestValue = even[smallestIndex];\n    return even.map(node\
    \ => node.value).indexOf(smallestValue);\n}\n", "    let minIndex = 0;\n    let\
    \ minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex = 0;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++){\n  \
    \  if (arr[i] < minValue){\n      minValue = arr[i];\n      minIndex = i;\n  \
    \  }\n  }\n  return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n   \
    \ let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] === minValue){\n            minIndex = i;\n        }\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0){\n\
    \            result.push([node.value, index]);\n        }\n    });\n    if(result.length\
    \ === 0){\n        return [];\n    }\n    if(result.length === 1){\n        return\
    \ result;\n    }\n    if(result.length === 2){\n        if(result[0][0] !== result[1][0]){\n\
    \            return result;\n        }\n    }\n    return minIndex === 0 ? [minValue,\
    \ 0] : [minValue, minIndex];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
