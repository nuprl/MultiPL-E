name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let even = arr.filter(x => x % 2 === 0);\n    let smallest = even.sort((a,b)\
    \ => a - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(arr[i] < min){\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n    }\n    return [min, minIndex];\n}\n", " \
    \   arr.sort((a,b)=>a-b);\n    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(minValue < arr[i]){\n                minValue = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for\
    \ (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n       \
    \     minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n  \
    \          minValue = arr[i];\n            minIndex = i;\n        }\n    }\n \
    \   return [minValue, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "  let evens = [];\n  let minIndex =\
    \ 0;\n  let minValue = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i]\
    \ % 2 === 0){\n      evens.push(arr[i]);\n      if(minValue < arr[i]){\n     \
    \   minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return evens.indexOf(minValue)\
    \ === -1 ? [] : [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            result.push([arr[i].value, i]);\n        }\n    }\n   \
    \ if(result.length){\n        result.sort((a,b) => a[0] - b[0]);\n        return\
    \ result;\n    }\n    return [];\n}\n", "    let evenArr = [];\n    let smallest;\n\
    \    let smallestIndex;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenArr.push(arr[i]);\n        }\n    }\n    smallest\
    \ = evenArr[0];\n    smallestIndex = 0;\n    for(let i = 0; i < evenArr.length;\
    \ i++){\n        if(smallest > evenArr[i]){\n            smallest = evenArr[i];\n\
    \            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n\
    }\n", "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let evenNodes\
    \ = [];\n    let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(evenNodes.length === 1){\n                smallestIndex = i;\n       \
    \     }\n        }\n    }\n    if(evenNodes.length === 0){\n        return [];\n\
    \    }\n    if(evenNodes.length === 1){\n        return [evenNodes[0], smallestIndex];\n\
    \    }\n    let smallestValue = evenNodes[0];\n    let smallestIndexes = [];\n\
    \    for(let i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < smallestValue){\n\
    \            smallestValue = evenNodes[i];\n            smallestIndexes = [];\n\
    \        }\n        if(evenNodes[i] === smallestValue){\n            smallestIndexes.push(i);\n\
    \        }\n    }\n    if(smallestIndexes.length === 0){\n        return [];\n\
    \    }\n    if(smallestIndexes.length === 1){\n        return [smallestValue,\
    \ smallestIndexes[0]];\n    }\n    let smallestIndexesValues = [];\n    for(let\
    \ i = 0; i < smallestIndexes.length; i++){\n        smallestIndexesValues.push(evenNodes[smallestIndexes[i]]);\n\
    \    }\n    return smallestIndexesValues;\n}\n", "    let minIndex = -1;\n   \
    \ let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minValue = arr[0];\n\
    \    let minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestIndex = even.map(node => even.indexOf(node)).sort((a,\
    \ b) => a - b)[0];\n    let smallestValue = even[smallestIndex];\n    return even.map(node\
    \ => node.value).indexOf(smallestValue);\n}\n", "    let minIndex = 0;\n    let\
    \ minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex = 0;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++){\n  \
    \  if (arr[i] < minValue){\n      minValue = arr[i];\n      minIndex = i;\n  \
    \  }\n  }\n  return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n   \
    \ let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] === minValue){\n            minIndex = i;\n        }\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0){\n\
    \            result.push([node.value, index]);\n        }\n    });\n    if(result.length\
    \ === 0){\n        return [];\n    }\n    if(result.length === 1){\n        return\
    \ result;\n    }\n    if(result.length === 2){\n        if(result[0][0] !== result[1][0]){\n\
    \            return result;\n        }\n    }\n    return minIndex === 0 ? [minValue,\
    \ 0] : [minValue, minIndex];\n}\n", "    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(minValue > arr[i]){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    return minIndex === -1 ? [] : [arr[minIndex],\
    \ minIndex];\n}\n", "    let evens = arr.filter(node => node.value % 2 === 0);\n\
    \    let smallestEven = evens.reduce((a, b) => a.value < b.value ? a : b);\n \
    \   let index = evens.indexOf(smallestEven);\n    return [smallestEven.value,\
    \ index];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = arr.findIndex(node => node.value % 2 ===\
    \ 0);\n    let minValue = arr[minIndex];\n    let result = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0){\n          \
    \  if(result.length < minIndex){\n                result.push(arr[i]);\n     \
    \       }\n            else{\n                if(arr[i].value < minValue){\n \
    \                   minValue = arr[i];\n                    minIndex = i;\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let minIndex\
    \ = -1;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length; i++)\
    \ {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n      \
    \      minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = arr.filter(x => x % 2 === 0);\n    let smallest = Math.min(...even);\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let even = arr.filter(function(val){\n        return val % 2 === 0;\n    });\n\
    \    let smallest = Math.min.apply(null, even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    arr = arr.sort((a,b)=>a-b);\n    let\
    \ minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] === minValue){\n            minIndex++;\n        }\n\
    \        else if(arr[i] === minValue && minIndex > 0){\n            minIndex =\
    \ minIndex - 1;\n        }\n        else if(arr[i] === minValue && minIndex ===\
    \ 0){\n            minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n\
    }\n", "    let evens = [];\n    let minIndex = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n    \
    \        if(evens.length === 1){\n                minIndex = i;\n            }\n\
    \        }\n    }\n    return evens.sort((a,b) => a - b).slice(0, minIndex + 1);\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenArr = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n  \
    \      }\n    }\n    if(evenArr.length === 0){\n        return [];\n    }\n  \
    \  let minIndex = evenArr.indexOf(Math.min(...evenArr));\n    return [evenArr[minIndex],\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(x){\n        return x\
    \ % 2 === 0;\n    });\n    let smallest = Math.min.apply(Math, even);\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ minValue = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "  let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++){\n    if (arr[i] < minValue){\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "    let minIndex =\
    \ arr.findIndex(node => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n\
    \    let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value\
    \ % 2 === 0){\n            if(arr[i].value < minValue){\n                minValue\
    \ = arr[i].value;\n                minIndex = i;\n            }\n        }\n \
    \   }\n    return [minValue, minIndex];\n}\n", "    let evenValues = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallestEvenValue = evenValues.reduce(function(a,\
    \ b){\n        return Math.min(a, b);\n    });\n    let index = arr.indexOf(smallestEvenValue);\n\
    \    return [smallestEvenValue, index];\n}\n", "  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenNodes = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \        }\n    }\n    evenNodes.sort((a,b) => a - b);\n    let smallestEven =\
    \ evenNodes[0];\n    let smallestIndex = 0;\n    for(let i = 0; i < evenNodes.length;\
    \ i++){\n        if(evenNodes[i] === smallestEven){\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEven, smallestIndex];\n}\n", " \
    \   let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
    \ i++){\n        if (arr[i] < minValue){\n            minValue = arr[i];\n   \
    \         minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n\
    }\n", "    let evenNodes = [];\n    let smallestEvenValue = arr[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            if(arr[i] < smallestEvenValue){\n                smallestEvenValue\
    \ = arr[i];\n                smallestIndex = i;\n            }\n        }\n  \
    \  }\n    return [smallestEvenValue, smallestIndex];\n}\n", "    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    if(even.length === 0){\n        return\
    \ [];\n    }\n    let min = even[0];\n    let minIndex = 0;\n    for(let i = 1;\
    \ i < even.length; i++){\n        if(even[i] < min){\n            min = even[i];\n\
    \            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let evenNodes = arr.filter(node => node.value % 2 === 0);\n    let smallestEvenNode\
    \ = evenNodes.reduce((prev, curr) => Math.min(prev, curr.value), Infinity);\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < evenNodes.length; i++){\n\
    \        if(evenNodes[i].value === smallestEvenNode){\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEvenNode, smallestIndex];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for (let i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] < minValue) {\n            minValue = arr[i];\n \
    \           minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenArr = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n  \
    \      }\n    }\n    let smallestValue = evenArr[0];\n    let smallestIndex =\
    \ 0;\n    for(let i = 0; i < evenArr.length; i++){\n        if(evenArr[i] < smallestValue){\n\
    \            smallestValue = evenArr[i];\n            smallestIndex = i;\n   \
    \     }\n    }\n    return [smallestValue, smallestIndex];\n}\n", "    let evens\
    \ = [];\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n   \
    \     if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            if(evens.length\
    \ === 1){\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return evens.sort((a, b) => a - b).slice(0, 1).map(e => [e, minIndex]);\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === minValue){\n            minIndex = i;\n       \
    \ }\n        if(arr[i] < minValue){\n            minValue = arr[i];\n        \
    \    minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let evenArr = [];\n    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \            if(arr[i] < minValue){\n                minValue = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n    }\n    return evenArr.length\
    \ === 0 ? [] : [minValue, minIndex];\n}\n", "    let evens = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \        }\n    }\n    let smallest = evens[0];\n    let smallestIndex = 0;\n\
    \    for(let i = 0; i < evens.length; i++){\n        if(smallest > evens[i]){\n\
    \            smallest = evens[i];\n            smallestIndex = i;\n        }\n\
    \    }\n    return [smallest, smallestIndex];\n}\n", "    let minIndex = 0;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "  let minIndex\
    \ = arr.findIndex(node => node.value % 2 === 0);\n  let minValue = arr[minIndex];\n\
    \  let result = [];\n  arr.forEach((node, index) => {\n    if(node.value % 2 ===\
    \ 0 && node.value < minValue){\n      minValue = node.value;\n      minIndex =\
    \ index;\n    }\n  });\n  if(minIndex === arr.length - 1){\n    return [];\n \
    \ }\n  return [minValue, minIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            min = Math.min(min, arr[i]);\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let even\
    \ = [];\n    let index = [];\n    for(let i = 0; i < arr.length; i++){\n     \
    \   if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ even.sort();\n    even.sort((a, b) => a - b);\n    let smallest = even[0];\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < even.length; i++){\n     \
    \   if(even[i] === smallest && i === even.length - 1 ){\n            smallestIndex\
    \ = index[i];\n        }\n    }\n    return [smallest, smallestIndex];\n}\n",
  "    let minValue = Infinity;\n    let minIndex = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = [];\n    let index = [];\n    let smallest;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    smallest = even[0];\n    for(let\
    \ i = 0; i < even.length; i++){\n        if(smallest > even[i]){\n           \
    \ smallest = even[i];\n        }\n    }\n    return [smallest, index];\n}\n",
  "    let even = arr.filter(function(val){\n        return val%2 === 0;\n    });\n\
    \    let smallest = even.sort((a,b) => a-b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "  let evens = [];\n  let minIndex =\
    \ -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n   \
    \   evens.push(arr[i]);\n      if(minIndex === -1 || arr[i] < evens[minIndex]){\n\
    \        minIndex = i;\n      }\n    }\n  }\n  return evens.indexOf(minIndex)\
    \ !== -1 ? evens : [];\n}\n", "    let minIndex = arr.findIndex(node => node.value\
    \ % 2 === 0);\n    if(minIndex === -1){\n        return [];\n    }\n    let minValue\
    \ = arr[minIndex];\n    let minIndexes = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i].value % 2 === 0){\n            minIndexes.push(i);\n\
    \        }\n    }\n    let minIndexesSorted = minIndexes.sort();\n    let minIndexesSorted\
    \ = minIndexesSorted.reverse();\n    let minIndexesSorted = minIndexesSorted.filter(index\
    \ => index !== minIndex);\n    let minIndexesSorted = minIndexesSorted.map(index\
    \ => arr[index]);\n    return minIndexesSorted;\n}\n", "    let evens = [];\n\
    \    let smallest = 0;\n    let index = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n    \
    \        if(arr[i] < smallest){\n                smallest = arr[i];\n        \
    \        index = i;\n            }\n        }\n    }\n    if(evens.length ===\
    \ 0){\n        return [];\n    }\n    let smallestEven = evens.sort((a,b) => a-b)[0];\n\
    \    return [smallestEven, index];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    if(minIndex === -1){\n        return [];\n  \
    \  }\n    let minValue = arr[minIndex];\n    let result = [minValue, minIndex];\n\
    \    for(let i = minIndex + 1; i < arr.length; i++){\n        if(arr[i].value\
    \ % 2 === 0){\n            minValue = arr[i];\n            minIndex = i;\n   \
    \     }\n    }\n    return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(el){\n\
    \        return el%2 === 0;\n    });\n    if(even.length === 0){\n        return\
    \ [];\n    }\n    let smallest = Math.min.apply(null, even);\n    let index =\
    \ even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallest = Math.min(...evens);\n  \
    \  let index = evens.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let min = Infinity;\n    let minIndex = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            if(min > arr[i]){\n      \
    \          min = arr[i];\n                minIndex = i;\n            }\n     \
    \   }\n    }\n    return [min, minIndex];\n}\n", "    let evenNodes = arr.filter(function(el){\n\
    \        return el % 2 === 0;\n    });\n    if(evenNodes.length === 0){\n    \
    \    return [];\n    }\n    let smallestEven = evenNodes[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 1; i < evenNodes.length; i++){\n        if(evenNodes[i]\
    \ < smallestEven){\n            smallestEven = evenNodes[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEven, smallestIndex];\n}\n", " \
    \ let minIndex = 0;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "  let minIndex = -1;\n\
    \  let minValue = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i]\
    \ < minValue){\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return\
    \ [minValue, minIndex];\n}\n", "    let evenValues = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallestEvenValue = evenValues.reduce(function(a,\
    \ b){\n        return Math.min(a, b);\n    });\n    let smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \    return [smallestEvenValue, smallestIndex];\n}\n", "  let even = [];\n  let\
    \ odd = [];\n  let smallest;\n  let index;\n  for(let i = 0; i < arr.length; i++){\n\
    \    if(arr[i] % 2 === 0){\n      even.push(arr[i]);\n    }else{\n      odd.push(arr[i]);\n\
    \    }\n  }\n  smallest = even.sort((a,b)=>a-b).pop();\n  smallest = odd.sort((a,b)=>a-b).pop();\n\
    \  index = even.indexOf(smallest);\n  if(index === -1){\n    index = odd.indexOf(smallest);\n\
    \  }\n  return [smallest, index];\n}\n", "    let even = [];\n    let index =\
    \ [];\n    let smalest_value;\n    let smalest_index;\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \        }\n        else{\n            smalest_value = Math.min.apply(null, even);\n\
    \            smalest_index = even.indexOf(smalest_value);\n            even.splice(smalest_index,\
    \ 1);\n            index.push(smalest_index);\n        }\n    }\n    if(even.length\
    \ === 0){\n        return [];\n    }\n    else{\n        return [smalest_value,\
    \ smalest_index];\n    }\n}\n", "    let minIndex = arr.findIndex(node => node\
    \ % 2 === 0);\n    if(minIndex === -1){\n        return [];\n    }\n    let minValue\
    \ = arr[minIndex];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0 && arr[i] !== minValue){\n            result.push([arr[i],\
    \ i]);\n        }\n    }\n    return result;\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n    if (minIndex === -1) return [];\n    let minValue =\
    \ arr[minIndex];\n    let result = [];\n    for (let i = 0; i < arr.length; i++){\n\
    \        if (arr[i] === minValue){\n            result.push([arr[i], i]);\n  \
    \      }\n    }\n    if (result.length === 0) return [];\n    if (result.length\
    \ === 1) return result[0][0];\n    return result;\n}\n", "    let minIndex = -1;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = arr.findIndex(node => node.value % 2 === 0);\n    return minIndex === -1 ?\
    \ [] : [arr[minIndex], minIndex];\n}\n", "    let evenNodes = [];\n    let smallestEvenValue\
    \ = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(arr[i] < smallestEvenValue){\n                smallestEvenValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ evenNodes.sort((a,b) => a - b).slice(0, smallestIndex + 1);\n}\n", "    let\
    \ min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(min > arr[i]){\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n    }\n    return [min, minIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(x){\n        return x\
    \ % 2 === 0;\n    });\n    let smallest = Math.min.apply(null, even);\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === minValue){\n            minIndex = i;\n       \
    \ }\n        if(arr[i] < minValue){\n            minValue = arr[i];\n        \
    \    minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minValue = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(minValue\
    \ > arr[i]){\n                minValue = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n    }\n    return [minValue, minIndex];\n}\n", "  \
    \  let minIndex = arr.findIndex(node => node.value % 2 === 0);\n    if (minIndex\
    \ === -1) return [];\n    let minValue = arr[minIndex];\n    let result = [minValue,\
    \ minIndex];\n    arr.splice(minIndex, 1);\n    return result;\n}\n", "    let\
    \ even = arr.filter(function(val){\n        return val%2 === 0;\n    });\n   \
    \ if(even.length===0){\n        return [];\n    }\n    let min = even[0];\n  \
    \  let minIndex = 0;\n    for(let i=0;i<even.length;i++){\n        if(even[i]===min){\n\
    \            minIndex++;\n        }\n    }\n    return [min, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let evens\
    \ = arr.filter(function(val){\n        return val%2 === 0;\n    });\n    if(evens.length\
    \ === 0) return [];\n    let smallest = Math.min(evens);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(function(val){\n\
    \        return val % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    let smallestIndex = evens.indexOf(Math.min.apply(null,\
    \ evens));\n    return [evens[smallestIndex], smallestIndex];\n}\n", "    let\
    \ minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    arr = arr.sort((a,b) => a-b);\n    let even = arr.filter(x => x % 2 === 0);\n\
    \    let index = even.indexOf(arr[0]);\n    return even.indexOf(arr[0]) > -1 ?\
    \ [arr[0], index] : [];\n}\n", "  let minIndex = arr.findIndex(node => node.value\
    \ % 2 === 0);\n  if (minIndex === -1) return [];\n  return [arr[minIndex].value,\
    \ minIndex];\n}\n", "    let minValue = Number.MAX_SAFE_INTEGER;\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            if(arr[i] < minValue){\n                minValue = arr[i];\n    \
    \            minIndex = i;\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = [];\n    let index = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return [];\n    }\n    even.sort((a, b) => a - b);\n    return even.slice(0,\
    \ even.length).map((e, i) => [e, index[i]]);\n}\n", "    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let evenValues = [];\n    let smallestIndex = 0;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenValues.push(arr[i]);\n\
    \            if(evenValues.length === 1){\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if(evenValues.length === 0){\n        return\
    \ [];\n    }\n    if(evenValues.length === 1){\n        return [evenValues[0],\
    \ smallestIndex];\n    }\n    let smallestValue = evenValues[0];\n    let smallestIndexOfSmallestValue\
    \ = smallestIndex;\n    for(let i = 1; i < evenValues.length; i++){\n        if(evenValues[i]\
    \ < smallestValue){\n            smallestValue = evenValues[i];\n            smallestIndexOfSmallestValue\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndexOfSmallestValue];\n\
    }\n", "    let even = arr.filter(function(el){\n        return el%2 === 0;\n \
    \   });\n    if(even.length === 0){\n        return [];\n    }\n    let smallest\
    \ = Math.min.apply(null, even);\n    let index = even.indexOf(smallest);\n   \
    \ return [smallest, index];\n}\n", "    let evenNodes = arr.filter(node => node.value\
    \ % 2 === 0);\n    let smallestEvenNode = evenNodes.reduce((prev, curr) => curr.value\
    \ < prev ? curr : prev);\n    let smallestEvenIndex = evenNodes.indexOf(smallestEvenNode);\n\
    \    return smallestEvenIndex === -1 ? [] : [smallestEvenNode.value, smallestEvenIndex];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenValues = [];\n    let smallestValue = 0;\n  \
    \  let smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenValues.push(arr[i]);\n            if(arr[i] < smallestValue){\n\
    \                smallestValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if(evenValues.length === 0){\n        return\
    \ [];\n    }\n    for(let i = 0; i < evenValues.length; i++){\n        if(evenValues[i]\
    \ < smallestValue){\n            smallestValue = evenValues[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndex];\n}\n", " \
    \   let even = arr.filter(function(x){\n        return x % 2 === 0;\n    });\n\
    \    let smallest = even.sort((a,b) => a - b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let even = [];\n    let small = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n        }else{\n            small.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ let smallest = even[0];\n    let smallestIndex = 0;\n    for(let i = 0; i <\
    \ even.length; i++){\n        if(even[i] < smallest){\n            smallest =\
    \ even[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest,\
    \ smallestIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n\
    \    for (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n", "    let evens = [];\n\
    \    let smallest;\n    let index;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n        }\n \
    \   }\n    smallest = evens.reduce((a, b) => a < b ? a : b);\n    index = evens.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = arr.findIndex(node =>\
    \ node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result =\
    \ [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0 &&\
    \ node.value < minValue){\n            minValue = node.value;\n            minIndex\
    \ = index;\n        }\n    });\n    return [minValue, minIndex];\n}\n", "  let\
    \ even = arr.filter(x => x % 2 === 0);\n  let smallest = even.sort((a, b) => a\
    \ - b)[0];\n  let index = even.indexOf(smallest);\n  return [smallest, index];\n\
    }\n", "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1;\
    \ i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    arr = arr.sort((a,b)=>a-b);\n    let minIndex = -1;\n\
    \    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 == 0){\n            if(minValue == arr[i]){\n               \
    \ minIndex = i;\n            }else if(minValue > arr[i]){\n                minValue\
    \ = arr[i];\n                minIndex = i;\n            }\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "  let even = arr.filter(e => e % 2 ===\
    \ 0);\n  let smallest = even.sort((a, b) => a - b)[0];\n  let index = even.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let minIndex = 0;\n    let minValue =\
    \ arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0 &&\
    \ node.value < minValue){\n            minValue = node.value;\n            minIndex\
    \ = index;\n        }\n    });\n    return [minValue, minIndex];\n}\n", "    let\
    \ minValue = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < minValue){\n                minValue = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = arr.filter(function(val){\n        return val%2 === 0;\n    });\n\
    \    let smallest = Math.min(even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    arr = arr.sort((a,b)=>a-b);\n    let\
    \ even = arr.filter(v=>v%2===0);\n    if(even.length===0){\n        return [];\n\
    \    }\n    let index = even.indexOf(Math.min(...even));\n    return [even[index],\
    \ index];\n}\n", "    let minValue = arr[0];\n    let minIndex = 0;\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let min = Infinity;\n    let minIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "  let evenNodes\
    \ = []\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n  \
    \    evenNodes.push(arr[i])\n    }\n  }\n  if(evenNodes.length === 0){\n    return\
    \ []\n  }\n  if(evenNodes.length === 1){\n    return [evenNodes[0]]\n  }\n  let\
    \ smallestEven = evenNodes[0]\n  let smallestIndex = 0\n  for(let i = 1; i < evenNodes.length;\
    \ i++){\n    if(evenNodes[i] < smallestEven){\n      smallestEven = evenNodes[i]\n\
    \      smallestIndex = i\n    }\n  }\n  return [smallestEven, smallestIndex]\n\
    }\n", "    let minValue = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenValues = [];\n    let smallestIndex = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n     \
    \       evenValues.push(arr[i]);\n            if(evenValues.length === 1){\n \
    \               smallestIndex = i;\n            }\n        }\n    }\n    if(evenValues.length\
    \ === 0){\n        return [];\n    }\n    if(evenValues.length === 1){\n     \
    \   return [evenValues[0], smallestIndex];\n    }\n    let smallestValue = evenValues[0];\n\
    \    for(let i = 1; i < evenValues.length; i++){\n        if(evenValues[i] < smallestValue){\n\
    \            smallestValue = evenValues[i];\n            smallestIndex = i;\n\
    \        }\n    }\n    return [smallestValue, smallestIndex];\n}\n", "    let\
    \ minIndex = arr.findIndex((el,i,arr) => el%2 === 0);\n    if(minIndex === -1){\n\
    \        return [];\n    }\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === minValue){\n\
    \            result.push(i);\n        }\n    }\n    return result;\n}\n", "  \
    \  let evenNodes = [];\n    let smallestEven = arr[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenNodes.push(arr[i]);\n            if(arr[i] < smallestEven){\n\
    \                smallestEven = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    return evenNodes.indexOf(smallestEven) >\
    \ -1 ? [smallestEven, smallestIndex] : [];\n}\n", "    arr = arr.sort((a,b)=>a-b);\n\
    \    let even = arr.filter(v=>v%2===0);\n    if(even.length===0){\n        return\
    \ [];\n    }\n    let index = even.indexOf(Math.min(...even));\n    return [even[index],index];\n\
    }\n</cell>\n<cell>\n# Definition for a binary tree node.\n# class TreeNode:\n\
    #     def __init__(self, val=0, left=None, right=None):\n#         self.val =\
    \ val\n#         self.left = left\n#         self.right = right\nclass Solution:\n\
    \    def findSmallestValues(self, root: TreeNode) -> List[int]:\n        \n  \
    \      def dfs(root):\n            if root is None:\n                return []\n\
    \            \n            left,right = [],[]\n            \n            if root.left:\n\
    \                left = dfs(root.left)\n            if root.right:\n         \
    \       right = dfs(root.right)\n            \n            left.append(root.val)\n\
    \            right.append(root.val)\n            \n            return left + [root.val]\
    \ + right\n        \n        return dfs(root)\n</cell>\n<cell>\n# Definition for\
    \ a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None,\
    \ right=None):\n#         self.val = val\n#         self.left = left\n#      \
    \   self.right = right\nclass Solution:\n    def findSmallestValues(self, root:\
    \ TreeNode) -> List[int]:\n        \n        def dfs(root):\n            if root\
    \ is None:\n                return []\n            \n            left,right =\
    \ [],[]\n            \n            if root.left:\n                left = dfs(root.left)\n\
    \            if root.right:\n                right = dfs(root.right)\n       \
    \     \n            left.append(root.val)\n            right.append(root.val)\n\
    \            \n            return left + [root.val] + right\n        \n      \
    \  return dfs(root)\n</cell>\n<cell>\n# Definition for a binary tree node.\n#\
    \ class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#\
    \         self.val = val\n#         self.left = left\n#         self.right = right\n\
    class Solution:\n    def findSmallestValues(self, root: TreeNode) -> List[int]:\n\
    \        \n        def dfs(root):\n            if root is None:\n            \
    \    return []\n            \n            left,right = [],[]\n            \n \
    \           if root.left:\n                left = dfs(root.left)\n           \
    \ if root.right:\n                right = dfs(root.right)\n            \n    \
    \        left.append(root.val)\n            right.append(root.val)\n         \
    \   \n            return left + [root.val] + right\n        \n        return dfs(root)\n\
    </cell>\n<cell>\n# Definition for a binary tree node.\n# class TreeNode:\n#  \
    \   def __init__(self, val=0, left=None, right=None):\n#         self.val = val",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let evens\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evens.push(arr[i]);\n        }\n    }\n    evens.sort((a, b) => a\
    \ - b);\n    let smallestEven = evens[0];\n    let smallestIndex = 0;\n    for(let\
    \ i = 0; i < evens.length; i++){\n        if(evens[i] === smallestEven){\n   \
    \         smallestIndex = i;\n        }\n    }\n    return [smallestEven, smallestIndex];\n\
    }\n", "    let even = arr.filter(function(n){\n        return n % 2 === 0;\n \
    \   });\n    let smallest = even.sort((a,b)=>a-b).pop();\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let evens = [];\n    let smalest_value;\n\
    \    let smalest_index;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evens.push(arr[i]);\n        }\n    }\n    smalest_value\
    \ = evens[0];\n    smalest_index = evens.indexOf(smalest_value);\n    evens.splice(smalest_index,\
    \ 1);\n    return evens;\n}\n", "    let evenNodes = arr.filter(node => node.value\
    \ % 2 === 0);\n    if(evenNodes.length === 0){\n        return [];\n    }\n  \
    \  let smallestEvenValue = evenNodes.sort((a,b) => a.value - b.value)[0];\n  \
    \  let smallestIndex = 0;\n    for(let i = 0; i < evenNodes.length; i++){\n  \
    \      if(evenNodes[i].value === smallestEvenValue){\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEvenValue, smallestIndex];\n}\n",
  "    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = arr.filter(function(x){\n        return x % 2 === 0;\n    });\n\
    \    let smallest = even.sort((a,b) => a - b)[0];\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let even = arr.filter(x => x % 2 ===\
    \ 0);\n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n", "    let even = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a\
    \ - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(val){\n        return\
    \ val%2 === 0;\n    });\n    let smallest = Math.min.apply(null, even);\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let min = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < min){\n                min = arr[i];\n                minIndex = i;\n    \
    \        }\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even_values\
    \ = []\n    let smallest_value = 0\n    let smallest_index = 0\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even_values.push(arr[i])\n\
    \        }\n        if(arr[i] < smallest_value){\n            smallest_value =\
    \ arr[i]\n            smallest_index = i\n        }\n    }\n    if(even_values.length\
    \ === 0){\n        return []\n    }\n    if(smallest_value === 0){\n        return\
    \ even_values\n    }\n    let smallest_value_even = even_values.sort((a,b) =>\
    \ a-b)[0]\n    let smallest_value_odd = even_values.sort((a,b) => b-a)[0]\n  \
    \  let smallest_value_even_index = even_values.indexOf(smallest_value_even)\n\
    \    let smallest_value_odd_index = even_values.indexOf(smallest_value_odd)\n\
    \    let smallest_value_even_index_in_odd_array = smallest_value_odd_index - smallest_value_even_index\n\
    \    let smallest_value_odd_index_in_odd_array = smallest_value_even_index - smallest_value_odd_index\n\
    \    let smallest_value_even_index_in_even = smallest_value_even_index + smallest_value_even_index_in_odd_array\n\
    \    let smallest_value_odd_index_in_even = smallest_value_odd_index + smallest_value_odd_index_in_odd_array\n\
    \    return [smallest_value_even, smallest_value_even_index]\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let evens\
    \ = arr.filter(function(n){\n        return n % 2 === 0;\n    });\n    let smallest\
    \ = evens.reduce(function(prev, curr){\n        return prev < curr ? prev : curr;\n\
    \    });\n    let index = arr.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = arr.findIndex(node => node.value % 2 ===\
    \ 0);\n    let minValue = arr[minIndex];\n    let result = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0){\n          \
    \  if(arr[i].value < minValue){\n                minValue = arr[i].value;\n  \
    \              minIndex = i;\n            }\n        }\n    }\n    result.push(minValue,\
    \ minIndex);\n    return result;\n}\n", "    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, minIndex];\n}\n", "    let even = arr.filter(function(e){\n\
    \        return e % 2 === 0;\n    });\n    let smallest = even[0];\n    let index\
    \ = even.indexOf(smallest);\n    return [ smallest, index ];\n}\n", "    let minIndex\
    \ = arr.findIndex(node => node.value % 2 === 0);\n    if(minIndex === -1){\n \
    \       return [];\n    }\n    let minValue = arr[minIndex];\n    let result =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2 ===\
    \ 0){\n            result.push(arr[i]);\n        }\n        if(arr[i].value ===\
    \ minValue){\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenArr = [];\n    let evenIndex = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \            evenIndex.push(i);\n        }\n    }\n    if(evenArr.length === 0){\n\
    \        return [];\n    }\n    let smallestEvenValue = Math.min(...evenArr);\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < evenArr.length; i++){\n  \
    \      if(evenArr[i] === smallestEvenValue){\n            smallestIndex = evenIndex[i];\n\
    \        }\n    }\n    return [smallestEvenValue, smallestIndex];\n}\n", "   \
    \ let evenNodes = arr.filter(node => node.value % 2 === 0);\n    let smallestEvenNode\
    \ = evenNodes.reduce((prev, curr) => Math.min(prev, curr.value), Infinity);\n\
    \    let smallestEvenIndex = evenNodes.findIndex(node => node.value === smallestEvenNode);\n\
    \    let smallestEvenValue = smallestEvenNode;\n    let smallestEvenIndexArray\
    \ = [];\n    if (smallestEvenIndex > -1) {\n        smallestEvenIndexArray.push(smallestEvenIndex);\n\
    \    }\n    if (evenNodes.length > 0) {\n        smallestEvenValue = evenNodes[smallestEvenIndex].value;\n\
    \        smallestEvenIndexArray.push(smallestEvenIndex);\n    }\n    return smallestEvenIndexArray;\n\
    }\n", "    let evenArr = [];\n    let evenIndex = [];\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \            evenIndex.push(i);\n        }\n    }\n    if(evenArr.length === 0){\n\
    \        return [];\n    }\n    let smallestEven = evenArr[0];\n    let smallestIndex\
    \ = evenIndex[0];\n    for(let i = 0; i < evenArr.length; i++){\n        if(evenArr[i]\
    \ < smallestEven){\n            smallestEven = evenArr[i];\n            smallestIndex\
    \ = evenIndex[i];\n        }\n    }\n    return [smallestEven, smallestIndex];\n\
    }\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for (let i = 1;\
    \ i < arr.length; i++){\n        if (arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenValues = [];\n    let smallestIndex = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n     \
    \       evenValues.push(arr[i]);\n            if(evenValues.length === 1){\n \
    \               smallestIndex = i;\n            }\n        }\n    }\n    if(evenValues.length\
    \ === 0){\n        return [];\n    }\n    if(evenValues.length === 1){\n     \
    \   return [evenValues[0], smallestIndex];\n    }\n    let smallestValue = evenValues[0];\n\
    \    let smallestIndexOfSmallestValue = 0;\n    for(let i = 0; i < evenValues.length;\
    \ i++){\n        if(evenValues[i] < smallestValue){\n            smallestValue\
    \ = evenValues[i];\n            smallestIndexOfSmallestValue = i;\n        }\n\
    \    }\n    return [smallestValue, smallestIndexOfSmallestValue];\n}\n", "   \
    \ let even_values = [];\n    let smallest_value = 0;\n    let smallest_index =\
    \ 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even_values.push(arr[i]);\n            if(arr[i] < smallest_value){\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if(even_values.length === 0){\n        return\
    \ [];\n    }\n    for(let i = 0; i < even_values.length; i++){\n        if(even_values[i]\
    \ < smallest_value){\n            smallest_value = even_values[i];\n         \
    \   smallest_index = i;\n        }\n    }\n    return [smallest_value, smallest_index];\n\
    }\n", "    let minValue = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i\
    \ < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue =\
    \ arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let even = arr.filter(function(x){\n        return x\
    \ % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a - b)[0];\n    let\
    \ index = even.indexOf(smallest);\n    return [smallest, index];\n}\n", "    let\
    \ minIndex = arr.findIndex(node => node.value % 2 === 0);\n    let minValue =\
    \ arr[minIndex];\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i].value % 2 === 0){\n            if(arr[i].value < minValue){\n\
    \                minValue = arr[i].value;\n                minIndex = i;\n   \
    \         }\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let\
    \ minValue = Number.MAX_SAFE_INTEGER;\n    let minIndex = 0;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i]\
    \ < minValue){\n                minValue = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] < minValue){\n            minValue = arr[i];\n    \
    \        minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n",
  "    let even = arr.filter(function(e){\n        return e % 2 === 0;\n    });\n\
    \    if(even.length === 0) return [];\n    let min = even.indexOf(Math.min(...even));\n\
    \    return [even[min], min];\n}\n", "    let evenNodes = [];\n    let smallestEvenValue\
    \ = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(arr[i] < smallestEvenValue){\n                smallestEvenValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    return [smallestEvenValue, smallestIndex];\n\
    }\n", "    let evenNodes = [];\n    let smallestIndex = 0;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \            if(evenNodes.length === 1){\n                smallestIndex = i;\n\
    \            }\n        }\n    }\n    if(evenNodes.length === 0){\n        return\
    \ [];\n    }\n    if(evenNodes.length === 1){\n        return [evenNodes[0], smallestIndex];\n\
    \    }\n    let smallestValue = evenNodes[0];\n    for(let i = 0; i < evenNodes.length;\
    \ i++){\n        if(evenNodes[i] < smallestValue){\n            smallestValue\
    \ = evenNodes[i];\n            smallestIndex = i;\n        }\n    }\n    return\
    \ [smallestValue, smallestIndex];\n}\n", "    let even = [];\n    let index =\
    \ [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    even.sort();\n   \
    \ let smallest = even[0];\n    let smallest_index = index[0];\n    for(let i =\
    \ 1; i < even.length; i++){\n        if(even[i] === smallest && index[i] < smallest_index){\n\
    \            smallest = even[i];\n            smallest_index = index[i];\n   \
    \     }\n    }\n    return [smallest, smallest_index];\n}\n", "    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 == 0){\n            if(arr[i] < min){\n                min = arr[i];\n \
    \               minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let minValue = Infinity;\n    let minIndex = 0;\n   \
    \ for(let i = 0; i < arr.length; i++){\n        if(arr[i] < minValue){\n     \
    \       minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n", "  let minIndex = 0;\n  let minValue = arr[0];\n\
    \  for (let i = 1; i < arr.length; i++){\n    if (arr[i] < minValue){\n      minValue\
    \ = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue, minIndex];\n\
    }\n", "  let minIndex = 0;\n  let minValue = arr[0];\n  for(let i = 1; i < arr.length;\
    \ i++){\n    if(arr[i] < minValue){\n      minValue = arr[i];\n      minIndex\
    \ = i;\n    }\n  }\n  return [minValue, minIndex];\n}\n", "    let minIndex =\
    \ 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n \
    \       if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallest = evens.reduce((a, b) => a\
    \ < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let minIndex = 0;\n    let minValue = arr[0];\n    for(let\
    \ i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n            minValue\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    return [minValue,\
    \ minIndex];\n}\n", "    let evenArr = [];\n    let smallestIndex = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \            if(evenArr.length === 1){\n                smallestIndex = i;\n \
    \           }\n        }\n    }\n    if(evenArr.length === 0){\n        return\
    \ [];\n    }\n    if(evenArr.length === 1){\n        return [evenArr[0], smallestIndex];\n\
    \    }\n    let smallestValue = evenArr[0];\n    let smallestIndex = 0;\n    for(let\
    \ i = 0; i < evenArr.length; i++){\n        if(evenArr[i] < smallestValue){\n\
    \            smallestValue = evenArr[i];\n            smallestIndex = i;\n   \
    \     }\n    }\n    return [smallestValue, smallestIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n", "    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] < minValue){\n            minValue = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [minValue, minIndex];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
