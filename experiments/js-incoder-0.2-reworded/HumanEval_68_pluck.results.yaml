language: js
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(x => x %\
    \ 2 === 0);\n    let smallest = even.sort((a,b) => a - b)[0];\n    let index =\
    \ even.indexOf(smallest);\n    return [smallest, index];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6yfj0m39.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6yfj0m39.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpoxg03dm3.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoxg03dm3.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr.sort((a,b)=>a-b);\n    let\
    \ minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            if(minValue < arr[i]){\n \
    \               minValue = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpk7liwylk.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk7liwylk.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsrubl9vt.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsrubl9vt.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmps22r20gn.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmps22r20gn.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpofoikn55.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpofoikn55.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let evens = [];\n  let minIndex\
    \ = 0;\n  let minValue = arr[0];\n  for(let i = 1; i < arr.length; i++){\n   \
    \ if(arr[i] % 2 === 0){\n      evens.push(arr[i]);\n      if(minValue < arr[i]){\n\
    \        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return\
    \ evens.indexOf(minValue) === -1 ? [] : [minValue, minIndex];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpph3n4o5t.js:47:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpph3n4o5t.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            result.push([arr[i].value, i]);\n        }\n    }\n   \
    \ if(result.length){\n        result.sort((a,b) => a[0] - b[0]);\n        return\
    \ result;\n    }\n    return [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpu5qxmria.js:47:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpu5qxmria.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    let smallest;\n\
    \    let smallestIndex;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenArr.push(arr[i]);\n        }\n    }\n    smallest\
    \ = evenArr[0];\n    smallestIndex = 0;\n    for(let i = 0; i < evenArr.length;\
    \ i++){\n        if(smallest > evenArr[i]){\n            smallest = evenArr[i];\n\
    \            smallestIndex = i;\n        }\n    }\n    return [smallest, smallestIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpw_xazztn.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw_xazztn.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf4ir185_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4ir185_.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenNodes.push(arr[i]);\n            if(evenNodes.length === 1){\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    if(evenNodes.length === 1){\n      \
    \  return [evenNodes[0], smallestIndex];\n    }\n    let smallestValue = evenNodes[0];\n\
    \    let smallestIndexes = [];\n    for(let i = 0; i < evenNodes.length; i++){\n\
    \        if(evenNodes[i] < smallestValue){\n            smallestValue = evenNodes[i];\n\
    \            smallestIndexes = [];\n        }\n        if(evenNodes[i] === smallestValue){\n\
    \            smallestIndexes.push(i);\n        }\n    }\n    if(smallestIndexes.length\
    \ === 0){\n        return [];\n    }\n    if(smallestIndexes.length === 1){\n\
    \        return [smallestValue, smallestIndexes[0]];\n    }\n    let smallestIndexesValues\
    \ = [];\n    for(let i = 0; i < smallestIndexes.length; i++){\n        smallestIndexesValues.push(evenNodes[smallestIndexes[i]]);\n\
    \    }\n    return smallestIndexesValues;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpjcufig00.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjcufig00.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6ro6m96l.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6ro6m96l.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9z54857f.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9z54857f.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(node =>\
    \ node.value % 2 === 0);\n    let smallestIndex = even.map(node => even.indexOf(node)).sort((a,\
    \ b) => a - b)[0];\n    let smallestValue = even[smallestIndex];\n    return even.map(node\
    \ => node.value).indexOf(smallestValue);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpwfexeou4.js:38:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpwfexeou4.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp8kjmk2jn.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8kjmk2jn.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++){\n    if (arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmppg_80go0.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmppg_80go0.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] === minValue){\n\
    \            minIndex = i;\n        }\n        if(arr[i] < minValue){\n      \
    \      minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpyvbvh_d_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyvbvh_d_.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0){\n\
    \            result.push([node.value, index]);\n        }\n    });\n    if(result.length\
    \ === 0){\n        return [];\n    }\n    if(result.length === 1){\n        return\
    \ result;\n    }\n    if(result.length === 2){\n        if(result[0][0] !== result[1][0]){\n\
    \            return result;\n        }\n    }\n    return minIndex === 0 ? [minValue,\
    \ 0] : [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0azxnciv.js:54:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp0azxnciv.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_yabok7a.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_yabok7a.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(minValue > arr[i]){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp0i7p9o6p.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0i7p9o6p.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    return minIndex === -1 ? [] : [arr[minIndex],\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl9s34i8w.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpl9s34i8w.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = arr.filter(node =>\
    \ node.value % 2 === 0);\n    let smallestEven = evens.reduce((a, b) => a.value\
    \ < b.value ? a : b);\n    let index = evens.indexOf(smallestEven);\n    return\
    \ [smallestEven.value, index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjrec96qk.js:28\n    let smallestEven = evens.reduce((a, b) => a.value\
    \ < b.value ? a : b);\n                             ^\n\nTypeError: Reduce of\
    \ empty array with no initial value\n    at Array.reduce (<anonymous>)\n    at\
    \ pluck (/tmp/tmpjrec96qk.js:28:30)\n    at test (/tmp/tmpjrec96qk.js:38:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjrec96qk.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            if(result.length < minIndex){\n                result.push(arr[i]);\n\
    \            }\n            else{\n                if(arr[i].value < minValue){\n\
    \                    minValue = arr[i];\n                    minIndex = i;\n \
    \               }\n            }\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmps06o3jr9.js:51:10)\n   \
    \ at Object.<anonymous> (/tmp/tmps06o3jr9.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf4ir185_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4ir185_.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] <\
    \ minValue) {\n            minValue = arr[i];\n            minIndex = i;\n   \
    \     }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjq4arahg.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjq4arahg.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(x => x %\
    \ 2 === 0);\n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp60il47t9.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp60il47t9.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(val){\n\
    \        return val % 2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp3o3drri3.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3o3drri3.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr = arr.sort((a,b)=>a-b);\n\
    \    let minIndex = 0;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] === minValue){\n            minIndex++;\n        }\n\
    \        else if(arr[i] === minValue && minIndex > 0){\n            minIndex =\
    \ minIndex - 1;\n        }\n        else if(arr[i] === minValue && minIndex ===\
    \ 0){\n            minIndex = i;\n        }\n    }\n    return [minValue, minIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmptdpnv05k.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmptdpnv05k.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evens.push(arr[i]);\n            if(evens.length === 1){\n      \
    \          minIndex = i;\n            }\n        }\n    }\n    return evens.sort((a,b)\
    \ => a - b).slice(0, minIndex + 1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp3bs75v9f.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3bs75v9f.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \        }\n    }\n    if(evenArr.length === 0){\n        return [];\n    }\n\
    \    let minIndex = evenArr.indexOf(Math.min(...evenArr));\n    return [evenArr[minIndex],\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpzzygh2rf.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzzygh2rf.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = Math.min.apply(Math,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp673fntcb.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp673fntcb.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9z54857f.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9z54857f.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++){\n    if (arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmppg_80go0.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmppg_80go0.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            if(arr[i].value < minValue){\n                minValue\
    \ = arr[i].value;\n                minIndex = i;\n            }\n        }\n \
    \   }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmprd2y48da.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmprd2y48da.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenValues = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallestEvenValue = evenValues.reduce(function(a,\
    \ b){\n        return Math.min(a, b);\n    });\n    let index = arr.indexOf(smallestEvenValue);\n\
    \    return [smallestEvenValue, index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7a1qjc0q.js:30\n    let smallestEvenValue = evenValues.reduce(function(a,\
    \ b){\n                                       ^\n\nTypeError: Reduce of empty\
    \ array with no initial value\n    at Array.reduce (<anonymous>)\n    at pluck\
    \ (/tmp/tmp7a1qjc0q.js:30:40)\n    at test (/tmp/tmp7a1qjc0q.js:44:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp7a1qjc0q.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpkgksotzt.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkgksotzt.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n\
    \        }\n    }\n    evenNodes.sort((a,b) => a - b);\n    let smallestEven =\
    \ evenNodes[0];\n    let smallestIndex = 0;\n    for(let i = 0; i < evenNodes.length;\
    \ i++){\n        if(evenNodes[i] === smallestEven){\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEven, smallestIndex];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl27hzogm.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl27hzogm.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsrubl9vt.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsrubl9vt.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    let smallestEvenValue\
    \ = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            if(arr[i] < smallestEvenValue){\n\
    \                smallestEvenValue = arr[i];\n                smallestIndex =\
    \ i;\n            }\n        }\n    }\n    return [smallestEvenValue, smallestIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpio0edl_s.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpio0edl_s.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    if(even.length === 0){\n        return\
    \ [];\n    }\n    let min = even[0];\n    let minIndex = 0;\n    for(let i = 1;\
    \ i < even.length; i++){\n        if(even[i] < min){\n            min = even[i];\n\
    \            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9w1snflo.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9w1snflo.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestEvenNode = evenNodes.reduce((prev,\
    \ curr) => Math.min(prev, curr.value), Infinity);\n    let smallestIndex = 0;\n\
    \    for(let i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i].value\
    \ === smallestEvenNode){\n            smallestIndex = i;\n        }\n    }\n \
    \   return [smallestEvenNode, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp1cwzjc7t.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1cwzjc7t.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ 0 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] <\
    \ minValue) {\n            minValue = arr[i];\n            minIndex = i;\n   \
    \     }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpjq4arahg.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjq4arahg.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \        }\n    }\n    let smallestValue = evenArr[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < evenArr.length; i++){\n        if(evenArr[i] <\
    \ smallestValue){\n            smallestValue = evenArr[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndex];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpwzvb0sc3.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwzvb0sc3.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evens.push(arr[i]);\n            if(evens.length === 1){\n      \
    \          minIndex = i;\n            }\n        }\n    }\n    return evens.sort((a,\
    \ b) => a - b).slice(0, 1).map(e => [e, minIndex]);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n\
    \    0\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpga2417qo.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpga2417qo.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 0 ]\
    \ ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === minValue){\n\
    \            minIndex = i;\n        }\n        if(arr[i] < minValue){\n      \
    \      minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvwqxbli1.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvwqxbli1.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    let minIndex\
    \ = 0;\n    let minValue = arr[0];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n          \
    \  if(arr[i] < minValue){\n                minValue = arr[i];\n              \
    \  minIndex = i;\n            }\n        }\n    }\n    return evenArr.length ===\
    \ 0 ? [] : [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpwii80bn1.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwii80bn1.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \        }\n    }\n    let smallest = evens[0];\n    let smallestIndex = 0;\n\
    \    for(let i = 0; i < evens.length; i++){\n        if(smallest > evens[i]){\n\
    \            smallest = evens[i];\n            smallestIndex = i;\n        }\n\
    \    }\n    return [smallest, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp1ok37z61.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1ok37z61.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n  let minValue = arr[minIndex];\n  let result = [];\n\
    \  arr.forEach((node, index) => {\n    if(node.value % 2 === 0 && node.value <\
    \ minValue){\n      minValue = node.value;\n      minIndex = index;\n    }\n \
    \ });\n  if(minIndex === arr.length - 1){\n    return [];\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpj4sk5zuu.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj4sk5zuu.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            min = Math.min(min, arr[i]);\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpu9ju4shc.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu9ju4shc.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let index\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    even.sort();\n   \
    \ even.sort((a, b) => a - b);\n    let smallest = even[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < even.length; i++){\n        if(even[i] === smallest\
    \ && i === even.length - 1 ){\n            smallestIndex = index[i];\n       \
    \ }\n    }\n    return [smallest, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6cddsxy4.js:55:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6cddsxy4.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Infinity;\n   \
    \ let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpm8e2rojb.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm8e2rojb.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let index\
    \ = [];\n    let smallest;\n    for(let i = 0; i < arr.length; i++){\n       \
    \ if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    smallest = even[0];\n    for(let i = 0; i < even.length;\
    \ i++){\n        if(smallest > even[i]){\n            smallest = even[i];\n  \
    \      }\n    }\n    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  [\n\
    \    0,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at\
    \ test (/tmp/tmp790m11a_.js:50:10)\n    at Object.<anonymous> (/tmp/tmp790m11a_.js:60:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, [ 0,\
    \ 1 ] ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    let smallest = even.sort((a,b) => a-b)[0];\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp7wh97nx1.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7wh97nx1.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let evens = [];\n  let minIndex\
    \ = -1;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n \
    \     evens.push(arr[i]);\n      if(minIndex === -1 || arr[i] < evens[minIndex]){\n\
    \        minIndex = i;\n      }\n    }\n  }\n  return evens.indexOf(minIndex)\
    \ !== -1 ? evens : [];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ugwskw5.js:45:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp9ugwskw5.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    if(minIndex === -1){\n        return [];\n  \
    \  }\n    let minValue = arr[minIndex];\n    let minIndexes = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0){\n        \
    \    minIndexes.push(i);\n        }\n    }\n    let minIndexesSorted = minIndexes.sort();\n\
    \    let minIndexesSorted = minIndexesSorted.reverse();\n    let minIndexesSorted\
    \ = minIndexesSorted.filter(index => index !== minIndex);\n    let minIndexesSorted\
    \ = minIndexesSorted.map(index => arr[index]);\n    return minIndexesSorted;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_piov1h7.js:39\n    let minIndexesSorted = minIndexesSorted.reverse();\n\
    \        ^\n\nSyntaxError: Identifier 'minIndexesSorted' has already been declared\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let smallest\
    \ = 0;\n    let index = 0;\n    for(let i = 0; i < arr.length; i++){\n       \
    \ if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n            if(arr[i]\
    \ < smallest){\n                smallest = arr[i];\n                index = i;\n\
    \            }\n        }\n    }\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    let smallestEven = evens.sort((a,b) => a-b)[0];\n    return\
    \ [smallestEven, index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp441tzj8p.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmp441tzj8p.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    if(minIndex === -1){\n        return [];\n  \
    \  }\n    let minValue = arr[minIndex];\n    let result = [minValue, minIndex];\n\
    \    for(let i = minIndex + 1; i < arr.length; i++){\n        if(arr[i].value\
    \ % 2 === 0){\n            minValue = arr[i];\n            minIndex = i;\n   \
    \     }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp8ahnw_mx.js:47:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8ahnw_mx.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(el){\n\
    \        return el%2 === 0;\n    });\n    if(even.length === 0){\n        return\
    \ [];\n    }\n    let smallest = Math.min.apply(null, even);\n    let index =\
    \ even.indexOf(smallest);\n    return [smallest, index];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ux70n1m.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ux70n1m.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let smallest = Math.min(...evens);\n    let index = evens.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp18aqpfoi.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp18aqpfoi.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Infinity;\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            if(min > arr[i]){\n                min = arr[i];\n              \
    \  minIndex = i;\n            }\n        }\n    }\n    return [min, minIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzfcxop0z.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzfcxop0z.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(function(el){\n\
    \        return el % 2 === 0;\n    });\n    if(evenNodes.length === 0){\n    \
    \    return [];\n    }\n    let smallestEven = evenNodes[0];\n    let smallestIndex\
    \ = 0;\n    for(let i = 1; i < evenNodes.length; i++){\n        if(evenNodes[i]\
    \ < smallestEven){\n            smallestEven = evenNodes[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEven, smallestIndex];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpzwwxbf45.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzwwxbf45.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue)\
    \ {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_af4f659.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_af4f659.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = -1;\n  let minValue\
    \ = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp3buhs0u0.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3buhs0u0.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenValues = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallestEvenValue = evenValues.reduce(function(a,\
    \ b){\n        return Math.min(a, b);\n    });\n    let smallestIndex = evenValues.indexOf(smallestEvenValue);\n\
    \    return [smallestEvenValue, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpoiv6imn1.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoiv6imn1.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let even = [];\n  let odd = [];\n\
    \  let smallest;\n  let index;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ % 2 === 0){\n      even.push(arr[i]);\n    }else{\n      odd.push(arr[i]);\n\
    \    }\n  }\n  smallest = even.sort((a,b)=>a-b).pop();\n  smallest = odd.sort((a,b)=>a-b).pop();\n\
    \  index = even.indexOf(smallest);\n  if(index === -1){\n    index = odd.indexOf(smallest);\n\
    \  }\n  return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpmlstegpf.js:52:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmlstegpf.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let index\
    \ = [];\n    let smalest_value;\n    let smalest_index;\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \        }\n        else{\n            smalest_value = Math.min.apply(null, even);\n\
    \            smalest_index = even.indexOf(smalest_value);\n            even.splice(smalest_index,\
    \ 1);\n            index.push(smalest_index);\n        }\n    }\n    if(even.length\
    \ === 0){\n        return [];\n    }\n    else{\n        return [smalest_value,\
    \ smalest_index];\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp1hl06w2q.js:56:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1hl06w2q.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n    if(minIndex === -1){\n        return [];\n    }\n \
    \   let minValue = arr[minIndex];\n    let result = [];\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] !== minValue){\n\
    \            result.push([arr[i], i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n\
    \    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpw4e4llu_.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw4e4llu_.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 1 ]\
    \ ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node % 2 === 0);\n    if (minIndex === -1) return [];\n    let minValue =\
    \ arr[minIndex];\n    let result = [];\n    for (let i = 0; i < arr.length; i++){\n\
    \        if (arr[i] === minValue){\n            result.push([arr[i], i]);\n  \
    \      }\n    }\n    if (result.length === 0) return [];\n    if (result.length\
    \ === 1) return result[0][0];\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpo4h00ebb.js:46:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpo4h00ebb.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    return minIndex === -1 ? [] : [arr[minIndex],\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpl9s34i8w.js:36:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpl9s34i8w.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    let smallestEvenValue\
    \ = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(arr[i] < smallestEvenValue){\n                smallestEvenValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    return\
    \ evenNodes.sort((a,b) => a - b).slice(0, smallestIndex + 1);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpv3_eybtl.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv3_eybtl.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(min > arr[i]){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpil6vju27.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpil6vju27.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf4ir185_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4ir185_.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpndhvu4r8.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpndhvu4r8.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === minValue){\n\
    \            minIndex = i;\n        }\n        if(arr[i] < minValue){\n      \
    \      minValue = arr[i];\n            minIndex = i;\n        }\n    }\n    return\
    \ [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvwqxbli1.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvwqxbli1.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(minValue > arr[i]){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp0i7p9o6p.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0i7p9o6p.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    if (minIndex === -1) return [];\n    let minValue\
    \ = arr[minIndex];\n    let result = [minValue, minIndex];\n    arr.splice(minIndex,\
    \ 1);\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp1ecbi8qz.js:40:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1ecbi8qz.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    if(even.length===0){\n        return\
    \ [];\n    }\n    let min = even[0];\n    let minIndex = 0;\n    for(let i=0;i<even.length;i++){\n\
    \        if(even[i]===min){\n            minIndex++;\n        }\n    }\n    return\
    \ [min, minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmphmrjekhg.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmphmrjekhg.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf4ir185_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4ir185_.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    if(evens.length === 0) return [];\n\
    \    let smallest = Math.min(evens);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp6d58gr1q.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6d58gr1q.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, -1\
    \ ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = arr.filter(function(val){\n\
    \        return val % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    let smallestIndex = evens.indexOf(Math.min.apply(null,\
    \ evens));\n    return [evens[smallestIndex], smallestIndex];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp604xtkc4.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmp604xtkc4.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr = arr.sort((a,b) => a-b);\n\
    \    let even = arr.filter(x => x % 2 === 0);\n    let index = even.indexOf(arr[0]);\n\
    \    return even.indexOf(arr[0]) > -1 ? [arr[0], index] : [];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpeir63djb.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeir63djb.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n  if (minIndex === -1) return [];\n  return [arr[minIndex].value,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpq4owsez6.js:37:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpq4owsez6.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_yabok7a.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_yabok7a.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let index\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    even.sort((a, b) =>\
    \ a - b);\n    return even.slice(0, even.length).map((e, i) => [e, index[i]]);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    2,\n\
    \    0\n  ],\n  [\n    4,\n    1\n  ]\n]\n\nshould loosely deep-equal\n\n[\n \
    \ 2,\n  1\n]\n    at test (/tmp/tmp0mnm0o_j.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0mnm0o_j.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 2, 0 ],\
    \ [ 4, 1 ] ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpndhvu4r8.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpndhvu4r8.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenValues = [];\n    let\
    \ smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenValues.push(arr[i]);\n            if(evenValues.length\
    \ === 1){\n                smallestIndex = i;\n            }\n        }\n    }\n\
    \    if(evenValues.length === 0){\n        return [];\n    }\n    if(evenValues.length\
    \ === 1){\n        return [evenValues[0], smallestIndex];\n    }\n    let smallestValue\
    \ = evenValues[0];\n    let smallestIndexOfSmallestValue = smallestIndex;\n  \
    \  for(let i = 1; i < evenValues.length; i++){\n        if(evenValues[i] < smallestValue){\n\
    \            smallestValue = evenValues[i];\n            smallestIndexOfSmallestValue\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndexOfSmallestValue];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  3\n]\n    at test (/tmp/tmpt8czkwbe.js:63:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt8czkwbe.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1 ],\n\
    \  expected: [ 0, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(el){\n\
    \        return el%2 === 0;\n    });\n    if(even.length === 0){\n        return\
    \ [];\n    }\n    let smallest = Math.min.apply(null, even);\n    let index =\
    \ even.indexOf(smallest);\n    return [smallest, index];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9ux70n1m.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ux70n1m.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestEvenNode = evenNodes.reduce((prev,\
    \ curr) => curr.value < prev ? curr : prev);\n    let smallestEvenIndex = evenNodes.indexOf(smallestEvenNode);\n\
    \    return smallestEvenIndex === -1 ? [] : [smallestEvenNode.value, smallestEvenIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpk8hswyum.js:28\n    let smallestEvenNode = evenNodes.reduce((prev,\
    \ curr) => curr.value < prev ? curr : prev);\n                               \
    \      ^\n\nTypeError: Reduce of empty array with no initial value\n    at Array.reduce\
    \ (<anonymous>)\n    at pluck (/tmp/tmpk8hswyum.js:28:38)\n    at test (/tmp/tmpk8hswyum.js:38:20)\n\
    \    at Object.<anonymous> (/tmp/tmpk8hswyum.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenValues = [];\n    let\
    \ smallestValue = 0;\n    let smallestIndex = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evenValues.push(arr[i]);\n\
    \            if(arr[i] < smallestValue){\n                smallestValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    if(evenValues.length\
    \ === 0){\n        return [];\n    }\n    for(let i = 0; i < evenValues.length;\
    \ i++){\n        if(evenValues[i] < smallestValue){\n            smallestValue\
    \ = evenValues[i];\n            smallestIndex = i;\n        }\n    }\n    return\
    \ [smallestValue, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpdv2glqvz.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdv2glqvz.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a\
    \ - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0yoztr97.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0yoztr97.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let small\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n        }else{\n            small.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ let smallest = even[0];\n    let smallestIndex = 0;\n    for(let i = 0; i <\
    \ even.length; i++){\n        if(even[i] < smallest){\n            smallest =\
    \ even[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest,\
    \ smallestIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmprv5q0e5d.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmprv5q0e5d.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsrubl9vt.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsrubl9vt.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9z54857f.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9z54857f.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let smallest;\n\
    \    let index;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            evens.push(arr[i]);\n        }\n    }\n    smallest =\
    \ evens.reduce((a, b) => a < b ? a : b);\n    index = evens.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_hd2dmuz.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_hd2dmuz.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0 &&\
    \ node.value < minValue){\n            minValue = node.value;\n            minIndex\
    \ = index;\n        }\n    });\n    return [minValue, minIndex];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpbkacydr2.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbkacydr2.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let even = arr.filter(x => x % 2\
    \ === 0);\n  let smallest = even.sort((a, b) => a - b)[0];\n  let index = even.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsnwm9day.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsnwm9day.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr = arr.sort((a,b)=>a-b);\n\
    \    let minIndex = -1;\n    let minValue = arr[0];\n    for(let i = 1; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 == 0){\n            if(minValue == arr[i]){\n \
    \               minIndex = i;\n            }else if(minValue > arr[i]){\n    \
    \            minValue = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp2dgw2yaf.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2dgw2yaf.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let even = arr.filter(e => e % 2\
    \ === 0);\n  let smallest = even.sort((a, b) => a - b)[0];\n  let index = even.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpr4ygkz_k.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr4ygkz_k.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    arr.forEach((node, index) => {\n        if(node.value % 2 === 0 &&\
    \ node.value < minValue){\n            minValue = node.value;\n            minIndex\
    \ = index;\n        }\n    });\n    return [minValue, minIndex];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpbkacydr2.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbkacydr2.js:54:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_yabok7a.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_yabok7a.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    let smallest = Math.min(even);\n  \
    \  let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpwlms5wy8.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwlms5wy8.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, -1\
    \ ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr = arr.sort((a,b)=>a-b);\n\
    \    let even = arr.filter(v=>v%2===0);\n    if(even.length===0){\n        return\
    \ [];\n    }\n    let index = even.indexOf(Math.min(...even));\n    return [even[index],\
    \ index];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpp_4jk7jh.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp_4jk7jh.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9z54857f.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9z54857f.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Infinity;\n    let minIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n\
    \            if(arr[i] < min){\n                min = arr[i];\n              \
    \  minIndex = i;\n            }\n        }\n    }\n    return [min, minIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzl292ypz.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzl292ypz.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let evenNodes = []\n  for(let i\
    \ = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      evenNodes.push(arr[i])\n\
    \    }\n  }\n  if(evenNodes.length === 0){\n    return []\n  }\n  if(evenNodes.length\
    \ === 1){\n    return [evenNodes[0]]\n  }\n  let smallestEven = evenNodes[0]\n\
    \  let smallestIndex = 0\n  for(let i = 1; i < evenNodes.length; i++){\n    if(evenNodes[i]\
    \ < smallestEven){\n      smallestEven = evenNodes[i]\n      smallestIndex = i\n\
    \    }\n  }\n  return [smallestEven, smallestIndex]\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmprfea9v9g.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmprfea9v9g.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9z54857f.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9z54857f.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenValues = [];\n    let\
    \ smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenValues.push(arr[i]);\n            if(evenValues.length\
    \ === 1){\n                smallestIndex = i;\n            }\n        }\n    }\n\
    \    if(evenValues.length === 0){\n        return [];\n    }\n    if(evenValues.length\
    \ === 1){\n        return [evenValues[0], smallestIndex];\n    }\n    let smallestValue\
    \ = evenValues[0];\n    for(let i = 1; i < evenValues.length; i++){\n        if(evenValues[i]\
    \ < smallestValue){\n            smallestValue = evenValues[i];\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndex];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  3\n]\n    at test (/tmp/tmpw63mzcrp.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw63mzcrp.js:68:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1 ],\n\
    \  expected: [ 0, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex((el,i,arr)\
    \ => el%2 === 0);\n    if(minIndex === -1){\n        return [];\n    }\n    let\
    \ minValue = arr[minIndex];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === minValue){\n            result.push(i);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpnu50d0hn.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnu50d0hn.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    let smallestEven\
    \ = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(arr[i] < smallestEven){\n                smallestEven = arr[i];\n    \
    \            smallestIndex = i;\n            }\n        }\n    }\n    return evenNodes.indexOf(smallestEven)\
    \ > -1 ? [smallestEven, smallestIndex] : [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp1_cuqirr.js:48:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp1_cuqirr.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    arr = arr.sort((a,b)=>a-b);\n\
    \    let even = arr.filter(v=>v%2===0);\n    if(even.length===0){\n        return\
    \ [];\n    }\n    let index = even.indexOf(Math.min(...even));\n    return [even[index],index];\n\
    }\n</cell>\n<cell>\n# Definition for a binary tree node.\n# class TreeNode:\n\
    #     def __init__(self, val=0, left=None, right=None):\n#         self.val =\
    \ val\n#         self.left = left\n#         self.right = right\nclass Solution:\n\
    \    def findSmallestValues(self, root: TreeNode) -> List[int]:\n        \n  \
    \      def dfs(root):\n            if root is None:\n                return []\n\
    \            \n            left,right = [],[]\n            \n            if root.left:\n\
    \                left = dfs(root.left)\n            if root.right:\n         \
    \       right = dfs(root.right)\n            \n            left.append(root.val)\n\
    \            right.append(root.val)\n            \n            return left + [root.val]\
    \ + right\n        \n        return dfs(root)\n</cell>\n<cell>\n# Definition for\
    \ a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None,\
    \ right=None):\n#         self.val = val\n#         self.left = left\n#      \
    \   self.right = right\nclass Solution:\n    def findSmallestValues(self, root:\
    \ TreeNode) -> List[int]:\n        \n        def dfs(root):\n            if root\
    \ is None:\n                return []\n            \n            left,right =\
    \ [],[]\n            \n            if root.left:\n                left = dfs(root.left)\n\
    \            if root.right:\n                right = dfs(root.right)\n       \
    \     \n            left.append(root.val)\n            right.append(root.val)\n\
    \            \n            return left + [root.val] + right\n        \n      \
    \  return dfs(root)\n</cell>\n<cell>\n# Definition for a binary tree node.\n#\
    \ class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#\
    \         self.val = val\n#         self.left = left\n#         self.right = right\n\
    class Solution:\n    def findSmallestValues(self, root: TreeNode) -> List[int]:\n\
    \        \n        def dfs(root):\n            if root is None:\n            \
    \    return []\n            \n            left,right = [],[]\n            \n \
    \           if root.left:\n                left = dfs(root.left)\n           \
    \ if root.right:\n                right = dfs(root.right)\n            \n    \
    \        left.append(root.val)\n            right.append(root.val)\n         \
    \   \n            return left + [root.val] + right\n        \n        return dfs(root)\n\
    </cell>\n<cell>\n# Definition for a binary tree node.\n# class TreeNode:\n#  \
    \   def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_g6htxx8.js:35\n</cell>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf4ir185_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4ir185_.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \        }\n    }\n    evens.sort((a, b) => a - b);\n    let smallestEven = evens[0];\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < evens.length; i++){\n    \
    \    if(evens[i] === smallestEven){\n            smallestIndex = i;\n        }\n\
    \    }\n    return [smallestEven, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp71ty2djn.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmp71ty2djn.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallest = even.sort((a,b)=>a-b).pop();\n\
    \    let index = even.indexOf(smallest);\n    return [smallest, index];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcs4gszuz.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcs4gszuz.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = [];\n    let smalest_value;\n\
    \    let smalest_index;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evens.push(arr[i]);\n        }\n    }\n    smalest_value\
    \ = evens[0];\n    smalest_index = evens.indexOf(smalest_value);\n    evens.splice(smalest_index,\
    \ 1);\n    return evens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpawbwgcqm.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmpawbwgcqm.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    if(evenNodes.length === 0){\n        return [];\n\
    \    }\n    let smallestEvenValue = evenNodes.sort((a,b) => a.value - b.value)[0];\n\
    \    let smallestIndex = 0;\n    for(let i = 0; i < evenNodes.length; i++){\n\
    \        if(evenNodes[i].value === smallestEvenValue){\n            smallestIndex\
    \ = i;\n        }\n    }\n    return [smallestEvenValue, smallestIndex];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpvzlumz7h.js:46:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpvzlumz7h.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a\
    \ - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0yoztr97.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0yoztr97.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(x => x %\
    \ 2 === 0);\n    let smallest = Math.min(...even);\n    let index = even.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp60il47t9.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp60il47t9.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_yabok7a.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_yabok7a.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a\
    \ - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpkbuteu8l.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkbuteu8l.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(val){\n\
    \        return val%2 === 0;\n    });\n    let smallest = Math.min.apply(null,\
    \ even);\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp3l3hbghy.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3l3hbghy.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < min){\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpf4ir185_.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4ir185_.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even_values = []\n    let\
    \ smallest_value = 0\n    let smallest_index = 0\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even_values.push(arr[i])\n\
    \        }\n        if(arr[i] < smallest_value){\n            smallest_value =\
    \ arr[i]\n            smallest_index = i\n        }\n    }\n    if(even_values.length\
    \ === 0){\n        return []\n    }\n    if(smallest_value === 0){\n        return\
    \ even_values\n    }\n    let smallest_value_even = even_values.sort((a,b) =>\
    \ a-b)[0]\n    let smallest_value_odd = even_values.sort((a,b) => b-a)[0]\n  \
    \  let smallest_value_even_index = even_values.indexOf(smallest_value_even)\n\
    \    let smallest_value_odd_index = even_values.indexOf(smallest_value_odd)\n\
    \    let smallest_value_even_index_in_odd_array = smallest_value_odd_index - smallest_value_even_index\n\
    \    let smallest_value_odd_index_in_odd_array = smallest_value_even_index - smallest_value_odd_index\n\
    \    let smallest_value_even_index_in_even = smallest_value_even_index + smallest_value_even_index_in_odd_array\n\
    \    let smallest_value_odd_index_in_even = smallest_value_odd_index + smallest_value_odd_index_in_odd_array\n\
    \    return [smallest_value_even, smallest_value_even_index]\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp_0w8kjul.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_0w8kjul.js:71:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    let smallest = evens.reduce(function(prev,\
    \ curr){\n        return prev < curr ? prev : curr;\n    });\n    let index =\
    \ arr.indexOf(smallest);\n    return [smallest, index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp15qjedwz.js:30\n    let smallest = evens.reduce(function(prev,\
    \ curr){\n                         ^\n\nTypeError: Reduce of empty array with\
    \ no initial value\n    at Array.reduce (<anonymous>)\n    at pluck (/tmp/tmp15qjedwz.js:30:26)\n\
    \    at test (/tmp/tmp15qjedwz.js:44:20)\n    at Object.<anonymous> (/tmp/tmp15qjedwz.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            if(arr[i].value < minValue){\n                minValue\
    \ = arr[i].value;\n                minIndex = i;\n            }\n        }\n \
    \   }\n    result.push(minValue, minIndex);\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpre_0827s.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpre_0827s.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0 && arr[i] < min){\n            min = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpctc80ne6.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmpctc80ne6.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(e){\n\
    \        return e % 2 === 0;\n    });\n    let smallest = even[0];\n    let index\
    \ = even.indexOf(smallest);\n    return [ smallest, index ];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpdg78snic.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdg78snic.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    if(minIndex === -1){\n        return [];\n  \
    \  }\n    let minValue = arr[minIndex];\n    let result = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i].value % 2 === 0){\n            result.push(arr[i]);\n\
    \        }\n        if(arr[i].value === minValue){\n            minIndex = i;\n\
    \        }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpd7ii4c2f.js:49:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpd7ii4c2f.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    let evenIndex\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenArr.push(arr[i]);\n            evenIndex.push(i);\n        }\n\
    \    }\n    if(evenArr.length === 0){\n        return [];\n    }\n    let smallestEvenValue\
    \ = Math.min(...evenArr);\n    let smallestIndex = 0;\n    for(let i = 0; i <\
    \ evenArr.length; i++){\n        if(evenArr[i] === smallestEvenValue){\n     \
    \       smallestIndex = evenIndex[i];\n        }\n    }\n    return [smallestEvenValue,\
    \ smallestIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  3\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpve6lo6zx.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmpve6lo6zx.js:63:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 3 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = arr.filter(node\
    \ => node.value % 2 === 0);\n    let smallestEvenNode = evenNodes.reduce((prev,\
    \ curr) => Math.min(prev, curr.value), Infinity);\n    let smallestEvenIndex =\
    \ evenNodes.findIndex(node => node.value === smallestEvenNode);\n    let smallestEvenValue\
    \ = smallestEvenNode;\n    let smallestEvenIndexArray = [];\n    if (smallestEvenIndex\
    \ > -1) {\n        smallestEvenIndexArray.push(smallestEvenIndex);\n    }\n  \
    \  if (evenNodes.length > 0) {\n        smallestEvenValue = evenNodes[smallestEvenIndex].value;\n\
    \        smallestEvenIndexArray.push(smallestEvenIndex);\n    }\n    return smallestEvenIndexArray;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp8ajhqhss.js:47:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp8ajhqhss.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    let evenIndex\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenArr.push(arr[i]);\n            evenIndex.push(i);\n        }\n\
    \    }\n    if(evenArr.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evenArr[0];\n    let smallestIndex = evenIndex[0];\n    for(let i = 0; i <\
    \ evenArr.length; i++){\n        if(evenArr[i] < smallestEven){\n            smallestEven\
    \ = evenArr[i];\n            smallestIndex = evenIndex[i];\n        }\n    }\n\
    \    return [smallestEven, smallestIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for (let i = 1; i < arr.length; i++){\n        if (arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpsrubl9vt.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsrubl9vt.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenValues = [];\n    let\
    \ smallestIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenValues.push(arr[i]);\n            if(evenValues.length\
    \ === 1){\n                smallestIndex = i;\n            }\n        }\n    }\n\
    \    if(evenValues.length === 0){\n        return [];\n    }\n    if(evenValues.length\
    \ === 1){\n        return [evenValues[0], smallestIndex];\n    }\n    let smallestValue\
    \ = evenValues[0];\n    let smallestIndexOfSmallestValue = 0;\n    for(let i =\
    \ 0; i < evenValues.length; i++){\n        if(evenValues[i] < smallestValue){\n\
    \            smallestValue = evenValues[i];\n            smallestIndexOfSmallestValue\
    \ = i;\n        }\n    }\n    return [smallestValue, smallestIndexOfSmallestValue];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpn7u435ok.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn7u435ok.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even_values = [];\n    let\
    \ smallest_value = 0;\n    let smallest_index = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even_values.push(arr[i]);\n\
    \            if(arr[i] < smallest_value){\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if(even_values.length\
    \ === 0){\n        return [];\n    }\n    for(let i = 0; i < even_values.length;\
    \ i++){\n        if(even_values[i] < smallest_value){\n            smallest_value\
    \ = even_values[i];\n            smallest_index = i;\n        }\n    }\n    return\
    \ [smallest_value, smallest_index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpd9dl6ch2.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd9dl6ch2.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = arr[0];\n    let\
    \ minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] <\
    \ minValue){\n            minValue = arr[i];\n            minIndex = i;\n    \
    \    }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9z54857f.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9z54857f.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    let smallest = even.sort((a,b) => a\
    \ - b)[0];\n    let index = even.indexOf(smallest);\n    return [smallest, index];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp0yoztr97.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0yoztr97.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = arr.findIndex(node\
    \ => node.value % 2 === 0);\n    let minValue = arr[minIndex];\n    let result\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i].value % 2\
    \ === 0){\n            if(arr[i].value < minValue){\n                minValue\
    \ = arr[i].value;\n                minIndex = i;\n            }\n        }\n \
    \   }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmprd2y48da.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmprd2y48da.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(arr[i] < minValue){\n                minValue =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n    }\n  \
    \  return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp_yabok7a.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_yabok7a.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = arr.filter(function(e){\n\
    \        return e % 2 === 0;\n    });\n    if(even.length === 0) return [];\n\
    \    let min = even.indexOf(Math.min(...even));\n    return [even[min], min];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp5puv_hyq.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5puv_hyq.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    let smallestEvenValue\
    \ = arr[0];\n    let smallestIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenNodes.push(arr[i]);\n        \
    \    if(arr[i] < smallestEvenValue){\n                smallestEvenValue = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    return [smallestEvenValue, smallestIndex];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpqyy6qkxg.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqyy6qkxg.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenNodes = [];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenNodes.push(arr[i]);\n            if(evenNodes.length === 1){\n\
    \                smallestIndex = i;\n            }\n        }\n    }\n    if(evenNodes.length\
    \ === 0){\n        return [];\n    }\n    if(evenNodes.length === 1){\n      \
    \  return [evenNodes[0], smallestIndex];\n    }\n    let smallestValue = evenNodes[0];\n\
    \    for(let i = 0; i < evenNodes.length; i++){\n        if(evenNodes[i] < smallestValue){\n\
    \            smallestValue = evenNodes[i];\n            smallestIndex = i;\n \
    \       }\n    }\n    return [smallestValue, smallestIndex];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  0,\n  3\n]\n    at test (/tmp/tmpzub_k003.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzub_k003.js:68:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1 ],\n\
    \  expected: [ 0, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let even = [];\n    let index\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n            index.push(i);\n        }\n    }\n\
    \    if(even.length === 0){\n        return [];\n    }\n    even.sort();\n   \
    \ let smallest = even[0];\n    let smallest_index = index[0];\n    for(let i =\
    \ 1; i < even.length; i++){\n        if(even[i] === smallest && index[i] < smallest_index){\n\
    \            smallest = even[i];\n            smallest_index = index[i];\n   \
    \     }\n    }\n    return [smallest, smallest_index];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp13c5jfs3.js:55:10)\n\
    \    at Object.<anonymous> (/tmp/tmp13c5jfs3.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 == 0){\n            if(arr[i] < min){\n                min = arr[i];\n \
    \               minIndex = i;\n            }\n        }\n    }\n    return [min,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  9007199254740991,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp5z5dcstt.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5z5dcstt.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 9007199254740991,\
    \ 0 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minValue = Infinity;\n   \
    \ let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ < minValue){\n            minValue = arr[i];\n            minIndex = i;\n  \
    \      }\n    }\n    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpm8e2rojb.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm8e2rojb.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for (let i = 1; i < arr.length; i++){\n    if (arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmppg_80go0.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmppg_80go0.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n  let minIndex = 0;\n  let minValue\
    \ = arr[0];\n  for(let i = 1; i < arr.length; i++){\n    if(arr[i] < minValue){\n\
    \      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n  return [minValue,\
    \ minIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpkgksotzt.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkgksotzt.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748587
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = -1;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  -1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpcnu005il.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcnu005il.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, -1 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let smallest = evens.reduce((a, b) => a < b ? a : b);\n   \
    \ let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2_kuispq.js:28\n    let smallest = evens.reduce((a, b) => a < b\
    \ ? a : b);\n                         ^\n\nTypeError: Reduce of empty array with\
    \ no initial value\n    at Array.reduce (<anonymous>)\n    at pluck (/tmp/tmp2_kuispq.js:28:26)\n\
    \    at test (/tmp/tmp2_kuispq.js:40:20)\n    at Object.<anonymous> (/tmp/tmp2_kuispq.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let evenArr = [];\n    let smallestIndex\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenArr.push(arr[i]);\n            if(evenArr.length === 1){\n  \
    \              smallestIndex = i;\n            }\n        }\n    }\n    if(evenArr.length\
    \ === 0){\n        return [];\n    }\n    if(evenArr.length === 1){\n        return\
    \ [evenArr[0], smallestIndex];\n    }\n    let smallestValue = evenArr[0];\n \
    \   let smallestIndex = 0;\n    for(let i = 0; i < evenArr.length; i++){\n   \
    \     if(evenArr[i] < smallestValue){\n            smallestValue = evenArr[i];\n\
    \            smallestIndex = i;\n        }\n    }\n    return [smallestValue,\
    \ smallestIndex];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpweyla_4z.js:44\n    let smallestIndex = 0;\n        ^\n\nSyntaxError:\
    \ Identifier 'smallestIndex' has already been declared\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748588
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr){\n    let minIndex = 0;\n    let minValue\
    \ = arr[0];\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < minValue){\n\
    \            minValue = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    return [minValue, minIndex];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp9gtwdpiv.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9gtwdpiv.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
