name: HumanEval_139_special_factorial
language: js
prompt: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunction special_factorial(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
  \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
  }\n\ntest();"
completions: ["\tif (n < 0){\n\t\tconsole.log(\"Error: Negative factorial not allowed.\"\
    );\n\t\treturn -1;\n\t}\n\tif (n == 0){\n\t\treturn 1;\n\t}\n\treturn n * special_factorial(n\
    \ - 1);\n}\n", "    var factorial = 1;\n    for(var i = 1; i <= n; i++){\n   \
    \     factorial *= i;\n    }\n    return factorial;\n}\n", "\tif(n==0){\n\t\t\
    return 1;\n\t}\n\tif(n==1){\n\t\treturn 1;\n\t}\n\tif(n==2){\n\t\treturn 2;\n\t\
    }\n\tif(n==3){\n\t\treturn 6;\n\t}\n\tif(n==4){\n\t\treturn 24;\n\t}\n\tif(n==5){\n\
    \t\treturn 120;\n\t}\n\tif(n==6){\n\t\treturn 720;\n\t}\n\tif(n==7){\n\t\treturn\
    \ 5040;\n\t}\n\tif(n==8){\n\t\treturn 40320;\n\t}\n\tif(n==9){\n\t\treturn 362880;\n\
    \t}\n\tif(n==10){\n\t\treturn 3628800; // 3628800 is the largest factorial that\
    \ can be expressed as a positive integer without overflow\n\t}\n\tif(n==11){\n\
    \t\treturn 39916800; // 39916800 is the largest factorial that can be expressed\
    \ as a positive integer without overflow\n\t}\n\tif(n==12){\n\t\treturn 479001600;\
    \ // 479001600 is the largest factorial that can be expressed as a positive integer\
    \ without overflow\n\t}\n\tif(n==13){\n\t\treturn 6227020800; // 6227020800 is\
    \ the largest factorial that can be expressed as a positive integer without overflow\n\
    \t}\n\tif(n==14){\n\t\treturn 87178291200; // 87178291200 is the largest factorial\
    \ that can be expressed as a positive integer without overflow\n\t}\n\tif(n==15){\n\
    \t\treturn 1307674368000;  // 1307674368000 is the largest factorial that can\
    \ be expressed as a positive integer without overflow\n\t}\n\tif(n==16){\n\t\t\
    return 20922789888000; // 20922789888000 is the largest factorial that can be\
    \ expressed as a positive integer without overflow\n\t}\n\tif(n==17){\n\t\treturn\
    \ 355687428096000; // 355687428096000 is the largest factorial that can be expressed\
    \ as a positive integer without overflow\n\t}\n\tif(n==18){\n\t\treturn 640237370572800;\
    \ // 640237370572800 is the largest factorial that can be expressed as a positive\
    \ integer without overflow\n\t}\n\tif(n==19){\n\t\treturn 12164510040883200; //\
    \ 12164510040883200 is the largest factorial that can be expressed as a positive\
    \ integer without overflow\n\t}\n\tif(n==20){\n\t\treturn 2432902008176640000;\
    \ // 2432902008176640000 is the largest factorial that can be expressed as a positive\
    \ integer without overflow\n\t}\n\tif(n==21)", "  if(n <= 1){\n    return 1;\n\
    \  }\n  return n * special_factorial(n - 1);\n}\n", "\tif(n == 0){\n\t\treturn\
    \ 1;\n\t}\n\telse{\n\t\treturn n*special_factorial(n-1);\n\t}\n}\n", "    var\
    \ factorial = 1;\n    for(var i = 1; i <= n; i++){\n        factorial *= i;\n\
    \    }\n    return factorial;\n}\n", "\tif(n == 0){\n\t\treturn 1;\n\t}\n\telse{\n\
    \t\treturn n*special_factorial(n-1);\n\t}\n}\n", "\tif (n <= 1){\n\t\treturn 1;\n\
    \t}\n\treturn n * special_factorial(n - 1);\n}\n", "\tif(n == 0){\n\t\treturn\
    \ 1;\n\t}\n\tif(n == 1){\n\t\treturn n;\n\t}\n\treturn n*special_factorial(n-1);\n\
    }\n", "\tif (n <= 1){\n\t\treturn 1;\n\t}\n\treturn n * special_factorial(n -\
    \ 1);\n}\n", "  if(n == 0){\n    return 1;\n  }\n  if(n == 1){\n    return 1;\n\
    \  }\n  return n * special_factorial(n-1);\n}\n", "  if(n == 0){\n    return 1;\n\
    \  }\n  else{\n    return n * special_factorial(n - 1);\n  }\n}\n", "\tif (n <=\
    \ 1){\n\t\treturn 1;\n\t}\n\treturn n * special_factorial(n - 1);\n}\n", "\tif(n\
    \ == 0){\n\t\treturn 1;\n\t}\n\telse{\n\t\treturn n * special_factorial(n-1);\n\
    \t}\n}\n", "\tif(n==0){\n\t\treturn 1;\n\t}\n\telse{\n\t\treturn n*special_factorial(n-1);\n\
    \t}\n}\n", "  if(n == 0 || n == 1){\n    return 1;\n  }\n  else{\n    return n\
    \ * special_factorial(n-1);\n  }\n}\n", "\tif(n == 0){\n\t\treturn 1;\n\t}\n\t\
    if(n == 1){\n\t\treturn n;\n\t}\n\treturn n * special_factorial(n-1);\n}\n", "\t\
    if(n == 0){\n\t\treturn 1;\n\t}\n\tif(n == 1){\n\t\treturn n;\n\t}\n\treturn n\
    \ * special_factorial(n - 1);\n}\n", "    if (n == 0 || n == 1){\n        return\
    \ 1;\n    }\n    return n * special_factorial(n - 1);\n}\n", "    var factorial\
    \ = 1;\n    for(var i = 1; i <= n; i++){\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
