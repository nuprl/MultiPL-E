language: js
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        word = words[i];\n        for(let j\
    \ = 0; j < word.length; j++){\n            if(words[j].length >= max){\n     \
    \           max = words[j].length;\n                word = words[j];\n       \
    \     }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjidfvvfb.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpjidfvvfb.js:17:25)\n    at test (/tmp/tmpjidfvvfb.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjidfvvfb.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        max = Math.max(max, word.length);\n\
    \      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7o0cdnzt.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7o0cdnzt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var count = 0;\n        for(var j=0; j<words[i].length;\
    \ j++){\n            if(words[i].charAt(j) == word){\n                count++;\n\
    \            }\n        }\n        if(count > max){\n            max = count;\n\
    \            word = words[i];\n        }\n    }\n    return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp2f3cpzk5.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2f3cpzk5.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    max = Math.max(max, word.length);\n  }\n  for(var\
    \ i=0; i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.charAt(j) == word.charAt(j+1)){\n        max = Math.max(max,\
    \ word.length);\n      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdnryj10q.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdnryj10q.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgxmlsn58.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgxmlsn58.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                if(word.length>max){\n\
    \                    max = word.length;\n                    word = words[j];\n\
    \                }\n            }\n        }\n    }\n    return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphz748x10.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphz748x10.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    let count = 0;\n    for(let j = 0; j < words[i].length;\
    \ j++){\n      if(words[i].charAt(j) == word){\n        count++;\n      }\n  \
    \  }\n    if(count > max){\n      max = count;\n      word = words[i];\n    }\n\
    \  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp8cq34bq0.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8cq34bq0.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[max];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpcvxg2s_2.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcvxg2s_2.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(word.indexOf(words[j])>-1){\n                max++;\n            }\n  \
    \      }\n    }\n    for(var i=0;i<words.length;i++){\n        word = words[i];\n\
    \        for(var j=0;j<word.length;j++){\n            if(word.indexOf(words[j])>-1){\n\
    \                if(max<words[j].length){\n                    max = words[j].length;\n\
    \                }\n            }\n        }\n    }\n    return words[words.length-1];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpohazkqyh.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpohazkqyh.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        max = Math.max(max, word.length);\n      }\n    }\n  }\n  return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzgejqupx.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzgejqupx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    var count = 0;\n    for(var\
    \ j=0; j<word.length; j++){\n      if(word.charAt(j) == words[j].charAt(j)){\n\
    \        count++;\n      }\n    }\n    if(count > max){\n      max = count;\n\
    \    }\n  }\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpmhqdmpwn.js:18\n      if(word.charAt(j) == words[j].charAt(j)){\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'charAt')\n    at find_max (/tmp/tmpmhqdmpwn.js:18:37)\n\
    \    at test (/tmp/tmpmhqdmpwn.js:34:20)\n    at Object.<anonymous> (/tmp/tmpmhqdmpwn.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        if(word.length>max){\n          max = word.length;\n          word =\
    \ words[j];\n        }\n      }\n    }\n  }\n  return word;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkwxb2pil.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkwxb2pil.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for (let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for (let j =\
    \ 0; j < words[i].length; j++){\n            if (words[i].charAt(j) == word){\n\
    \                count++;\n            }\n        }\n        if (count > max){\n\
    \            max = count;\n            word = words[i];\n        }\n    }\n  \
    \  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp2t1d5dtu.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2t1d5dtu.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            if(words[i].charAt(j) == words[i].charAt(j)){\n         \
    \       word = \"\";\n                break;\n            }\n            word\
    \ += words[i].charAt(j);\n        }\n        if(word.length > max){\n        \
    \    max = word.length;\n            word = words[i];\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp43os71kd.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp43os71kd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        var count = 0;\n        for(var j=0;j<words[i].length;j++){\n\
    \            if(words[i].charAt(j) == word){\n                count++;\n     \
    \       }\n        }\n        if(count > max){\n            max = count;\n   \
    \         word = words[i];\n        }\n    }\n    return word;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpo9j483hh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo9j483hh.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n\
    \      if(words[i].charAt(j) == words[i].charAt(j)){\n        word = \"\";\n \
    \     }\n      else{\n        word += words[i].charAt(j);\n      }\n    }\n  \
    \  if(word.length > max){\n      max = word.length;\n      word = words[i];\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp8d3qvcqa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8d3qvcqa.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(words[j].length>max){\n\
    \        max = words[j].length;\n      }\n    }\n  }\n  return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpigdrwecd.js:17\n      if(words[j].length>max){\n              \
    \    ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpigdrwecd.js:17:19)\n    at test (/tmp/tmpigdrwecd.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpigdrwecd.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(word[j] == word[max]){\n                max++;\n            }\n       \
    \ }\n    }\n    return words[max];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0ed0fdl6.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0ed0fdl6.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqjzot8bx.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpqjzot8bx.js:17:25)\n    at test (/tmp/tmpqjzot8bx.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzot8bx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        var count = 0;\n\
    \        for(var j=0; j<word.length; j++){\n            count += word.charCodeAt(j);\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \  }\n    return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzeczsz5q.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzeczsz5q.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.charAt(j) == word.charAt(j)){\n                max++;\n\
    \            }\n        }\n        if(max < word.length){\n            max = word.length;\n\
    \        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpk71_06rq.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk71_06rq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(words[j].length>max){\n                max = words[j].length;\n       \
    \         word = words[j];\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyw4ltjnv.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpyw4ltjnv.js:17:25)\n    at test (/tmp/tmpyw4ltjnv.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyw4ltjnv.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var maxWord = \"\";\n  for(var\
    \ i=0; i<words.length; i++){\n    var count = words[i].length;\n    if(count >\
    \ maxCount){\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n\
    \  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpj8e6la1j.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj8e6la1j.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max;\n  var word;\n  var i;\n  var j;\n  var\
    \ count = 0;\n  for(i = 0; i < words.length; i++){\n    word = words[i];\n   \
    \ for(j = 0; j < word.length; j++){\n      if(count < words[j].length){\n    \
    \    max = word;\n        count = words[j].length;\n      }\n    }\n  }\n  return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"\
    string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"\
    game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n\
    \  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmp5t2ds1w1.js:20\n      if(count < words[j].length){\n          \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmp5t2ds1w1.js:20:27)\n    at test (/tmp/tmp5t2ds1w1.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5t2ds1w1.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(words[j].length>max){\n\
    \        max = words[j].length;\n      }\n    }\n  }\n  return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpki_yjg_d.js:17\n      if(words[j].length>max){\n              \
    \    ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpki_yjg_d.js:17:19)\n    at test (/tmp/tmpki_yjg_d.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpki_yjg_d.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i][j] === \"a\"){\n        count++;\n      }\n    }\n\
    \    if (count > max){\n      max = count;\n      word = words[i];\n    }\n  }\n\
    \  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpjg0fohsk.js:34:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpjg0fohsk.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8yhiie66.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8yhiie66.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    words.forEach(word\
    \ => {\n        max = Math.max(max, word.length);\n    });\n    words.forEach(word\
    \ => {\n        word = word.toLowerCase();\n        words.forEach(word => {\n\
    \            word = word.toLowerCase();\n            if (word.length <= max) {\n\
    \                if (word.indexOf(word) === 0) {\n                    max = Math.max(max,\
    \ word.length);\n                }\n            }\n        });\n    });\n    return\
    \ words[words.length - 1];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjbgtr1v9.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjbgtr1v9.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        word = words[i];\n        for(let j\
    \ = 0; j < word.length; j++){\n            if(words[j].length >= max){\n     \
    \           max = words[j].length;\n                word = words[j];\n       \
    \     }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjidfvvfb.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpjidfvvfb.js:17:25)\n    at test (/tmp/tmpjidfvvfb.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjidfvvfb.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            max = Math.max(max, word.charCodeAt(j));\n        }\n   \
    \ }\n    return words[words.indexOf(word)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpadq8dl3c.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpadq8dl3c.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        var count = 0;\n\
    \        for(var j=0; j<word.length; j++){\n            count += word.charCodeAt(j);\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \  }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_ad13ixk.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ad13ixk.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word[j] ==\
    \ word[max]){\n        max++;\n      }\n      else{\n        break;\n      }\n\
    \    }\n  }\n  return words[max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpxbodrerj.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxbodrerj.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        var count = 0;\n        for(var j=0;j<words[i].length;j++){\n\
    \            count += words[i][j].length;\n        }\n        if(count > max){\n\
    \            max = count;\n            word = words[i];\n        }\n    }\n  \
    \  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy_51t72l.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy_51t72l.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        max = Math.max(max, word.length);\n\
    \      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7o0cdnzt.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7o0cdnzt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    words.forEach(word => {\n        let count = word.length\n        if (count\
    \ > maxCount){\n            maxCount = count\n            maxWord = word\n   \
    \     }\n    })\n    return maxWord\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpz8rq3z7m.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz8rq3z7m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                if(word.indexOf(words[j])>max){\n\
    \                    max = word.indexOf(words[j]);\n                }\n      \
    \      }\n        }\n    }\n    return words[max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpikrmtxwy.js:32:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpikrmtxwy.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            if(words[i][j] == word){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n            word = words[i];\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpvde4qp_k.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvde4qp_k.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        var word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(word[j] == word[max]){\n                max++;\n            }\n\
    \        }\n        if(max == word.length){\n            return word;\n      \
    \  }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpssmdr5dk.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpssmdr5dk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            word += words[i][j];\n            if(word.length >= max){\n\
    \                max = word.length;\n                word = words[i];\n      \
    \      }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc33oalnj.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc33oalnj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqjzot8bx.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpqjzot8bx.js:17:25)\n    at test (/tmp/tmpqjzot8bx.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzot8bx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(words[j].length>max){\n                max = words[j].length;\n       \
    \         word = words[j];\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyw4ltjnv.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpyw4ltjnv.js:17:25)\n    at test (/tmp/tmpyw4ltjnv.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyw4ltjnv.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(word.indexOf(words[j])>-1){\n                words[j] = words[j].split(\"\
    \");\n                words[j].sort();\n                for(var k=0;k<words[j].length;k++){\n\
    \                    if(words[j][k] > max){\n                        max = words[j][k];\n\
    \                        word = words[j][k];\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return word;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpp7luolf3.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp7luolf3.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    words.forEach(word => {\n        let count = 0;\n        for(let i = 0; i\
    \ < word.length; i++){\n            count += word.charCodeAt(i);\n        }\n\
    \        if(count > maxCount){\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    });\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpma7z4gad.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpma7z4gad.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgxmlsn58.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgxmlsn58.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(words[j].indexOf(word[j])\
    \ > -1){\n        if(words[j].length > max){\n          max = words[j].length;\n\
    \        }\n      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcx6yz49u.js:17\n      if(words[j].indexOf(word[j]) > -1){\n   \
    \               ^\n\nTypeError: Cannot read properties of undefined (reading 'indexOf')\n\
    \    at find_max (/tmp/tmpcx6yz49u.js:17:19)\n    at test (/tmp/tmpcx6yz49u.js:32:20)\n\
    \    at Object.<anonymous> (/tmp/tmpcx6yz49u.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var count = 0;\n        for(var j=0; j<words[i].length;\
    \ j++){\n            count += words[i][j].length;\n        }\n        if(count\
    \ > max){\n            max = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0n179694.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n179694.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n\
    \      if(words[i].charAt(j) == words[i].charAt(j)){\n        word = \"\";\n \
    \     }\n      else{\n        word += words[i].charAt(j);\n      }\n    }\n  \
    \  if(word.length > max){\n      max = word.length;\n      word = words[i];\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp8d3qvcqa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8d3qvcqa.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        max = Math.max(max, word.length);\n\
    \      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7o0cdnzt.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7o0cdnzt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        max = Math.max(max, word.length);\n\
    \      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7o0cdnzt.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7o0cdnzt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var word = words[i];\n        var count\
    \ = word.length;\n        for(var j=0; j<word.length; j++){\n            count\
    \ += word[j].length;\n        }\n        if(count > max){\n            max = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqwtuye49.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqwtuye49.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.charAt(j) == word.charAt(j)){\n                words[j]\
    \ = \"\";\n            }\n        }\n        for(var j=0; j<words.length; j++){\n\
    \            if(words[j].length == 0){\n                words[j] = word;\n   \
    \         }\n        }\n        for(var j=0; j<words.length; j++){\n         \
    \   if(words[j].length >= max){\n                max = words[j].length;\n    \
    \            word = words[j];\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmptpq0s7uj.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmptpq0s7uj.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            max = Math.max(max, word.charCodeAt(j));\n        }\n    }\n    return\
    \ words[words.indexOf(words[max])];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0kil45sr.js:28:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0kil45sr.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   max = Math.max(max, word.charCodeAt(j));\n        }\n    }\n    return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpk79vog68.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpk79vog68.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            word += words[i][j];\n            if(word.length >= max){\n\
    \                max = word.length;\n                word = words[i];\n      \
    \      }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc33oalnj.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc33oalnj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    word = words[i];\n    for(let j = 0; j < word.length;\
    \ j++){\n      if(word[j] >= max){\n        max = word[j];\n      }\n    }\n \
    \ }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpnbn4zbz5.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnbn4zbz5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var word = words[i];\n        var count\
    \ = word.length;\n        if(count > max){\n            max = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpm8wdjatq.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm8wdjatq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  words.forEach(word\
    \ => {\n    max = Math.max(max, word.length);\n  });\n  words.forEach(word =>\
    \ {\n    word = word.toLowerCase();\n    words.forEach(word => {\n      if(word.length\
    \ == max){\n        if(word.indexOf(word) == 0){\n          word = word.substring(word.length);\n\
    \        }\n      }\n    });\n  });\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpt5c45rbs.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt5c45rbs.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(word[j] == word[max]){\n                max++;\n            }\n\
    \        }\n        if(max > word.length){\n            max = word.length;\n \
    \       }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgs877yqm.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgs877yqm.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.charAt(j) == words[j].charAt(j)){\n        words[j] = \"\
    \";\n      }\n    }\n    if(word.length > max){\n      max = word.length;\n  \
    \  }\n  }\n  return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyt18amsm.js:17\n      if(word.charAt(j) == words[j].charAt(j)){\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'charAt')\n    at find_max (/tmp/tmpyt18amsm.js:17:37)\n\
    \    at test (/tmp/tmpyt18amsm.js:33:20)\n    at Object.<anonymous> (/tmp/tmpyt18amsm.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(words[j].length>max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"\
    ]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"\
    enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    );\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp62v7envg.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmp62v7envg.js:17:25)\n    at test (/tmp/tmp62v7envg.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmp62v7envg.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  words.forEach(word\
    \ => {\n    let count = 0;\n    words.forEach(word => {\n      if(word === word){\n\
    \        count++;\n      }\n    });\n    if(count > max){\n      max = count;\n\
    \      word = word;\n    }\n  });\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpmnjmd_d8.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmnjmd_d8.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.charAt(j) == word.charAt(j)){\n                max++;\n\
    \            }\n        }\n        if(max > word.length){\n            max = word.length;\n\
    \        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpp_10h3sw.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp_10h3sw.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        word = words[i];\n        for(let j\
    \ = 0; j < word.length; j++){\n            if(words[j].length >= max){\n     \
    \           max = words[j].length;\n                word = words[j];\n       \
    \     }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjidfvvfb.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpjidfvvfb.js:17:25)\n    at test (/tmp/tmpjidfvvfb.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjidfvvfb.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            word += words[i][j];\n            for(let k = 0; k < words.length;\
    \ k++){\n                if(words[k].indexOf(word) > -1){\n                  \
    \  if(words[k].length < word.length){\n                        word = words[k];\n\
    \                    }\n                }\n            }\n        }\n        if(word.length\
    \ > max){\n            max = word.length;\n            word = words[i];\n    \
    \    }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'enamgame'\n\n\
    should loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpz4drslop.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz4drslop.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'enamgame',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i].charAt(j) == word){\n        count++;\n      }\n \
    \   }\n    if (count > max){\n      max = count;\n      word = words[i];\n   \
    \ }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpvghe8d7x.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvghe8d7x.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(word.indexOf(words[j])\
    \ == j){\n        max = Math.max(max, word.length);\n      }\n    }\n  }\n  return\
    \ words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpa93j1vo2.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa93j1vo2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            word += words[i][j];\n            if(word.length > max){\n\
    \                max = word.length;\n                word = words[i];\n      \
    \      }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'gamee'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc3fdqdv9.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc3fdqdv9.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'gamee',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        if(words[i].length >= max){\n      \
    \      word = words[i];\n            max = words[i].length;\n        }\n    }\n\
    \    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp5iihr3m6.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5iihr3m6.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(i===0){\n                max = word.length;\n            }\n \
    \           if(word.charCodeAt(j)>max){\n                max = word.charCodeAt(j);\n\
    \            }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpv6tlwb86.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv6tlwb86.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  words.forEach(word\
    \ => {\n    let unique = word.split('').filter((char, i) => {\n      return char\
    \ === word[i]\n    }).length\n    if(unique > max){\n      max = unique;\n   \
    \   word = word;\n    }\n  })\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpw2gey681.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw2gey681.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word[j] > max){\n                max = word[j];\n    \
    \        }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpv1l6mts5.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv1l6mts5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n\
    \      if(words[i].charAt(j) == words[i].charAt(j)){\n        word = \"\";\n \
    \     }\n      else{\n        word += words[i].charAt(j);\n      }\n    }\n  \
    \  if(word.length > max){\n      max = word.length;\n      word = words[i];\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp8d3qvcqa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8d3qvcqa.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        word = words[i];\n        for(let j\
    \ = 0; j < word.length; j++){\n            max = Math.max(max, word.length);\n\
    \        }\n    }\n    for(let i = 0; i < words.length; i++){\n        word =\
    \ words[i];\n        for(let j = 0; j < word.length; j++){\n            max =\
    \ Math.max(max, word.length);\n        }\n    }\n    return words[words.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpy9x0t83m.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy9x0t83m.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    words.forEach((word)\
    \ => {\n        word.length !== max ? max = word.length : word;\n    });\n   \
    \ return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp4ol5c2na.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ol5c2na.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var word = words[i];\n        var count\
    \ = word.length;\n        if(count > max){\n            max = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpm8wdjatq.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm8wdjatq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.indexOf(word)==words.indexOf(max)\
    \ ? words.indexOf(max) : words.indexOf(max)+1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp7nbbiyhp.js:30:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp7nbbiyhp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqjzot8bx.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpqjzot8bx.js:17:25)\n    at test (/tmp/tmpqjzot8bx.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzot8bx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var count = 0;\n        for(var j=0; j<words[i].length;\
    \ j++){\n            count += words[i][j].length;\n        }\n        if(count\
    \ > max){\n            max = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0n179694.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n179694.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        if(word.length>max){\n\
    \            max = word.length;\n        }\n    }\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        if(word.length==max){\n            word = words[i];\n\
    \        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmps5kcpva_.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps5kcpva_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max = Math.max(max,\
    \ word.length);\n            }\n        }\n    }\n    return words[words.indexOf(word)];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2tc_wixf.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2tc_wixf.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  words.forEach(word\
    \ => {\n    let count = word.length\n    if(count > maxCount){\n      maxCount\
    \ = count\n      maxWord = word\n    }\n  })\n  return maxWord\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptm63gufs.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm63gufs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            count += words[i][j].length;\n  \
    \      }\n        if(count > max){\n            max = count;\n            word\
    \ = words[i];\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn2hzkzva.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn2hzkzva.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word[j] ==\
    \ word[max]){\n        max++;\n      }\n    }\n  }\n  return words[max];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0f4kxel9.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0f4kxel9.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxCount = 0;\n    var maxWord = \"\";\n\
    \    for(var i=0; i<words.length; i++){\n        var word = words[i];\n      \
    \  var count = word.length;\n        if(count > maxCount){\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmph6__yjgu.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph6__yjgu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    for (let i = 0; i < words.length; i++){\n        let count = 0;\n       \
    \ for (let j = 0; j < words[i].length; j++){\n            count += words[i][j].length;\n\
    \        }\n        if (count > maxCount){\n            maxCount = count;\n  \
    \          maxWord = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpngm92ve4.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpngm92ve4.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(words[j].length>max){\n                max = words[j].length;\n       \
    \         word = words[j];\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyw4ltjnv.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpyw4ltjnv.js:17:25)\n    at test (/tmp/tmpyw4ltjnv.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyw4ltjnv.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(words[j].length>max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpur9uob1d.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpur9uob1d.js:17:25)\n    at test (/tmp/tmpur9uob1d.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpur9uob1d.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            for(var k=0; k<words[j].length; k++){\n                if(words[j][k]\
    \ > max){\n                    max = words[j][k];\n                    word =\
    \ words[j];\n                }\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpj6ac7nu8.js:17\n            for(var k=0; k<words[j].length; k++){\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'length')\n    at find_max (/tmp/tmpj6ac7nu8.js:17:37)\n\
    \    at test (/tmp/tmpj6ac7nu8.js:33:20)\n    at Object.<anonymous> (/tmp/tmpj6ac7nu8.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqjzot8bx.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpqjzot8bx.js:17:25)\n    at test (/tmp/tmpqjzot8bx.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzot8bx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  for\
    \ (let word of words){\n    let count = word.length\n    if (count > maxCount){\n\
    \      maxCount = count\n      maxWord = word\n    }\n  }\n  return maxWord\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_9w_uzgs.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_9w_uzgs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            count += words[i][j].length;\n  \
    \      }\n        if(count > max){\n            max = count;\n            word\
    \ = words[i];\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn2hzkzva.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn2hzkzva.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        var word = words[i];\n        var count =\
    \ words[i].length;\n        if(count > max){\n            max = count;\n     \
    \       maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1zxar8sp.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1zxar8sp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        if(word.length >= max){\n\
    \            max = word.length;\n        }\n    }\n    for(var i=0; i<words.length;\
    \ i++){\n        word = words[i];\n        if(word.length == max){\n         \
    \   return word;\n        }\n    }\n    return words[0];\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpo3xau7_l.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3xau7_l.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        var word = words[i];\n        var count =\
    \ word.length();\n        if(count > max){\n            max = count;\n       \
    \     word = word;\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpttl6y3rh.js:16\n        var count = word.length();\n          \
    \               ^\n\nTypeError: word.length is not a function\n    at find_max\
    \ (/tmp/tmpttl6y3rh.js:16:26)\n    at test (/tmp/tmpttl6y3rh.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpttl6y3rh.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            word += words[i][j];\n            if(!words.includes(word)){\n\
    \                words.splice(i, 1);\n                words.splice(j, 1);\n  \
    \              j--;\n                i--;\n            }\n        }\n        if(words[i].length\
    \ > max){\n            max = words[i].length;\n            word = words[i];\n\
    \        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp60q4836i.js:15\n        for(let j = 0; j < words[i].length; j++){\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'length')\n    at find_max (/tmp/tmp60q4836i.js:15:37)\n\
    \    at test (/tmp/tmp60q4836i.js:37:20)\n    at Object.<anonymous> (/tmp/tmp60q4836i.js:49:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        if(word.length>max){\n\
    \            max = word.length;\n        }\n    }\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        if(word.length==max){\n            for(var\
    \ j=0;j<word.length;j++){\n                if(word.charAt(j)!=words[i].charAt(j)){\n\
    \                    max = word.length;\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    return words[words.length-1];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbjltdqiz.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbjltdqiz.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        if(word.length\
    \ >= max){\n            max = word.length;\n        }\n    }\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        if(word.length == max){\n\
    \            for(var j=0; j<word.length; j++){\n                if(word.charAt(j)\
    \ == words[i].charAt(j)){\n                    max = word.length;\n          \
    \      }\n            }\n        }\n    }\n    return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbqqf8js8.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbqqf8js8.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            for(var k=0;k<word.length;k++){\n                for(var l=0;l<word.length;l++){\n\
    \                    if(word[j] == word[k] && word[j] == word[l]){\n         \
    \               if(word.length>max){\n                            max = word.length;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpc42sbmln.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc42sbmln.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            for(var k=0;k<word.length;k++){\n                for(var l=0;l<word.length;l++){\n\
    \                    if(word[j] == word[k] && word[j] == word[l]){\n         \
    \               if(word.length>max){\n                            max = word.length;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpc42sbmln.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc42sbmln.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var word = words[i];\n        var count\
    \ = word.length();\n        if(count > max){\n            max = count;\n     \
    \       maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpokfweav0.js:16\n        var count = word.length();\n          \
    \               ^\n\nTypeError: word.length is not a function\n    at find_max\
    \ (/tmp/tmpokfweav0.js:16:26)\n    at test (/tmp/tmpokfweav0.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpokfweav0.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(words[j].length>max){\n\
    \        max = words[j].length;\n      }\n    }\n  }\n  return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpigdrwecd.js:17\n      if(words[j].length>max){\n              \
    \    ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpigdrwecd.js:17:19)\n    at test (/tmp/tmpigdrwecd.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpigdrwecd.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var maxCount = 0;\n  var maxWord = \"\";\n  for(var\
    \ i=0; i<words.length; i++){\n    var word = words[i];\n    var count = word.length;\n\
    \    if(count > maxCount){\n      maxCount = count;\n      maxWord = word;\n \
    \   }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7gdb6t77.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gdb6t77.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max;\n  var word;\n  var counts = {};\n  words.forEach(function(word){\n\
    \    counts[word] = counts[word] || 0;\n    counts[word]++;\n  });\n  max = words[0];\n\
    \  words.forEach(function(word){\n    if(counts[word] > counts[max]){\n      max\
    \ = word;\n    }\n  });\n  return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmpidjw3ku0.js:33:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpidjw3ku0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max;\n  var maxIndex;\n  var maxCount;\n  var\
    \ word;\n  var wordCount;\n  var i;\n  var j;\n  var wordCount;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word;\n  var words;\n\
    \  var word;\n  var words;\n  var word;\n  var words;\n  var word\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp_d83sgqq.js:157\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i].charAt(j) == word){\n        count++;\n      }\n \
    \   }\n    if (count > max){\n      max = count;\n      word = words[i];\n   \
    \ }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpvghe8d7x.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvghe8d7x.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            for(var k=0; k<words[j].length; k++){\n                if(words[j].charAt(k)\
    \ == word.charAt(j)){\n                    if(words[j].length >= max){\n     \
    \                   max = words[j].length;\n                        word = words[j];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return word;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpaioig_kj.js:17\n            for(var k=0; k<words[j].length; k++){\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'length')\n    at find_max (/tmp/tmpaioig_kj.js:17:37)\n\
    \    at test (/tmp/tmpaioig_kj.js:34:20)\n    at Object.<anonymous> (/tmp/tmpaioig_kj.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        if(word.length\
    \ >= max){\n            max = word.length;\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplitkz3bu.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplitkz3bu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var count = 0;\n        for(var j=0; j<words[i].length;\
    \ j++){\n            count += words[i][j].length;\n        }\n        if(count\
    \ > max){\n            max = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0n179694.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n179694.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n\
    \      if(words[i].charAt(j) == words[i].charAt(j)){\n        word = \"\";\n \
    \     }\n      else{\n        word += words[i].charAt(j);\n      }\n    }\n  \
    \  if(word.length > max){\n      max = word.length;\n      word = words[i];\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp8d3qvcqa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8d3qvcqa.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  words.forEach(word\
    \ => {\n    max = Math.max(max, word.length);\n  });\n  words.forEach(word =>\
    \ {\n    word = word.toLowerCase();\n    words.forEach(word => {\n      if(word.length\
    \ == max){\n        if(word.indexOf(word) > 0){\n          word = word.replace(word,\
    \ \"\");\n        }\n      }\n    });\n  });\n  return word;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpdxev6y90.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdxev6y90.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    max = Math.max(max, word.length);\n  }\n  for(var\
    \ i=0; i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.charAt(j) == word.charAt(j)){\n        max = Math.max(max,\
    \ word.length);\n      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgzczk33s.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgzczk33s.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i].charAt(j) == word){\n        count++;\n      }\n \
    \   }\n    if (count > max){\n      max = count;\n      word = words[i];\n   \
    \ }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpvghe8d7x.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvghe8d7x.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(words[j].length\
    \ >= max){\n        max = words[j].length;\n        word = words[j];\n      }\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpapx295cg.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpapx295cg.js:17:19)\n    at test (/tmp/tmpapx295cg.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpapx295cg.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            word += words[i][j];\n            if(word.length >= max){\n\
    \                max = word.length;\n                word = words[i];\n      \
    \      }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpc33oalnj.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc33oalnj.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  words.forEach((word)\
    \ => {\n    let count = word.length\n    if (count > maxCount) {\n      maxCount\
    \ = count\n      maxWord = word\n    }\n  })\n  return maxWord\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbd53_osf.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbd53_osf.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j]) == 0){\n                max = word.length;\n\
    \                break;\n            }\n        }\n    }\n    return word;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpqutvhdtp.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqutvhdtp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    for(let j = 0; j < words[i].length; j++){\n\
    \      if(words[i].charAt(j) == words[i].charAt(j)){\n        word = \"\";\n \
    \     }\n      else{\n        word += words[i].charAt(j);\n      }\n    }\n  \
    \  if(word.length > max){\n      max = word.length;\n      word = words[i];\n\
    \    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp8d3qvcqa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8d3qvcqa.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        if(word.length\
    \ >= max){\n            max = word.length;\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplitkz3bu.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplitkz3bu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        max = Math.max(max, word.length);\n\
    \      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp7o0cdnzt.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7o0cdnzt.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  for\
    \ (let i = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0;\
    \ j < words[i].length; j++){\n      count += words[i][j].length;\n    }\n    if\
    \ (count > maxCount){\n      maxCount = count;\n      maxWord = words[i];\n  \
    \  }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp65p5mzdo.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp65p5mzdo.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(words[j].length>max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpur9uob1d.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpur9uob1d.js:17:25)\n    at test (/tmp/tmpur9uob1d.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpur9uob1d.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i][j] == word){\n        count++;\n      }\n    }\n \
    \   if (count > max){\n      max = count;\n      word = words[i];\n    }\n  }\n\
    \  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpskiyfe0q.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpskiyfe0q.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        var count = 0;\n        for(var j=0;j<words[i].length;j++){\n\
    \            count+=words[i][j].length;\n        }\n        if(count>max){\n \
    \           max = count;\n            word = words[i];\n        }\n    }\n   \
    \ return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpp3cxoz3e.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3cxoz3e.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word[j] ==\
    \ word[max]){\n        max++;\n      }\n    }\n  }\n  return words[max];\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0f4kxel9.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0f4kxel9.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(words[j].length>max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpur9uob1d.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpur9uob1d.js:17:25)\n    at test (/tmp/tmpur9uob1d.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpur9uob1d.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i].charAt(j) == word){\n        count++;\n      }\n \
    \   }\n    if (count > max){\n      max = count;\n      word = words[i];\n   \
    \ }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpvghe8d7x.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvghe8d7x.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      count += words[i][j].length;\n    }\n    if (count > max){\n  \
    \    max = count;\n      word = words[i];\n    }\n  }\n  return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplxyru0h3.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplxyru0h3.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        if(word.length>max){\n\
    \            max = word.length;\n        }\n    }\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        if(word.length==max){\n            for(var\
    \ j=0;j<word.length;j++){\n                if(word.charAt(j)!=words[i].charAt(j)){\n\
    \                    break;\n                }\n            }\n            if(j==word.length){\n\
    \                return word;\n            }\n        }\n    }\n    return \"\"\
    ;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp3igexfd7.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3igexfd7.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(word.indexOf(words[j])>-1){\n                max++;\n        \
    \    }\n        }\n    }\n    return words[words.length-1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp57q9py86.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp57q9py86.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        for(var j=0;j<words[i].length;j++){\n    \
    \        if(words[i].charAt(j)!==word){\n                word+=words[i].charAt(j);\n\
    \                max++;\n            }\n        }\n    }\n    return words[words.length-1];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp9n3qavq3.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9n3qavq3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxCount = 0;\n    var maxWord = \"\";\n\
    \    for(var i=0; i<words.length; i++){\n        var wordCount = words[i].length;\n\
    \        if(wordCount > maxCount){\n            maxCount = wordCount;\n      \
    \      maxWord = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphdix5m5u.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphdix5m5u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let maxWord = \"\";\n    for\
    \ (let i = 0; i < words.length; i++){\n        let word = words[i];\n        let\
    \ chars = word.length;\n        let uniqueChars = 0;\n        for (let j = 0;\
    \ j < words.length; j++){\n            if (words[j] == word){\n              \
    \  continue;\n            }\n            let chars2 = words[j].length;\n     \
    \       if (chars2 > chars){\n                chars = chars2;\n            }\n\
    \            uniqueChars += chars2;\n        }\n        if (uniqueChars > max){\n\
    \            max = uniqueChars;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'of'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmp0mg01s47.js:41:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp0mg01s47.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'of',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    max = Math.max(max, word.length);\n  }\n  for(var\
    \ i=0; i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.charAt(j) == word.charAt(j-1)){\n        max = Math.max(max,\
    \ word.length);\n      }\n    }\n  }\n  return words[words.length-1];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp1h6bordo.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1h6bordo.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxCount = 0;\n    var maxWord = \"\";\n\
    \    for(var i=0;i<words.length;i++){\n        var word = words[i];\n        var\
    \ count = word.length;\n        if(count > maxCount){\n            maxCount =\
    \ count;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpyiqgc0en.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyiqgc0en.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(words[j].length>max){\n\
    \        max = words[j].length;\n      }\n    }\n  }\n  return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpigdrwecd.js:17\n      if(words[j].length>max){\n              \
    \    ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpigdrwecd.js:17:19)\n    at test (/tmp/tmpigdrwecd.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpigdrwecd.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(words[j].length>max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpur9uob1d.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpur9uob1d.js:17:25)\n    at test (/tmp/tmpur9uob1d.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpur9uob1d.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let\
    \ j = 0; j < words[i].length; j++){\n            if(words[i][j] == words[i][j].toUpperCase()){\n\
    \                count++;\n            }\n        }\n        if(count > maxCount){\n\
    \            maxCount = count;\n            maxWord = words[i];\n        }\n \
    \   }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp5h_90_xs.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5h_90_xs.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word[j] ==\
    \ word[max]){\n        max++;\n      }\n      else{\n        break;\n      }\n\
    \    }\n  }\n  return words[max];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'string'\n    at test (/tmp/tmpcxg7b0i9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcxg7b0i9.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var maxCount = 0;\n    var maxWord = \"\";\n\
    \    for(var i=0; i<words.length; i++){\n        var count = words[i].length;\n\
    \        if(count > maxCount){\n            maxCount = count;\n            maxWord\
    \ = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_xdd9qki.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_xdd9qki.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(words[j].length>max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpur9uob1d.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpur9uob1d.js:17:25)\n    at test (/tmp/tmpur9uob1d.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpur9uob1d.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    words.forEach((word) => {\n        let count = word.length\n        if(count\
    \ > maxCount){\n            maxCount = count\n            maxWord = word\n   \
    \     }\n    })\n    return maxWord\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2cdrp0fs.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2cdrp0fs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgxmlsn58.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgxmlsn58.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqjzot8bx.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpqjzot8bx.js:17:25)\n    at test (/tmp/tmpqjzot8bx.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzot8bx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for (let\
    \ i = 0; i < words.length; i++){\n        if (words[i].length > max){\n      \
    \      max = words[i].length;\n            word = words[i];\n        }\n    }\n\
    \    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpbdpjypzg.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbdpjypzg.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    words.forEach(word => {\n        let count = word.length\n        if(count\
    \ > maxCount){\n            maxCount = count\n            maxWord = word\n   \
    \     }\n    })\n    return maxWord\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfddbjkc9.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfddbjkc9.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        word = words[i];\n        for(let j\
    \ = 0; j < word.length; j++){\n            if(words[j].length >= max){\n     \
    \           max = words[j].length;\n                word = words[j];\n       \
    \     }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpjidfvvfb.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpjidfvvfb.js:17:25)\n    at test (/tmp/tmpjidfvvfb.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjidfvvfb.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let maxWord = \"\";\n    words.forEach((word)\
    \ => {\n        let uniqueChars = word.length\n        let charCount = 0;\n  \
    \      words.forEach((word) => {\n            charCount += word.length;\n    \
    \    });\n        if(charCount > uniqueChars){\n            max = charCount;\n\
    \            maxWord = word;\n        }\n    });\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpm_bt_vjq.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_bt_vjq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        if(word.indexOf(words[j])>max){\n          max = word.indexOf(words[j]);\n\
    \        }\n      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplv9qrlyq.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplv9qrlyq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.charCodeAt(j) > max){\n                max = word.charCodeAt(j);\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprrtqxl9f.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprrtqxl9f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            if(words[i].charAt(j) == words[i].charAt(j)){\n         \
    \       word = \"\";\n                break;\n            }\n            word\
    \ += words[i].charAt(j);\n        }\n        if(word.length > max){\n        \
    \    max = word.length;\n            word = words[i];\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp43os71kd.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp43os71kd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   if(words[j].length>max){\n                max = words[j].length;\n       \
    \         word = words[j];\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpyw4ltjnv.js:17\n            if(words[j].length>max){\n        \
    \                ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpyw4ltjnv.js:17:25)\n    at test (/tmp/tmpyw4ltjnv.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpyw4ltjnv.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  words.forEach((word)\
    \ => {\n    let count = word.length\n    if (count > maxCount){\n      maxCount\
    \ = count\n      maxWord = word\n    }\n  })\n  return maxWord\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprkby4yp5.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprkby4yp5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var count = 0;\n        for(var j=0; j<words[i].length;\
    \ j++){\n            count += words[i][j].length;\n        }\n        if(count\
    \ > max){\n            max = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0n179694.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n179694.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  for\
    \ (let i = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0;\
    \ j < words[i].length; j++){\n      count += words[i][j].length;\n    }\n    if\
    \ (count > maxCount){\n      maxCount = count;\n      maxWord = words[i];\n  \
    \  }\n  }\n  return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp65p5mzdo.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp65p5mzdo.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        if(word.indexOf(words[j])>max){\n\
    \          max = word.indexOf(words[j]);\n        }\n      }\n    }\n  }\n  return\
    \ words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjldiv8ke.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjldiv8ke.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let\
    \ j = 0; j < words[i].length; j++){\n            if(words[i][j] == words[i][j].toUpperCase()){\n\
    \                count++;\n            }\n        }\n        if(count > maxCount){\n\
    \            maxCount = count;\n            maxWord = words[i];\n        }\n \
    \   }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp5h_90_xs.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5h_90_xs.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            if(words[i].charAt(j) == words[i].charAt(j)){\n         \
    \       word = \"\";\n            }\n            else{\n                word +=\
    \ words[i].charAt(j);\n            }\n        }\n        if(word.length > max){\n\
    \            max = word.length;\n            word = words[i];\n        }\n   \
    \ }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp26b58nh0.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp26b58nh0.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let maxWord = \"\";\n    for\
    \ (let i = 0; i < words.length; i++){\n        let count = 0;\n        for (let\
    \ j = 0; j < words[i].length; j++){\n            count += words[i][j].length;\n\
    \        }\n        if (count > max){\n            max = count;\n            maxWord\
    \ = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8icz3j0m.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8icz3j0m.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            max = Math.max(max, word.charCodeAt(j));\n        }\n   \
    \ }\n    return words[words.indexOf(word)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpadq8dl3c.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpadq8dl3c.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        for(let j = 0; j < words[i].length;\
    \ j++){\n            if(words[i].charAt(j) == words[i].charAt(j)){\n         \
    \       word = \"\";\n                break;\n            }\n            word\
    \ += words[i].charAt(j);\n        }\n        if(word.length > max){\n        \
    \    max = word.length;\n            word = words[i];\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmp43os71kd.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp43os71kd.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpqlxnb3xu.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpqlxnb3xu.js:17:19)\n    at test (/tmp/tmpqlxnb3xu.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqlxnb3xu.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var word = words[i];\n        var count\
    \ = word.length;\n        if(count > max){\n            max = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpm8wdjatq.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm8wdjatq.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j]) == j){\n                max++;\n\
    \            }\n        }\n    }\n    if(max > 0){\n        return words[words.length-1];\n\
    \    }\n    for(var i=0; i<words.length; i++){\n        word = words[i];\n   \
    \     for(var j=0; j<word.length; j++){\n            if(word.indexOf(words[j])\
    \ == j){\n                max++;\n            }\n        }\n    }\n    return\
    \ words[0];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\"\
    , \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptnntx5id.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptnntx5id.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0; i<words.length;\
    \ i++){\n    word = words[i];\n    for(var j=0; j<word.length; j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        if(word.length>max){\n          max = word.length;\n          word =\
    \ words[j];\n        }\n      }\n    }\n  }\n  return word;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpkwxb2pil.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkwxb2pil.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var maxWord = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var wordCount = 0;\n        for(var j=0;\
    \ j<words[i].length; j++){\n            wordCount += words[i][j].length;\n   \
    \     }\n        if(wordCount > max){\n            max = wordCount;\n        \
    \    maxWord = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn4b3pr2b.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn4b3pr2b.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let maxWord = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            count += words[i][j].length;\n  \
    \      }\n        if(count > max){\n            max = count;\n            maxWord\
    \ = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmphqrfivij.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmphqrfivij.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(words[j].length >= max){\n                max = words[j].length;\n\
    \                word = words[j];\n            }\n        }\n    }\n    return\
    \ word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\",\
    \ \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"enam\"\
    , \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"\
    cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\"\
    );\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"gonna\", \"\
    rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"]),\"b\");\n\
    \  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\");\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpqjzot8bx.js:17\n            if(words[j].length >= max){\n     \
    \                   ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at find_max (/tmp/tmpqjzot8bx.js:17:25)\n    at test (/tmp/tmpqjzot8bx.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqjzot8bx.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   max = Math.max(max, word[j].length);\n        }\n    }\n    for(var i=0;i<words.length;i++){\n\
    \        word = words[i];\n        for(var j=0;j<word.length;j++){\n         \
    \   max = Math.max(max, word[j].length);\n        }\n    }\n    return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8wh7c7qr.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8wh7c7qr.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    word = words[i];\n    for(let j = 0; j < word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb25bkaoj.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpb25bkaoj.js:17:19)\n    at test (/tmp/tmpb25bkaoj.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpb25bkaoj.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(word.indexOf(words[j])>-1){\n                if(word.indexOf(words[j])>max){\n\
    \                    max = word.indexOf(words[j]);\n                }\n      \
    \      }\n        }\n    }\n    return words[max];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'string'\n    at test (/tmp/tmplzrakph0.js:32:10)\n  \
    \  at Object.<anonymous> (/tmp/tmplzrakph0.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for(let i =\
    \ 0; i < words.length; i++){\n    word = words[i];\n    for(let j = 0; j < word.length;\
    \ j++){\n      if(words[j].length >= max){\n        max = words[j].length;\n \
    \     }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb25bkaoj.js:17\n      if(words[j].length >= max){\n           \
    \       ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpb25bkaoj.js:17:19)\n    at test (/tmp/tmpb25bkaoj.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpb25bkaoj.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(words[j].length>max){\n\
    \        max = words[j].length;\n      }\n    }\n  }\n  return word;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpigdrwecd.js:17\n      if(words[j].length>max){\n              \
    \    ^\n\nTypeError: Cannot read properties of undefined (reading 'length')\n\
    \    at find_max (/tmp/tmpigdrwecd.js:17:19)\n    at test (/tmp/tmpigdrwecd.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpigdrwecd.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.6.0\n"
  stdout: ''
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        if(word.length > max){\n\
    \            max = word.length;\n        }\n    }\n    return words[words.length-1];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdjlw52w5.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdjlw52w5.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;\
    \ i<words.length; i++){\n    word = words[i];\n    for(var j=0; j<word.length;\
    \ j++){\n      if(word.indexOf(words[j])>-1){\n        if(word.indexOf(words[j])>max){\n\
    \          max = word.indexOf(words[j]);\n        }\n      }\n    }\n  }\n  return\
    \ words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpjldiv8ke.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjldiv8ke.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    word = words[i];\n    max = word.length\n\
    \    if (max > word.length){\n      max = word.length;\n    }\n  }\n  return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpgyu4iicn.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgyu4iicn.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                max++;\n\
    \            }\n        }\n    }\n    return words[words.length-1];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp8yhiie66.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8yhiie66.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            if(word.indexOf(words[j])>-1){\n                words[j]\
    \ = words[j].substring(0,words[j].length-1);\n            }\n        }\n     \
    \   for(var j=0; j<words.length; j++){\n            if(words[j].length>max){\n\
    \                max = words[j].length;\n                word = words[j];\n  \
    \          }\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpfdd41a6n.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfdd41a6n.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        for(var j=0;j<words[i].length;j++){\n    \
    \        word+=words[i][j];\n        }\n        for(var j=0;j<words[i].length;j++){\n\
    \            for(var k=0;k<word.length;k++){\n                if(words[i][j] ==\
    \ word[k]){\n                    word=word.replace(words[i][j],\"\");\n      \
    \          }\n            }\n        }\n        if(word.length>max){\n       \
    \     max=word.length;\n            word=\"\";\n        }\n    }\n    return word;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpbyh9g3ev.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbyh9g3ev.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let max = 0;\n  let word = \"\";\n  for (let i\
    \ = 0; i < words.length; i++){\n    let count = 0;\n    for (let j = 0; j < words[i].length;\
    \ j++){\n      if (words[i].charAt(j) == word){\n        count++;\n      }\n \
    \   }\n    if (count > max){\n      max = count;\n      word = words[i];\n   \
    \ }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpvghe8d7x.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvghe8d7x.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        word = words[i];\n        var count = 0;\n\
    \        for(var j=0; j<word.length; j++){\n            count += word.charCodeAt(j);\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \  }\n    return words[words.length-1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpzeczsz5q.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzeczsz5q.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word;\n    for(var i=0;\
    \ i<words.length; i++){\n        word = words[i];\n        for(var j=0; j<word.length;\
    \ j++){\n            for(var k=0; k<words[j].length; k++){\n                if(words[j][k]\
    \ > max){\n                    max = words[j][k];\n                    word =\
    \ words[j];\n                }\n            }\n        }\n    }\n    return word;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"\
    string\");\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\"\
    );\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n\
    \  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp69d3o71s.js:17\n            for(var k=0; k<words[j].length; k++){\n\
    \                                    ^\n\nTypeError: Cannot read properties of\
    \ undefined (reading 'length')\n    at find_max (/tmp/tmp69d3o71s.js:17:37)\n\
    \    at test (/tmp/tmp69d3o71s.js:33:20)\n    at Object.<anonymous> (/tmp/tmp69d3o71s.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  words.forEach(word\
    \ => {\n    let count = word.length\n    if (count > maxCount){\n      maxCount\
    \ = count\n      maxWord = word\n    }\n  })\n  return maxWord\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpo7bxt6l_.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo7bxt6l_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word;\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word[j] >\
    \ max){\n        max = word[j];\n      }\n    }\n  }\n  return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpn0adsw8b.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn0adsw8b.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for (let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for (let j =\
    \ 0; j < words[i].length; j++){\n            count += words[i][j].length;\n  \
    \      }\n        if (count > max){\n            max = count;\n            word\
    \ = words[i];\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmprqa1ss8_.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprqa1ss8_.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            count += words[i][j].length;\n  \
    \      }\n        if(count > max){\n            word = words[i];\n           \
    \ max = count;\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpdly6dvvf.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdly6dvvf.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0; i<words.length; i++){\n        var count = 0;\n        for(var j=0; j<words[i].length;\
    \ j++){\n            count += words[i][j].length;\n        }\n        if(count\
    \ > max){\n            max = count;\n            word = words[i];\n        }\n\
    \    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp0n179694.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0n179694.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            if(i===0){\n                max = word.length;\n            }\n \
    \           else if(word[j] === word[i-1]){\n                max++;\n        \
    \    }\n            else{\n                break;\n            }\n        }\n\
    \        if(max > word.length){\n            max = word.length;\n        }\n \
    \   }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"name\"\
    , \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\", \"\
    enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"]),\"\
    abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n'string'\n    at test (/tmp/tmpg2lr5lxw.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg2lr5lxw.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 'string',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  words.forEach(word\
    \ => {\n    let count = word.length\n    if(count > maxCount){\n      maxCount\
    \ = count\n      maxWord = word\n    }\n  })\n  return maxWord\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmptm63gufs.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptm63gufs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let maxCount = 0;\n    let maxWord = \"\";\n\
    \    for(let i = 0; i < words.length; i++){\n        let count = 0;\n        for(let\
    \ j = 0; j < words[i].length; j++){\n            count += words[i][j].length;\n\
    \        }\n        if(count > maxCount){\n            maxCount = count;\n   \
    \         maxWord = words[i];\n        }\n    }\n    return maxWord;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2gbgy164.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2gbgy164.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        if(word.indexOf(words[j])>max){\n          max = word.indexOf(words[j]);\n\
    \        }\n      }\n    }\n  }\n  return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp_lozsm19.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_lozsm19.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    let max = 0;\n    let word = \"\";\n    for(let\
    \ i = 0; i < words.length; i++){\n        let count = 0;\n        for(let j =\
    \ 0; j < words[i].length; j++){\n            count += words[i][j].length;\n  \
    \      }\n        if(count > max){\n            max = count;\n            word\
    \ = words[i];\n        }\n    }\n    return word;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmpn2hzkzva.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn2hzkzva.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  var max = 0;\n  var word = \"\";\n  for(var i=0;i<words.length;i++){\n\
    \    word = words[i];\n    for(var j=0;j<word.length;j++){\n      if(word.indexOf(words[j])>-1){\n\
    \        if(word.indexOf(words[j])>max){\n          max = word.indexOf(words[j]);\n\
    \        }\n      }\n    }\n  }\n  return words[words.length-1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmplv9qrlyq.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplv9qrlyq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748538
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n    var max = 0;\n    var word = \"\";\n    for(var\
    \ i=0;i<words.length;i++){\n        word = words[i];\n        for(var j=0;j<word.length;j++){\n\
    \            for(var k=0;k<word.length;k++){\n                if(word[j] == word[k]){\n\
    \                    word[j] = word[j].toUpperCase();\n                }\n   \
    \         }\n        }\n        var count = 0;\n        for(var j=0;j<word.length;j++){\n\
    \            for(var k=0;k<word.length;k++){\n                if(word[j] == word[k]){\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if(count > max){\n            max = count;\n            word = words[i];\n\
    \        }\n    }\n    return word;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = find_max;\n  assert.deepEqual(candidate([\"\
    name\", \"of\", \"string\"]),\"string\");\n  assert.deepEqual(candidate([\"name\"\
    , \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"aaaaaaa\",\
    \ \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\", \"cba\"\
    ]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\", \"\
    are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'game'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp08j3_1gt.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp08j3_1gt.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'game',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
- exit_code: 1
  program: "//Write a function that accepts an array of strings.\n// The array contains\
    \ different words. Return the word with maximum number\n// of unique characters.\
    \ If multiple strings have maximum number of unique\n// characters, return the\
    \ one which comes first in lexicographical order.\n// >>> find_max([\"name\",\
    \ \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"\
    game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\
    \nfunction find_max(words){\n  let maxCount = 0;\n  let maxWord = \"\";\n  words.forEach(word\
    \ => {\n    let count = word.length\n    if (count > maxCount) {\n      maxCount\
    \ = count\n      maxWord = word\n    }\n  })\n  return maxWord\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_max;\n\
    \  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\");\n \
    \ assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
    , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\"\
    , \"are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"\
    b\"]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"\
    play\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'name'\n\nshould\
    \ loosely deep-equal\n\n'enam'\n    at test (/tmp/tmp2jzabd1h.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2jzabd1h.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'name',\n\
    \  expected: 'enam',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659748539
