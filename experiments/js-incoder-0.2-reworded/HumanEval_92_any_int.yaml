name: HumanEval_92_any_int
language: js
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n\
  // >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
  \ -2.2, 2)\n// false\nfunction any_int(x, y, z){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
  \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
  \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
  \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
  \ 4, 7),false);\n}\n\ntest();"
completions: ["\tif(x == y || x == z){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}\n}\n", "\tlet sum = 0;\n\tlet num1 = Number(x);\n\tlet num2 = Number(y);\n\
    \tlet num3 = Number(z);\n\t\n\tif(num1 === num2 && num1 === num3){\n\t\treturn\
    \ true;\n\t}\n\t\n\tif(!Number.isInteger(num1) || !Number.isInteger(num2) || !Number.isInteger(num3)){\n\
    \t\treturn false;\n\t}\n\t\n\tsum = num1 + num2 + num3;\n\t\n\tif(sum === num1\
    \ || sum === num2 || sum === num3){\n\t\treturn true;\n\t}\n\t\n\treturn false;\n\
    }\n", "  if(typeof x === 'number' && typeof y === 'number' && typeof z === 'number'){\n\
    \    return ((x + y + z) === (x + y) || x === y || x === z || y === z);\n  }\n\
    \  return false;\n}\n", "  if(typeof x !== 'number' || typeof y !== 'number' ||\
    \ typeof z !== 'number'){\n    return false;\n  }\n  if(x === y || x === z){\n\
    \    return true;\n  }\n  if(x < y && x < z){\n    return true;\n  }\n  if(y <\
    \ x && y < z){\n    return true;\n  }\n  if(z < x && z < y){\n    return true;\n\
    \  }\n  return false;\n}\n", "  if(typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number'){\n    return false;\n  }\n  if(x === y){\n    return\
    \ true;\n  }\n  if(x === z){\n    return true;\n  }\n  if(y === z){\n    return\
    \ true;\n  }\n  if(x === 0 || y === 0 || z === 0){\n    return false;\n  }\n \
    \ if(x < y && y < z){\n    return true;\n  }\n  if(x < z && z < y){\n    return\
    \ true;\n  }\n  if(y < x && x < z){\n    return true;\n  }\n  if(y < z && z <\
    \ x){\n    return true;\n  }\n  return false;\n}\n", "    var sum = 0;\n    for(var\
    \ i=0; i<x.length; i++){\n        sum += x[i];\n    }\n    for(var i=0; i<y.length;\
    \ i++){\n        sum += y[i];\n    }\n    for(var i=0; i<z.length; i++){\n   \
    \     sum += z[i];\n    }\n    return sum == (x+y+z);\n}\n", "  if(typeof x ===\
    \ 'number' && typeof y === 'number' && typeof z === 'number'){\n    return ((x\
    \ + y + z) === (x + y));\n  }\n  return false;\n}\n", "    var sum = 0;\n    for(var\
    \ i = 0; i<arguments.length; i++){\n        sum += arguments[i];\n    }\n    return\
    \ sum == x || sum == y || sum == z;\n}\n", "\tx = Number(x);\n\ty = Number(y);\n\
    \tz = Number(z);\n\t\n\tif (isNaN(x) || isNaN(y) || isNaN(z)){\n\t\treturn false;\n\
    \t}\n\t\n\tif (x === Infinity || y === Infinity || z === Infinity){\n\t\treturn\
    \ false;\n\t}\n\t\n\tif (x === -Infinity || y === -Infinity || z === -Infinity){\n\
    \t\treturn false;\n\t}\n\t\n\treturn (x === y || x === z || y === z);\n}\n", " \
    \ if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n\
    \    return false;\n  }\n  if(x === y || x === z){\n    return true;\n  }\n  if(x\
    \ > y && x > z){\n    return true;\n  }\n  if(y > x && y > z){\n    return true;\n\
    \  }\n  if(z > x && z > y){\n    return true;\n  }\n  return false;\n}\n", "\t\
    let sum = 0;\n\tfor (let i = 0; i < x.length; i++){\n\t\tsum += x[i];\n\t}\n\t\
    for (let i = 0; i < y.length; i++){\n\t\tsum += y[i];\n\t}\n\tfor (let i = 0;\
    \ i < z.length; i++){\n\t\tsum += z[i];\n\t}\n\treturn (sum === (x[0] + y[0] +\
    \ z[0]));\n}\n", "    var sum = 0;\n    for(var i = 0; i < x.length; i++){\n \
    \       sum += x[i];\n    }\n    for(var i = 0; i < y.length; i++){\n        sum\
    \ += y[i];\n    }\n    for(var i = 0; i < z.length; i++){\n        sum += z[i];\n\
    \    }\n    return sum === (x[0] + y[0] + z[0]);\n}\n", "  if(typeof x === 'number'\
    \ && typeof y === 'number' && typeof z === 'number'){\n    return ((x + y + z)\
    \ === (x + y) || x === y || x === z || y === z);\n  }\n  return false;\n}\n",
  "\tif (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n\
    \t\treturn false;\n\t}\n\tif (x === y || x === z){\n\t\treturn true;\n\t}\n\t\
    if (x === 0 || y === 0 || z === 0){\n\t\treturn false;\n\t}\n\treturn (x + y +\
    \ z === 0);\n}\n", "    if (x === y || x === z){\n        return true;\n    }\n\
    \    if (x === null || x === undefined){\n        return false;\n    }\n    if\
    \ (y === null || y === undefined){\n        return false;\n    }\n    if (z ===\
    \ null || z === undefined){\n        return false;\n    }\n    if (x.constructor\
    \ !== Number){\n        return false;\n    }\n    if (y.constructor !== Number){\n\
    \        return false;\n    }\n    if (z.constructor !== Number){\n        return\
    \ false;\n    }\n    if (x.constructor === Number){\n        if (x.toFixed(0)\
    \ === y.toFixed(0) || x.toFixed(0) === z.toFixed(0)){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    var sum = 0;\n    for(var i=0;\
    \ i<x.length; i++){\n        sum += x[i];\n    }\n    for(var i=0; i<y.length;\
    \ i++){\n        sum += y[i];\n    }\n    for(var i=0; i<z.length; i++){\n   \
    \     sum += z[i];\n    }\n    return sum == (x+y+z);\n}\n", "  var sum = 0;\n\
    \  for(var i=0; i<x.length; i++){\n    sum += x[i];\n  }\n  for(var i=0; i<y.length;\
    \ i++){\n    sum += y[i];\n  }\n  for(var i=0; i<z.length; i++){\n    sum += z[i];\n\
    \  }\n  return sum == (x+y+z);\n}\n", "    var sum = 0;\n    for(var i = 0; i\
    \ < x.length; i++){\n        sum += x[i];\n    }\n    for(var i = 0; i < y.length;\
    \ i++){\n        sum += y[i];\n    }\n    for(var i = 0; i < z.length; i++){\n\
    \        sum += z[i];\n    }\n    return sum == x || sum == y || sum == z;\n}\n",
  "  if(typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number'){\n\
    \    return false;\n  }\n  if(x === y || x === z){\n    return true;\n  }\n  if(x\
    \ > y && x > z){\n    return true;\n  }\n  if(y > x && y > z){\n    return true;\n\
    \  }\n  if(z > x && z > y){\n    return true;\n  }\n  return false;\n}\n", " \
    \   var sum = 0;\n    for(var i=0; i<x.length; i++){\n        sum += x[i];\n \
    \   }\n    for(var i=0; i<y.length; i++){\n        sum += y[i];\n    }\n    for(var\
    \ i=0; i<z.length; i++){\n        sum += z[i];\n    }\n    return (sum === 0 ||\
    \ sum === x.length + y.length + z.length);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
