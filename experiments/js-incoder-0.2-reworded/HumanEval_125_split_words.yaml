name: HumanEval_125_split_words
language: js
prompt: "//Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
  \ commas exists you should return the number of lower-case letters with odd order\
  \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
  // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
  Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n//\
  \ 3\nfunction split_words(txt){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
  world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
  ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
  \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\", \"\
  !\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
  aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
  \"),0);\n}\n\ntest();"
completions: ["\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n", "\tvar words\
    \ = txt.split(\" \");\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tvar letters = word.split('');\n\t\tvar count = 0;\n\
    \t\tfor(var j=0;j<letters.length;j++){\n\t\t\tcount += letters[j].charCodeAt()\
    \ - ord('a');\n\t\t}\n\t\tresult.push(count);\n\t}\n\treturn result;\n}\n", "\t\
    var words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\t\twords[i]\
    \ = words[i].split(\",\");\n\t}\n\treturn words;\n}\n", "\tvar words = txt.split(\"\
    \ \");\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length\
    \ == 0){\n\t\t\twords[i] = \"\";\n\t\t}\n\t\telse if(word.length == 1){\n\t\t\t\
    words[i] = word;\n\t\t}\n\t\telse if(word.length > 1){\n\t\t\twords[i] = word;\n\
    \t\t}\n\t}\n\treturn words;\n}\n", "\tvar words = txt.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word.length){\n\
    \t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(/\\\
    s+/);\n\tfor(var i=0;i<words.length;i++){\n\t\tif(words[i].length===0){\n\t\t\t\
    words[i]=words[i].split(',');\n\t\t}\n\t}\n\treturn words;\n}\n", "\tvar words\
    \ = txt.split(\" \");\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(word.length){\n\t\t\tresult.push(word);\n\t\t\
    }else{\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n", "  var words\
    \ = txt.split(\" \");\n  for(var i=0;i<words.length;i++){\n    if(words[i].length>0){\n\
    \      words[i] = words[i].split(\",\");\n    }\n  }\n  return words;\n}\n", "\t\
    var words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\t\tif(words[i].length>0){\n\
    \t\t\twords[i] = words[i].split(\",\");\n\t\t}\n\t}\n\treturn words;\n}\n", "\t\
    var words = txt.split(/\\s+/);\n\tfor(var i=0;i<words.length;i++){\n\t\twords[i]\
    \ = words[i].trim();\n\t}\n\treturn words;\n}\n", "\tvar words = txt.split(\"\
    \ \");\n\tvar result = [];\n\tvar len = words.length;\n\tfor(var i=0; i<len; i++){\n\
    \t\tvar word = words[i];\n\t\tif(word.length){\n\t\t\tresult.push(word);\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "  var words = txt.match(/\\w+/g);\n  if(words\
    \ === null){\n    return words;\n  }\n  else{\n    return words;\n  }\n}\n", "\t\
    var words = txt.split(\" \");\n\tvar result = [];\n\tvar len = words.length;\n\
    \tvar i = 0;\n\twhile(i < len){\n\t\tvar word = words[i];\n\t\tif(word){\n\t\t\
    \tresult.push(word);\n\t\t\ti++;\n\t\t}else{\n\t\t\tresult.push(words.length);\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(/\\\
    s+/);\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\t\tvar word =\
    \ words[i];\n\t\tif(word){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\t\
    \tif(words[i].length>0){\n\t\t\twords[i] = words[i].split(\",\");\n\t\t}\n\t}\n\
    \treturn words;\n}\n", "  var words = txt.split(/\\s+/);\n  if(words.length ==\
    \ 0){\n    return words;\n  }\n  if(words.length == 1){\n    return words;\n \
    \ }\n  if(words.length == 2){\n    return words;\n  }\n  var letters = [];\n \
    \ var letters_count = words[0].length;\n  for(var i = 1; i < words.length; i++){\n\
    \    letters_count = words[i].length;\n    if(letters_count > letters.length){\n\
    \      letters = words[i];\n    }\n  }\n  return letters;\n}\n", "\tvar words\
    \ = txt.split(/\\s+/);\n\tvar result = [];\n\tfor(var i=0;i<words.length;i++){\n\
    \t\tvar word = words[i];\n\t\tif(word){\n\t\t\tresult.push(word);\n\t\t}\n\t}\n\
    \treturn result;\n}\n", "\tvar words = txt.split(/\\s+/);\n\tvar result = [];\n\
    \tfor(var i=0;i<words.length;i++){\n\t\tvar word = words[i];\n\t\tif(word){\n\t\
    \t\tresult.push(word);\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar words = txt.split(/\\\
    s+/);\n\tfor(var i=0;i<words.length;i++){\n\t\twords[i] = words[i].split(',');\n\
    \t}\n\treturn words;\n}\n", "\tvar words = txt.split(\" \");\n\tfor(var i=0;i<words.length;i++){\n\
    \t\twords[i] = words[i].split(\",\");\n\t}\n\treturn words;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
