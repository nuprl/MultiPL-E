name: HumanEval_75_is_multiply_prime
language: js
prompt: "//Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  function is_multiply_prime(a){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n  assert.deepEqual(candidate(30),true);\n\
  \  assert.deepEqual(candidate(8),true);\n  assert.deepEqual(candidate(10),false);\n\
  \  assert.deepEqual(candidate(125),true);\n  assert.deepEqual(candidate(105),true);\n\
  \  assert.deepEqual(candidate(126),false);\n  assert.deepEqual(candidate(729),false);\n\
  \  assert.deepEqual(candidate(891),false);\n  assert.deepEqual(candidate(1001),true);\n\
  }\n\ntest();"
completions: ["  for(var i = 2; i < a; i++){\n    if(a % i === 0){\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  if(a<100){\n    for(var i=2;i<=Math.sqrt(a);i++){\n\
    \      if(a%i==0){\n        return false;\n      }\n    }\n    return true;\n\
    \  }\n  return false;\n}\n", "\tfor(var i=2;i<=Math.sqrt(a);i++){\n\t\tif(a%i==0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  if(a<100){\n    for(var\
    \ i=2;i<=Math.sqrt(a);i++){\n      if(a%i==0){\n        return false;\n      }\n\
    \    }\n    return true;\n  }\n  return false;\n}\n", "    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\
    \    var b = Math.floor(Math.sqrt(a));\n    var c = a % b;\n    var d = primes[b];\n\
    \    var e = 0;\n    for(var i = 0; i < primes.length; i++){\n        e += primes[i];\n\
    \        if(c % e == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  if(a<100){\n    for(var i=2;i<=Math.sqrt(a);i++){\n      if(a%i==0){\n\
    \        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\n", "    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    var primes_length = primes.length;\n    var result = false;\n    for(var\
    \ i = 0; i<primes_length; i++){\n        if(a%primes[i] == 0){\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\n", " \
    \ for(var i = 2; i < a; i++){\n    if(a % i === 0){\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n", "  if(a<100){\n    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    var flag = true;\n    for(var i=0;i<primes.length;i++){\n      if(a%primes[i]==0){\n\
    \        flag = false;\n        break;\n      }\n    }\n    return flag;\n  }\n\
    \  return false;\n}\n", "  for(var i = 2; i < a; i++){\n    if(a % i === 0){\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "  for(var i = 2; i <\
    \ a; i++){\n    if(a % i === 0){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  if(a<100){\n    for(var i=2;i<=Math.sqrt(a);i++){\n      if(a%i==0){\n\
    \        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\n", "  if(a<100){\n    for(var i=2;i<=Math.sqrt(a);i++){\n      if(a%i==0){\n\
    \        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\n", "    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n\
    \    var primes_length = primes.length;\n    var result = false;\n    for(var\
    \ i = 0; i < primes_length; i++){\n        if(a%primes[i] == 0){\n           \
    \ result = true;\n            break;\n        }\n    }\n    return result;\n}\n",
  "    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    var primes_length = primes.length;\n    var is_multiply_prime = true;\n \
    \   for(var i = 0; i < primes_length; i++){\n        if(a%primes[i] == 0){\n \
    \           is_multiply_prime = false;\n            break;\n        }\n    }\n\
    \    return is_multiply_prime;\n}\n", "  for(var i=2; i<=a; i++){\n    if(is_prime(i)\
    \ && is_prime(a-i) && is_prime(a+i)){\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n", "    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    var primes_length = primes.length;\n    var counter = 0;\n    for(var i=0;i<primes_length;i++){\n\
    \        if(a%primes[i]==0){\n            counter++;\n        }\n    }\n    return\
    \ counter<3;\n}\n", "\tvar b = Math.sqrt(a);\n\tvar c = Math.floor(Math.sqrt(a));\n\
    \tfor(var i = 0; i < c; i++){\n\t\tif(b % i == 0){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n", "    for(var i = 2; i < a; i++){\n        if(a%i==0){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    for(var\
    \ i = 2; i < a; i++){\n        if(a%i === 0){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
