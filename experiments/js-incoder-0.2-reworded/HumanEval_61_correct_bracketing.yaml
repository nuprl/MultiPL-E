name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["\tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets\
    \ = brackets.match(/\\)/g);\n\tvar all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \t\n\tfor(var i = 0; i < all_opening_brackets.length; i++){\n\t\tif(all_opening_brackets[i]\
    \ != all_opening_brackets[all_opening_brackets.length - 1])\n\t\t\treturn false;\n\
    \t}\n\t\n\treturn true;\n}\n", "\tvar opening_brackets = brackets.split(\"\");\n\
    \tvar closing_brackets = [];\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\
    \t\tclosing_brackets.push(opening_brackets.slice(i).reverse().join(\"\"));\n\t\
    }\n\treturn closing_brackets.join(\",\") === brackets;\n}\n", "  var opening_brackets\
    \ = brackets.match(/\\(/g);\n  var closing_brackets = brackets.match(/\\)/g);\n\
    \  if(opening_brackets && closing_brackets){\n    for(var i=0; i<opening_brackets.length;\
    \ i++){\n      if(opening_brackets[i] != closing_brackets[i]){\n        return\
    \ false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n", "    var\
    \ opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets = brackets.match(/\\\
    )/g);\n    var correct_bracketing = false;\n    for(var i = 0; i < opening_brackets.length;\
    \ i++){\n        if(opening_brackets[i] === closing_brackets[i]){\n          \
    \  correct_bracketing = true;\n        }\n    }\n    return correct_bracketing;\n\
    }\n", "\tvar opening_brackets = brackets.split(\"\");\n\tvar correct_bracketing\
    \ = true;\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(opening_brackets[i]\
    \ === \"(\"){\n\t\t\tfor(var j = i + 1; j < opening_brackets.length; j++){\n\t\
    \t\t\tif(opening_brackets[j] === \")\"){\n\t\t\t\t\tcorrect_bracketing = false;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n\
    }\n", "    var opening_brackets = brackets.match(/\\(/g);\n    var closing_brackets\
    \ = brackets.match(/\\)/g);\n    var all_opening_brackets = opening_brackets.concat(closing_brackets);\n\
    \    return all_opening_brackets.every(function(opening_bracket){\n        return\
    \ closing_brackets.indexOf(opening_bracket) == -1;\n    });\n}\n", "    var opening_brackets\
    \ = brackets.match(/\\(/g);\n    var closing_brackets = brackets.match(/\\)/g);\n\
    \    var all_opening_brackets = opening_brackets.length;\n    var all_closing_brackets\
    \ = closing_brackets.length;\n    var all_opening_brackets_are_closed = all_opening_brackets\
    \ == all_closing_brackets;\n    var all_opening_brackets_are_equal = all_opening_brackets\
    \ == opening_brackets.length;\n    return all_opening_brackets_are_equal && all_opening_brackets_are_closed;\n\
    }\n", "\tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets\
    \ = brackets.match(/\\)/g);\n\tvar are_opening_brackets_correct = opening_brackets\
    \ !== null && opening_brackets.length === brackets.length - 1;\n\tvar are_closing_brackets_correct\
    \ = closing_brackets !== null && closing_brackets.length === brackets.length -\
    \ 1;\n\treturn are_opening_brackets_correct && are_closing_brackets_correct;\n\
    }\n", "\tbrackets = brackets.toLowerCase();\n\tvar brackets_open = brackets.match(/\\\
    (/g);\n\tvar brackets_close = brackets.match(/\\)/g);\n\tvar brackets_open_string\
    \ = \"\";\n\tvar brackets_close_string = \"\";\n\tif(brackets_open){\n\t\tbrackets_open_string\
    \ = brackets_open[0];\n\t}\n\tif(brackets_close){\n\t\tbrackets_close_string =\
    \ brackets_close[0];\n\t}\n\tif(brackets_open_string == \"\" || brackets_close_string\
    \ == \"\"){\n\t\treturn false;\n\t}\n\tif(brackets_open_string != brackets_close_string){\n\
    \t\treturn false;\n\t}\n\treturn true;\n}\n", "\tbrackets = brackets.toLowerCase();\n\
    \tbrackets = brackets.split(\"\");\n\tbrackets = brackets.filter(function(b){\n\
    \t\treturn b != \")\";\n\t});\n\tbrackets = brackets.filter(function(b){\n\t\t\
    return b != \"(\";\n\t});\n\treturn brackets.every(function(b){\n\t\treturn brackets.indexOf(b)\
    \ != brackets.lastIndexOf(b);\n\t});\n}\n", "\tbrackets = brackets.split(\"\"\
    );\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"(\"\
    ){\n\t\t\tif(brackets[i+1] !== \"(\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t\tif(brackets[i] === \"[\"){\n\t\t\tif(brackets[i+1] !== \"[\"){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(brackets[i] === \"{\"){\n\t\t\tif(brackets[i+1]\
    \ !== \"{\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n",
  "\tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets = brackets.split(\"\
    )\");\n\t\n\tfor(var i = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets.indexOf(opening_brackets[i])\
    \ == -1){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "  var opening_brackets\
    \ = brackets.split('(');\n  var closing_brackets = brackets.split(')');\n  for(var\
    \ i = 0; i < opening_brackets.length; i++){\n    if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "\tbrackets = brackets.toLowerCase();\n\tvar opening_brackets = brackets.match(/\\\
    (/g);\n\tvar closing_brackets = brackets.match(/\\)/g);\n\tvar all_opening_brackets\
    \ = opening_brackets ? opening_brackets.length : 0;\n\tvar all_closing_brackets\
    \ = closing_brackets ? closing_brackets.length : 0;\n\tvar all_opening_brackets_are_closing\
    \ = all_opening_brackets == all_closing_brackets;\n\treturn all_opening_brackets_are_closing;\n\
    }\n", "    var opening_brackets = brackets.split(\"(\");\n    var closing_brackets\
    \ = brackets.split(\")\");\n    var correct_bracketing = true;\n    for(var i\
    \ = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n", "\t\
    brackets = brackets.toLowerCase();\n\tvar brackets_array = brackets.split(\"\"\
    );\n\tvar correct_bracketing = true;\n\tfor (var i = 0; i < brackets_array.length;\
    \ i++){\n\t\tif (brackets_array[i] === \"(\"){\n\t\t\tif (brackets_array[i+1]\
    \ !== \"(\"){\n\t\t\t\tcorrect_bracketing = false;\n\t\t\t}\n\t\t}\n\t\tif (brackets_array[i]\
    \ === \")\"){\n\t\t\tif (brackets_array[i-1] !== \"(\"){\n\t\t\t\tcorrect_bracketing\
    \ = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n", "    var\
    \ opening_brackets = brackets.split(\"\");\n    var closing_brackets = [];\n \
    \   for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i]\
    \ == \"(\"){\n            closing_brackets.push(\")\");\n        }\n        else\
    \ if(opening_brackets[i] == \")\"){\n            closing_brackets.push(\"(\");\n\
    \        }\n    }\n    return closing_brackets.length == opening_brackets.length;\n\
    }\n", "\tvar opening_brackets = brackets.split(\"(\");\n\tvar closing_brackets\
    \ = brackets.split(\")\");\n\tvar correct_bracketing = true;\n\t\n\tfor(var i\
    \ = 0; i < opening_brackets.length; i++){\n\t\tif(closing_brackets.indexOf(opening_brackets[i])\
    \ == -1){\n\t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\t\n\treturn correct_bracketing;\n\
    }\n", "\tvar opening_brackets = brackets.match(/\\(/g);\n\tvar closing_brackets\
    \ = brackets.match(/\\)/g);\n\t\n\tfor(var i = 0; i < opening_brackets.length;\
    \ i++){\n\t\tif(closing_brackets[i] != opening_brackets[i]){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\t\n\treturn true;\n}\n", "    var opening_brackets = brackets.split(\"\
    (\");\n    var closing_brackets = brackets.split(\")\");\n    var correct_bracketing\
    \ = true;\n    for(var i = 0; i < opening_brackets.length; i++){\n        if(opening_brackets[i].length\
    \ != closing_brackets[i].length){\n            correct_bracketing = false;\n \
    \           break;\n        }\n    }\n    return correct_bracketing;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
