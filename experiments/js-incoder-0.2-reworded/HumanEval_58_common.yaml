name: HumanEval_58_common
language: js
prompt: "//Return sorted unique common elements for two arrays.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
  \ 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2,\
  \ 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["  var result = [];\n  for(var i = 0, len = l1.length; i < len; i++){\n\
    \    if(l2.indexOf(l1[i]) === -1){\n      result.push(l1[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  var result = [];\n  while(l1.length > 0 && l2.length > 0){\n\
    \    if(l1[0] === l2[0]){\n      result.push(l1[0]);\n      l1.shift();\n    \
    \  l2.shift();\n    }else if(l1[0] < l2[0]){\n      result.push(l1[0]);\n    \
    \  l1.shift();\n    }else{\n      result.push(l2[0]);\n      l2.shift();\n   \
    \ }\n  }\n  return result;\n}\n", "  var result = [];\n  for(var i=0; i<l1.length;\
    \ i++){\n    for(var j=0; j<l2.length; j++){\n      if(l1[i] === l2[j]){\n   \
    \     result.push(l1[i]);\n        break;\n      }\n    }\n  }\n  return result;\n\
    }\n", "  var out = [];\n  for(var i=0; i<l1.length; i++){\n    for(var j=0; j<l2.length;\
    \ j++){\n      if(l1[i] === l2[j]){\n        out.push(l1[i]);\n        break;\n\
    \      }\n    }\n  }\n  return out;\n}\n", "    var result = [];\n    for(var\
    \ i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n \
    \           if(l1[i] === l2[j]){\n                result.push(l1[i]);\n      \
    \          break;\n            }\n        }\n    }\n    return result;\n}\n",
  "    var result = [];\n    var lLen = l1.length;\n    var l2 = l2.length;\n    var\
    \ i = 0;\n    while(i<lLen && i<l2){\n        if(l1[i]===l2[i]){\n           \
    \ result.push(l1[i]);\n            i++;\n        }else{\n            break;\n\
    \        }\n    }\n    return result;\n}\n", "  var result = [];\n  while(l1.length\
    \ > 0 && l2.length > 0){\n    if(l1[0] === l2[0]){\n      result.push(l1[0]);\n\
    \      l1.shift();\n      l2.shift();\n    }else if(l1[0] < l2[0]){\n      l1.shift();\n\
    \    }else{\n      l2.shift();\n    }\n  }\n  return result;\n}\n", "    var result\
    \ = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = Math.min(l1.length,\
    \ l2.length);\n    while(i < l1 || j < l2){\n        if(l1 && l1[i] === l2[j]){\n\
    \            result.push(l1[i]);\n            i++;\n            j++;\n       \
    \ }else if(l2 && l2[j] === l1[i]){\n            result.push(l2[j]);\n        \
    \    j++;\n        }else{\n            i++;\n            j++;\n            k++;\n\
    \        }\n    }\n    return result;\n}\n", "  var out = [];\n  while(l1.length\
    \ > 0 && l2.length > 0){\n    if(l1[0] === l2[0]){\n      out.push(l1[0]);\n \
    \     l1.splice(0, 1);\n      l2.splice(0, 1);\n    }else if(l1[0] < l2[0]){\n\
    \      l1.splice(0, 1);\n    }else{\n      l2.splice(0, 1);\n    }\n  }\n  return\
    \ out;\n}\n", "    var result = [];\n    var lLen1 = l1.length;\n    var lLen2\
    \ = l2.length;\n    var lIdx = 0;\n    var l2Idx = 0;\n    while (lIdx < lLen1\
    \ && l2Idx < lLen2){\n        if (l1[lIdx] === l2[l2Idx]){\n            result.push(l1[lIdx]);\n\
    \            lIdx += 1;\n            l2Idx += 1;\n        }else{\n           \
    \ lIdx += 1;\n        }\n    }\n    return result.concat(l1.slice(lIdx)).concat(l2.slice(l2Idx));\n\
    }\n", "    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var l = 0;\n    var n1 = l1.length;\n    var n2 = l2.length;\n    while(i<n1\
    \ && j<n2){\n        if(l1[i]===l2[j]){\n            result.push(l1[i]);\n   \
    \         i++;\n            j++;\n        }else if(l1[i]<l2[j]){\n           \
    \ j++;\n        }else{\n            i++;\n        }\n    }\n    while(i<n1){\n\
    \        result.push(l1[i]);\n        i++;\n    }\n    while(j<n2){\n        result.push(l2[j]);\n\
    \        j++;\n    }\n    return result;\n}\n", "  var lc = l1.length;\n  var\
    \ lp = l2.length;\n  var result = [];\n  while(lc){\n    if(lc === lp){\n    \
    \  result.push(l1[lc-1]);\n      lc--;\n      lp--;\n    }else{\n      if(lc >\
    \ lp){\n        lc--;\n      }else{\n        lp--;\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  var l = [], i = 0, j = 0;\n  while(l1.length > i){\n    if(l2.length\
    \ > j){\n      l.push(l1[i]);\n      if(l1[i] === l2[j]){\n        l1.splice(i--,\
    \ 1);\n        l2.splice(j--, 1);\n      }\n    }else{\n      l.push(l1[i]);\n\
    \      l1.splice(i--, 1);\n    }\n  }\n  while(l2.length > j){\n    l.push(l2[j]);\n\
    \    l2.splice(j--, 1);\n  }\n  return l;\n}\n", "    var result = [];\n    var\
    \ i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var len1 = l1.length;\n\
    \    var len2 = l2.length;\n    while (i < len1 && j < len2){\n        if (l1[i]\
    \ === l2[j]){\n            result.push(l1[i]);\n            i++;\n           \
    \ j++;\n        }\n        else if (l1[i] < l2[j]){\n            i++;\n      \
    \  }\n        else{\n            j++;\n        }\n    }\n    while (i < len1){\n\
    \        result.push(l1[i]);\n        i++;\n    }\n    while (j < len2){\n   \
    \     result.push(l2[j]);\n        j++;\n    }\n    return result;\n}\n", "  \
    \  var result = [];\n    var i = 0, j = 0;\n    while(i<l1.length && j<l2.length){\n\
    \        if(l1[i]===l2[j]){\n            result.push(l1[i]);\n            i++;\n\
    \            j++;\n        }else if(l1[i]<l2[j]){\n            i++;\n        }else{\n\
    \            j++;\n        }\n    }\n    return result;\n}\n", "    var out =\
    \ [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = l1.length;\n\
    \    var m = l2.length;\n    while(i < n && j < m){\n        if(l1[i] === l2[j]){\n\
    \            out.push(l1[i]);\n            i++;\n            j++;\n        }\n\
    \        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n    return out;\n}\n", "    var result =\
    \ [];\n    var i = 0;\n    var j = 0;\n    while(i<l1.length && j<l2.length){\n\
    \        if(l1[i]===l2[j]){\n            result.push(l1[i]);\n            i++;\n\
    \            j++;\n        }\n        else if(l1[i]<l2[j]){\n            i++;\n\
    \        }\n        else{\n            j++;\n        }\n    }\n    return result;\n\
    }\n", "    var out = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n   \
    \ var l;\n    while(i<l1.length && j<l2.length){\n        if(l1[i]===l2[j]){\n\
    \            out.push(l1[i]);\n            i++;\n            j++;\n        }else\
    \ if(l1[i]<l2[j]){\n            k++;\n        }else{\n            k--;\n     \
    \   }\n    }\n    while(i<l1.length){\n        out.push(l1[i]);\n        i++;\n\
    \    }\n    while(j<l2.length){\n        out.push(l2[j]);\n        j++;\n    }\n\
    \    return out;\n}\n", "    var out = [];\n    var lLen1 = l1.length;\n    var\
    \ lLen2 = l2.length;\n    var l1, l2, i;\n    for(i = 0; i < lLen1; i++){\n  \
    \      l1 = l1[i];\n        for(i = 0; i < lLen2; i++){\n            l2 = l2[i];\n\
    \            if(l1 === l2){\n                out.push(l1);\n                break;\n\
    \            }\n        }\n    }\n    return out;\n}\n", "    var result = [];\n\
    \    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = l1.length;\n    var\
    \ m = l2.length;\n    while (i < n && j < m) {\n        if (l1[i] === l2[j]) {\n\
    \            result.push(l1[i]);\n            i++;\n            j++;\n       \
    \ } else if (l1[i] < l2[j]) {\n            i++;\n        } else {\n          \
    \  j++;\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
