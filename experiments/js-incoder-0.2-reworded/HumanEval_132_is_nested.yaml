name: HumanEval_132_is_nested
language: js
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
  []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
  [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
  [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
  ]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    var open_brackets = string.match(/\\[/g);\n    var close_brackets\
    \ = string.match(/\\]/g);\n    var open_brackets_count = open_brackets ? open_brackets.length\
    \ : 0;\n    var close_brackets_count = close_brackets ? close_brackets.length\
    \ : 0;\n    var open_brackets_count = open_brackets_count + close_brackets_count;\n\
    \    return open_brackets_count % 2 === 0;\n}\n", "    var open_brackets = string.match(/\\\
    [/g);\n    var close_brackets = string.match(/\\]/g);\n    var open_brackets_count\
    \ = open_brackets ? open_brackets.length : 0;\n    var close_brackets_count =\
    \ close_brackets ? close_brackets.length : 0;\n    var open_brackets_count = open_brackets_count\
    \ + close_brackets_count;\n    return open_brackets_count % 2 === 0;\n}\n", "\t\
    let brackets = string.match(/\\[.*?\\]/g);\n\tif(brackets == null){\n\t\treturn\
    \ false;\n\t}\n\tlet brackets_length = brackets.length;\n\tfor(let i = 0; i <\
    \ brackets_length; i++){\n\t\tlet bracket = brackets[i];\n\t\tif(bracket.match(/\\\
    [.*?\\]/) == null){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \   let brackets_count = string.match(/\\[/g).length;\n    let open_brackets_count\
    \ = string.match(/\\(/g).length;\n    let close_brackets_count = string.match(/\\\
    )/g).length;\n    let brackets_count = brackets_count + open_brackets_count +\
    \ close_brackets_count;\n    return brackets_count > 0;\n}\n", "    let brackets\
    \ = string.match(/\\[.*?\\]/g);\n    if(brackets){\n        let brackets_count\
    \ = brackets.length;\n        let nested_count = 0;\n        for(let i = 0; i\
    \ < brackets.length; i++){\n            if(brackets[i].match(/\\[.*?\\]/)){\n\
    \                nested_count++;\n            }\n        }\n        return nested_count\
    \ >= brackets_count;\n    }\n    return false;\n}\n", "    let stack = [];\n \
    \   for(let i = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n\
    \            stack.push(\"[\");\n        }\n        else if(string[i] == \"]\"\
    ){\n            if(stack.pop() == \"[\"){\n                return true;\n    \
    \        }\n        }\n    }\n    return false;\n}\n", "    var brackets = string.match(/\\\
    [.*?\\]/g);\n    if(brackets){\n        var nested = false;\n        brackets.forEach(function(bracket){\n\
    \            var brackets = bracket.match(/\\[.*?\\]/g);\n            if(brackets){\n\
    \                brackets.forEach(function(bracket){\n                    if(nested\
    \ === false){\n                        nested = true;\n                    }\n\
    \                });\n            }\n        });\n        return nested;\n   \
    \ }\n    return false;\n}\n", "    var open_brackets = 0,\n        closed_brackets\
    \ = 0,\n        open_brackets_count = 0,\n        closed_brackets_count = 0,\n\
    \        open_brackets_string = '',\n        closed_brackets_string = '',\n  \
    \      open_brackets_string_index = 0,\n        closed_brackets_string_index =\
    \ 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open_brackets_string_index = 0,\n        open_brackets_string_index\
    \ = 0,\n        open", "    let brackets = string.match(/\\[.*?\\]/g);\n    return\
    \ brackets && brackets.length>0;\n}\n", "    let brackets = string.match(/\\[.*?\\\
    ]/g);\n    return brackets && brackets.length > 0;\n}\n", "    \n    // Create\
    \ a stack to keep track of brackets\n    var stack = [];\n    \n    // Iterate\
    \ through each character in the string\n    for(var i = 0; i < string.length;\
    \ i++){\n        // If the character is a left bracket, push it to the stack\n\
    \        if(string[i] == \"[\"){\n            stack.push(\"[\");\n        }\n\
    \        // If the character is a right bracket, pop the stack\n        else if(string[i]\
    \ == \"]\"){\n            while(stack.length && stack[stack.length - 1] != \"\
    [\"){\n                stack.pop();\n            }\n        }\n        // If the\
    \ stack is empty and the character is a left bracket, return true\n        else\
    \ if(stack.length == 0 && string[i] == \"[\"){\n            return true;\n   \
    \     }\n        // If the stack is empty and the character is a right bracket,\
    \ return false\n        else if(stack.length == 0 && string[i] == \"]\"){\n  \
    \          return false;\n        }\n        // If the stack is not empty and\
    \ the character is a left bracket, pop the stack\n        else if(stack.length\
    \ != 0 && string[i] == \"[\"){\n            while(stack.length && stack[stack.length\
    \ - 1] != \"[\"){\n                stack.pop();\n            }\n        }\n  \
    \      // If the stack is not empty and the character is a right bracket, push\
    \ the stack\n        else if(stack.length != 0 && string[i] == \"]\"){\n     \
    \       stack.push(\"]\");\n        }\n    }\n    \n    // If the stack is empty\
    \ and the string has no brackets, return false\n    if(stack.length == 0 && string.length\
    \ == 0){\n        return false;\n    }\n    \n    // If the stack is not empty\
    \ and the string has no brackets, return false\n    if(stack.length != 0 && string.length\
    \ == 0){\n        return false;\n    }\n    \n    // If the stack is empty and\
    \ the string has brackets, return true\n    if(stack.length == 0 && string.length\
    \ != 0){\n        return true;\n    }\n    \n    // If the stack is not empty\
    \ and the string has brackets, return false\n    if(stack.length != 0 && string.length\
    \ != 0){\n        return false;\n    }\n    \n    // If the stack and string are\
    \ both empty, return true\n    if(stack.length == 0 && string.length == 0){\n\
    \        return true;\n    }\n    \n    // If the stack and string are both not\
    \ empty, return false\n    if(stack.length != 0 && string.length != 0){\n    \
    \    return false;\n    }\n}\n", "    var brackets = string.match(/\\[.*?\\]/g);\n\
    \    return brackets != null && brackets.length > 0;\n}\n", "    string = string.replace(/\\\
    s+/g,\" \");\n    string = string.replace(/^\\s+|\\s+$/g,\"\");\n    string =\
    \ string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\
    \");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\[\\]]/g,\"\");\n    string = string.replace(/[\\\
    [\\]]/g,\"\");\n    string = string.replace(/[\\", "    let brackets = string.match(/[\\\
    [\\]]/g);\n    return brackets && brackets.some(bracket => is_nested(bracket));\n\
    }\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    return brackets &&\
    \ brackets.length>0;\n}\n", "\tlet brackets = string.match(/\\[.*?\\]/g);\n\t\
    if(brackets == null){\n\t\treturn false;\n\t}\n\tlet nested = false;\n\tfor(let\
    \ i = 0; i < brackets.length; i++){\n\t\tlet bracket = brackets[i];\n\t\tlet open\
    \ = bracket.match(/\\[/);\n\t\tlet close = bracket.match(/\\]/);\n\t\tif((open\
    \ != null) && (close != null)){\n\t\t\tnested = true;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn nested;\n}\n", "\tlet stack = [];\n\tlet open_brackets = 0;\n\tlet\
    \ close_brackets = 0;\n\tlet open_curly = 0;\n\tlet close_curly = 0;\n\tlet open_paren\
    \ = 0;\n\tlet close_paren = 0;\n\tfor(let i = 0; i < string.length; i++){\n\t\t\
    if(string[i] == \"[\"){\n\t\t\tstack.push(string[i]);\n\t\t\topen_brackets++;\n\
    \t\t}else if(string[i] == \"]\"){\n\t\t\tclose_brackets++;\n\t\t\topen_brackets--;\n\
    \t\t}else if(string[i] == \"{\"){\n\t\t\tstack.push(string[i]);\n\t\t\topen_curly++;\n\
    \t\t}else if(string[i] == \"}\"){\n\t\t\tclose_curly++;\n\t\t\topen_curly--;\n\
    \t\t}else if(string[i] == \"(\"){\n\t\t\tstack.push(string[i]);\n\t\t\topen_paren++;\n\
    \t\t}else if(string[i] == \")\"){\n\t\t\tclose_paren++;\n\t\t\topen_paren--;\n\
    \t\t}\n\t\t\n\t\tif(open_brackets == 0 && close_brackets == 0 && open_curly ==\
    \ 0 && close_curly == 0 && open_paren == 0 && close_paren == 0){\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n", "    let brackets = string.match(/\\\
    [.*?\\]/g);\n    return brackets && brackets.length>0;\n}\n", "    let brackets\
    \ = string.match(/\\[.*?\\]/g);\n    let nested = false;\n    for(let i = 0; i\
    \ < brackets.length; i++){\n        let bracket = brackets[i];\n        let brackets\
    \ = bracket.match(/\\[.*?\\]/g);\n        if(brackets.length == 0){\n        \
    \    nested = true;\n            break;\n        }\n    }\n    return nested;\n\
    }\n", "\tlet brackets_count = string.match(/\\[/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\(/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    )/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open_brackets_count\
    \ = string.match(/\\[/g).length;\n\tlet closed_brackets_count = string.match(/\\\
    ]/g).length;\n\tlet open_brackets_count = string.match(/\\{/g).length;\n\tlet\
    \ closed_brackets_count = string.match(/\\}/g).length;\n\tlet open"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
