name: HumanEval_140_fix_spaces
language: go_test.go
prompt: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string text, replace all spaces in it with underscores, \n// and if a\
  \ string has more than 2 consecutive spaces, \n// then replace all consecutive spaces\
  \ with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string)\
  \ string {\n"
tests: "func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n   \
  \  { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n  \
  \   { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
  \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n    \
  \ { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    text += \"_\"\n    text += strings.Repeat(\"\
    _\", strings.Count(text, \" \"))\n    text += \"-\"\n    return text\n}\n", " \
    \   text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text, \" \"\
    ))\n    text += \"-\"\n    return text\n}\n", "    var result string\n    var\
    \ lastSpace int\n    for _, char := range text {\n        if char == ' ' {\n \
    \           if lastSpace > 1 {\n                result = result + \"-\"\n    \
    \            lastSpace = 0\n            } else {\n                result = result\
    \ + \"_\"\n            }\n        } else {\n            lastSpace = 0\n      \
    \      result = result + char\n        }\n    }\n    return result\n}\n", "  \
    \  text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    text += \"_\"\n    text += strings.Repeat(\"\
    -\", strings.Count(text, \" \"))\n    return text\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text := strings.Replace(text, \" \", \"_\", -1)\n  \
    \  text := strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n", " \
    \   text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text := strings.Replace(text, \" \", \"_\", -1)\n  \
    \  text := strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n", " \
    \   text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    var result string\n    \n   \
    \ // Replace all spaces with underscores\n    for i := 0; i < len(text); i++ {\n\
    \        if text[i] == ' ' {\n            result += \"_\"\n        } else {\n\
    \            result += text[i]\n        }\n    }\n    \n    // If there are more\
    \ than 2 consecutive spaces, replace all consecutive spaces with -\n    for i\
    \ := 0; i < len(text); i++ {\n        if text[i] == ' ' && text[i+1] == ' ' {\n\
    \            result += \"-\"\n        } else {\n            result += text[i]\n\
    \        }\n    }\n    \n    return result\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text := strings.Replace(text, \" \", \"_\", -1)\n  \
    \  text := strings.Replace(text, \" \", \"-\", -1)\n    return text\n}\n", " \
    \   text := strings.Replace(text, \" \", \"_\", -1)\n    text := strings.Replace(text,\
    \ \" \", \"-\", -1)\n    return text\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text += \"_\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    text += \"-\"\n    return text\n}\n", "    text := strings.Replace(text,\
    \ \" \", \"_\", -1)\n    text := strings.Replace(text, \" \", \"-\", -1)\n   \
    \ return text\n}\n", "    text += \"-\"\n    text += strings.Repeat(\"_\", strings.Count(text,\
    \ \" \"))\n    return text\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
