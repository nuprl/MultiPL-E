name: HumanEval_68_pluck
language: go_test.go
prompt: "package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\
  Given an array representing a branch of a tree that has non-negative integer nodes\n\
  // your task is to pluck one of the nodes and return it.\n// The plucked node should\
  \ be the node with the smallest even value.\n// If multiple nodes with the same\
  \ smallest even value are found return the node that has smallest index.\n// The\
  \ plucked node should be returned in a list, [ smalest_value, its index ],\n// If\
  \ there are no even values or the given array is empty, return [].\n// Example 1:\n\
  // >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1,\
  \ 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has\
  \ the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example\
  \ 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is\
  \ the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n"
tests: "func TestPluck(t *testing.T) {\n  candidate := pluck\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate([]int{4, 2, 3}), expected: []int{2, 1} },\n     { actual:\
  \ candidate([]int{1, 2, 3}), expected: []int{2, 1} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{5, 0, 3, 0, 4, 2}), expected:\
  \ []int{0, 1} },\n     { actual: candidate([]int{1, 2, 3, 0, 5, 3}), expected: []int{0,\
  \ 3} },\n     { actual: candidate([]int{5, 4, 8, 4, 8}), expected: []int{4, 1} },\n\
  \     { actual: candidate([]int{7, 6, 7, 1}), expected: []int{6, 1} },\n     { actual:\
  \ candidate([]int{7, 9, 7, 1}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    sort.Ints(arr)\n    var result []int\n    var index int\n    var\
    \ smalest_value int\n    for _, v := range arr {\n        if v%2 == 0 {\n    \
    \        if smalest_value == 0 {\n                smalest_value = v\n        \
    \        index = -1\n            } else {\n                if v < smalest_value\
    \ {\n                    smalest_value = v\n                    index = -1\n \
    \               } else {\n                    if index == -1 {\n             \
    \           index = v\n                    } else {\n                        if\
    \ v < index {\n                            index = v\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    if index == -1 {\n        result = make([]int, 0)\n    } else {\n       \
    \ result = append(result, smalest_value, index)\n    }\n    return result\n}\n\
    `\n", "    // write your code here\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = sort.Search(len(arr),\
    \ func(i int) bool {\n                    return arr[i] < value\n            \
    \    })\n            }\n        }\n    }\n    return []int{smalest_value, smalest_index}\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n    index := 0\n    smalest_value\
    \ := arr[0]\n    smalest_index := 0\n    for _, value := range arr {\n       \
    \ if value%2 == 0 {\n            if value < smalest_value {\n                smalest_value\
    \ = value\n                smalest_index = index\n            }\n            index++\n\
    \        }\n    }\n    if smalest_index == 0 {\n        return []int{}\n    }\n\
    \    return []int{smalest_value, smalest_index}\n}\n", "    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(arr))\n    arr", "  \
    \  result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for _, v :=\
    \ range arr {\n        if v%2 == 0 {\n            if min > v {\n             \
    \   min = v\n                index = index\n            }\n        } else {\n\
    \            if min > v {\n                min = v\n                index = index\n\
    \            }\n        }\n    }\n    result = append(result, min)\n    result\
    \ = append(result, index)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, val := range arr {\n     \
    \   if val%2 == 0 {\n            if val < min {\n                min = val\n \
    \               index = index\n            }\n        } else {\n            if\
    \ min > val {\n                min = val\n                index = index\n    \
    \        }\n        }\n    }\n    result = append(result, min)\n    result = append(result,\
    \ index)\n    return result\n}\n", "    // write your code here\n    arr := arr[:0]\n\
    \    arr := append(arr, arr[0])\n    arr := append(arr, arr[1])\n    arr := append(arr,\
    \ arr[2])\n    arr := append(arr, arr[3])\n    arr := append(arr, arr[4])\n  \
    \  arr := append(arr, arr[5])\n    arr := append(arr, arr[6])\n    arr := append(arr,\
    \ arr[7])\n    arr := append(arr, arr[8])\n    arr := append(arr, arr[9])\n  \
    \  arr := append(arr, arr[10])\n    arr := append(arr, arr[11])\n    arr := append(arr,\
    \ arr[12])\n    arr := append(arr, arr[13])\n    arr := append(arr, arr[14])\n\
    \    arr := append(arr, arr[15])\n    arr := append(arr, arr[16])\n    arr :=\
    \ append(arr, arr[17])\n    arr := append(arr, arr[18])\n    arr := append(arr,\
    \ arr[19])\n    arr := append(arr, arr[20])\n    arr := append(arr, arr[21])\n\
    \    arr := append(arr, arr[22])\n    arr := append(arr, arr[23])\n    arr :=\
    \ append(arr, arr[24])\n    arr := append(arr, arr[25])\n    arr := append(arr,\
    \ arr[26])\n    arr := append(arr, arr[27])\n    arr := append(arr, arr[28])\n\
    \    arr := append(arr, arr[29])\n    arr := append(arr, arr[30])\n    arr :=\
    \ append(arr, arr[31])\n    arr := append(arr, arr[32])\n    arr := append(arr,\
    \ arr[33])\n    arr := append(arr, arr[34])\n    arr := append(arr, arr[35])\n\
    \    arr := append(arr, arr[36])\n    arr := append(arr, arr[37])\n    arr :=\
    \ append(arr, arr[38])\n    arr := append(arr, arr[39])\n    arr := append(arr,\
    \ arr[40])\n    arr := append(arr, arr[41])\n    arr := append(arr, arr[42])\n\
    \    arr := append(arr, arr[43])\n    arr := append(arr, arr[44])\n    arr :=\
    \ append(arr, arr[45])\n    arr := append(arr, arr[46])\n    arr := append(arr,\
    \ arr[47])\n    arr := append(arr, arr[48])\n    arr := append(arr, arr[49])\n\
    \    arr := ", "    n := len(arr)\n    result := make([]int, n)\n    min := arr[0]\n\
    \    index := 0\n    for i := 0; i < n; i++ {\n        if arr[i] < min {\n   \
    \         min = arr[i]\n            index = i\n        }\n    }\n    result[index]\
    \ = min\n    return result\n}\n", "    arr2 := make([]int, len(arr))\n    arr3\
    \ := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int,\
    \ len(arr))\n    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n\
    \    arr8 := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10\
    \ := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int,\
    \ len(arr))\n    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n\
    \    arr15 := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17\
    \ := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int,\
    \ len(arr))\n    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n\
    \    arr22 := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24\
    \ := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int,\
    \ len(arr))\n    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n\
    \    arr29 := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31\
    \ := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int,\
    \ len(arr))\n    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n\
    \    arr36 := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38\
    \ := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int,\
    \ len(arr))\n    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n\
    \    arr43 := make([]int, len(arr))\n    arr", "    result := make([]int, 0)\n\
    \    min := arr[0]\n    index := 0\n    for _, v := range arr {\n        if v%2\
    \ == 0 {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        } else {\n            if min > v {\n       \
    \         min = v\n                index = index\n            }\n        }\n \
    \   }\n    result = append(result, min)\n    result = append(result, index)\n\
    \    return result\n}\n", "    var result []int\n    var minVal int\n    var minIndex\
    \ int\n    for _, v := range arr {\n        if v%2 == 0 {\n            if minVal\
    \ == 0 || v < minVal {\n                minVal = v\n                minIndex =\
    \ -1\n            }\n        } else {\n            if minVal == 0 || v > minVal\
    \ {\n                minVal = v\n                minIndex = -1\n            }\n\
    \        }\n    }\n    if minVal == 0 {\n        return []int{}\n    }\n    result\
    \ = append(result, minVal)\n    if minIndex == -1 {\n        return result\n \
    \   }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == minVal {\n  \
    \          result = append(result, minIndex)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    min := arr[0]\n    index := 0\n    for\
    \ _, v := range arr {\n        if v%2 == 0 {\n            if v < min {\n     \
    \           min = v\n                index = index\n            }\n        } else\
    \ {\n            if min > v {\n                min = v\n                index\
    \ = index\n            }\n        }\n    }\n    result = append(result, min)\n\
    \    result = append(result, index)\n    return result\n}\n", "    // write your\
    \ code here\n    sort.Ints(arr)\n    arr2 := make([]int, len(arr))\n    i := 0\n\
    \    for _, v := range arr {\n        if v%2 == 0 {\n            arr2[i] = v\n\
    \            i++\n        }\n    }\n    return arr2\n}\n`\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    smalest_value := arr[0]\n    smalest_index\
    \ := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smalest_value\
    \ {\n            smalest_value = arr[i]\n            smalest_index = i\n     \
    \   }\n    }\n    return []int{smalest_value, smalest_index}\n}\n", "    sort.Ints(arr)\n\
    \    index := 0\n    smalest_value := arr[0]\n    smalest_index := 0\n    for\
    \ _, value := range arr {\n        if value%2 == 0 {\n            if value < smalest_value\
    \ {\n                smalest_value = value\n                smalest_index = index\n\
    \            }\n            index++\n        }\n    }\n    return []int{smalest_value,\
    \ smalest_index}\n}\n", "    arr2 := make([]int, len(arr))\n    min := arr[0]\n\
    \    index := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < min\
    \ {\n            min = arr[i]\n            index = i\n        }\n    }\n    arr2[index]\
    \ = min\n    return arr2\n}\n`\n", "    // write your code here\n    arr2 := make([]int,\
    \ len(arr))\n    arr3 := make([]int, len(arr))\n    arr4 := make([]int, len(arr))\n\
    \    arr5 := make([]int, len(arr))\n    arr6 := make([]int, len(arr))\n    arr7\
    \ := make([]int, len(arr))\n    arr8 := make([]int, len(arr))\n    arr9 := make([]int,\
    \ len(arr))\n    arr10 := make([]int, len(arr))\n    arr11 := make([]int, len(arr))\n\
    \    arr12 := make([]int, len(arr))\n    arr13 := make([]int, len(arr))\n    arr14\
    \ := make([]int, len(arr))\n    arr15 := make([]int, len(arr))\n    arr16 := make([]int,\
    \ len(arr))\n    arr17 := make([]int, len(arr))\n    arr18 := make([]int, len(arr))\n\
    \    arr19 := make([]int, len(arr))\n    arr20 := make([]int, len(arr))\n    arr21\
    \ := make([]int, len(arr))\n    arr22 := make([]int, len(arr))\n    arr23 := make([]int,\
    \ len(arr))\n    arr24 := make([]int, len(arr))\n    arr25 := make([]int, len(arr))\n\
    \    arr26 := make([]int, len(arr))\n    arr27 := make([]int, len(arr))\n    arr28\
    \ := make([]int, len(arr))\n    arr29 := make([]int, len(arr))\n    arr30 := make([]int,\
    \ len(arr))\n    arr31 := make([]int, len(arr))\n    arr32 := make([]int, len(arr))\n\
    \    arr33 := make([]int, len(arr))\n    arr34 := make([]int, len(arr))\n    arr35\
    \ := make([]int, len(arr))\n    arr36 := make([]int, len(arr))\n    arr37 := make([]int,\
    \ len(arr))\n    arr38 := make([]int, len(arr))\n    arr39 := make([]int, len(arr))\n\
    \    arr40 := make([]int, len(arr))\n    arr41 := make([]int, len(arr))\n    arr42\
    \ := make([]int, len(arr))\n    arr43 := make([]int, len(", "    result := make([]int,\
    \ 0)\n    min := arr[0]\n    index := 0\n    for _, v := range arr {\n       \
    \ if v%2 == 0 {\n            if v < min {\n                min = v\n         \
    \       index = index\n            }\n        } else {\n            if min ==\
    \ v {\n                index = index\n            }\n        }\n    }\n    result\
    \ = append(result, min)\n    result = append(result, index)\n    return result\n\
    }\n`\n", "    sort.Ints(arr)\n    smalest_value := arr[0]\n    smalest_index :=\
    \ 0\n    for _, value := range arr {\n        if value%2 == 0 {\n            if\
    \ value < smalest_value {\n                smalest_value = value\n           \
    \     smalest_index = sort.Search(len(arr), func(i int) bool {\n             \
    \       return arr[i] < value\n                })\n            }\n        }\n\
    \    }\n    return []int{smalest_value, smalest_index}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
