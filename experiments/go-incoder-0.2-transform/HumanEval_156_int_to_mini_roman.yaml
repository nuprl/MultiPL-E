name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int)\
  \ string {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    roman_numerals := map[int]string{\n        1: \"i\",\n        5:\
    \ \"vi\",\n        10: \"l\",\n        50: \"l\",\n        100: \"c\",\n     \
    \   500: \"c\",\n        1000: \"d\",\n        5000: \"d\",\n    }\n    roman_numeral\
    \ := roman_numerals[number]\n    if number < 1 || number > 1000 {\n        fmt.Println(\"\
    Invalid input\")\n    }\n    return strings.ToLower(roman_numeral)\n}\n", "  \
    \  roman_numerals := []string{\n        \"I\", \"II\", \"III\", \"IV\", \"V\"\
    , \"VI\", \"VII\", \"VIII\", \"IX\",\n        \"X\", \"XI\", \"XII\", \"XIII\"\
    , \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\",\n        \"XX\", \"\
    XXI\", \"XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\"\
    , \"XXIX\",\n        \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\"\
    , \"XXXVI\", \"XXXVII\", \"XXXVIII\", \"XXXIX\",\n        \"XL\", \"L\", \"LI\"\
    , \"LII\", \"LII\", \"LIII\", \"LIV\", \"LV\", \"LVI\", \"LVII\", \"LVIII\", \"\
    LIX\",\n        \"LX\", \"LXI\", \"LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\"\
    , \"LXVII\", \"LXVIII\", \"LXIX\",\n        \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\"\
    , \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\",\n      \
    \  \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIV\", \"LXXXV\", \"LXXXVI\"\
    , \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\",\n        \"XC\", \"C\", \"CI\", \"CII\"\
    , \"CII\", \"CIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"CIX\",\n\
    \        \"XC\", \"C\", \"CI\", \"CII\", \"CII\", \"CIII\", \"CIV\", \"CV\", \"\
    CVI\", \"CVII\", \"CVIII\", \"CIX\",\n        \"XXC\", \"CC\", \"CCI\", \"CCII\"\
    , \"CCIII\", \"CCIV\", \"CCV\", \"CCVI\", \"CCVII\", \"CCVIII\", \"CCIX\",\n \
    \       \"XXXC\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\", \"CXXV\"\
    , \"CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\",\n        \"XLC\", \"LCC\", \"\
    LCCI\", \"LCCII\", \"LCCIII\", \"LCCIV\", \"LCCV\", \"LCCVI\", \"L", "    romanNumerals\
    \ := map[int]string{\n        1: \"I\",\n        5: \"V\",\n        10: \"X\"\
    ,\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000:\
    \ \"M\",\n    }\n    romanNumeral := \"\"\n    for romanNumeral, number := range\
    \ romanNumerals {\n        if number >= number {\n            break\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s%v\", romanNumeral, number)\n}\n", "    roman_numerals\
    \ := []string{\n        \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"\
    , \"VIII\", \"IX\", \"X\", \"XI\", \"XII\",\n        \"XIII\", \"XIV\", \"XV\"\
    , \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\",\n        \"\
    XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"XXIX\", \"XXX\"\
    , \"XXXI\",\n        \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"\
    XXXVII\", \"XXXVIII\", \"XXXIX\",\n        \"XL\", \"L\", \"LI\", \"LII\", \"\
    LII\", \"LIII\", \"LIV\", \"LV\", \"LVI\", \"LVII\", \"LVIII\",\n        \"LIX\"\
    , \"LX\", \"LXI\", \"LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\"\
    , \"LXVIII\",\n        \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"\
    LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\",\n        \"LXXVIII\", \"LXXIX\", \"\
    LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIV\", \"LXXXV\",\n        \"\
    LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\", \"CI\", \"CII\"\
    , \"CII\",\n        \"CIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"\
    CIX\", \"CX\", \"CXI\", \"CXII\",\n        \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\"\
    , \"CXVII\", \"CXVIII\", \"CIX\", \"CX\", \"CXI\", \"CXII\",\n        \"CXIII\"\
    , \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\", \"CIX\", \"CX\", \"CXI\"\
    , \"CXII\",\n        \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\"\
    , \"CIX\", \"CX\", \"CXI\", \"CXII\",\n        \"CXIII\", \"CXIV\", \"CXV\", \"\
    CXVI\", \"CXVII\", \"CXVIII\", \"CIX\", \"CX\", \"CXI\", \"CXII\",\n        \"\
    CXIII\", \"", "    romans := []string{\n        \"I\", \"II\", \"III\", \"IV\"\
    , \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\",\n        \"\
    XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\"\
    , \"XXII\",\n        \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\"\
    , \"XXIX\", \"XXX\", \"XXXI\",\n        \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\"\
    , \"XXXVI\", \"XXXVII\", \"XXXVIII\", \"XXXIX\",\n        \"XL\", \"L\", \"LI\"\
    , \"LII\", \"LII\", \"LIII\", \"LIV\", \"LV\", \"LVI\", \"LVII\", \"LVIII\",\n\
    \        \"LIX\", \"LX\", \"LXI\", \"LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"\
    LXVI\", \"LXVII\",\n        \"LXVIII\", \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\"\
    , \"LXXIII\", \"LXXIV\", \"LXXV\",\n        \"LXXVI\", \"LXXVII\", \"LXXVIII\"\
    , \"LXXIX\", \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\",\n        \"LXXXIV\"\
    , \"LXXXV\", \"LXXXVI\", \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\"\
    ,\n        \"CI\", \"CII\", \"CII\", \"CIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\"\
    , \"CVIII\", \"CIX\",\n        \"CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\"\
    , \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\",\n        \"CXIX\", \"CC\", \"CCI\"\
    , \"CCII\", \"CCIII\", \"CCIV\", \"CCV\", \"CCVI\", \"CCVII\",\n        \"CCVIII\"\
    , \"CCIX\", \"CCX\", \"CCXI\", \"CCXII\", \"CCXIII\", \"CCXIV\", \"CCXV\",\n \
    \       \"CCXVI\", \"CCXVII\", \"CCXVIII\", \"CCXIX\", \"CCXX\", \"CCXXI\", \"\
    CCXXII\",\n        \"CCXXIII\", \"CCXXIV\", \"CCXXV\", \"CCXXVI\", \"CCXXVII\"\
    , \"CCXXVIII", "    romanNumerals := map[int]string{\n        1: \"i\",\n    \
    \    5: \"vi\",\n        10: \"vii\",\n        50: \"viii\",\n        100: \"\
    viv\",\n        500: \"viivi\",\n        1000: \"viivii\",\n        5000: \"viiii\"\
    ,\n        10000: \"vivvi\",\n        50000: \"vivvii\",\n        100000: \"vivviii\"\
    ,\n        500000: \"vivviiii\",\n        1000000: \"vivviv\",\n        5000000:\
    \ \"vivvivi\",\n        10000000: \"vivvivii\",\n        50000000: \"vivviviii\"\
    ,\n        100000000: \"vivviviiii\",\n        500000000: \"vivviviiiii\",\n \
    \       1000000000: \"vivviviv\",\n        5000000000: \"vivvivivi\",\n      \
    \  10000000000: \"vivvivivii\",\n        50000000000: \"vivviviviii\",\n     \
    \   100000000000: \"vivviviviiii\",\n        500000000000: \"vivviviviiiii\",\n\
    \        1000000000000: \"vivviviviv\",\n        5000000000000: \"vivvivivivi\"\
    ,\n        10000000000000: \"vivvivivivii\",\n        50000000000000: \"vivviviviviii\"\
    ,\n        100000000000000: \"vivviviviviiii\",\n        500000000000000: \"vivviviviviiiii\"\
    ,\n        1000000000000000: \"vivviviviviv\",\n        5000000000000000: \"vivvivivivivi\"\
    ,\n        10000000000000000: \"vivvivivivivii\",\n        5000000000000000: \"\
    vivviviviviviii\",\n        10000000000000000: \"vivviviviviviiii\",\n       \
    \ 5000000000000000: \"vivviviviviviiiii\",\n        100000000000000000: \"vivviviviviviv\"\
    ,\n        50000000000000000: \"vivvivivivivi\",\n        1000000000000000000:\
    \ \"vivvivivivivii\",\n        500000000000000000: \"vivviviviviviii\",\n    \
    \    10000000000000000000: \"vivviviviviviiii\",\n        5000000000000000000:\
    \ \"vivviviviviviiiii\",\n        ", "    roman_numerals := map[int]string{\n\
    \        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n\
    \        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    roman_numeral\
    \ := \"\"\n    for roman_numeral, number := range roman_numerals {\n        if\
    \ number >= number {\n            break\n        }\n    }\n    if number == 0\
    \ {\n        return roman_numeral\n    }\n    roman_numeral += roman_numerals[number]\n\
    \    for i := number; i > 0; i-- {\n        roman_numeral += roman_numerals[number/i]\n\
    \    }\n    return roman_numeral\n}\n", "    roman_num := \"\"\n    switch number\
    \ {\n    case 1:\n        roman_num = \"I\"\n    case 2:\n        roman_num =\
    \ \"II\"\n    case 3:\n        roman_num = \"III\"\n    case 4:\n        roman_num\
    \ = \"IV\"\n    case 5:\n        roman_num = \"V\"\n    case 6:\n        roman_num\
    \ = \"VI\"\n    case 7:\n        roman_num = \"VII\"\n    case 8:\n        roman_num\
    \ = \"VIII\"\n    case 9:\n        roman_num = \"IX\"\n    case 10:\n        roman_num\
    \ = \"X\"\n    case 11:\n        roman_num = \"XI\"\n    case 12:\n        roman_num\
    \ = \"XII\"\n    case 13:\n        roman_num = \"XIII\"\n    case 14:\n      \
    \  roman_num = \"XIV\"\n    case 15:\n        roman_num = \"XV\"\n    case 16:\n\
    \        roman_num = \"XVI\"\n    case 17:\n        roman_num = \"XVII\"\n   \
    \ case 18:\n        roman_num = \"XVIII\"\n    case 19:\n        roman_num = \"\
    XIX\"\n    case 20:\n        roman_num = \"XX\"\n    case 21:\n        roman_num\
    \ = \"XXI\"\n    case 22:\n        roman_num = \"XXII\"\n    case 23:\n      \
    \  roman_num = \"XXIII\"\n    case 24:\n        roman_num = \"XXIV\"\n    case\
    \ 25:\n        roman_num = \"XXV\"\n    case 26:\n        roman_num = \"XXVI\"\
    \n    case 27:\n        roman_num = \"XXVII\"\n    case 28:\n        roman_num\
    \ = \"XXVIII\"\n    case 29:\n        roman_num = \"XXIX\"\n    case 30:\n   \
    \     roman_num = \"XXX\"\n    case 31:\n        roman_num = \"XXXI\"\n    case\
    \ 32:\n        roman_num = \"XXXII\"\n    case 33:\n        roman_num = \"XXXIII\"\
    \n    case 34:\n        roman_num = \"XXXIV\"\n    case 35:\n        roman_num\
    \ = \"XXXV\"\n    case 36:\n        roman_num = \"XXXVI\"\n    case 37:\n    \
    \    roman_num = \"XXXVII\"\n    case 38:\n        roman_num = \"XXXVIII\"\n \
    \   case 39:\n        roman_num = \"XXXIX\"\n    case 40:\n        roman_num =\
    \ \"XL\"", "    if number < 1 || number > 1000 {\n        fmt.Println(\"Invalid\
    \ input\")\n    }\n    romanNumerals := map[int]string{\n        1: \"i\",\n \
    \       5: \"vi\",\n        10: \"vii\",\n        50: \"viii\",\n        100:\
    \ \"viv\",\n        500: \"viv\",\n        1000: \"vi\",\n        5000: \"vi\"\
    ,\n        10000: \"vi\",\n        50000: \"vi\",\n        100000: \"vi\",\n \
    \       500000: \"vi\",\n        1000000: \"vi\",\n        5000000: \"vi\",\n\
    \        10000000: \"vi\",\n        50000000: \"vi\",\n        100000000: \"vi\"\
    ,\n        500000000: \"vi\",\n        1000000000: \"vi\",\n        5000000000:\
    \ \"vi\",\n        10000000000: \"vi\",\n        50000000000: \"vi\",\n      \
    \  100000000000: \"vi\",\n        500000000000: \"vi\",\n        1000000000000:\
    \ \"vi\",\n        5000000000000: \"vi\",\n        10000000000000: \"vi\",\n \
    \       50000000000000: \"vi\",\n        100000000000000: \"vi\",\n        500000000000000:\
    \ \"vi\",\n        1000000000000000: \"vi\",\n        5000000000000000: \"vi\"\
    ,\n        1000000000000000000: \"vi\",\n    }\n    romanNumeralString := \"\"\
    \n    for romanNumeral, roman := range romanNumerals {\n        if number >= romanNumeral\
    \ {\n            romanNumeralString += roman\n            number -= romanNumeral\n\
    \        }\n    }\n    return strings.ToLower(romanNumeralString)\n}\n", "   \
    \ romanNumerals := map[int]string{\n        1: \"i\",\n        5: \"vi\",\n  \
    \      10: \"vii\",\n        50: \"viii\",\n        100: \"viv\",\n        500:\
    \ \"viivi\",\n        1000: \"viivii\",\n    }\n\n    romanNumeral := romanNumerals[number]\n\
    \    if romanNumeral == \"\" {\n        fmt.Println(\"Invalid input\")\n    }\n\
    \    return strings.ToLower(romanNumeral)\n}\n", "    romanNumerals := map[int]string{\n\
    \        1: \"i\",\n        5: \"vi\",\n        10: \"vii\",\n        50: \"viii\"\
    ,\n        100: \"ix\",\n        500: \"ixi\",\n        1000: \"ixii\",\n    }\n\
    \    romanNumeral := romanNumerals[number]\n    if number == 0 {\n        return\
    \ romanNumeral\n    }\n    result := \"\"\n    currentNumber := number\n    for\
    \ {\n        if currentNumber > 1000 {\n            break\n        }\n       \
    \ result += romanNumeral\n        currentNumber -= romanNumerals[currentNumber]\n\
    \    }\n    return result\n}\n", "    romans := []string{\n        \"I\", \"IV\"\
    , \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"\
    M\"\n    }\n    result := \"\"\n    i := 0\n    for ; i < len(romans); i++ {\n\
    \        if number >= romans[i] && number < romans[i+1] {\n            result\
    \ += romans[i]\n            number -= romans[i]\n        }\n    }\n    if number\
    \ > 0 {\n        result += romans[i]\n    }\n    return result\n}\n", "    roman_num\
    \ := []string{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\"\
    , \"IX\", \"V\", \"IV\", \"I\"}\n    result := \"\"\n    for i := 0; i < len(roman_num);\
    \ i++ {\n        if number >= 1000 && number < 1000000 {\n            result +=\
    \ roman_num[i]\n            number -= 1000\n        } else {\n            result\
    \ += roman_num[i] + string(number % 10)\n            number /= 10\n        }\n\
    \    }\n    return strings.ToLower(result)\n}\n", "    romans := []string{\n \
    \       \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"\
    , \"X\", \"XI\", \"XII\",\n        \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\"\
    , \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\",\n        \"XXIII\", \"XXIV\"\
    , \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"XXIX\", \"XXX\", \"XXXI\",\n   \
    \     \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"XXXVII\", \"XXXVIII\"\
    , \"XXXIX\",\n        \"XL\", \"L\", \"LI\", \"LII\", \"LII\", \"LIII\", \"LIV\"\
    , \"LV\", \"LVI\", \"LVII\", \"LVIII\",\n        \"LIX\", \"LX\", \"LXI\", \"\
    LXII\", \"LXIII\", \"LXIV\", \"LXV\", \"LXVI\", \"LXVII\",\n        \"LXVIII\"\
    , \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\", \"LXXIV\", \"LXXV\",\n \
    \       \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\", \"LXXX\", \"LXXXI\", \"\
    LXXXII\", \"LXXXIII\",\n        \"LXXXIV\", \"LXXXV\", \"LXXXVI\", \"LXXXVII\"\
    , \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\",\n        \"CI\", \"CII\", \"CII\",\
    \ \"CIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"CIX\",\n        \"\
    CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"\
    CXVIII\",\n        \"CXIX\", \"CC\", \"CCI\", \"CCII\", \"CCIII\", \"CCIV\", \"\
    CCV\", \"CCVI\", \"CCVII\",\n        \"CCVIII\", \"CCIX\", \"CCX\", \"CCXI\",\
    \ \"CCXII\", \"CCXIII\", \"CCXIV\", \"CCXV\",\n        \"CCXVI\", \"CCXVII\",\
    \ \"CCXVIII\", \"CCXIX\", \"CCXX\", \"CCXXI\", \"CCXXII\",\n        \"CCXXIII\"\
    , \"CCXXIV\", \"CCXXV\", \"CCXXVI\", \"CCXXVII\", \"CCXXVIII", "    romans :=\
    \ []string{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\",\
    \ \"IX\", \"V\", \"IV\", \"I\"}\n    result := \"\"\n    number -= 1 // We start\
    \ at 1, not 0\n    for _, roman := range romans {\n        result += roman\n \
    \       number /= 10\n    }\n    return strings.ToLower(result)\n}\n", "    romanNumerals\
    \ := map[int]string{\n        1: \"i\",\n        5: \"vi\",\n        10: \"vii\"\
    ,\n        50: \"viii\",\n        100: \"viv\",\n        500: \"viv\",\n     \
    \   1000: \"vi\",\n    }\n\n    romanNumeral := romanNumerals[number]\n\n    if\
    \ number == 0 {\n        return \"\"\n    }\n\n    return romanNumeral\n}\n",
  "    roman_numerals := map[int]string{\n        1: \"i\",\n        5: \"vi\",\n\
    \        10: \"vii\",\n        50: \"viii\",\n        100: \"viv\",\n        500:\
    \ \"viiv\",\n        1000: \"viv\",\n        5000: \"viiv\",\n        10000: \"\
    viv\",\n        50000: \"viiv\",\n        100000: \"viv\",\n        500000: \"\
    viiv\",\n        1000000: \"viv\",\n        5000000: \"viiv\",\n        10000000:\
    \ \"viv\",\n        50000000: \"viiv\",\n        100000000: \"viv\",\n       \
    \ 500000000: \"viiv\",\n        1000000000: \"viv\",\n        5000000000: \"viiv\"\
    ,\n        10000000000: \"viv\",\n        50000000000: \"viiv\",\n        100000000000:\
    \ \"viv\",\n        500000000000: \"viiv\",\n        1000000000000: \"viv\",\n\
    \        5000000000000: \"viiv\",\n        10000000000000: \"viv\",\n        50000000000000:\
    \ \"viiv\",\n        100000000000000: \"viv\",\n        500000000000000: \"viiv\"\
    ,\n        1000000000000000: \"viv\",\n        5000000000000000: \"viiv\",\n \
    \       1000000000000000000: \"viv\",\n        50000000000000000: \"viiv\",\n\
    \        10000000000000000000: \"viv\",\n        5000000000000000000: \"viiv\"\
    ,\n        100000000000000000000: \"viv\",\n        50000000000000000000: \"viiv\"\
    ,\n        1000000000000000000000: \"viv\",\n        500000000000000000000: \"\
    viiv\",\n        10000000000000000000000: \"viv\",\n        5000000000000000000000:\
    \ \"viiv\",\n        100000000000000000000000: \"viv\",\n        50000000000000000000000:\
    \ \"viiv\",\n        1000000000000000000000000: \"viv\",\n        500000000000000000000000:\
    \ \"viiv\",\n        10000000000000000000000000: \"viv\",\n        5000000000000000000000000:\
    \ \"viiv\",\n        100000000000000000000000000: \"viv\",\n        50000000000000000000000000:\
    \ \"viiv\",\n        1000000000000000000000000000: \"viv\",\n        500000000000000000000000000:\
    \ \"viiv\",\n        10000000000000000000000000000: \"viv\",\n        5000000000000000000000000000:\
    \ \"viiv\",\n        100000000000000000000000000000: \"viv\",\n        50000000000000000000000000000:\
    \ \"viiv\",\n        1000000000000000000000000000000: \"viv\",\n        500000000000000000000000000000:\
    \ \"viiv\",\n        10000000000000000000000000000000", "    roman_number := \"\
    \"\n    switch number {\n    case 1:\n        roman_number = \"I\"\n    case 2:\n\
    \        roman_number = \"II\"\n    case 3:\n        roman_number = \"III\"\n\
    \    case 4:\n        roman_number = \"IV\"\n    case 5:\n        roman_number\
    \ = \"V\"\n    case 6:\n        roman_number = \"VI\"\n    case 7:\n        roman_number\
    \ = \"VII\"\n    case 8:\n        roman_number = \"VIII\"\n    case 9:\n     \
    \   roman_number = \"IX\"\n    case 10:\n        roman_number = \"X\"\n    case\
    \ 11:\n        roman_number = \"XI\"\n    case 12:\n        roman_number = \"\
    XII\"\n    case 13:\n        roman_number = \"XIII\"\n    case 14:\n        roman_number\
    \ = \"XIV\"\n    case 15:\n        roman_number = \"XV\"\n    case 16:\n     \
    \   roman_number = \"XVI\"\n    case 17:\n        roman_number = \"XVII\"\n  \
    \  case 18:\n        roman_number = \"XVIII\"\n    case 19:\n        roman_number\
    \ = \"XIX\"\n    case 20:\n        roman_number = \"XX\"\n    case 21:\n     \
    \   roman_number = \"XXI\"\n    case 22:\n        roman_number = \"XXII\"\n  \
    \  case 23:\n        roman_number = \"XXIII\"\n    case 24:\n        roman_number\
    \ = \"XXIV\"\n    case 25:\n        roman_number = \"XXV\"\n    case 26:\n   \
    \     roman_number = \"XXVI\"\n    case 27:\n        roman_number = \"XXVII\"\n\
    \    case 28:\n        roman_number = \"XXVIII\"\n    case 29:\n        roman_number\
    \ = \"XXIX\"\n    case 30:\n        roman_number = \"XXX\"\n    case 31:\n   \
    \     roman_number = \"XXXI\"\n    case 32:\n        roman_number = \"XXXII\"\n\
    \    case 33:\n        roman_number = \"XXXIII\"\n    case 34:\n        roman_number\
    \ = \"XXXIV\"\n    case 35:\n        roman_number = \"XXXV\"\n    case 36:\n \
    \       roman_number = \"XXXVI\"\n    case 37:\n        roman_number = \"XXXVII\"\
    \n    case 38:\n        roman_number = \"XXXVIII\"\n    case 39:\n        roman_number\
    \ = \"XXXIX\"\n    case 40:\n        roman_number = \"XL\"", "    roman_number\
    \ := \"\"\n    switch number {\n    case 1:\n        roman_number = \"x\"\n  \
    \  case 5:\n        roman_number = \"v\"\n    case 10:\n        roman_number =\
    \ \"i\"\n    case 20:\n        roman_number = \"x\"\n    case 50:\n        roman_number\
    \ = \"l\"\n    case 100:\n        roman_number = \"c\"\n    case 200:\n      \
    \  roman_number = \"d\"\n    case 500:\n        roman_number = \"l\"\n    case\
    \ 1000:\n        roman_number = \"c\"\n    default:\n        fmt.Println(\"Invalid\
    \ input\")\n    }\n    return roman_number\n}\n", "    romans := []string{\n \
    \       \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"\
    , \"X\", \"XI\",\n        \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\"\
    , \"XVIII\", \"XIX\", \"XX\",\n        \"XXI\", \"XXII\", \"XXIII\", \"XXIV\"\
    , \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\",\n        \"XXIX\", \"XXX\", \"XXIII\"\
    , \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\",\n        \"XXIX\", \"XL\"\
    , \"L\", \"LI\", \"LXI\", \"LXII\", \"LXIII\", \"LXIV\", \"LXV\",\n        \"\
    LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\", \"LXXIII\"\
    ,\n        \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\"\
    , \"LXXX\",\n        \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\", \"\
    LXXVIII\", \"LXXIX\",\n        \"XC\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\"\
    , \"DCC\", \"DCCC\", \"CM\", \"M\", \"MM\",\n        \"MMM\", \"MMMM\", \"MMMMM\"\
    , \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\",\n        \"MMMMMMMMMM\"\
    , \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\",\n\
    \        \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"\
    MMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMM\"\
    , \"MMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMMM\"\
    , \"MMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    , \"MMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    , \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    , \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\"\
    , \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\",\n        \"MMMMMMMMMMMMMMMMMMMM"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
