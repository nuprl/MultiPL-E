language: go_test.go
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 1 {\n                count++\n            }\n            if num%2 == 0 {\n\
    \                if num%10%2 == 1 {\n                    count++\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu6ktn19r_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu6ktn19r_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpu6ktn19r_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10\
    \ == 1 && num%100 != 11 {\n                count++\n            }\n          \
    \  if num%10 == 3 && num%100 != 13 {\n                count++\n            }\n\
    \            if num%10 == 5 && num%100 != 15 {\n                count++\n    \
    \        }\n            if num%10 == 7 && num%100 != 17 {\n                count++\n\
    \            }\n            if num%10 == 9 && num%100 != 19 {\n              \
    \  count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp33o2s41j_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp33o2s41j_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp33o2s41j_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpzuj92mpi_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpzuj92mpi_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpzuj92mpi_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpzuj92mpi_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 && num%2 == 0 {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpy6n6lx0q_test.go:21:16: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%10%2 == 1 {\n                count++\n            }\n    \
    \    }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpla1stagm_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpla1stagm_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpla1stagm_test.go:48: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpla1stagm_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpskpqcj60_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpskpqcj60_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpskpqcj60_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 && num%2 != 0 {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpos5bc41p_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpos5bc41p_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpos5bc41p_test.go:48: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpos5bc41p_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count += 2\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpiuxa_huq_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpiuxa_huq_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpiuxa_huq_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpiuxa_huq_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%10 == 1 && num%100 != 11 {\n                count++\n    \
    \        }\n            if num%10 == 1 && num%100 != 11 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp913f9thn_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp913f9thn_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp913f9thn_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp913f9thn_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 1 && num%2 == 0 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpwoj6de0f_test.go:22:12: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 0 {\n                if num > 10 && num < 100 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8ak8epq1_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8ak8epq1_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8ak8epq1_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%4 == 0 {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpy5ffvx7r_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpy5ffvx7r_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpy5ffvx7r_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpy5ffvx7r_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpdlj3c0l8_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpdlj3c0l8_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpdlj3c0l8_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpdlj3c0l8_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 {\n                if num > 10 && num < 100 {\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpd3if29cr_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpd3if29cr_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpd3if29cr_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpd3if29cr_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpo01qrr7m_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpo01qrr7m_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpo01qrr7m_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpskpqcj60_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpskpqcj60_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpskpqcj60_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpdlj3c0l8_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpdlj3c0l8_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpdlj3c0l8_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpdlj3c0l8_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpye3ehef6_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpye3ehef6_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpye3ehef6_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpye3ehef6_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                count += 2\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpiuxa_huq_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpiuxa_huq_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpiuxa_huq_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpiuxa_huq_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3dgmkdxz_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3dgmkdxz_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3dgmkdxz_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3dgmkdxz_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 && num%2 == 0 {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpbhjpzkyj_test.go:21:16: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 1 && num%2 != 0 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmphn5nfn8a_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmphn5nfn8a_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmphn5nfn8a_test.go:48: expected '%!s(int=2)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmphn5nfn8a_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmphn5nfn8a_test.go:48: expected '%!s(int=3)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__5 (0.00s)\n        tmphn5nfn8a_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 && num%2 == 0 {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpy6n6lx0q_test.go:21:16: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 && num%10%2 == 1 {\n                count++\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp_5aud_qm_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp_5aud_qm_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp_5aud_qm_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp_5aud_qm_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 {\n                if num > 10 && num < 100 {\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpd3if29cr_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpd3if29cr_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpd3if29cr_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpd3if29cr_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 0 && num%2 != 1 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmp_hjm8goe_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_hjm8goe_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_hjm8goe_test.go:48: expected '%!s(int=2)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_hjm8goe_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_hjm8goe_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpye3ehef6_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpye3ehef6_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpye3ehef6_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpye3ehef6_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   if num%2 == 1 {\n                        count++\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp5plb0_xw_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp5plb0_xw_test.go:51:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp5plb0_xw_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp5plb0_xw_test.go:51:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 1 {\n                count++\n            }\n            if num%2 == 0 {\n\
    \                if num%10%2 == 1 {\n                    count++\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu6ktn19r_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu6ktn19r_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpu6ktn19r_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 0 && num%2 != 1 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__0\
    \ (0.00s)\n        tmp_hjm8goe_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__1 (0.00s)\n        tmp_hjm8goe_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_hjm8goe_test.go:48: expected '%!s(int=2)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_hjm8goe_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_hjm8goe_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 0 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpye3ehef6_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpye3ehef6_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpye3ehef6_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpye3ehef6_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 && num%2 == 0 {\n                count++\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T)\
    \ {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpbhjpzkyj_test.go:21:16: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 0 && num%4 == 0 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpvhdaq9dp_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpvhdaq9dp_test.go:48:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpvhdaq9dp_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpvhdaq9dp_test.go:48:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpkpme5hus_test.go:49: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpkpme5hus_test.go:49:\
    \ expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                if num%10%2 == 1 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpdjetda2m_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpdjetda2m_test.go:49: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n            if num%10%2 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpwnx7m17g_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpwnx7m17g_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \            if num%2 == 1 {\n                if num%10%2 == 1 {\n           \
    \         count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=8)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpj6vu9xsx_test.go:50: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmpj6vu9xsx_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%10%2\
    \ == 1 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpo01qrr7m_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpo01qrr7m_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpo01qrr7m_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 0 {\n                if num > 10 && num < 100 {\n                 \
    \   count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpskpqcj60_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpskpqcj60_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpskpqcj60_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 2
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            count++\n\
    \        }\n        if num%2 == 1 && num%2 == 0 {\n            count++\n     \
    \   }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n\
    \  candidate := specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpu0qq4gml_test.go:22:12: suspect and: num%2 == 1 && num%2 == 0

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num > 10 && num < 100 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp0dcuarfx_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp0dcuarfx_test.go:52:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp0dcuarfx_test.go:52: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp0dcuarfx_test.go:52:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 1 {\n                count++\n            }\n            if num%2 == 0 {\n\
    \                if num%10%2 == 1 {\n                    count++\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmpu6ktn19r_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmpu6ktn19r_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmpu6ktn19r_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count\
    \ int\n    for _, num := range nums {\n        if num > 10 {\n            if num%2\
    \ == 1 {\n                count++\n            }\n            if num%2 == 0 {\n\
    \                count += 2\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp8s9d_z9l_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp8s9d_z9l_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp8s9d_z9l_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp8s9d_z9l_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074957
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n            if num%10%2\
    \ == 0 {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected:\
    \ 0 },\n     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n  \
    \   { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n    \
    \ { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected: 4 },\n   \
    \  { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3 },\n     {\
    \ actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmp3a3vuh3f_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__4 (0.00s)\n        tmp3a3vuh3f_test.go:50:\
    \ expected '%!s(int=3)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10%2 == 1 {\n                count++\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestSpecialfilter(t *testing.T) {\n  candidate :=\
    \ specialFilter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, -2,\
    \ 1, -5}), expected: 0 },\n     { actual: candidate([]int{15, -73, 14, -15}),\
    \ expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45, 21, 109}), expected:\
    \ 2 },\n     { actual: candidate([]int{43, -12, 93, 125, 121, 109}), expected:\
    \ 4 },\n     { actual: candidate([]int{71, -2, -33, 75, 21, 19}), expected: 3\
    \ },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{}),\
    \ expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp8zfwfk7o_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp8zfwfk7o_test.go:47: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%10 == 1 && num%100 != 11 {\n                count++\n            }\n   \
    \         if num%10 == 3 && num%100 != 13 {\n                count++\n       \
    \     }\n            if num%10 == 5 && num%100 != 15 {\n                count++\n\
    \            }\n            if num%10 == 7 && num%100 != 17 {\n              \
    \  count++\n            }\n            if num%10 == 9 && num%100 != 19 {\n   \
    \             count++\n            }\n        }\n    }\n    return count\n}\n\n\
    func TestSpecialfilter(t *testing.T) {\n  candidate := specialFilter\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, -2, 1, -5}), expected: 0 },\n\
    \     { actual: candidate([]int{15, -73, 14, -15}), expected: 1 },\n     { actual:\
    \ candidate([]int{33, -2, -3, 45, 21, 109}), expected: 2 },\n     { actual: candidate([]int{43,\
    \ -12, 93, 125, 121, 109}), expected: 4 },\n     { actual: candidate([]int{71,\
    \ -2, -33, 75, 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected:\
    \ 0 },\n     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__1\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__2 (0.00s)\n        tmpz6ph69rl_test.go:59:\
    \ expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestSpecialfilter/test_num__3\
    \ (0.00s)\n        tmpz6ph69rl_test.go:59: expected '%!s(int=4)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Write a function that takes an array of numbers as input and returns \n\
    // the number of elements in the array that are greater than 10 and both \n//\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n\
    // >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33,\
    \ -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    count\
    \ := 0\n    for _, num := range nums {\n        if num > 10 {\n            if\
    \ num%2 == 1 {\n                count++\n            }\n            if num%2 ==\
    \ 0 {\n                if num%10%2 == 1 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestSpecialfilter(t\
    \ *testing.T) {\n  candidate := specialFilter\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5, -2, 1, -5}), expected: 0 },\n     { actual: candidate([]int{15,\
    \ -73, 14, -15}), expected: 1 },\n     { actual: candidate([]int{33, -2, -3, 45,\
    \ 21, 109}), expected: 2 },\n     { actual: candidate([]int{43, -12, 93, 125,\
    \ 121, 109}), expected: 4 },\n     { actual: candidate([]int{71, -2, -33, 75,\
    \ 21, 19}), expected: 3 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{}), expected: 0 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSpecialfilter (0.00s)\n    --- FAIL: TestSpecialfilter/test_num__2\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=2)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSpecialfilter/test_num__3 (0.00s)\n        tmp_85naghk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestSpecialfilter/test_num__4\
    \ (0.00s)\n        tmp_85naghk_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
