language: go_test.go
name: HumanEval_37_sort_even
results:
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens = l\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n   \
    \         evens[i] = l[i]\n        }\n    }\n    sort.Sort(evens)\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp826i4jip_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i-1]\n   \
    \     }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp191ao_bs_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := range l {\n        if i%2 == 0\
    \ {\n            evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n\
    \        }\n    }\n    sort.Ints(evens)\n    sort.Ints(odds)\n    for i := range\
    \ l {\n        if i%2 == 0 {\n            l[i] = evens[i]\n        } else {\n\
    \            l[i] = odds[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc55nv6xk_test.go:25:5: undefined: sort

    /tmp/tmpc55nv6xk_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens = evens[:0]\n    odds = odds[:0]\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        } else {\n            odds = append(odds, v)\n        }\n    }\n\
    \    return append(evens, odds...)\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpj1oe3qip_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpj1oe3qip_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=-5) %!s(int=-3) %!s(int=9)\
    \ %!s(int=123) %!s(int=-10) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpj1oe3qip_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=23) %!s(int=3) %!s(int=12) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=11)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    for i\
    \ := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            evens[i] = l[i]\n\
    \        } else {\n            odds[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    for i := 0; i < len(l);\
    \ i++ {\n        if i % 2 == 0 {\n            l[i] = evens[i]\n        } else\
    \ {\n            l[i] = odds[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahomj9sp_test.go:18:11: no new variables on left side of :=

    /tmp/tmpahomj9sp_test.go:26:5: undefined: sort

    /tmp/tmpahomj9sp_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens := evens[:0]\n    for i := 0; i < len(l); i++ {\n        if i%2 ==\
    \ 0 {\n            evens = append(evens, l[i])\n        } else {\n           \
    \ evens = append(evens, l[i])\n            evens = append(evens, l[i])\n     \
    \   }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwj9zdyqz_test.go:17:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cd5q9po_test.go:16:7: no new variables on left side of :=

    /tmp/tmp0cd5q9po_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens = append(evens, l...)\n    odds =\
    \ append(odds, l...)\n    sort.Ints(evens)\n    sort.Ints(odds)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcac833v3_test.go:20:5: undefined: sort

    /tmp/tmpcac833v3_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cd5q9po_test.go:16:7: no new variables on left side of :=

    /tmp/tmp0cd5q9po_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[(i+1)/2]\n        }\n   \
    \ }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmplzeh8al__test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=-5)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=-3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmplzeh8al__test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=-12) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=23) %!s(int=12)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    i := 0\n    for _, v := range l {\n    \
    \    if i%2 == 0 {\n            evens[i] = v\n        } else {\n            odds[i]\
    \ = v\n        }\n        i++\n    }\n    return append(odds, evens...)\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpaabm7yp9_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=3)]'\n\
    \    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpaabm7yp9_test.go:45:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0)\
    \ %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpaabm7yp9_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=0) %!s(int=8)\
    \ %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=11) %!s(int=0)\
    \ %!s(int=-10) %!s(int=5) %!s(int=0) %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=12) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073993
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%2\
    \ == 1 {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpebspyolo_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpebspyolo_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1], evens[2] = l[0], l[1],\
    \ l[2]\n    odds[0], odds[1], odds[2] = l[0], l[1], l[2]\n    evens[3], evens[4],\
    \ evens[5] = l[3], l[4], l[5]\n    odds[3], odds[4], odds[5] = l[3], l[4], l[5]\n\
    \    evens[6], evens[7], evens[8] = l[6], l[7], l[8]\n    odds[6], odds[7], odds[8]\
    \ = l[6], l[7], l[8]\n    evens[9], evens[10], evens[11] = l[9], l[10], l[11]\n\
    \    odds[9], odds[10], odds[11] = l[9], l[10], l[11]\n    evens[12], evens[13],\
    \ evens[14] = l[12], l[13], l[14]\n    odds[12], odds[13], odds[14] = l[12], l[13],\
    \ l[14]\n    evens[15], evens[16], evens[17] = l[15], l[16], l[17]\n    odds[15],\
    \ odds[16], odds[17] = l[15], l[16], l[17]\n    evens[18], evens[19], evens[20]\
    \ = l[18], l[19], l[20]\n    odds[18], odds[19], odds[20] = l[18], l[19], l[20]\n\
    \    evens[21], evens[22], evens[23] = l[21], l[22], l[23]\n    odds[21], odds[22],\
    \ odds[23] = l[21], l[22], l[23]\n    evens[24], evens[25], evens[26] = l[24],\
    \ l[25], l[26]\n    odds[24], odds[25], odds[26] = l[24], l[25], l[26]\n    evens[27],\
    \ evens[28], evens[29] = l[27], l[28], l[29]\n    odds[27], odds[28], odds[29]\
    \ = l[27], l[28], l[29]\n    evens[30], evens[31], evens[32] = l[30], l[31], l\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yawpv68_test.go:39:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[sort.Search(len(l), func(i\
    \ int) bool {\n                return l[i] > l[sort.Search(len(l), func(i int)\
    \ bool {\n                    return l[i] > l[sort.Search(len(l), func(i int)\
    \ bool {\n                        return l[i] > l[sort.Search(len(l), func(i int)\
    \ bool {\n                            return l[i] > l[sort.Search(len(l), func(i\
    \ int) bool {\n                                return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                    return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                        return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                            return l[i]\
    \ > l[sort.Search(len(l), func(i int) bool {\n                               \
    \                 return l[i] > l[sort.Search(len(l), func(i int) bool {\n   \
    \                                                 return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                                       \
    \ return l[i] > l[sort.Search(len(l), func(i int) bool {\n                   \
    \                                         return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                                       \
    \         return l[i] > l[sort.Search(len(l), func(i int) bool {\n           \
    \                                                         return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                                       \
    \                 return l[i] > l[sort.Search(len(l), func(i int) bool {\n   \
    \                                                                         return\
    \ l[i] > l[sort.Search(len(l), func(i int) bool {\n                          \
    \                                      return l[i] > l[sort.Search(len(l), func(i\
    \ int) bool {\n                                                              \
    \      return l[i] > l[sort.Search(len(l), func(i int) bool {\n              \
    \                                                          return l[i] > l[sort.Search(len(l),\
    \ func(i int) bool {\n                                                       \
    \                     return l[i] > l[sort.Search(len(l), func(i int) bool {\n\
    \                                                                return l[i] >\
    \ l[sort.Search(len(l), func(i int) bool {\n                                 \
    \                                   return l[i] > l[sort.Search(len(l), func(i\
    \ int) bool {\n                                                              \
    \          return l[i] > l[sort.Search(len(l), \nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm6guo3jf_test.go:45:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074074
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens := append(evens, l...)\n    evens = append(evens, l...)\n    evens\
    \ = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmpn3fhz_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073989
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_p9fsoe_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8e2t7us_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0611wy29_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens = append(evens, l...)\n    odds =\
    \ append(odds, l...)\n    sort.Sort(evens)\n    sort.Sort(odds)\n    return append(evens,\
    \ odds...)\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt93kbxr4_test.go:20:5: undefined: sort

    /tmp/tmpt93kbxr4_test.go:21:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    for i := 0; i < len(evens);\
    \ i++ {\n        l[i] = evens[i]\n    }\n    for i := 0; i < len(odds); i++ {\n\
    \        l[i] = odds[i]\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1u43ipvq_test.go:25:5: undefined: sort

    /tmp/tmp1u43ipvq_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptiqqldi8_test.go:72:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074074
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            j := i/2\n            tmp\
    \ := l[j]\n            l[j] = l[i]\n            l[i] = tmp\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxf_417f_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int,\
    \ len(l))\n    for i := range l {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8nv9czpz_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    evens := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpngdexpx7_test.go:16:7: no new variables on left side of :=

    /tmp/tmpngdexpx7_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens =\
    \ append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(even\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg40n175l_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens := append(evens, l...)\n    evens = append(evens, l...)\n    evens\
    \ = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmpn3fhz_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073989
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0\
    \ {\n            evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n\
    \        }\n    }\n    for i := 0; i < len(evens); i++ {\n        for j := 0;\
    \ j < len(odds); j++ {\n            if evens[i] > odds[j] {\n                evens[i],\
    \ evens[j] = evens[j], evens[i]\n            }\n        }\n    }\n    return evens\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpecuemq6n_test.go:18:11: no new variables on left side of :=

    /tmp/tmpecuemq6n_test.go:19:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpam32wkxt_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n    sort.Ints(l)\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] =\
    \ l[i]\n        } else {\n            l[i] = l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplj5qmcih_test.go:16:7: no new variables on left side of :=

    /tmp/tmplj5qmcih_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(evens, odds...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp82a4921k_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp82a4921k_test.go:43:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp82a4921k_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := range l {\n        if i%2 == 0\
    \ {\n            evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f187ec0,\
    \ 0x3, 0x5fc0e0?})\n\t/tmp/tmp43iphpg5_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f187e90, 0x3, 0x5fc0e0?})\n\
    \t/tmp/tmp43iphpg5_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f187e60, 0x3, 0x5fc0e0?})\n\t/tmp/tmp43iphpg5_test.go:25\
    \ +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\ncommand-line-arguments_test.sort_even({0xc00f187e30,\
    \ 0x3, 0x5fc0e0?})\n\t/tmp/tmp43iphpg5_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8\
    \ pc=0x4ef6f2\ncommand-line-arguments_test.sort_even({0xc00f187e00, 0x3, 0x5fc0e0?})\n\
    \t/tmp/tmp43iphpg5_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f187dd0, 0x3, 0x5fc0e0?})\n\t/tmp/tmp43iphpg5_test.go:25\
    \ +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\ncommand-line-arguments_test.sort_even({0xc00f187da0,\
    \ 0x3, 0x5fc0e0?})\n\t/tmp/tmp43iphpg5_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0\
    \ pc=0x4ef6f2\ncommand-line-arguments_test.sort_even({0xc00f187d70, 0x3, 0x5fc0e0?})\n\
    \t/tmp/tmp43iphpg5_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f187d40, 0x3, 0x5fc0e0?})\n\t/tmp/tmp43iphpg5_test.go:25\
    \ +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\ncommand-line-arguments_test.sort_even({0xc00f187d10,\
    \ 0x3, 0x5fc0e0?})\n\t/tmp/tmp43i"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        } else {\n            evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyl6adbk_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073993
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i]\n        }\n    }\n    sort.Sort(l)\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzj81m72_test.go:16:7: no new variables on left side of :=

    /tmp/tmpwzj81m72_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfaqzjf55_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl0suu5bi_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n    for i := 0;\
    \ i < len(l)-1; i++ {\n        if l[i] > l[i+1] {\n            tmp := l[i]\n \
    \           l[i] = l[i+1]\n            l[i+1] = tmp\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4zitnn2w_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            j := i/2\n            j :=\
    \ j + int(j%2)\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphzvaakt1_test.go:16:7: no new variables on left side of :=

    /tmp/tmphzvaakt1_test.go:23:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := range l {\n        l[i] = l[i]\n    }\n    sort.Sort(l)\n    for i\
    \ := range l {\n        if i%2 == 0 {\n            l[i] = l[i]\n        } else\
    \ {\n            l[i] = l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp5lpp34u_test.go:16:7: no new variables on left side of :=

    /tmp/tmpp5lpp34u_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Ints(evens)\n\
    \    for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuylyk8sc_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens := evens[:len(l)/2]\n    for i := 0; i < len(l); i++ {\n        evens[i]\
    \ = l[i]\n    }\n    evens = append(evens, l[len(l)/2:])\n    sort.Ints(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5nsbp6t6_test.go:17:11: no new variables on left side of :=

    /tmp/tmp5nsbp6t6_test.go:21:28: cannot use l[len(l) / 2:] (value of type []int)
    as type int in argument to append

    /tmp/tmp5nsbp6t6_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2wbbmcv_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgr6ac7jq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        l[i] = l[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] =\
    \ l[i]\n        } else {\n            l[i] = l[i-1]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptni5ex74_test.go:16:7: no new variables on left side of :=

    /tmp/tmptni5ex74_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Ints(l)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n        }\
    \ else {\n            l[i] = l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcelz0mot_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i]\n        }\n    }\n    sort.Ints(l)\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ck2yyhk_test.go:16:7: no new variables on left side of :=

    /tmp/tmp9ck2yyhk_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            j := i/2\n            l[i]\
    \ = l[j]\n            l[j] = l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9kxp7knq_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    l := l[:len(l)/2]\n\
    \    copy(l, l[len(l)-len(l)/2:])\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpup6poivu_test.go:16:7: no new variables on left side of :=

    /tmp/tmpup6poivu_test.go:18:5: undefined: sort

    /tmp/tmpup6poivu_test.go:19:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0611wy29_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            l[i] = l[i] + l[i]/2\n   \
    \     }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9wye1zh_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpftay78_y_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpftay78_y_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8e2t7us_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    return append(evens, odds...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qdxqhck_test.go:25:5: undefined: sort

    /tmp/tmp0qdxqhck_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens =\
    \ append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(even\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg40n175l_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1] = evens[1], evens[0]\n\
    \    odds[0], odds[1] = odds[1], odds[0]\n    for i := 0; i < len(l); i += 2 {\n\
    \        evens[i], evens[i+1] = evens[i+1], evens[i]\n        odds[i], odds[i+1]\
    \ = odds[i+1], odds[i]\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000160030})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc00011be00?, 0x3, 0x2b4b03940ff8?})\n\
    \t/tmp/tmppyqn_wfr_test.go:21 +0xd5\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmppyqn_wfr_test.go:34 +0x75\ntesting.tRunner(0xc000103520, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2wbbmcv_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Ints(l)\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2qt5_90_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Ints(evens)\n\
    \    for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuylyk8sc_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    return append(evens, odds...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qdxqhck_test.go:25:5: undefined: sort

    /tmp/tmp0qdxqhck_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    sort.Ints(evens)\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp764_6vqx_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(evens, append(odds, l...)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpmyf8t6lm_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n \
    \       tmpmyf8t6lm_test.go:43: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3)\
    \ %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0)\
    \ %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpmyf8t6lm_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10) %!s(int=5) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpam32wkxt_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfaqzjf55_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9sd1p8j_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8e2t7us_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_p9fsoe_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfaqzjf55_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    return append(evens, odds...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qdxqhck_test.go:25:5: undefined: sort

    /tmp/tmp0qdxqhck_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i / 2]\n        }\n    }\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmptv_2rdv__test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmptv_2rdv__test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=-5) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmptv_2rdv__test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=-12) %!s(int=8) %!s(int=23) %!s(int=-12) %!s(int=3) %!s(int=4) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    for\
    \ i := range l {\n        if i%2 == 0 {\n            l[i] = evens[i]\n       \
    \ }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmnqycz9i_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1], evens[2] = l[0], l[1],\
    \ l[2]\n    odds[0], odds[1], odds[2] = l[0], l[1], l[2]\n    for i := 3; i <\
    \ len(l); i++ {\n        if evens[i%2] != evens[i-1] {\n            evens[i],\
    \ evens[i-1] = evens[i-1], evens[i]\n        }\n        if odds[i%2] != odds[i-1]\
    \ {\n            odds[i], odds[i-1] = odds[i-1], odds[i]\n        }\n    }\n \
    \   return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpt7a5zm5f_test.go:46: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-5)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpt7a5zm5f_test.go:46:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=-12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] =\
    \ evens[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_9jjub4_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            l[i] = l[i]\n        }\n \
    \   }\n    sort.Sort(l)\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl6rv3qez_test.go:16:7: no new variables on left side of :=

    /tmp/tmpl6rv3qez_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_p9fsoe_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    for i\
    \ := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            evens[i] = l[i]\n\
    \        } else {\n            odds[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    for i := 0; i < len(l);\
    \ i++ {\n        if i % 2 == 0 {\n            l[i] = evens[i]\n        } else\
    \ {\n            l[i] = odds[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpahomj9sp_test.go:18:11: no new variables on left side of :=

    /tmp/tmpahomj9sp_test.go:26:5: undefined: sort

    /tmp/tmpahomj9sp_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpam32wkxt_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    sort.Sort(sort.Reverse(sort.IntSlice(odds)))\n    return append(evens, odds...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0qdxqhck_test.go:25:5: undefined: sort

    /tmp/tmp0qdxqhck_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens = l\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n   \
    \         evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ao0amiw_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1], evens[2] = l[0], l[1],\
    \ l[2]\n    odds[0], odds[1], odds[2] = l[3], l[4], l[5]\n    evens[3], evens[4],\
    \ evens[5] = l[6], l[7], l[8]\n    odds[3], odds[4], odds[5] = l[9], l[10], l[11]\n\
    \    evens[6], evens[7], evens[8] = l[12], l[13], l[14]\n    odds[6], odds[7],\
    \ odds[8] = l[15], l[16], l[17]\n    evens[9], evens[10], evens[11] = l[18], l[19],\
    \ l[20]\n    odds[9], odds[10], odds[11] = l[21], l[22], l[23]\n    evens[12],\
    \ evens[13], evens[14] = l[24], l[25], l[26]\n    odds[12], odds[13], odds[14]\
    \ = l[27], l[28], l[29]\n    evens[15], evens[16], evens[17] = l[30], l[31], l[32]\n\
    \    odds[15], odds[16], odds[17] = l[33], l[34], l[35]\n    evens[18], evens[19],\
    \ evens[20] = l[36], l[37], l[38]\n    odds[18], odds[19], odds[20] = l[39], l[40],\
    \ l[41]\n    evens[21], evens[22], evens[23] = l[42], l[43], l[44]\n    odds[21],\
    \ odds[22], odds[23] = l[45], l[46], l[47]\n    evens[24], evens[25], evens[26]\
    \ = l[48], l[49], l[50]\n    odds[24], odds[25], odds[26] = l[51], l[52], l[53]\n\
    \    evens[27], evens[28], evens[29] = l[54], l[55], l[56]\n    odds[27], odds[28],\
    \ odds[29] = l[57], l[58], l[59]\n    evens[30], evens[3\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwx8r78gb_test.go:38:23: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int,\
    \ len(l))\n    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjv7l9x40_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    odds := make([]int, len(l))\n    evens := make([]int, \nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdcne328_test.go:59:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i % 2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f0c9518,\
    \ 0x3, 0xc0000c6400?})\n\t/tmp/tmpvplrj9yy_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f0c94e8, 0x3, 0xc0000c6400?})\n\
    \t/tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c94b8, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9488, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9458, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160578 sp=0xc020160510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9428, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c93f8, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c93c8, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9398, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgr6ac7jq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8e2t7us_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgr6ac7jq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    evens := make([]int, len(l))\n    odds := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    odds := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    odds := make([]int, len(l))\n    evens := make([]int, \nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgdcne328_test.go:59:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074076
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            l[i] = l[i]\n\
    \        } else {\n            l[i] = l[i]\n        }\n    }\n    sort.Sort(l)\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwzj81m72_test.go:16:7: no new variables on left side of :=

    /tmp/tmpwzj81m72_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1] = evens[1], evens[0]\n\
    \    for i := 2; i < len(l); i++ {\n        if evens[i-1] > l[i-1] {\n       \
    \     evens[i], evens[i-1] = evens[i-1], evens[i]\n        }\n    }\n    for i\
    \ := 0; i < len(evens); i++ {\n        if evens[i] != evens[i-1] {\n         \
    \   odds[i], odds[i-1] = odds[i-1], odds[i]\n        }\n    }\n    return odds\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2b663b0f4a88?})\n\
    \t/tmp/tmp4m85p1fd_test.go:25 +0xf8\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp4m85p1fd_test.go:39 +0x75\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1], evens[2] = l[0], l[1],\
    \ l[2]\n    odds[0], odds[1], odds[2] = l[0], l[1], l[2]\n    evens[3], evens[4],\
    \ evens[5] = l[3], l[4], l[5]\n    odds[3], odds[4], odds[5] = l[3], l[4], l[5]\n\
    \    evens[6], evens[7], evens[8] = l[6], l[7], l[8]\n    odds[6], odds[7], odds[8]\
    \ = l[6], l[7], l[8]\n    evens[9], evens[10], evens[11] = l[9], l[10], l[11]\n\
    \    odds[9], odds[10], odds[11] = l[9], l[10], l[11]\n    evens[12], evens[13],\
    \ evens[14] = l[12], l[13], l[14]\n    odds[12], odds[13], odds[14] = l[12], l[13],\
    \ l[14]\n    evens[15], evens[16], evens[17] = l[15], l[16], l[17]\n    odds[15],\
    \ odds[16], odds[17] = l[15], l[16], l[17]\n    evens[18], evens[19], evens[20]\
    \ = l[18], l[19], l[20]\n    odds[18], odds[19], odds[20] = l[18], l[19], l[20]\n\
    \    evens[21], evens[22], evens[23] = l[21], l[22], l[23]\n    odds[21], odds[22],\
    \ odds[23] = l[21], l[22], l[23]\n    evens[24], evens[25], evens[26] = l[24],\
    \ l[25], l[26]\n    odds[24], odds[25], odds[26] = l[24], l[25], l[26]\n    evens[27],\
    \ evens[28], evens[29] = l[27], l[28], l[29]\n    odds[27], odds[28], odds[29]\
    \ = l[27], l[28], l[29]\n    evens[30], evens[31], evens[32] = l[30], l[31], l\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_yawpv68_test.go:39:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ = append(evens, l...)\n    odds = append(odds, l...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds\
    \ = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds = append(odds,\
    \ odds...)\n    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n\
    \    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds\
    \ = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds = append(odds,\
    \ odds...)\n    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n\
    \    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds\
    \ = append(odds, odds...)\n    evens = append(evens, evens...)\n    odds = append(odds,\
    \ odds...)\n    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n\
    \    evens = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens\
    \ = append(evens, evens...)\n    odds = append(odds, odds...)\n    evens = append(evens,\
    \ evens...)\n    odds = append(odds, odds...)\n    evens = append(evens, evens...)\n\
    \    odds = append(odds, odds...\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnsgwo7a3_test.go:67:1: missing '','' in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073993
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens := append(evens, l...)\n    evens = append(evens, l...)\n    evens\
    \ = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmpn3fhz_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073989
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens := append(evens, l...)\n    evens = append(evens, l...)\n    evens\
    \ = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmpn3fhz_test.go:73:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073989
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1] = evens[1], evens[0]\n\
    \    odds[0], odds[1] = odds[1], odds[0]\n    for i := 0; i < len(l); i++ {\n\
    \        if i % 2 == 0 {\n            evens[i] = l[i]\n        } else {\n    \
    \        odds[i] = l[i]\n        }\n    }\n    return append(sort_even(evens),\
    \ sort_even(odds))\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqk60v957_test.go:27:37: cannot use sort_even(odds) (value of type []int)
    as type int in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i += 2 {\n        l[i], l[i+1] = l[i+1],\
    \ l[i]\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2vft2av5_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe2wbbmcv_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_p9fsoe_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        }\n    }\n    for i := 0; i < len(l); i++ {\n        if i%2\
    \ == 0 {\n            l[i] = evens[i]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpkvd84pog_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpkvd84pog_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    for i\
    \ := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            evens[i] = l[i]\n\
    \        } else {\n            odds[i] = l[i]\n        }\n    }\n    return append(evens,\
    \ append(odds, evens...)...)\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpggz5gde1_test.go:18:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfaqzjf55_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n\n    for i := 0; i < len(l); i++ {\n        if i % 2 ==\
    \ 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n\
    \        }\n    }\n\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0\
    \ {\n            evens[i] = evens[i]\n        } else {\n            odds[i] =\
    \ odds[i]\n        }\n    }\n\n    for i := 0; i < len(evens); i++ {\n       \
    \ if evens[i] > odds[i] {\n            evens[i], odds[i] = odds[i], evens[i]\n\
    \        }\n    }\n\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptav6bb9l_test.go:18:11: no new variables on left side of :=

    /tmp/tmptav6bb9l_test.go:19:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n    return l\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cd5q9po_test.go:16:7: no new variables on left side of :=

    /tmp/tmp0cd5q9po_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmps33wbbsa_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps33wbbsa_test.go:40: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=0)\
    \ %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps33wbbsa_test.go:40:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Ints(evens)\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0611wy29_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074075
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(evens, odds...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp3lfv6f9d_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp3lfv6f9d_test.go:43:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=5)\
    \ %!s(int=0) %!s(int=-5) %!s(int=0) %!s(int=-3) %!s(int=0) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=0) %!s(int=-10) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp3lfv6f9d_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=-12) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=12)\
    \ %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=4) %!s(int=0) %!s(int=2)\
    \ %!s(int=0) %!s(int=11) %!s(int=0) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            j := i/2\n            j :=\
    \ j + i/2\n            l[i], l[j] = l[j], l[i]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjld8u687_test.go:16:7: no new variables on left side of :=

    /tmp/tmpjld8u687_test.go:23:15: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1], evens[2] = l[0], l[1],\
    \ l[2]\n    odds[0], odds[1], odds[2] = l[3], l[4], l[5]\n    evens[3], evens[4],\
    \ evens[5] = l[6], l[7], l[8]\n    odds[3], odds[4], odds[5] = l[9], l[10], l[11]\n\
    \    evens[6], evens[7], evens[8] = l[12], l[13], l[14]\n    odds[6], odds[7],\
    \ odds[8] = l[15], l[16], l[17]\n    evens[9], evens[10], evens[11] = l[18], l[19],\
    \ l[20]\n    odds[9], odds[10], odds[11] = l[21], l[22], l[23]\n    evens[12],\
    \ evens[13], evens[14] = l[24], l[25], l[26]\n    odds[12], odds[13], odds[14]\
    \ = l[27], l[28], l[29]\n    evens[15], evens[16], evens[17] = l[30], l[31], l[32]\n\
    \    odds[15], odds[16], odds[17] = l[33], l[34], l[35]\n    evens[18], evens[19],\
    \ evens[20] = l[36], l[37], l[38]\n    odds[18], odds[19], odds[20] = l[39], l[40],\
    \ l[41]\n    evens[21], evens[22], evens[23] = l[42], l[43], l[44]\n    odds[21],\
    \ odds[22], odds[23] = l[45], l[46], l[47]\n    evens[24], evens[25], evens[26]\
    \ = l[48], l[49], l[50]\n    odds[24], odds[25], odds[26] = l[51], l[52], l[53]\n\
    \    evens[27], evens[28], evens[29] = l[54], l[55], l[56]\n    odds[27], odds[28],\
    \ odds[29] = l[57], l[58], l[59]\n    evens[30], evens[3\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwx8r78gb_test.go:38:23: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Ints(l)\n    evens := make([]int,\
    \ len(l))\n    evens = l\n    for i := 0; i < len(l); i++ {\n        if i%2 ==\
    \ 0 {\n            evens[i] = l[i]\n        }\n    }\n    return evens\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzqy1j6eo_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i % 2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc020160370\
    \ sp=0xc020160368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f0c9518,\
    \ 0x3, 0xc0000c6400?})\n\t/tmp/tmpvplrj9yy_test.go:16 +0x31 fp=0xc0201603d8 sp=0xc020160370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f0c94e8, 0x3, 0xc0000c6400?})\n\
    \t/tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160440 sp=0xc0201603d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c94b8, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc0201604a8 sp=0xc020160440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9488, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160510 sp=0xc0201604a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9458, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160578 sp=0xc020160510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9428, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc0201605e0 sp=0xc020160578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c93f8, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160648 sp=0xc0201605e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c93c8, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc0201606b0 sp=0xc020160648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f0c9398, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpvplrj9yy_test.go:25 +0x92 fp=0xc020160718 sp=0xc0201606b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n\
    \    evens := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens\
    \ := make([]int, len(l))\n    evens := make([]int, len(l))\n    evens := make([]int,\
    \ len(l))\n    evens := make([]int, len(l))\n    evens := make([]int, \nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg58jrxab_test.go:59:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073995
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens[0], evens[1] = evens[1], evens[0]\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            odds[i] = l[i]\n        }\n    }\n   \
    \ return append(sort_even(evens), sort_even(odds)...)\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00ef8bec0,\
    \ 0x3, 0xc0000c6400?})\n\t/tmp/tmpgkszufzb_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00ef8be90, 0x3, 0xc0000c6400?})\n\
    \t/tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8be60, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8be30, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8be00, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8bdd0, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8bda0, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8bd70, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef8bd40, 0x3, 0xc0000c6400?})\n\t\
    /tmp/tmpgkszufzb_test.go:26 +0xb2 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef712\n\
    command-line-arguments_test.sort_even({0xc00ef"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if\
    \ i%2 == 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i]\
    \ = l[i]\n        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f116f00,\
    \ 0x3, 0xc000100400?})\n\t/tmp/tmpduhzllju_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f116ed0, 0x3, 0xc000100400?})\n\
    \t/tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116ea0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e70, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e40, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116e10, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116de0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116db0, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f116d80, 0x3, 0xc000100400?})\n\t\
    /tmp/tmpduhzllju_test.go:25 +0x92 fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6f2\n\
    command-line-arguments_test.sort_even({0xc00f1"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Ints(evens)\n\
    \    for i := 0; i < len(evens); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpitp3w0an_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens = l\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n   \
    \         evens[i] = l[i]\n        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n\
    \    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ao0amiw_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := make([]int, len(l))\n    odds :=\
    \ make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i % 2 ==\
    \ 0 {\n            evens[i] = l[i]\n        } else {\n            odds[i] = l[i]\n\
    \        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp12w_v99a_test.go:18:11: no new variables on left side of :=

    /tmp/tmp12w_v99a_test.go:19:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    for i := 0; i < len(l); i++ {\n        l[i] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9sd1p8j_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  return evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp21helnvk_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp21helnvk_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        evens[i] = l[i]\n    }\n    sort.Sort(evens)\n\
    \    for i := range l {\n        l[i] = evens[i]\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58im92x2_test.go:20:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    evens := l\n    for i := 0; i < len(evens);\
    \ i++ {\n        evens[i] = evens[i]\n    }\n    for i := 0; i < len(evens); i++\
    \ {\n        odds[i] = evens[i]\n    }\n    for i := 0; i < len(evens); i++ {\n\
    \        if evens[i] > evens[i+1] {\n            evens[i], evens[i+1] = evens[i+1],\
    \ evens[i]\n        }\n    }\n    return evens\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaxlnswur_test.go:18:11: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n\
    \        }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f099ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmp837tw2vz_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f099e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f099d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmp837tw2vz_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f0"
  timestamp: 1660074078
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l := make([]int, len(l))\n  \
    \  copy(l, l)\n    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n    \
    \        l[i] = l[i]\n        } else {\n            j := i/2\n            for\
    \ ; j < len(l) && l[j] == l[j+1]; j++ {\n            }\n            l[i] = l[j]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaqvtc2_z_test.go:16:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074077
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    odds := make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            evens[i] = v\n        } else {\n            odds[i] = v\n \
    \       }\n    }\n    return append(sort_even(evens), sort_even(odds)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5204b5?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.makeslice(0x4fd720?, 0x3?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:88 +0xc5 fp=0xc0201e0370\
    \ sp=0xc0201e0368 pc=0x449c25\ncommand-line-arguments_test.sort_even({0xc00f173ec0,\
    \ 0x3, 0xc000100800?})\n\t/tmp/tmpkmucdhws_test.go:16 +0x31 fp=0xc0201e03d8 sp=0xc0201e0370\
    \ pc=0x4ef691\ncommand-line-arguments_test.sort_even({0xc00f173e90, 0x3, 0xc000100800?})\n\
    \t/tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0440 sp=0xc0201e03d8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e60, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e04a8 sp=0xc0201e0440 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e30, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0510 sp=0xc0201e04a8 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173e00, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0578 sp=0xc0201e0510 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173dd0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e05e0 sp=0xc0201e0578 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173da0, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0648 sp=0xc0201e05e0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d70, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e06b0 sp=0xc0201e0648 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f173d40, 0x3, 0xc000100800?})\n\t\
    /tmp/tmpkmucdhws_test.go:25 +0x8e fp=0xc0201e0718 sp=0xc0201e06b0 pc=0x4ef6ee\n\
    command-line-arguments_test.sort_even({0xc00f"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := 0; i < len(l); i++ {\n        if i%2 == 0 {\n            evens[i]\
    \ = l[i]\n        } else {\n            evens[i] = l[i]\n        }\n    }\n  \
    \  sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return evens\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpix11i8cq_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073992
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8e2t7us_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(l)))\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq8e2t7us_test.go:16:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073990
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens =\
    \ append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(evens, l...)\n    evens = append(evens, l...)\n  \
    \  evens = append(evens, l...)\n    evens = append(evens, l...)\n    evens = append(evens,\
    \ l...)\n    evens = append(even\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg40n175l_test.go:72:24: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073991
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l))\n\
    \    for i := range l {\n        if i%2 == 0 {\n            evens[i] = l[i]\n\
    \        }\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(evens)))\n    return\
    \ evens\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfaqzjf55_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073994
