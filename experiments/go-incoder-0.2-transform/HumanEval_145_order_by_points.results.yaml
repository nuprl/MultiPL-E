language: go_test.go
name: HumanEval_145_order_by_points
results:
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := strconv.Atoi(string(num))\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsvful_d_test.go:21:22: undefined: strconv

    /tmp/tmpgsvful_d_test.go:22:9: undefined: sum

    /tmp/tmpgsvful_d_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = sum\n    }\n    return sort_by_index(result, len(nums))\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4hfk4dme_test.go:24:12: undefined: sort_by_index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    var sum int\n\
    \    for _, v := range nums {\n        sum += v\n    }\n    for _, v := range\
    \ nums {\n        if sum < 0 {\n            sum += 10\n        }\n        if sum\
    \ > 0 {\n            sum -= 10\n        }\n        if sum == 0 {\n           \
    \ result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpm_ld_ner_test.go:55: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpm_ld_ner_test.go:55: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpm_ld_ner_test.go:55:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpm_ld_ner_test.go:55: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpm_ld_ner_test.go:55: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ue8iee2_test.go:21:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = v - sum\n  \
    \  }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp44bhafy9_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=13) %!s(int=23) %!s(int=11)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp44bhafy9_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=-5537)\
    \ %!s(int=-6348) %!s(int=-6308) %!s(int=-6626) %!s(int=-6769) %!s(int=-6348) %!s(int=-6348)\
    \ %!s(int=-6718) %!s(int=-6765) %!s(int=-6734) %!s(int=-3314) %!s(int=-6768) %!s(int=-6715)\
    \ %!s(int=-6771) %!s(int=-6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp44bhafy9_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=45) %!s(int=33) %!s(int=12) %!s(int=87) %!s(int=98) %!s(int=-54) %!s(int=46)\
    \ %!s(int=41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n     \
    \   tmp44bhafy9_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]',\
    \ got '[%!s(int=-65) %!s(int=-64) %!s(int=-63) %!s(int=-62) %!s(int=-61) %!s(int=-60)\
    \ %!s(int=-59) %!s(int=-58) %!s(int=-57) %!s(int=-56) %!s(int=-55)]'\n    ---\
    \ FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp44bhafy9_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=58) %!s(int=64) %!s(int=64) %!s(int=-18) %!s(int=37)\
    \ %!s(int=81) %!s(int=62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            fmt.Println(err)\n        }\n        if\
    \ digitSum <= 0 {\n            result[index] = num\n            index++\n    \
    \        continue\n        }\n        index += 1\n        digitSum, err = sum_digits(num)\n\
    \        if err != nil {\n            fmt.Println(err)\n        }\n        if\
    \ digitSum > 0 {\n            digitSum, err = sum_digits(num)\n            if\
    \ err != nil {\n                fmt.Println(err)\n            }\n            if\
    \ digitSum > 0 {\n                digitSum, err = sum_digits(num)\n          \
    \      if err != nil {\n                    fmt.Println(err)\n               \
    \ }\n                if digitSum > 0 {\n                    digitSum, err = sum_digits(num)\n\
    \                    if err != nil {\n                        fmt.Println(err)\n\
    \                    }\n                    if digitSum > 0 {\n              \
    \          digitSum, err = sum_digits(num)\n                        if err !=\
    \ nil {\n                            fmt.Println(err)\n                      \
    \  }\n                        if digitSum > 0 {\n                            digitSum,\
    \ err = sum_digits(num)\n                            if err != nil {\n       \
    \                         fmt.Println(err)\n                            }\n  \
    \                          if digitSum > 0 {\n                               \
    \ digitSum, err = sum_digits(num)\n                                if err != nil\
    \ {\n                                    fmt.Println(err)\n                  \
    \              }\n                                if digitSum > 0 {\n        \
    \                            digitSum, err = sum_digits(num)\n               \
    \                     if err != nil {\n                                      \
    \  fmt.Println(err)\n                                    }\n                 \
    \                   if digitSum > 0 {\n                                      \
    \  digitSum, err = sum_digits(num)\n                                        if\
    \ err != nil {\n                                            fmt.Println(err)\n\
    \                                        }\n                                 \
    \       if digitSum > 0 {\n                                            digitSum,\
    \ err = sum_digits(num)\n                                            if err !=\
    \ nil {\n                                                fmt.Println(err)\n  \
    \                                          }\n                               \
    \             if digitSum > 0 {\n                                            \
    \    digitSum, err = sum_digits(num)\n                                       \
    \         if err != nil {\n                                                  \
    \  fmt.Println(err)\n                                                }\n     \
    \                                           if digitSum > 0 {\n              \
    \                                      digitSum, err = sum_digits(num)\n     \
    \                                               if err != nil {\n            \
    \                                            fmt.Println(err)\n              \
    \                                      }\n                                   \
    \                 if digitSum > 0 {\n                                        \
    \                digitSum, err = sum_digits(num)\n                           \
    \                             if err != nil {\n                              \
    \                              fmt.Println(err)\n                            \
    \                            }\n                                             \
    \           if digitSum > 0 {\n                                              \
    \              digitSum, err = sum_digits(num)\n                             \
    \                               if err != nil {\n                            \
    \                                    fmt.Println(err)\n                      \
    \                                      }\n                                   \
    \                         if digitSum > 0 {\n                                \
    \                                digitSum, err = sum_digits(num)\n           \
    \                                                     if err\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4s8qz4mo_test.go:103:6: expected ''('', found TestOrder_By_Points

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074521
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    var index int\n\
    \    var sum int\n    for _, num := range nums {\n        sum += num\n       \
    \ if sum > 0 {\n            index = index + 1\n        }\n    }\n    for _, num\
    \ := range nums {\n        sum += num\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpo7qun160_test.go:54: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__1\
    \ (0.00s)\n        tmpo7qun160_test.go:54: expected '[%!s(int=0) %!s(int=2) %!s(int=3)\
    \ %!s(int=6) %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234)\
    \ %!s(int=145) %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]',\
    \ got '[%!s(int=1234) %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423)\
    \ %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56)\
    \ %!s(int=0) %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n\
    \        tmpo7qun160_test.go:54: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98)\
    \ %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=54)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpo7qun160_test.go:54:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpo7qun160_test.go:54: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := num.Int64()\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    return append(result, nums...)\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz7iqdjz_test.go:21:26: num.Int64 undefined (type int has no field or
    method Int64)

    /tmp/tmpiz7iqdjz_test.go:22:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = v\n    }\n \
    \   sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpydp2gm_b_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - int(result[i])\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp73fm07qw_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp73fm07qw_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp73fm07qw_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmp73fm07qw_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp73fm07qw_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzeghqsou_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var result []int\n\
    \    var sum int\n    for _, num := range nums {\n        sum += num\n       \
    \ result = append(result, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8s0vump5_test.go:18:5: undefined: sort

    /tmp/tmp8s0vump5_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i := 0; i < len(nums); i++ {\n        index := sort.Search(len(nums),\
    \ func(i int) bool {\n            return nums[i]-nums[i-1] > 0\n        })\n \
    \       result[i] = nums[index]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5dt30t87_test.go:18:5: undefined: sort

    /tmp/tmp5dt30t87_test.go:21:18: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        result[i] = nums[i]\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7k130q8__test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    for _, num := range nums {\n        sum := 0\n        for _, digit := range\
    \ strconv.Itoa(num) {\n            sum += int(digit)\n        }\n        sort.Ints(num)\n\
    \        sort.Sort(sort.Reverse(sort.IntSlice(num)))\n        if sum == 0 {\n\
    \            result = append(result, num)\n        } else {\n            result\
    \ := append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvezs7ysp_test.go:21:31: undefined: strconv

    /tmp/tmpvezs7ysp_test.go:24:9: undefined: sort

    /tmp/tmpvezs7ysp_test.go:25:9: undefined: sort

    /tmp/tmpvezs7ysp_test.go:29:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, d := range strconv.Itoa(num) {\n            sum += int(d)\n        }\n  \
    \      if sum > 0 {\n            result = append(result, num)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpximzo4o3_test.go:18:5: undefined: sort

    /tmp/tmpximzo4o3_test.go:22:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8bwt1_j_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-13] [recovered]\n\tpanic: runtime error: index out of range [-13]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmp5r85y2z__test.go:25\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmp5r85y2z__test.go:37\
    \ +0xa5f\ntesting.tRunner(0xc0000da340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    var sums []int\n\
    \    for _, num := range nums {\n        sums = append(sums, num)\n    }\n   \
    \ sort.Ints(sums)\n    for _, sum := range sums {\n        result = append(result,\
    \ nums[sum])\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7qd3pvac_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n  \
    \      if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ > 0 {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpryus1x3b_test.go:20:26: undefined: sum_digits

    /tmp/tmpryus1x3b_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    sum := 0\n    for _, num := range nums {\n        sum +=\
    \ num\n        result[index] = num\n        index++\n    }\n    for i := 0; i\
    \ < index; i++ {\n        for j := i + 1; j < index; j++ {\n            if sum\
    \ < 0 {\n                sum += result[i] + result[j]\n                result[i],\
    \ result[j] = result[j], result[i]\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpyrjvn5s3_test.go:55: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=11) %!s(int=1) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpyrjvn5s3_test.go:55: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpyrjvn5s3_test.go:55: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=54) %!s(int=1)\
    \ %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpyrjvn5s3_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpyrjvn5s3_test.go:55: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=4) %!s(int=23)\
    \ %!s(int=-21) %!s(int=-76) %!s(int=6) %!s(int=6) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - int(result[i])\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp73fm07qw_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp73fm07qw_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp73fm07qw_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmp73fm07qw_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp73fm07qw_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = result[i] - sum\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s5q__gi_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ <= 0 {\n            result[index] = num\n            index++\n            continue\n\
    \        }\n        index += 1\n        digitSum, err = sum_digits(num)\n    \
    \    if err != nil {\n            panic(err)\n        }\n        if digitSum >\
    \ 0 {\n            result[index] = num\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqv91xwd8_test.go:21:26: undefined: sum_digits

    /tmp/tmpqv91xwd8_test.go:31:25: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhzorfon_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, digit := range strconv.Itoa(num) {\n            sum += int(digit)\n     \
    \   }\n        if sum > 0 {\n            result = append(result, num)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zq3ilaw_test.go:18:5: undefined: sort

    /tmp/tmp5zq3ilaw_test.go:22:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum -= result[i]\n            if sum < 0 {\n                sum = 0\n     \
    \       }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zaoo0ub_test.go:24:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for _, v := range result {\n        nums[v]\
    \ = sum\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps71ty7nc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = sum\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7i0_ofhm_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp284rqb0v_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = result[i]/sum\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpgdl1yz1z_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpgdl1yz1z_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n        tmpgdl1yz1z_test.go:48:\
    \ expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2)\
    \ %!s(int=43) %!s(int=54)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=-1) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__4\
    \ (0.00s)\n        tmpgdl1yz1z_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpgdl1yz1z_test.go:48: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = sum - v\n  \
    \  }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpexy2b4s6_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpexy2b4s6_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpexy2b4s6_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpexy2b4s6_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpexy2b4s6_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = sum - result[i]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk38wiaye_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    sum := 0\n    for _, n := range nums {\n        sum += n\n\
    \        result[index] = n\n        index++\n    }\n    for i := 0; i < index;\
    \ i++ {\n        for j := i + 1; j < index; j++ {\n            if sum < 0 {\n\
    \                sum += nums[i]\n                result[j] = nums[i]\n       \
    \     } else {\n                sum += nums[j]\n                result[j] = nums[j]\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp0zu8sllf_test.go:58: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=1) %!s(int=11)\
    \ %!s(int=-11) %!s(int=-11)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp0zu8sllf_test.go:58: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp0zu8sllf_test.go:58: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=1)\
    \ %!s(int=-11) %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp0zu8sllf_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp0zu8sllf_test.go:58: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=0)\
    \ %!s(int=6) %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-13] [recovered]\n\tpanic: runtime error: index out of range [-13]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmp5r85y2z__test.go:25\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmp5r85y2z__test.go:37\
    \ +0xa5f\ntesting.tRunner(0xc0000da340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = result[i] - sum\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s5q__gi_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += int(v)\n            if sum > 0 {\n                sum -= int(nums[i])\n\
    \                result[i] = nums[i]\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp30rscc2l_test.go:54: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp30rscc2l_test.go:54: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp30rscc2l_test.go:54: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp30rscc2l_test.go:54:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp30rscc2l_test.go:54: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelnbv9mb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var result []int\n\
    \    var cur int\n    for _, v := range nums {\n        cur = cur*10 + v\n   \
    \     if cur > 0 {\n            result = append(result, cur)\n            cur\
    \ = 0\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuyjmskoo_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp284rqb0v_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-13] [recovered]\n\tpanic: runtime error: index out of range [-13]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmp5r85y2z__test.go:25\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmp5r85y2z__test.go:37\
    \ +0xa5f\ntesting.tRunner(0xc0000da340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = result[i] - sum\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s5q__gi_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := strconv.Atoi(string(num))\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgsvful_d_test.go:21:22: undefined: strconv

    /tmp/tmpgsvful_d_test.go:22:9: undefined: sum

    /tmp/tmpgsvful_d_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, v := range nums {\n        digitSum, err := digitSum(v)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ <= 0 {\n            result[index] = v\n            index++\n            continue\n\
    \        }\n        index += 1\n        i := 0\n        for {\n            digitSum\
    \ -= nums[i]\n            if digitSum < 0 {\n                break\n         \
    \   }\n            result[index] = nums[i]\n            index++\n            i++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu896c_9o_test.go:21:26: undefined: digitSum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe33ldxu_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-13] [recovered]\n\tpanic: runtime error: index out of range [-13]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmp5r85y2z__test.go:25\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmp5r85y2z__test.go:37\
    \ +0xa5f\ntesting.tRunner(0xc0000da340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = sum - result[i]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk38wiaye_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp8dllll8o_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp8dllll8o_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp8dllll8o_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmp8dllll8o_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp8dllll8o_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ue8iee2_test.go:21:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp284rqb0v_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = v - sum\n  \
    \  }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp44bhafy9_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=13) %!s(int=23) %!s(int=11)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp44bhafy9_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=-5537)\
    \ %!s(int=-6348) %!s(int=-6308) %!s(int=-6626) %!s(int=-6769) %!s(int=-6348) %!s(int=-6348)\
    \ %!s(int=-6718) %!s(int=-6765) %!s(int=-6734) %!s(int=-3314) %!s(int=-6768) %!s(int=-6715)\
    \ %!s(int=-6771) %!s(int=-6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp44bhafy9_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=45) %!s(int=33) %!s(int=12) %!s(int=87) %!s(int=98) %!s(int=-54) %!s(int=46)\
    \ %!s(int=41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n     \
    \   tmp44bhafy9_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]',\
    \ got '[%!s(int=-65) %!s(int=-64) %!s(int=-63) %!s(int=-62) %!s(int=-61) %!s(int=-60)\
    \ %!s(int=-59) %!s(int=-58) %!s(int=-57) %!s(int=-56) %!s(int=-55)]'\n    ---\
    \ FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp44bhafy9_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=58) %!s(int=64) %!s(int=64) %!s(int=-18) %!s(int=37)\
    \ %!s(int=81) %!s(int=62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfntdvyp1_test.go:20:9: i declared but not used

    /tmp/tmpfntdvyp1_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, d := range strconv.Itoa(num) {\n            sum += int(d)\n        }\n  \
    \      if sum > 0 {\n            result = append(result, num)\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpximzo4o3_test.go:18:5: undefined: sort

    /tmp/tmpximzo4o3_test.go:22:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074523
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        j := 0\n        sum := 0\n        for k :=\
    \ 0; k < len(nums[i]); k++ {\n            sum += int(nums[i][k])\n           \
    \ j++\n        }\n        if sum < 0 {\n            sum += 10\n            j--\n\
    \        }\n        result[i] = nums[j-1]\n    }\n    return result\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm3cbtsh4_test.go:22:29: invalid argument: nums[i] (variable of type int)
    for len

    /tmp/tmpm3cbtsh4_test.go:23:31: invalid operation: cannot index nums[i] (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe33ldxu_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := range nums {\n\
    \            sum += nums[j]\n        }\n        result[i] = nums[sum]\n    }\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [-12] [recovered]\n\tpanic: runtime error: index out of range [-12]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmp1pb7a1fv_test.go:24\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmp1pb7a1fv_test.go:36\
    \ +0xa52\ntesting.tRunner(0xc0000da340, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    for _, num := range nums {\n        sum := 0\n        for _, digit := range\
    \ strconv.Itoa(num) {\n            sum += int(digit)\n        }\n        if sum\
    \ > 0 {\n            result = append(result, num)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0h0jc3p_test.go:21:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate :=\
    \ order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa8bwt1_j_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += v\n            if sum < 0 {\n                sum *= -1\n           \
    \ }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptw54noze_test.go:24:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum *= -1\n        }\n        if sum == 0 {\n            continue\n        }\n\
    \        j := i\n        for ; j < len(nums) && sum > 0; j++ {\n            sum\
    \ += nums[j]\n            if sum == 0 {\n                break\n            }\n\
    \        }\n        if j > i {\n            j := j - 1\n            for ; j <\
    \ len(nums); j++ {\n                sum += nums[j]\n            }\n        }\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73ao7rw5_test.go:24:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := range result {\n        result[i] =\
    \ sum - result[i]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgigdi_4x_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var res []int\n\
    \    for _, v := range nums {\n        sum := 0\n        for i := 0; i < len(strconv.Itoa(v));\
    \ i++ {\n            sum += int(strconv.Itoa(v[i]))\n        }\n        if sum\
    \ > 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9laakw8z_test.go:18:5: undefined: sort

    /tmp/tmp9laakw8z_test.go:22:29: undefined: strconv

    /tmp/tmp9laakw8z_test.go:23:24: undefined: strconv

    /tmp/tmp9laakw8z_test.go:23:38: invalid operation: cannot index v (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpelnbv9mb_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp8dllll8o_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp8dllll8o_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmp8dllll8o_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmp8dllll8o_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmp8dllll8o_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmph4pcblgi_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmph4pcblgi_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmph4pcblgi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ > 0 {\n            result[index] = num\n            index++\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4yvibvhp_test.go:21:26: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmph4pcblgi_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmph4pcblgi_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmph4pcblgi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result\
    \ = append(result, v)\n    }\n    sort.Sort(BySum(sum, result))\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmcx4wvl_test.go:20:9: i declared but not used

    /tmp/tmpwmcx4wvl_test.go:24:5: undefined: sort

    /tmp/tmpwmcx4wvl_test.go:24:15: undefined: BySum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmph4pcblgi_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmph4pcblgi_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmph4pcblgi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_gs2w9d_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ <= 0 {\n            result[index] = num\n            index++\n            continue\n\
    \        }\n        i := 0\n        for ; digitSum >= 10; digitSum -= 10 {\n \
    \           result[index] = num\n            index++\n        }\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihkst1i7_test.go:21:26: undefined: sum_digits

    /tmp/tmpihkst1i7_test.go:30:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhzorfon_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += v\n            if sum > 0 {\n                result[i] = v\n       \
    \     }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpx8hbuxyw_test.go:53: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpx8hbuxyw_test.go:53: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpx8hbuxyw_test.go:53: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpx8hbuxyw_test.go:53:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpx8hbuxyw_test.go:53: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, v := range nums {\n        sum += v\n        result[index]\
    \ = v\n        index++\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9a6w1qq__test.go:21:9: undefined: sum

    /tmp/tmp9a6w1qq__test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    for _, num :=\
    \ range nums {\n        sum := 0\n        for _, digit := range strconv.Itoa(num)\
    \ {\n            sum += int(digit)\n        }\n        if sum > 0 {\n        \
    \    result = append(result, num)\n        }\n    }\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprjq08q1u_test.go:21:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = result[i] - sum\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s5q__gi_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    var sum int\n\
    \    var index int\n    for _, num := range nums {\n        sum += num\n     \
    \   if sum > 0 {\n            result = append(result, num)\n            sum =\
    \ 0\n        }\n    }\n    for _, num := range result {\n        index = num\n\
    \        break\n    }\n    for _, num := range nums {\n        if num == index\
    \ {\n            continue\n        }\n        sum += num\n        if sum > 0 {\n\
    \            result = append(result, num)\n            sum = 0\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpesgshnlb_test.go:63: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11)]'\n    ---\
    \ FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmpesgshnlb_test.go:63:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234) %!s(int=423) %!s(int=463)\
    \ %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37)\
    \ %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=46) %!s(int=423) %!s(int=463) %!s(int=145)\
    \ %!s(int=2) %!s(int=423) %!s(int=423) %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457)\
    \ %!s(int=3) %!s(int=56) %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpesgshnlb_test.go:63: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=1) %!s(int=54)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpesgshnlb_test.go:63: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)\
    \ %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n     \
    \   tmpesgshnlb_test.go:63: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4)\
    \ %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=6) %!s(int=6)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    var sums []int\n\
    \    for _, num := range nums {\n        sums = append(sums, num)\n    }\n   \
    \ sort.Ints(sums)\n    for _, sum := range sums {\n        result = append(result,\
    \ nums[sum])\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7qd3pvac_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzeghqsou_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n  \
    \      if err != nil {\n            panic(err)\n        }\n        i := 0\n  \
    \      for ; digitSum >= 10; digitSum /= 10 {\n            i++\n        }\n  \
    \      result[i] = num\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3bm04re_test.go:20:26: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for _, v := range result {\n        nums[v]\
    \ = sum\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps71ty7nc_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        result[i] = v\n    }\n   \
    \ sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn6kw_dgw_test.go:18:5: undefined: sort

    /tmp/tmpn6kw_dgw_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != int(v) {\n     \
    \       sum -= int(v)\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmplq4mcgph_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmplq4mcgph_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmplq4mcgph_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmplq4mcgph_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmplq4mcgph_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \        result[index] = v\n        index++\n    }\n    for i := 0; i < index;\
    \ i++ {\n        for j := i + 1; j < index; j++ {\n            if sum < 0 {\n\
    \                sum += result[i]\n                result[i] = result[j]\n   \
    \             result[j] = sum\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmp5z5wbtar_test.go:56: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-1) %!s(int=-11) %!s(int=0)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmp5z5wbtar_test.go:56: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmp5z5wbtar_test.go:56: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=-98) %!s(int=-43)\
    \ %!s(int=-54) %!s(int=-86) %!s(int=-43) %!s(int=11) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmp5z5wbtar_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmp5z5wbtar_test.go:56: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=4) %!s(int=-120)\
    \ %!s(int=-541) %!s(int=-1623) %!s(int=-4516) %!s(int=-10149) %!s(int=-17007)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := num.ToString().Sum()\n\
    \        result[index] = num\n        index++\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbgqe2tbm_test.go:21:26: num.ToString undefined (type int has no field
    or method ToString)

    /tmp/tmpbgqe2tbm_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, digit := range strconv.Itoa(num) {\n            sum += int(digit)\n     \
    \   }\n        if sum > 0 {\n            result = append(result, num)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zq3ilaw_test.go:18:5: undefined: sort

    /tmp/tmp5zq3ilaw_test.go:22:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhzorfon_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        index := index + 1\n        if digits > result[index] {\n           \
    \ result[index] = digits\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwuxbyel0_test.go:21:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return append(result, nums...)\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnznftsk3_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    sum := 0\n  \
    \  for _, v := range nums {\n        sum += v\n    }\n    for _, v := range nums\
    \ {\n        if sum < 0 {\n            sum += v\n            continue\n      \
    \  }\n        if sum > 0 {\n            sum += v\n            continue\n     \
    \   }\n        result = append(result, v)\n        sum = 0\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpc2ub67xj_test.go:56: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-1) %!s(int=-11) %!s(int=-12)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmpc2ub67xj_test.go:56:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpc2ub67xj_test.go:56: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpc2ub67xj_test.go:56:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[]'\n    ---\
    \ FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpc2ub67xj_test.go:56:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var res []int\n\
    \    var cur int\n    for _, v := range nums {\n        cur = cur*10 + v\n   \
    \     if cur > 0 {\n            res = append(res, cur)\n            cur = 0\n\
    \        }\n    }\n    return res\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp63x8zzrq_test.go:18:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += int(nums[i][j])\n        }\n        result[i] = nums[sum]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwmbitivf_test.go:21:29: invalid argument: nums[i] (variable of type int)
    for len

    /tmp/tmpwmbitivf_test.go:22:31: invalid operation: cannot index nums[i] (variable
    of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    var result []int\n    var sums []int\n\
    \    var index int\n    for _, v := range nums {\n        sum += v\n        sums\
    \ = append(sums, sum)\n    }\n    sort.Ints(sums)\n    for _, v := range sums\
    \ {\n        index = sort.Search(len(nums), func(i int) bool {\n            return\
    \ nums[i] == v\n        })\n        result = append(result, nums[index])\n   \
    \ }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzh2cll7p_test.go:22:9: undefined: sum

    /tmp/tmpzh2cll7p_test.go:23:29: undefined: sum

    /tmp/tmpzh2cll7p_test.go:25:5: undefined: sort

    /tmp/tmpzh2cll7p_test.go:27:17: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ue8iee2_test.go:21:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum -= result[i]\n            if sum < 0 {\n                sum *= -1\n   \
    \         }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1krb5k2t_test.go:24:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmph4pcblgi_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmph4pcblgi_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmph4pcblgi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    result := make([]int,\
    \ len(nums))\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcswjbke_test.go:18:5: undefined: sort

    /tmp/tmptcswjbke_test.go:21:9: undefined: sum

    /tmp/tmptcswjbke_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += int(v)\n            if sum < 0 {\n                sum *= -1\n      \
    \      }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xx2xgdb_test.go:24:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := num.Int64()\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8rvpb4ti_test.go:21:26: num.Int64 undefined (type int has no field or
    method Int64)

    /tmp/tmp8rvpb4ti_test.go:22:9: undefined: sum

    /tmp/tmp8rvpb4ti_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzeghqsou_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \        result[index] = v\n        index++\n    }\n    for i := 0; i < index;\
    \ i++ {\n        for j := i + 1; j < index; j++ {\n            if sum < 0 {\n\
    \                sum *= -1\n                j += 1\n            }\n          \
    \  if sum > 0 {\n                sum += nums[j]\n                nums[j] = nums[i]\n\
    \                nums[i] = sum\n                sum = 0\n            }\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpgm2seepf_test.go:61: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpgm2seepf_test.go:61: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmpgm2seepf_test.go:61: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmpgm2seepf_test.go:61:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmpgm2seepf_test.go:61: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe33ldxu_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var result []int\n\
    \    for _, num := range nums {\n        sum := 0\n        for _, d := range strconv.Itoa(num)\
    \ {\n            sum += int(d)\n        }\n        if sum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_jmdikdb_test.go:18:5: undefined: sort

    /tmp/tmp_jmdikdb_test.go:22:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        if sum\
    \ > 0 {\n            result = append(result, i)\n            sum = 0\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpm9yopl4k_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=0) %!s(int=1)]'\n    ---\
    \ FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n        tmpm9yopl4k_test.go:48:\
    \ expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6) %!s(int=53) %!s(int=423)\
    \ %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145) %!s(int=37) %!s(int=46)\
    \ %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=14)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpm9yopl4k_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=0) %!s(int=4)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpm9yopl4k_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestOrder_By_Points/test_num__5\
    \ (0.00s)\n        tmpm9yopl4k_test.go:48: expected '[%!s(int=-76) %!s(int=-21)\
    \ %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf_gs2w9d_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != int(v) {\n     \
    \       sum -= int(v)\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmplq4mcgph_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmplq4mcgph_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmplq4mcgph_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmplq4mcgph_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmplq4mcgph_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbe33ldxu_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074525
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasq0rp3a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            fmt.Println(err)\n        }\n        result[index]\
    \ = num\n        index++\n    }\n    sort.Ints(result)\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptuyx7xhj_test.go:21:26: undefined: sum_digits

    /tmp/tmptuyx7xhj_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn7ime9xd_test.go:21:9: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ue8iee2_test.go:21:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    for _, v := range nums {\n        digitSum, _ := sum_digits(v)\n        index\
    \ := len(result) - 1\n        for i := 0; i < digitSum; i++ {\n            if\
    \ result[index] == 0 {\n                result[index] = v\n                break\n\
    \            }\n            index--\n        }\n    }\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoz2qvji7_test.go:20:24: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    sort.Ints(nums)\n    var result []int\n\
    \    for _, v := range nums {\n        total := 0\n        for _, i := range strconv.Itoa(int(v))\
    \ {\n            total += int(i)\n        }\n        if total > 0 {\n        \
    \    result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpurj_qugg_test.go:18:5: undefined: sort

    /tmp/tmpurj_qugg_test.go:22:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ue8iee2_test.go:21:22: undefined: sum_digits

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhzorfon_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n\n\
    func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiiherywl_test.go:20:9: i declared but not used

    /tmp/tmpiiherywl_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    index := 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \        result[index] = v\n        index++\n    }\n    for i := 0; i < len(nums)-1;\
    \ i++ {\n        if sum < 0 {\n            sum += nums[i]\n            result[index]\
    \ = nums[i]\n            index++\n        } else {\n            sum -= nums[i]\n\
    \            result[index] = nums[i]\n            index++\n        }\n    }\n\
    \    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of\
    \ range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points({0xc00007e4d8, 0x5, 0x564b5b?})\n\
    \t/tmp/tmptclnp8ai_test.go:29 +0xc8\ncommand-line-arguments_test.TestOrder_By_Points(0x0?)\n\
    \t/tmp/tmptclnp8ai_test.go:47 +0xa8\ntesting.tRunner(0xc0000cc4e0, 0x529168)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph9f18n55_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, 0, len(nums))\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    for\
    \ _, v := range nums {\n        if sum < 0 {\n            sum += v\n         \
    \   continue\n        }\n        if sum == 0 {\n            result = append(result,\
    \ v)\n            continue\n        }\n        i := 0\n        for sum > 0 {\n\
    \            if sum < v {\n                sum += v\n                result[i]\
    \ = v\n                i++\n            } else {\n                sum -= v\n \
    \           }\n        }\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513840,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513840, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.order_by_points(...)\n\t/tmp/tmpw6gm1b3g_test.go:36\n\
    command-line-arguments_test.TestOrder_By_Points(0x0?)\n\t/tmp/tmpw6gm1b3g_test.go:54\
    \ +0xd9e\ntesting.tRunner(0xc000103380, 0x529168)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n\
    \  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmhzorfon_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate\
    \ := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 11,\
    \ -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0,\
    \ 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1,\
    \ -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43,\
    \ 54} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}),\
    \ expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0,\
    \ 6, 6, -76, -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=-13) %!s(int=-23) %!s(int=-11)\
    \ %!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=5537)\
    \ %!s(int=6348) %!s(int=6308) %!s(int=6626) %!s(int=6769) %!s(int=6348) %!s(int=6348)\
    \ %!s(int=6718) %!s(int=6765) %!s(int=6734) %!s(int=3314) %!s(int=6768) %!s(int=6715)\
    \ %!s(int=6771) %!s(int=6725)]'\n    --- FAIL: TestOrder_By_Points/test_num__3\
    \ (0.00s)\n        tmpsnozb179_test.go:48: expected '[%!s(int=-3) %!s(int=-32)\
    \ %!s(int=-98) %!s(int=-11) %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got\
    \ '[%!s(int=-45) %!s(int=-33) %!s(int=-12) %!s(int=-87) %!s(int=-98) %!s(int=54)\
    \ %!s(int=-46) %!s(int=-41)]'\n    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n\
    \        tmpsnozb179_test.go:48: expected '[%!s(int=1) %!s(int=10) %!s(int=2)\
    \ %!s(int=11) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]', got '[%!s(int=65) %!s(int=64) %!s(int=63) %!s(int=62) %!s(int=61)\
    \ %!s(int=60) %!s(int=59) %!s(int=58) %!s(int=57) %!s(int=56) %!s(int=55)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n        tmpsnozb179_test.go:48:\
    \ expected '[%!s(int=-76) %!s(int=-21) %!s(int=0) %!s(int=4) %!s(int=23) %!s(int=6)\
    \ %!s(int=6)]', got '[%!s(int=-58) %!s(int=-64) %!s(int=-64) %!s(int=18) %!s(int=-37)\
    \ %!s(int=-81) %!s(int=-62)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwpie6vo_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n\
    \nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmptwu6batn_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmptwu6batn_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmptwu6batn_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmptwu6batn_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range result {\n        result[i] = v\n    }\n \
    \   sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg3fdaovv_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t *testing.T)\
    \ {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11} },\n     { actual:\
    \ candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0,\
    \ 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56,\
    \ 463, 3457} },\n     { actual: candidate([]int{}), expected: []int{} },\n   \
    \  { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}), expected: []int{-3,\
    \ -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}\
    \ },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected: []int{-76,\
    \ -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmm3q8jm0_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        total := 0\n        for _, digit := range\
    \ nums[i:] {\n            total += digit\n        }\n        result[i] = total\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu7j74ao8_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n\nfunc TestOrder_By_Points(t\
    \ *testing.T) {\n  candidate := order_by_points\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 11, -1, -11, -12}), expected: []int{-1, -11, 1, -12, 11}\
    \ },\n     { actual: candidate([]int{1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}), expected:\
    \ []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98, 2, -3}),\
    \ expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
    \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpenyuxk3s_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074522
- exit_code: 1
  program: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function which sorts the given list of integers\n// in ascending\
    \ order according to the sum of their digits.\n// Note: if there are several items\
    \ with similar sum of their digits,\n// order them based on their index in original\
    \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n\
    // []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
    \ order_by_points(nums []int) []int {\n    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
    \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3,\
    \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
    \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
    \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76,\
    \ -21, 23, 4}), expected: []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOrder_By_Points (0.00s)\n    --- FAIL: TestOrder_By_Points/test_num__0\
    \ (0.00s)\n        tmph4pcblgi_test.go:51: expected '[%!s(int=-1) %!s(int=-11)\
    \ %!s(int=1) %!s(int=-12) %!s(int=11)]', got '[%!s(int=1) %!s(int=11) %!s(int=-1)\
    \ %!s(int=-11) %!s(int=-12)]'\n    --- FAIL: TestOrder_By_Points/test_num__1 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=6)\
    \ %!s(int=53) %!s(int=423) %!s(int=423) %!s(int=423) %!s(int=1234) %!s(int=145)\
    \ %!s(int=37) %!s(int=46) %!s(int=56) %!s(int=463) %!s(int=3457)]', got '[%!s(int=1234)\
    \ %!s(int=423) %!s(int=463) %!s(int=145) %!s(int=2) %!s(int=423) %!s(int=423)\
    \ %!s(int=53) %!s(int=6) %!s(int=37) %!s(int=3457) %!s(int=3) %!s(int=56) %!s(int=0)\
    \ %!s(int=46)]'\n    --- FAIL: TestOrder_By_Points/test_num__3 (0.00s)\n     \
    \   tmph4pcblgi_test.go:51: expected '[%!s(int=-3) %!s(int=-32) %!s(int=-98) %!s(int=-11)\
    \ %!s(int=1) %!s(int=2) %!s(int=43) %!s(int=54)]', got '[%!s(int=1) %!s(int=-11)\
    \ %!s(int=-32) %!s(int=43) %!s(int=54) %!s(int=-98) %!s(int=2) %!s(int=-3)]'\n\
    \    --- FAIL: TestOrder_By_Points/test_num__4 (0.00s)\n        tmph4pcblgi_test.go:51:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=2) %!s(int=11) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11)]'\n    --- FAIL: TestOrder_By_Points/test_num__5 (0.00s)\n\
    \        tmph4pcblgi_test.go:51: expected '[%!s(int=-76) %!s(int=-21) %!s(int=0)\
    \ %!s(int=4) %!s(int=23) %!s(int=6) %!s(int=6)]', got '[%!s(int=0) %!s(int=6)\
    \ %!s(int=6) %!s(int=-76) %!s(int=-21) %!s(int=23) %!s(int=4)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074527
