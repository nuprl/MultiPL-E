language: go_test.go
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    d := 1\n    \n    for i := 1; i <= b; i++\
    \ {\n        if a % i == 0 {\n            d = i\n        }\n    }\n    \n    return\
    \ d\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpt_vvs4zj_test.go:45: expected '%!s(int=12)', got '%!s(int=48)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    greatest_common_divisor_helper := greatest_common_divisor_helper{\n\
    \        a:   a,\n        b:   b,\n        gcd: 0,\n    }\n    greatest_common_divisor_helper.gcd\
    \ = greatest_common_divisor_helper.b\n    greatest_common_divisor_helper.a = greatest_common_divisor_helper.b\n\
    \    greatest_common_divisor_helper.b = greatest_common_divisor_helper.a\n   \
    \ greatest_common_divisor_helper.gcd = greatest_common_divisor_helper.gcd\n  \
    \  return greatest_common_divisor_helper.gcd\n}\n\ntype greatest_common_divisor_helper\
    \ \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ohc_ets_test.go:29:37: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        if a > b {\n            break\n\
    \        }\n        a -= b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpud7ftwvo_test.go:42: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpud7ftwvo_test.go:42:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpud7ftwvo_test.go:42: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpud7ftwvo_test.go:42:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    gcd := greatest_common_divisor(b, a % b)\n    if\
    \ a > gcd {\n        return a\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpuhx_wdsx_test.go:40: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpuhx_wdsx_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpuhx_wdsx_test.go:40: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpuhx_wdsx_test.go:40:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    r := greatest_common_divisor(b,\
    \ a % b)\n    return r\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    while c != 0 {\n       \
    \ c %= d\n        d *= 10\n    }\n    return d\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz95e82vs_test.go:19:11: expected '';'', found c

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        if a > b {\n            return\
    \ a\n        }\n        if a % b == 0 {\n            return b\n        }\n   \
    \     b = b % a\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp04_pexdc_test.go:44: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp04_pexdc_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp04_pexdc_test.go:44: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp04_pexdc_test.go:44:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    gcd := greatest_common_divisor(b, a % b)\n    return\
    \ a / gcd + 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpo7ydtcln_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpo7ydtcln_test.go:37:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpo7ydtcln_test.go:37: expected '%!s(int=7)', got '%!s(int=17)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpo7ydtcln_test.go:37:\
    \ expected '%!s(int=12)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if b%a == 0 {\n     \
    \       return c\n        }\n        c += 1\n        if c%b == 0 {\n         \
    \   return c\n        }\n        c += b\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpytvrjzcw_test.go:46: expected '%!s(int=1)', got '%!s(int=28)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpytvrjzcw_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=75)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpytvrjzcw_test.go:46: expected '%!s(int=7)', got '%!s(int=140)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpytvrjzcw_test.go:46:\
    \ expected '%!s(int=12)', got '%!s(int=2280)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    if b == 0 {\n        return a\n    }\n    c :=\
    \ a\n    for d := b; d > 0; d /= 2 {\n        if c % d == 0 {\n            c =\
    \ c / d\n        }\n    }\n    return c\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpu4numsx1_test.go:45: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpu4numsx1_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpu4numsx1_test.go:45: expected '%!s(int=12)', got '%!s(int=48)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if b&1 == 1 {\n     \
    \       c = c % b\n        }\n        b = b >> 1\n        if b == 0 {\n      \
    \      return c\n        }\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpz0qv7om4_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpz0qv7om4_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpz0qv7om4_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpz0qv7om4_test.go:45:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        q, r := a / b, a % b\n       \
    \ if r == 0 {\n            return q\n        }\n        a = b\n        b = r\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpl8k9hivd_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpl8k9hivd_test.go:43:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpl8k9hivd_test.go:43: expected '%!s(int=7)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpl8k9hivd_test.go:43:\
    \ expected '%!s(int=12)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    d := 1\n    for i := a; i >= b; i-- {\n\
    \        if i%b == 0 {\n            d = i\n            break\n        }\n    }\n\
    \    return d\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpgvcql1cl_test.go:44: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpgvcql1cl_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpgvcql1cl_test.go:44: expected '%!s(int=7)', got '%!s(int=42)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpgvcql1cl_test.go:44:\
    \ expected '%!s(int=12)', got '%!s(int=120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for d := b; d != 0; d /= c {\n     \
    \   c++\n    }\n    return c\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp_em277i6_test.go:40: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp_em277i6_test.go:40:\
    \ expected '%!s(int=5)', got '%!s(int=12)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp_em277i6_test.go:40: expected '%!s(int=7)', got '%!s(int=50)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp_em277i6_test.go:40:\
    \ expected '%!s(int=12)', got '%!s(int=145)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    c := a\n\
    \    d := b\n    e := a\n    f := b\n    g := a\n    h := b\n    i := a\n    j\
    \ := b\n    k := a\n    l := b\n    m := a\n    n := b\n    o := a\n    p := b\n\
    \    q := a\n    r := b\n    s := a\n    t := b\n    u := a\n    v := b\n    w\
    \ := a\n    x := b\n    y := a\n    z := b\n    switch {\n    case a < b:\n  \
    \      c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\
    \ = b, a, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a,\
    \ b, a, b, \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6d0iig8f_test.go:47:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    d := b\n    e := 1\n    f := 1\n   \
    \ g := 1\n    h := a\n    i := 1\n    j := 1\n    k := 1\n    l := 1\n    m :=\
    \ 1\n    n := 1\n    o := 1\n    p := 1\n    q := 1\n    r := 1\n    s := 1\n\
    \    t := 1\n    u := 1\n    v := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x\
    \ := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n\
    \    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y\
    \ := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n\
    \    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z\
    \ := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n\
    \    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w\
    \ := 1\n    x := 1\n    y := 1\n    z := 1\n    w := 1\n    x := 1\n    y := 1\n\
    \    z := 1\n    w := 1\n    x := 1\n    y := 1\n    z := 1\n    w \nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr42ggn_e_test.go:118:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073818
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    d := 1\n    for ; a > 0; a-- {\n      \
    \  if b % a == 0 {\n            d = a\n            break\n        }\n    }\n \
    \   return d\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpaxw3pdp7_test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpaxw3pdp7_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpaxw3pdp7_test.go:44: expected '%!s(int=7)', got '%!s(int=14)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpaxw3pdp7_test.go:44:\
    \ expected '%!s(int=12)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    c := a\n\
    \    d := b\n    e := a\n    f := b\n    g := a\n    h := b\n    i := a\n    j\
    \ := b\n    k := a\n    l := b\n    m := a\n    n := b\n    o := a\n    p := b\n\
    \    q := a\n    r := b\n    s := a\n    t := b\n    u := a\n    v := b\n    w\
    \ := a\n    x := b\n    y := a\n    z := b\n    \n    switch {\n    case b > a:\n\
    \        c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y,\
    \ z = b, a, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b, a, b,\
    \ \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuuj9_1nc_test.go:48:6: expected ''('', found TestGreatest_Common_Divisor

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073899
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: null
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if b%a == 0 {\n     \
    \       return c\n        }\n        c++\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073911
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: null
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if c > b {\n        \
    \    break\n        }\n        c = c % b\n    }\n    return c\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073911
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    c := a\n    \n    for {\n        if b%a\
    \ == 0 {\n            c = b / a\n            break\n        }\n        \n    \
    \    a := a / 2\n        b = b / 2\n    }\n    \n    return c\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1i2i97p_test.go:26:9: a declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        if a > b {\n            return\
    \ a\n        }\n        if a % b == 0 {\n            return b\n        }\n   \
    \     b = b % a\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp04_pexdc_test.go:44: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp04_pexdc_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp04_pexdc_test.go:44: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp04_pexdc_test.go:44:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    greatest_common_divisor_result := greatest_common_divisor(b,\
    \ a % b)\n    return greatest_common_divisor_result\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for {\n        if a > b {\n            return\
    \ a\n        }\n        if a % b == 0 {\n            return b\n        }\n   \
    \     b = b % a\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp04_pexdc_test.go:44: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp04_pexdc_test.go:44:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp04_pexdc_test.go:44: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp04_pexdc_test.go:44:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    if a >\
    \ b {\n        a, b = b, a\n    }\n    x := a\n    y := b\n    gcd := 1\n    for\
    \ {\n        if x % y == 0 {\n            gcd = y\n            break\n       \
    \ }\n        x /= y\n        y *= y\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp4w68jqnz_test.go:53: expected '%!s(int=1)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp4w68jqnz_test.go:53:\
    \ expected '%!s(int=5)', got '%!s(int=225)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp4w68jqnz_test.go:53: expected '%!s(int=7)', got '%!s(int=2401)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp4w68jqnz_test.go:53:\
    \ expected '%!s(int=12)', got '%!s(int=20736)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    \n    d := 1\n    \n    for i := 1; i <= b; i++\
    \ {\n        if a % i == 0 {\n            d *= i\n        }\n    }\n    \n   \
    \ return d\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpqiz0inqb_test.go:45: expected '%!s(int=5)', got '%!s(int=15)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpqiz0inqb_test.go:45:\
    \ expected '%!s(int=12)', got '%!s(int=1486016741376)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    if b == 0 {\n        return a\n    }\n    c :=\
    \ a\n    d := b\n    d := d / 2\n    for {\n        if d == c {\n            return\
    \ c\n        }\n        if d == 0 {\n            return c\n        }\n       \
    \ c = c * 2\n        d = d / 2\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxw38ddf_test.go:22:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073900
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    gcd := greatest_common_divisor(b, a % b)\n    return\
    \ a / gcd + 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpo7ydtcln_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpo7ydtcln_test.go:37:\
    \ expected '%!s(int=5)', got '%!s(int=2)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpo7ydtcln_test.go:37: expected '%!s(int=7)', got '%!s(int=17)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpo7ydtcln_test.go:37:\
    \ expected '%!s(int=12)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    gcd :=\
    \ greatest_common_divisor(b, a % b)\n    if a > b {\n        return gcd\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpksa56pbz_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpksa56pbz_test.go:43:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073900
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a%b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    c := a\n    for {\n        if b%a == 0 {\n     \
    \       return c\n        }\n        c += 1\n        if c%b == 0 {\n         \
    \   return c\n        }\n        a += 1\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpg3yl8z_q_test.go:46: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpg3yl8z_q_test.go:46:\
    \ expected '%!s(int=5)', got '%!s(int=15)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpg3yl8z_q_test.go:46: expected '%!s(int=7)', got '%!s(int=56)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpg3yl8z_q_test.go:46:\
    \ expected '%!s(int=12)', got '%!s(int=180)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073855
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    if a == 0 {\n        return b\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073820
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
