name: HumanEval_75_is_multiply_prime
language: go_test.go
prompt: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  func is_multiply_prime(a int) bool {\n"
tests: "func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual:\
  \ candidate(30), expected: true },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
  \ expected: true },\n     { actual: candidate(105), expected: true },\n     { actual:\
  \ candidate(126), expected: false },\n     { actual: candidate(729), expected: false\
  \ },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001),\
  \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Write your code here\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    if a < 100 {\n        return false\n    }\n    \n    primes\
    \ := make([]int, 100)\n    \n    for i := 0; i < 100; i++ {\n        primes[i]\
    \ = i\n    }\n    \n    for i := 2; i < a; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if primes[j] == i {\n                primes[j] = i\n        \
    \    }\n        }\n    }\n    \n    for i := 0; i < 100; i++ {\n        if primes[i]\
    \ == i {\n            return false\n        }\n    }\n    \n    return true\n\
    }\n", "    b := a\n    for i := 2; i < 100; i++ {\n        if b%i == 0 {\n   \
    \         b = b / i\n            if b == 1 {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n", "    b := a\n    c :=\
    \ a\n    d := a\n    e := a\n    f := a\n    g := a\n    h := a\n    i := a\n\
    \    j := a\n    k := a\n    l := a\n    m := a\n    n := a\n    o := a\n    p\
    \ := a\n    q := a\n    r := a\n    s := a\n    t := a\n    u := a\n    v := a\n\
    \    w := a\n    x := a\n    y := a\n    z := a\n\n    switch {\n    case b <\
    \ 2:\n        return false\n    case b == 2:\n        return true\n    case b\
    \ == 3:\n        return true\n    case b == 4:\n        return true\n    case\
    \ b == 5:\n        return true\n    case b == 6:\n        return true\n    case\
    \ b == 7:\n        return true\n    case b == 8:\n        return true\n    case\
    \ b == 9:\n        return true\n    case b == 10:\n        return true\n    case\
    \ b == 11:\n        return true\n    case b == 12:\n        return true\n    case\
    \ b == 13:\n        return true\n    case b == 14:\n        return true\n    case\
    \ b == 15:\n        return true\n    case b == 16:\n        return true\n    case\
    \ b == 17:\n        return true\n    case b == 18:\n        return true\n    case\
    \ b == 19:\n        return true\n    case b == 20:\n        return true\n    case\
    \ b == 21:\n        return true\n    case b == 22:\n        return true\n    case\
    \ b == 23:\n        return true\n    case b == 24:\n        return true\n    case\
    \ b == 25:\n        return true\n    case b == 26:\n        return true\n    case\
    \ b == 27:\n        return true\n    case b == 28:\n        return true\n    case\
    \ b == 29:\n        return true\n    case b == 30:\n        return true\n    case\
    \ b == 31:\n        return true\n    case b == 32:\n        return true\n    case\
    \ b == 33:\n        return true\n    case b == 34:\n        return true\n    case\
    \ b == 35:\n        return true\n    case b == 36:\n        return true\n    case\
    \ b == 37:\n        return true\n    case b == 38:\n        return true\n    case\
    \ b == 39:\n        return true\n    case b == 40:\n        return true\n    case\
    \ b == 41:\n        return true\n    case b == 42:\n        return true\n    case\
    \ b == 43:\n        return true\n    case b == 44:\n        return true\n    case\
    \ b == 45:\n        return true\n    case b == 46:\n        return true\n    case\
    \ b", "    \n    // Write your code here\n    \n    return false\n}\n", "    if\
    \ a < 100 {\n        return false\n    }\n    \n    primes := make([]int, 100)\n\
    \    \n    for i := 0; i < len(primes); i++ {\n        primes[i] = i\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        for _, j := range primes {\n    \
    \        if i*j == a {\n                primes[j] = i\n            }\n       \
    \ }\n    }\n    \n    for _, i := range primes {\n        if i != a {\n      \
    \      return false\n        }\n    }\n    \n    return true\n}\n", "    if a\
    \ < 100 {\n        return false\n    }\n    \n    // Find all prime numbers less\
    \ than or equal to a\n    primes := make([]int, 0, 100)\n    for i := 2; i <=\
    \ a; i++ {\n        if i%2 == 0 {\n            continue\n        }\n        for\
    \ j := 3; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if j > i {\n            primes = append(primes,\
    \ i)\n        }\n    }\n    \n    // Check if a is multiple of any prime number\n\
    \    for _, prime := range primes {\n        if a == prime {\n            return\
    \ true\n        }\n    }\n    return false\n}\n", "    \n    // Write your code\
    \ here\n    \n    return false\n}\n", "    \n    // Write your code here\n   \
    \ \n    if a < 100 {\n        return false\n    }\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100 {\n      \
    \  return false\n    }\n    \n    primes := make([]int, 100)\n    primes[0] =\
    \ 2\n    primes[1] = 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++\
    \ {\n        if primes[i]*primes[i] > a {\n            return false\n        }\n\
    \    }\n    \n    return true\n}\n", "    if a < 100 {\n        return false\n\
    \    }\n    \n    // write your code here\n    \n    return true\n}\n", "    if\
    \ a < 100 {\n        return false\n    }\n    \n    // a is divisible by 2, so\
    \ return false\n    if a % 2 == 0 {\n        return false\n    }\n    \n    //\
    \ a is divisible by 3, so return false\n    if a % 3 == 0 {\n        return false\n\
    \    }\n    \n    // a is divisible by 5, so return false\n    if a % 5 == 0 {\n\
    \        return false\n    }\n    \n    // a is divisible by 7, so return false\n\
    \    if a % 7 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 11, so return false\n    if a % 11 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 13, so return false\n    if a % 13 == 0 {\n  \
    \      return false\n    }\n    \n    // a is divisible by 17, so return false\n\
    \    if a % 17 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 19, so return false\n    if a % 19 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 23, so return false\n    if a % 23 == 0 {\n  \
    \      return false\n    }\n    \n    // a is divisible by 29, so return false\n\
    \    if a % 29 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 31, so return false\n    if a % 31 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 37, so return false\n    if a % 37 == 0 {\n  \
    \      return false\n    }\n    \n    // a is divisible by 41, so return false\n\
    \    if a % 41 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 43, so return false\n    if a % 43 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 47, so return false\n    if a % 47 == 0 {\n  \
    \      return false\n    }\n    \n    // a is divisible by 53, so return false\n\
    \    if a % 53 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 59, so return false\n    if a % 59 == 0 {\n        return false\n    }\n\
    \    \n    // a is divisible by 61, so return false\n    if a % 61 == 0 {\n  \
    \      return false\n    }\n    \n    // a is divisible by 67, so return false\n\
    \    if a % 67 == 0 {\n        return false\n    }\n    \n    // a is divisible\
    \ by 71, so return false\n    if a % 71 == 0 {\n        return false\n    }\n",
  "    if a < 100 {\n        return false\n    }\n    \n    // Find all prime numbers\
    \ less than or equal to a\n    primes := make([]int, 0, 100)\n    for i := 2;\
    \ i < a; i++ {\n        if primes[len(primes)-1] == i {\n            continue\n\
    \        }\n        \n        if i%2 == 0 {\n            continue\n        }\n\
    \        \n        for j := 3; j < i; j++ {\n            if i%j == 0 {\n     \
    \           break\n            }\n        }\n        \n        if j > i {\n  \
    \          primes = append(primes, i)\n        }\n    }\n    \n    // Check if\
    \ a is multiple of any of the prime numbers\n    for _, p := range primes {\n\
    \        if a == p*p {\n            return true\n        }\n    }\n    \n    return\
    \ false\n}\n", "    if a < 100 {\n        return false\n    }\n    \n    primes\
    \ := make([]int, 100)\n    primes[0] = 2\n    primes[1] = 3\n    primes[2] = 5\n\
    \    primes[3] = 7\n    primes[4] = 11\n    primes[5] = 13\n    primes[6] = 17\n\
    \    primes[7] = 19\n    primes[8] = 23\n    primes[9] = 29\n    primes[10] =\
    \ 31\n    primes[11] = 37\n    primes[12] = 41\n    primes[13] = 37\n    primes[14]\
    \ = 41\n    primes[15] = 43\n    primes[16] = 47\n    primes[17] = 53\n    primes[18]\
    \ = 59\n    primes[19] = 61\n    primes[20] = 67\n    primes[21] = 71\n    primes[22]\
    \ = 73\n    primes[23] = 79\n    primes[24] = 83\n    primes[25] = 89\n    primes[26]\
    \ = 97\n    primes[27] = 101 \n    primes[28] = 103\n    primes[29] = 107\n  \
    \  primes[30] = 103\n    primes[31] = 109\n    primes[32] = 31 \n    primes[33]\
    \ = 37 \n    primes[34] = 41 \n    primes[35] = 43 \n    primes[36] = 47 \n  \
    \  primes[37] = 53 \n    primes[38] = 59 \n    primes[39] = 61 \n    primes[40]\
    \ = 67 \n    primes[41] = 71 \n    primes[42] = 73 \n    primes[43] = 79 \n  \
    \  primes[44] = 83 \n    primes[45] = 89 \n    primes[46] = 97 \n    primes[47]\
    \ = 101 \n    primes[48] = 103\n    primes[49] = 107\n    primes[50] = 103\n \
    \   primes[51] = 110\n    primes[52] = 113\n    primes[53] = 117\n    primes[54]\
    \ = 121\n    primes[55] = 123\n    primes[56] = 127\n    primes[57] = 131\n  \
    \  primes[58] = 137\n    primes[59] = 139\n    primes[60] = 147 \n    primes[61]\
    \ = 151\n    primes[62] = 157\n    primes[63] = 163 \n    primes[64] = 171\n \
    \   primes[65] = 179\n    primes[66] = 18", "    \n    // Write your code here\n\
    \    \n    return false\n}\n", "    if a < 100 {\n        return false\n    }\n\
    \    \n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if a < 100 {\n        return\
    \ false\n    }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1]\
    \ = 3\n    primes[2] = 5\n    \n    for i := 3; i < 100; i++ {\n        if primes[i]*primes[i]\
    \ > a {\n            return false\n        }\n    }\n    return true\n}\n", " \
    \   if a < 100 {\n        return false\n    }\n    \n    primes := make([]int,\
    \ 100)\n    \n    for i := 0; i < len(primes); i++ {\n        primes[i] = i\n\
    \    }\n    \n    for i := 2; i < a; i++ {\n        for _, j := range primes {\n\
    \            if i*j == a {\n                primes[j] = i\n            }\n   \
    \     }\n    }\n    \n    for _, j := range primes {\n        if j == 3 {\n  \
    \          return true\n        }\n    }\n    \n    return false\n}\n", "    \n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if a < 100 {\n        return false\n\
    \    }\n    \n    primes := make([]int, 100)\n    primes[0] = 2\n    primes[1]\
    \ = 3\n    primes[2] = 5\n    primes[3] = 7\n    primes[4] = 11\n    primes[5]\
    \ = 13\n    primes[6] = 17\n    primes[7] = 19\n    primes[8] = 23\n    primes[9]\
    \ = 29\n    \n    for i := 2; i < a; i++ {\n        if primes[i]*primes[i] > a\
    \ {\n            return false\n        }\n    }\n    \n    return true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
