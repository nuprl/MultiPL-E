name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    n -= 1 // ignore even numbers\n    p := 2\n    q := 2\n    for\
    \ {\n        if n%p == 0 {\n            return p\n        }\n        if n%q ==\
    \ 0 {\n            return q\n        }\n        if p*p > q*q {\n            p\
    \ = p + 1\n        }\n        if q*q > p*p {\n            q = q + 1\n        }\n\
    \    }\n}\n", "    if n < 2 {\n        return n\n    }\n    p := 2\n    q := n\n\
    \    for {\n        if q%p == 0 {\n            return p\n        }\n        p\
    \ += 2\n        q /= p\n    }\n}\n", "    prime := 2\n    factor := 1\n    for\
    \ n > 1 {\n        if n%prime == 0 {\n            n = n/prime\n        } else\
    \ {\n            prime++\n            factor = 1\n        }\n    }\n    return\
    \ factor\n}\n", "    p := 2\n    q := n\n    for {\n        if q%p == 0 {\n  \
    \          return p\n        }\n        p += 2\n        q /= p\n    }\n}\n", " \
    \   n -= 1 // Make n positive\n    p := 2\n    for i := 2; i <= n; i++ {\n   \
    \     if n % i == 0 {\n            p += 1\n        }\n    }\n    return p\n}\n",
  "    n -= 2\n    i := 2\n    p := 2\n    for {\n        if n%i == 0 {\n        \
    \    n = n/i\n            p += 2\n        } else {\n            i++\n        }\n\
    \        if i > n {\n            break\n        }\n    }\n    return p\n}\n",
  "    if n < 2 {\n        return n\n    }\n    p := 2\n    q := n\n    d := 1\n \
    \   for {\n        if q%p == 0 {\n            break\n        }\n        p++\n\
    \        q /= p\n    }\n    for {\n        if q%d == 0 {\n            break\n\
    \        }\n        d++\n        q /= d\n    }\n    return d\n}\n", "    if n\
    \ < 2 {\n        return n\n    }\n    p := 2\n    q := n\n    for {\n        if\
    \ q%p == 0 {\n            return p\n        }\n        p += 2\n        q -= p\n\
    \    }\n}\n", "    if n < 2 {\n        return n\n    }\n    max := n\n    i :=\
    \ 2\n    for i <= n {\n        if n % i == 0 {\n            max = i\n        }\n\
    \        i += 2\n    }\n    return max\n}\n", "    if n < 2 {\n        return\
    \ n\n    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p == 0 {\n   \
    \         return p\n        }\n\n        p += 2\n        q -= p\n    }\n}\n",
  "    p := 2\n    i := 2\n    for {\n        if n % i == 0 {\n            p += i\n\
    \            n /= i\n        } else {\n            i++\n        }\n        if\
    \ n == 1 {\n            return p\n        }\n    }\n}\n", "    if n < 2 {\n  \
    \      return n\n    }\n\n    p := 2\n    q := n\n\n    for {\n        if q%p\
    \ == 0 {\n            return p\n        }\n\n        p += 2\n        q -= p\n\
    \    }\n}\n", "    p := 2\n    q := n\n    r := 1\n    for {\n        if q%p ==\
    \ 0 {\n            break\n        }\n        p = p * q\n        q = q / p\n  \
    \      r = r + 1\n    }\n    return r\n}\n", "    if n < 2 {\n        return n\n\
    \    }\n    largest := 2\n    for i := 3; i <= n; i++ {\n        if n % i == 0\
    \ {\n            if largest < i {\n                largest = i\n            }\n\
    \        }\n    }\n    return largest\n}\n", "    n -= 1\n    prime := 2\n   \
    \ for i := 3; i <= n; i++ {\n        if n%i == 0 {\n            prime = i\n  \
    \          break\n        }\n    }\n    return prime\n}\n", "    n -= 2\n    i\
    \ := 2\n    p := 2\n    for {\n        if n % p == 0 {\n            n /= p\n \
    \           i++\n        }\n        p++\n        if n == 1 {\n            break\n\
    \        }\n    }\n    return i\n}\n", "    n -= 2\n    i := 2\n    for {\n  \
    \      if n % i == 0 {\n            n /= i\n        } else {\n            break\n\
    \        }\n        i++\n    }\n    return n\n}\n", "    n -= 2 // remove 2\n\
    \    i := 2\n    for {\n        if n % i == 0 {\n            i += 2\n        \
    \    if i == n {\n                return i\n            }\n        } else {\n\
    \            i += 2\n        }\n    }\n}\n", "    p := 2\n    i := 2\n    for\
    \ {\n        if n % i == 0 {\n            p += i\n            n /= i\n       \
    \ } else {\n            i++\n        }\n        if n == 1 {\n            return\
    \ p\n        }\n    }\n}\n", "    n -= 1\n    i := 2\n    p := 2\n    for i <=\
    \ n {\n        if n % i == 0 {\n            p = i\n        }\n        i += p\n\
    \    }\n    return p\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
