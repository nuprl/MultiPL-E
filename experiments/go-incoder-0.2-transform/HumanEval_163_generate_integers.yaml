name: HumanEval_163_generate_integers
language: go_test.go
prompt: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given two positive integers a and b, return the even digits between a\n\
  // and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n\
  // []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>>\
  \ generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int\
  \ {\n"
tests: "func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
  \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     {\
  \ actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17,\
  \ 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n     \
    \   if i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    for i := a; i <=\
    \ b; i++ {\n        if i%2 == 0 {\n            result = append(result, i)\n  \
    \      }\n    }\n    return result\n}\n", "    result := make([]int, 0, b)\n \
    \   for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n            result =\
    \ append(result, i)\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, 0)\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n     \
    \       result = append(result, i)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0, b)\n    for i := 0; i < b; i++ {\n        if a <=\
    \ i {\n            break\n        }\n        result = append(result, a)\n    \
    \    a /= 10\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0)\n\
    \    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0,\
    \ b - a + 1)\n    for i := a; i <= b; i++ {\n        if i % 2 == 0 {\n       \
    \     result = append(result, i)\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, 0)\n    for i := a; i <= b; i++ {\n        if i%2 ==\
    \ 0 {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n        if\
    \ i%2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, 0)\n    for a <= b\
    \ {\n        if a % 2 == 0 {\n            result = append(result, a)\n       \
    \ }\n        a += 1\n    }\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, 0)\n    for i := a; i <= b; i++ {\n        if i%2 == 0 {\n  \
    \          result = append(result, i)\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, 0, b)\n    for i := a; i <= b; i++ {\n        if i %\
    \ 2 == 0 {\n            result = append(result, i)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
