language: go_test.go
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return choose_num(x/2,\
    \ y/2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0x1?,\
    \ 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:16 +0xb0 fp=0xc0201603a0 sp=0xc020160398 pc=0x4ef710\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27\
    \ +0x3b fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27 +0x3b fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27\
    \ +0x3b fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27 +0x3b fp=0xc020160420 sp=0xc020160400 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27\
    \ +0x3b fp=0xc020160440 sp=0xc020160420 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27 +0x3b fp=0xc020160460 sp=0xc020160440 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27\
    \ +0x3b fp=0xc020160480 sp=0xc020160460 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27 +0x3b fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27\
    \ +0x3b fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef69b\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27 +0x3b fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef69b\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpgl4s1yr4_test.go:27\
    \ +0x3b fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef69b\ncommand-line-ar"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x%2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz_5d0ljz_test.go:48: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz_5d0ljz_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz_5d0ljz_test.go:48: expected '%!s(int=12354)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz_5d0ljz_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=2616)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz_5d0ljz_test.go:48: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz_5d0ljz_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz_5d0ljz_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.030s\nFAIL\n"
  timestamp: 1660073742
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to know if there is a faster way to solve the problem than brute force.\n<|/\
    \ c |>\n<| c |>\nI agree with you. My answer was just to give an idea of how to\
    \ solve the problem. OP can modify it according to his needs.\n<|/ c |>\n<| c\
    \ |>\nI believe this answer doesn't answer the question. OP wants to know if there\
    \ is a faster way to solve the problem than brute force.\n<|/ c |>\n<| c |>\n\
    I believe this answer doesn't answer the question. OP wants to know if there is\
    \ a faster way to solve the problem than brute force.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer doesn't answer the question. OP wants to know if there is a faster\
    \ way to solve the problem than brute force.\n<|/ c |>\n<| a tags=algorithm,c++,c\
    \ |>\nI believe this answer doesn't answer the question. OP wants to know if there\
    \ is a faster way to solve the problem than brute force.\n\nI believe this answer\
    \ doesn't answer the question. OP wants to know if there is a faster way to solve\
    \ the problem than brute force.\nThe answer is no. There is no faster way to solve\
    \ the problem than brute force.\nThe only way to solve the problem faster than\
    \ brute force is to use an algorithm that doesn't require a brute force search.\
    \ \nThe algorithm you propose is O(n^2) which is too slow for large values of\
    \ n. \nThe algorithm you propose is O(n^3) which is too slow for large values\
    \ of n. \nThe algorithm you propose is O(n^4) which is too slow for large values\
    \ of n. \nThe algorithm you propose is O(n^5) which is too slow for large values\
    \ of n. \nThe algorithm you propose is O(n^6) which is too slow for large values\
    \ of n. \nThe algorithm you propose is O(n^7) which is too slow for large values\
    \ of n. \nThe algorithm you propose is O(n^8) which is too slow for large values\
    \ of n. \nThe algorithm you propose is O(n^9) which is too slow for large values\
    \ of n. \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp51_rkxjq_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic |>\n<|\
    \ a tags=algorithm,math,language-agnostic |>\n<code>\nint choose_num(int x, int\
    \ y){\n    if(x < y){\n        return -1;\n    }\n    if(y == x){\n        return\
    \ x;\n    }\n    if(x % 2 == 0 && y % 2 == 0){\n        return choose_num(x +\
    \ 1, y);\n    }\n    if(x % 2 == 0 && y % 2 != 0){\n        return choose_num(x,\
    \ y + 1);\n    }\n    if(x % 2 != 0 && y % 2 == 0){\n        return choose_num(x\
    \ + 1, y + 1);\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nint choose_num(int x, int y){\n    if(x<y){\n        return -1;\n\
    \    }\n    if(x==y){\n        return x;\n    }\n    if(x%2==0 && y%2==0){\n \
    \       return choose_num(x+1,y);\n    }\n    if(x%2==0 && y%2!=0){\n        return\
    \ choose_num(x,y+1);\n    }\n    if(x%2!=0 && y%2==0){\n        return choose_num(x+1,y+1);\n\
    \    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic\
    \ |>\n<| a dscore=1 |>\n<code>\nint choose_num(int x, int y){\n    if(x<y){\n\
    \        return -1;\n    }\n    if(x==y){\n        return x;\n    }\n    if(x%2==0\
    \ && y%2==0){\n        return choose_num(x+1,y);\n    }\n    if(x%2==0 && y%2!=0){\n\
    \        return choose_num(x,y+1);\n    }\n    if(x%2!=0 && y%2==0){\n       \
    \ return choose_num(x+1,y+1);\n    }\n    return -1;\n}\n</code>\n<|/ a tags=algorithm,math,language-agnostic\
    \ |>\n<| a tags=algorithm,math,language-agnostic |>\n<code>\nint choose_num(int\
    \ x, int y){\n    if(x<y){\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwecbloos_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if you choose the wrong number as the second argument. For example, choose_num(13,\
    \ 12) returns -1 instead of 14.\n<|/ c |>\n<| c |>\nYes, you are right. I forgot\
    \ to add that case. Thanks for pointing out. I've edited my answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwyce69u2_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    x /= 2\n    y /= 2\n    \n    x %= y\n    y %= x\n    \n    if\
    \ x == 0 {\n        return y\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.choose_num(...)\n\t/tmp/tmp4fb3pzat_test.go:28\n\
    command-line-arguments_test.TestChoose_Num(0x0?)\n\t/tmp/tmp4fb3pzat_test.go:45\
    \ +0x12\ntesting.tRunner(0xc0000da340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073574
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        if x % 2 !=\
    \ 0 && y % 2 != 0 {\n            return y\n        }\n        x /= 2\n       \
    \ y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4jo2bkg5_test.go:52: expected '%!s(int=14)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4jo2bkg5_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4jo2bkg5_test.go:52: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4jo2bkg5_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4jo2bkg5_test.go:52: expected '%!s(int=28)', got '%!s(int=7)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4jo2bkg5_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4jo2bkg5_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.028s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpx5gcyo_x_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpx5gcyo_x_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpx5gcyo_x_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpx5gcyo_x_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return i\n        }\n        x /= 2\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    for {\n        x /= 2\n  \
    \      if x%2 == 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpndmn8old_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpndmn8old_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpndmn8old_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpndmn8old_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpndmn8old_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpndmn8old_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpndmn8old_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2+1, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8vhw7d86_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp8vhw7d86_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8vhw7d86_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp8vhw7d86_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        if x % 2 == 0 {\n     \
    \       return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_0aijd8f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_0aijd8f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_0aijd8f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2+1, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8vhw7d86_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp8vhw7d86_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8vhw7d86_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp8vhw7d86_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y) return -1;\n    if\
    \ (x == y) return x;\n    if (x % 2 == 0) return choose_num(x + 1, y);\n    return\
    \ choose_num(x, y + 1);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    int choose_num(int x, int y) {\n    if (x < y) return -1;\n    if (x == y) return\
    \ x;\n    if (x % 2 == 0) return choose_num(x + 1, y);\n    return choose_num(x,\
    \ y + 1);\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<| a dscore=2 |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y)\
    \ return -1;\n    if (x == y) return x;\n    if (x % 2 == 0) return choose_num(x\
    \ + 1, y);\n    return choose_num(x, y + 1);\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<| a dscore=2 |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y)\
    \ return -1;\n    if (x == y) return x;\n    if (x % 2 == 0) return choose_num(x\
    \ + 1, y);\n    return choose_num(x, y + 1);\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<| a dscore=2 |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y)\
    \ return -1;\n    if (x == y) return x;\n    if (x % 2 == 0) return choose_num(x\
    \ + 1, y);\n    return choose_num(x, y + 1);\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<| a dscore=2 |>\n<code>\nint choose_num(int x, int y) {\n    if (x < y)\
    \ return -1;\n    if (x == y) return x;\n    if (x % 2 == 0) return choose_num(x\
    \ + 1, y);\n    return choose_num(x, y + 1);\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<| a dscore=2 |>\n<code>\nint cho\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw78kmo11_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=546)', got '%!s(int=1088)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            y = y / 2\n \
    \       }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x == 0 {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    if x > y {\n\
    \        return -1\n    }\n    return choose_num(x-1, y)\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpywwrlrj8_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpywwrlrj8_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpywwrlrj8_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpywwrlrj8_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    if x == y {\n  \
    \      return x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x\
    \ / 2, y)\n    }\n    \n    return choose_num(x + 1, y)\n}\n</code>\n<|/ a tags=go,recursion\
    \ |>\n<| c |>\nThis doesn't work. Try it with `choose_num(12, 15)`\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. `choose_num(12, 15)` returns `14`\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for `choose_num(12, 15)` because `choose_num(12,\
    \ 15)` returns `-1` which is not in the range `[12, 15]`.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works fine. `choose_num(12, 15)` returns `14`\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works fine. `choose_num(12, 15)` returns\
    \ `14`\n<|/ c |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnjis_mlo_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphefev1g6_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmphefev1g6_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\")\n       \
    \ return -1\n    }\n    \n    x -= x%2\n    y -= y%2\n    \n    for {\n      \
    \  if x%2 == 0 && y%2 == 0 {\n            return x\n        }\n        \n    \
    \    x /= 2\n        y /= 2\n    }\n}\n</code>\n<|/ a tags=go,algorithm |>\n<|\
    \ c |>\nThe code is not correct. Try `choose_num(12, 15)`\n<|/ c |>\n<| c |>\n\
    I fixed the code. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThe code is\
    \ not correct. Try `choose_num(12, 15)`\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=go,algorithm |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf5nsg7g2_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpj4d9_r9a_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpj4d9_r9a_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x == y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073753
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=546)', got '%!s(int=1088)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n</code>\n<|/ a tags=go,recursion |>\n<| c |>\n\
    This code doesn't compile. `choose_num` returns `int` but `choose_num_test` returns\
    \ `bool`.\n<|/ c |>\n<| c |>\nThanks, I fixed the return type. Now it compiles\
    \ and runs.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npackage main\n\nimport (\n  \
    \  \"fmt\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpao5e8g7q_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x /= 2\n  \
    \      } else {\n            x += 1\n        }\n    }\n    \n    return x\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4t_9nuf3_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4t_9nuf3_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4t_9nuf3_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4t_9nuf3_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4t_9nuf3_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4t_9nuf3_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4t_9nuf3_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073742
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n       \
    \ }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x %\
    \ 2 == 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprt5yref4_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmprt5yref4_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmprt5yref4_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmprt5yref4_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprt5yref4_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmprt5yref4_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmprt5yref4_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x\
    \ / 2, y)\n    }\n    \n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpxu97ykk1_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpxu97ykk1_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpxu97ykk1_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpxu97ykk1_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.047s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    x -=\
    \ x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x\
    \ -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n \
    \   x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n\
    \    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x %\
    \ 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -=\
    \ x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x\
    \ -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n \
    \   x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n\
    \    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x %\
    \ 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -=\
    \ x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x\
    \ -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n \
    \   x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n\
    \    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % 2\n    x -= x %\
    \ 2\n    x -= x % 2\n    x -= x % 2\n    x -= x % \nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplld92hq6_test.go:93:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI believe this fails for `choose_num(12, 15)` which\
    \ should return `14` but returns `-1`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the bug and added a test case to show that it works.\n<|/\
    \ c |>\n<| c |>\nI believe this fails for `choose_num(12, 15)` which should return\
    \ `14` but returns `-1`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed\
    \ the bug and added a test case to show that it works.\n<|/ c |>\n<| a tags=algorithm,language-agnostic,language-agnostic\
    \ |>\n<code>\nint choose_num(int x, int y) {\n    if (x > y) {\n        return\
    \ -1;\n    }\n    if (x == y) {\n        return x;\n    }\n    if (x % 2 == 0)\
    \ {\n        return choose_num(x/2, y);\n    }\n    if (y % 2 == 0) {\n      \
    \  return choose_num(x, y/2);\n    }\n    return -1;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nThis fails for `choose_num(12, 15)` which should return `14` but\
    \ returns `-1`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the\
    \ bug and added a test case to show that it works.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the bug and added a test case to show that it\
    \ works.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nint choose_num(int x, int y) {\n\
    \    if (x > y) {\n        return -1;\n    }\n    if (x == y) {\n        return\
    \ x;\n    }\n    if (x % 2 == 0) {\n        return choose_num(x/2, y);\n    }\n\
    \    if (y % 2 == 0) {\n        return choose_num(x, y/2);\n    }\n    return\
    \ -1;\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,language-agnostic |>\n\
    <| c |>\nThis fails for `choose_num(12, 15)` which should return `14` but returns\
    \ `-1`.\n<|/ c |>\n<| a |>\n<code>\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkcs_a5ch_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x + 1, y)\n   \
    \ }\n    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10469)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmperkiz_nf_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmperkiz_nf_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenul73le_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenul73le_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenul73le_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenul73le_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    return x + 1\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp18he604h_test.go:50: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp18he604h_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp18he604h_test.go:50: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp18he604h_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp18he604h_test.go:50: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp18he604h_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=18)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp18he604h_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp18he604h_test.go:50:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.050s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        x /= 2\n        if x ==\
    \ 0 {\n            return x\n        }\n        if x % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp669v_ccr_test.go:57: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp669v_ccr_test.go:57:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp669v_ccr_test.go:57: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp669v_ccr_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073743
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x /= 2\n        if x == 0 {\n            return x\n       \
    \ }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmps9qxfang_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmps9qxfang_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmps9qxfang_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmps9qxfang_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmps9qxfang_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmps9qxfang_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmps9qxfang_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.037s\nFAIL\n"
  timestamp: 1660073742
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n        } else {\n            y /= 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=14)', got '%!s(int=46)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=12354)', got '%!s(int=6177)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=7852)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=28)', got '%!s(int=88)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=82)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n        } else {\n            y /= 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpx_voooik_test.go:53: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpx_voooik_test.go:53:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpx_voooik_test.go:53: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpx_voooik_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.038s\nFAIL\n"
  timestamp: 1660073744
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \      y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkcs2tg6v_test.go:49: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkcs2tg6v_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkcs2tg6v_test.go:49: expected '%!s(int=12354)', got '%!s(int=3088)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkcs2tg6v_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkcs2tg6v_test.go:49: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkcs2tg6v_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpkcs2tg6v_test.go:49: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.042s\nFAIL\n"
  timestamp: 1660073744
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x /= 2\n  \
    \      } else {\n            return i\n        }\n    }\n    \n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjqu7kcm_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpqjqu7kcm_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpqjqu7kcm_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpqjqu7kcm_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjqu7kcm_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpqjqu7kcm_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpqjqu7kcm_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n"
  timestamp: 1660073744
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    x %= y\n    y %= x\n    \n    if x == 0 {\n        return x\n \
    \   }\n    \n    return y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwox88s5f_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwox88s5f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwox88s5f_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwox88s5f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwox88s5f_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwox88s5f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpwox88s5f_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660073744
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n</code>\n<|/ a tags=python,python-3.x,algorithm |>\n<| c |>\nThis doesn't work\
    \ for `choose_num(12, 15)`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| c |>\nThis doesn't work for `choose_num(12, 15)`\n<|/\
    \ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x <= y:\n\
    \        return -1\n    if x == y:\n        return x\n    if x % 2 == 0:\n   \
    \     return choose_num(x/2, y)\n    if y % 2 == 0:\n        return choose_num(x,\
    \ y/2)\n    return -1\n</code>\n<|/ a tags=python,python-3.x,algorithm |>\n<|\
    \ c |>\nThis doesn't work for `choose_num(12, 15)`\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out!\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef\
    \ choose_num(x : int, y : int) -> int:\n    if x <= y:\n        return -1\n  \
    \  if x == y:\n        return x\n    if x % 2 == 0:\n        return choose_num(x/2,\
    \ y)\n    if y % 2 == 0:\n        return choose_num(x, y/2)\n    return -1\n</code>\n\
    <|/ a tags=python,python-3.x,algorithm |>\n<| c |>\nThis doesn't work for `choose_num(12,\
    \ 15)`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n   \
    \ if x <= y:\n        return -1\n    if x == y:\n        return x\n    if x %\
    \ 2 == 0:\n        return choose_num(x/2, y)\n    if y % 2 == 0:\n        return\
    \ choose_num(x, y/2)\n    return -1\n</code>\n<|/ a tags=python,python-3.x,algorithm\
    \ |>\n<| c |>\nThis doesn't work for `choose_num(12, 15)`\n<|/ c |>\n<| c \nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd6vqewfb_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n\
    \        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpafhfvug__test.go:52: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpafhfvug__test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpafhfvug__test.go:52: expected '%!s(int=28)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpafhfvug__test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.032s\nFAIL\n"
  timestamp: 1660073744
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return i\n        }\n        x /= 2\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpg_eblbiv_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpg_eblbiv_test.go:57: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for i := x; i <= y; i++\
    \ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y - 1\n    }\n    if x %\
    \ 2 != 0 && y % 2 == 0 {\n        return x + y + 1\n    }\n    if x % 2 != 0 &&\
    \ y % 2 != 0 {\n        return x + y + 1\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpy6rrd5i7_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpy6rrd5i7_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=26)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpy6rrd5i7_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpy6rrd5i7_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10466)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpy6rrd5i7_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpy6rrd5i7_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=38)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpy6rrd5i7_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073744
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpzqf5_2hc_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpzqf5_2hc_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpzqf5_2hc_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpzqf5_2hc_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.030s\nFAIL\n"
  timestamp: 1660073744
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 {\n            x /= 2\n        }\n\
    \        if y % 2 == 0 {\n            y /= 2\n        }\n        if x == y {\n\
    \            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073756
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x += 2\n            y -= 2\n        } else {\n            x\
    \ -= 2\n        }\n        if y % 2 == 0 {\n            y += 2\n        } else\
    \ {\n            y -= 2\n        }\n        if x == y {\n            return x\n\
    \        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073757
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmppki537mu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmppki537mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmppki537mu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmppki537mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmppki537mu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmppki537mu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmppki537mu_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpyi6xwh77_test.go:16 +0x85 fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6e5\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:27 +0x2d fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef68d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:27\
    \ +0x2d fp=0xc020160440 sp=0xc020160420 pc=0x4ef68d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:27 +0x2d fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef68d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpyi6xwh77_test.go:27\
    \ +0x2d fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef68d\ncomma"
  timestamp: 1660073750
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x\
    \ % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    \n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2vuvse73_test.go:62: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp2vuvse73_test.go:62:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5mbbygqq_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073745
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            x /= 2\n        } else {\n            y /= 2\n        }\n \
    \       if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073583
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return i\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp6m18zfgp_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp6m18zfgp_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073586
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return y\n    }\n    return x\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwo6mfbms_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwo6mfbms_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    for i := x; i <=\
    \ y; i++ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n  \
    \  return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8wd7wxgt_test.go:49: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp8wd7wxgt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp8wd7wxgt_test.go:49: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp8wd7wxgt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8wd7wxgt_test.go:49: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp8wd7wxgt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    return choose_num(x, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n \
    \ candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15),\
    \ expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual:\
    \ candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234, 5233),\
    \ expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual:\
    \ candidate(27, 10), expected: -1 },\n     { actual: candidate(7, 7), expected:\
    \ -1 },\n     { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5235)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn_4vy6tt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn_4vy6tt_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    var result int\n    \n   \
    \ for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            result += x\n\
    \        }\n        x /= 2\n    }\n    \n    return result\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpf040p6_z_test.go:59: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpf040p6_z_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpf040p6_z_test.go:59: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpf040p6_z_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=9882)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpf040p6_z_test.go:59: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpf040p6_z_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=18)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpf040p6_z_test.go:59: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x - 2, y)\n   \
    \ }\n    return choose_num(x - 2, y) + 1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmph807enir_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmph807enir_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmph807enir_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmph807enir_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmph807enir_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmph807enir_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmph807enir_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    if x % 2 == 0 {\n        return\
    \ x + y\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphbyn44_m_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphbyn44_m_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphbyn44_m_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmphbyn44_m_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n  \
    \      }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprynuh1e9_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmprynuh1e9_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmprynuh1e9_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmprynuh1e9_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprynuh1e9_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmprynuh1e9_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmprynuh1e9_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.027s\nFAIL\n"
  timestamp: 1660073746
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if (x+y) % 2 == 0 {\n            return x + y\n\
    \        }\n        \n        x += 1\n        y += 1\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073758
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp0npttd2a_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp0npttd2a_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp0npttd2a_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp0npttd2a_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp0npttd2a_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp0npttd2a_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp0npttd2a_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp0npttd2a_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073747
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 +\
    \ 1\n        }\n    }\n    \n    return x\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp8pv_ex77_test.go:57: expected '%!s(int=14)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp8pv_ex77_test.go:57:\
    \ expected '%!s(int=12354)', got '%!s(int=-7)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp8pv_ex77_test.go:57: expected '%!s(int=28)', got '%!s(int=-82)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp8pv_ex77_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.031s\nFAIL\n"
  timestamp: 1660073746
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x > y {\n        return\
    \ -1\n    }\n    \n    return x + y\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpybdecbec_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpybdecbec_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpybdecbec_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpybdecbec_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpybdecbec_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpybdecbec_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=18)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpybdecbec_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n\
    \        if x % 2 == 0 {\n            return i\n        }\n        x /= 2\n  \
    \  }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpt87d4td9_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpt87d4td9_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpt87d4td9_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpt87d4td9_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpt87d4td9_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpt87d4td9_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpt87d4td9_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.036s\nFAIL\n"
  timestamp: 1660073746
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n</code>\n<|/ a tags=python,algorithm |>\n<| a tags=python,algorithm |>\n<code>\n\
    def choose_num(x : int, y : int) -> int:\n    if x < y:\n        return -1\n \
    \   if x == y:\n        return x\n    if x % 2 == 0:\n        return choose_num(x/2,\
    \ y)\n    if y % 2 == 0:\n        return choose_num(x, y/2)\n    return -1\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x : int, y : int)\
    \ -> int:\n    if x < y:\n        return -1\n    if x == y:\n        return x\n\
    \    if x % 2 == 0:\n        return choose_num(x/2, y)\n    if y % 2 == 0:\n \
    \       return choose_num(x, y/2)\n    return -1\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n   \
    \ if x < y:\n        return -1\n    if x == y:\n        return x\n    if x % 2\
    \ == 0:\n        return choose_num(x/2, y)\n    if y % 2 == 0:\n        return\
    \ choose_num(x, y/2)\n    return -1\n</code>\n<|/ a tags=python,algorithm |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=python,algorithm |>\n<code>\n\
    def choose_num(x : int, y : int) -> int:\n    if x < y:\n        return -1\n \
    \   if x == y:\n        return x\n    if x % 2 == 0:\n        return choose_num(x/2,\
    \ y)\n    if y % 2 == 0:\n        return choose_num(x, y/2)\n    return -1\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also\
    \ provide an explanation of what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef choose_num\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuxapiye9_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073745
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0xaabefe?,\
    \ 0xaabefc?)\n\t/tmp/tmpfvgqpq1i_test.go:16 +0x8b fp=0xc0201603a0 sp=0xc020160398\
    \ pc=0x4ef6eb\ncommand-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc020160420 sp=0xc020160400 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160440 sp=0xc020160420 pc=0x4ef690\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24 +0x57 fp=0xc020160460 sp=0xc020160440 pc=0x4ef6b7\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29\
    \ +0x45 fp=0xc020160480 sp=0xc020160460 pc=0x4ef6a5\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27 +0x30 fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef690\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:24\
    \ +0x57 fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef6b7\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:29 +0x45 fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef6a5\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpfvgqpq1i_test.go:27\
    \ +0x30 fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef690\ncomman"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n  \
    \      }\n        x /= 2\n    }\n    \n    return -1\n}\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| c |>\nThis is not correct. `choose_num(13, 12)` returns `-1` instead\
    \ of `14`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=python,algorithm |>\n<code>\ndef choose_num(x : int, y : int)\
    \ -> int:\n    if x <= y:\n        return -1\n    \n    x -= y\n    \n    for\
    \ i := 0; i < y; i++ :\n        if x%2 == 0 :\n            return x\n        x\
    \ /= 2\n    \n    return -1\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x <=\
    \ y:\n        return -1\n    \n    x -= y\n    \n    for i := 0; i < y; i++ :\n\
    \        if x%2 == 0 :\n            return x\n        x /= 2\n    \n    return\
    \ -1\n</code>\n<|/ a tags=python,algorithm |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=python,algorithm\
    \ |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x <= y:\n     \
    \   return -1\n    \n    x -= y\n    \n    for i := 0; i < y; i++ :\n        if\
    \ x%2 == 0 :\n            return x\n        x /= 2\n    \n    return -1\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef choose_num(x\
    \ : int, y : int) -> int:\n    if x <= y:\n        return -1\n    \n    x -= y\n\
    \    \n    for i := 0; i < y; i++ :\n        if x%2 == 0 :\n            return\
    \ x\n        x /= 2\n    \n    return -1\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| c |>\nPlease add some explanation to your \nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpch2m1fc5_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ if x % 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n\
    \        }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073759
- exit_code: 2
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y := y, x\n    }\n    if x == y {\n      \
    \  return x\n    }\n    for i := x; i <= y; i++ {\n        if i%2 == 0 {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps73cg8re_test.go:18:9: x declared but not used

    /tmp/tmps73cg8re_test.go:18:12: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073747
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x /= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4kotiobp_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4kotiobp_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n    return -1\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cjqhmbi_test.go:37:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmprh7jkbl1_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmprh7jkbl1_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmprh7jkbl1_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmprh7jkbl1_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.036s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x + 1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y + 1)\n    }\n    return choose_num(x\
    \ + 1, y + 1)\n}\n</code>\n<|/ a tags=algorithm,language-agnostic,math,language-agnostic\
    \ |>\n<| c |>\nThis doesn't seem to work. `choose_num(12, 15)` returns `14` instead\
    \ of `15`.\n<|/ c |>\n<| c |>\n: It works. `choose_num(12, 15)` returns `14` because\
    \ `choose_num(12, 15)` is `14`.\n<|/ c |>\n<| c |>\n: It works. `choose_num(12,\
    \ 15)` returns `14` because `choose_num(12, 15)` is `14`.\n<|/ c |>\n<| c |>\n\
    : It works. `choose_num(12, 15)` returns `14` because `choose_num(12, 15)` is\
    \ `14`.\n<|/ c |>\n<| c |>\n: It works. `choose_num(12, 15)` returns `14` because\
    \ `choose_num(12, 15)` is `14`.\n<|/ c |>\n<| a dscore=5 |>\nThe algorithm is\
    \ called \"binary search\".\n<|/ a tags=algorithm,language-agnostic,math,language-agnostic\
    \ |>\n<| c |>\nBinary search is O(log(n)) and O(n) respectively.\n<|/ c |>\n<|\
    \ c |>\nBinary search is O(log(n)) but O(n) is the worst case scenario for binary\
    \ search. Binary search is O(n) in the best case scenario.\n<|/ c |>\n<| c |>\n\
    Binary search is O(log(n)) but O(n) is the worst case scenario for binary search.\
    \ Binary search is O(n) in the best case scenario.\n<|/ c |>\n<| c |>\nBinary\
    \ search is O(log(n)) but O(n) is the worst case scenario for binary search. Binary\
    \ search is O(n) in the best case scenario.\n<|/ c |>\n<| c |>\nBinary search\
    \ is O(log(n)) but O(n) is the worst case scenario for binary search. Binary search\
    \ is O(n) in the best case scenario.\n<|/ c |>\n<| a tag\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptgf_2lzg_test.go:31:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073746
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ if x % 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n\
    \        }\n        if x == y {\n            return x\n        }\n    }\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073759
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x == 0 {\n            return x\n        }\n\
    \        if x > y {\n            return -1\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4__suwhu_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp4__suwhu_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return x + y\n    }\n    if y % 2 == 0 {\n      \
    \  return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 2
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y := y, x\n    }\n    for {\n        if x\
    \ % 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n     \
    \   }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm66qdtcw_test.go:18:9: x declared but not used

    /tmp/tmpm66qdtcw_test.go:18:12: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073748
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        x -= 2\n\
    \        y -= 2\n        if (x*x + y*y == x*y) {\n            return x\n     \
    \   }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073761
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x /= 2\n        if x == 0 {\n            return x\n        }\n\
    \        if x > y {\n            return -1\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4uty7wz5_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4uty7wz5_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073748
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x == 0 {\n            return x\n        }\n\
    \        \n        if x % 2 == 0 {\n            return x\n        }\n    }\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073761
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    if x == y {\n   \
    \     return x\n    }\n    \n    if x % 2 == 0 {\n        return choose_num(x/2,\
    \ y)\n    }\n    \n    if y % 2 == 0 {\n        return choose_num(x, y/2)\n  \
    \  }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2oly4sny_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp2oly4sny_test.go:56:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2oly4sny_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp2oly4sny_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.039s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=386)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpld17bbzo_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpld17bbzo_test.go:54: expected '%!s(int=546)', got '%!s(int=1088)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073573
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpqjef3baf_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpqjef3baf_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is greater than y\")\n      \
    \  return -1\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i := x;\
    \ i <= y; i++ {\n        if i % 2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n     \
    \   return evens\n    } else {\n        return odds\n    }\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqa9l7q8k_test.go:39:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073748
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    y /= 2\n  \
    \  \n    if x % 2 == 0 {\n        return x\n    }\n    \n    x /= 2\n    y /=\
    \ 2\n    \n    if x % 2 == 0 {\n        return x\n    }\n    \n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpxpj9_8ld_test.go:64: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpxpj9_8ld_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpxpj9_8ld_test.go:64: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpxpj9_8ld_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpxpj9_8ld_test.go:64: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpxpj9_8ld_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpxpj9_8ld_test.go:64: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpxpj9_8ld_test.go:64:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.045s\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp3y27vhu9_test.go:55: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp3y27vhu9_test.go:55:\
    \ expected '%!s(int=12354)', got '%!s(int=-6160)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp3y27vhu9_test.go:55: expected '%!s(int=28)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp3y27vhu9_test.go:55:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.040s\nFAIL\n"
  timestamp: 1660073750
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n       \
    \ }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073761
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x < y {\n            return\
    \ x\n        } else {\n            return y\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbeb2zbm1_test.go:59: expected '%!s(int=14)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbeb2zbm1_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbeb2zbm1_test.go:59: expected '%!s(int=12354)', got '%!s(int=100)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbeb2zbm1_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=2617)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbeb2zbm1_test.go:59: expected '%!s(int=28)', got '%!s(int=3)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbeb2zbm1_test.go:59:\
    \ expected '%!s(int=-1)', got '%!s(int=5)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpbeb2zbm1_test.go:59: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpbeb2zbm1_test.go:59:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.030s\nFAIL\n"
  timestamp: 1660073750
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x == 0 {\n            return x\n        }\n\
    \    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073582
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \      y /= 2\n    }\n    return -1\n}\n</code>\n<|/ a tags=go,algorithm |>\n\
    <| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc1yuu8a5_test.go:29:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n\
    \        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbyinfm2b_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpbyinfm2b_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n\
    \        }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw1jtbsuh_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw1jtbsuh_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpw1jtbsuh_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpw1jtbsuh_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpw1jtbsuh_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpw1jtbsuh_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpw1jtbsuh_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073750
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n   \
    \     }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073762
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmphhjw18wp_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmphhjw18wp_test.go:54: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073572
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    // The first even number in the range [x, y] inclusive\n\
    \    x -= 2\n    y -= 2\n    \n    // The last even number in the range [x, y]\
    \ inclusive\n    x -= 2\n    y -= 2\n    \n    // The first odd number in the\
    \ range [x, y] inclusive\n    x -= 2\n    y -= 1\n    \n    // The last odd number\
    \ in the range [x, y] inclusive\n    x -= 2\n    y -= 1\n    \n    // The biggest\
    \ even number in the range [x, y] inclusive\n    x -= 2\n    y -= 2\n    \n  \
    \  // The biggest odd number in the range [x, y] inclusive\n    x -= 2\n    y\
    \ -= 1\n    \n    // The biggest even number in the range [x, y] inclusive\n \
    \   x -= 2\n    y -= 2\n    \n    // The biggest odd number in the range [x, y]\
    \ inclusive\n    x -= 2\n    y -= 1\n    \n    // The biggest even number in the\
    \ range [x, y] inclusive\n    x -= 2\n    y -= 2\n    \n    // The biggest odd\
    \ number in the range [x, y] inclusive\n    x -= 2\n    y -= 1\n    \n    // The\
    \ biggest even number in the range [x, y] inclusive\n    x -= 2\n    y -= 2\n\
    \    \n    // The biggest odd number in the range [x, y] inclusive\n    x -= 2\n\
    \    y -= 1\n    \n    // The biggest even number in the range [x, y] inclusive\n\
    \    x -= 2\n    y -= 2\n    \n    // The biggest odd number in the range [x,\
    \ y] inclusive\n    x -= 2\n    y -= 1\n    \n    // The biggest even number in\
    \ the range [x, y] inclusive\n    x -= 2\n    y -= 2\n    \n    // The biggest\
    \ odd number in the range [x, y] inclusive\n    x -= 2\n    y -= 1\n    \n   \
    \ // The biggest even number in the range [x, y] inclusive\n    x -= 2\n    y\
    \ -= 2\n    \n    // The biggest odd number in the range [x, y] inclusive\n  \
    \  x -= 2\n    y -= 1\n    \n    // The biggest even number in the range [x, y]\
    \ inclusive\n    x -= 2\n    y -= 2\n    \n    // The biggest odd number in the\
    \ range [x, y] inclusive\n    x -= 2\n    y -= 1\n    \n    // The biggest even\
    \ \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphw0jf9sr_test.go:105:6: expected ''('', found TestChoose_Num

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073749
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        if x % 2 == 0 {\n     \
    \       return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_0aijd8f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_0aijd8f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_0aijd8f_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp_0aijd8f_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.035s\nFAIL\n"
  timestamp: 1660073742
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 && y % 2 != 0 {\n        return x + y\n    }\n    if x % 2 !=\
    \ 0 && y % 2 == 0 {\n        return x + y\n    }\n    if x % 2 != 0 && y % 2 !=\
    \ 0 {\n        return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpaglwn5im_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpaglwn5im_test.go:58: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\")\n       \
    \ return -1\n    }\n    if x == y {\n        fmt.Println(\"x equals y\")\n   \
    \     return x\n    }\n    \n    evens := 0\n    odds := 0\n    \n    for i :=\
    \ x; i <= y; i++ {\n        if i%2 == 0 {\n            evens++\n        } else\
    \ {\n            odds++\n        }\n    }\n    \n    if evens > odds {\n     \
    \   return evens\n    } else {\n        return odds\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "x is bigger than y\nx is bigger than y\nx is bigger than y\nx equals y\n\
    x equals y\n--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp67pk6810_test.go:64: expected '%!s(int=14)', got '%!s(int=2)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp67pk6810_test.go:64:\
    \ expected '%!s(int=12354)', got '%!s(int=6161)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp67pk6810_test.go:64: expected '%!s(int=28)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp67pk6810_test.go:64:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073751
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x%2\
    \ == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpt7s5s476_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpt7s5s476_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpt7s5s476_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpt7s5s476_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_rwsrslt_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp_rwsrslt_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp_rwsrslt_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp_rwsrslt_test.go:51: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073574
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    y -= x\n    \n    for {\n        if x % 2 ==\
    \ 0 {\n            return x\n        }\n        x /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1jynoeai_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp1jynoeai_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp1jynoeai_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp1jynoeai_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1jynoeai_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp1jynoeai_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp1jynoeai_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.031s\nFAIL\n"
  timestamp: 1660073752
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x / 2, y)\n    }\n\
    \    if y % 2 == 0 {\n        return choose_num(x, y / 2)\n    }\n    return choose_num(x\
    \ / 2, y / 2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200e0390\
    \ stack=[0xc0200e0000, 0xc0400e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0x1?,\
    \ 0x0?)\n\t/tmp/tmpechaee0k_test.go:16 +0xb9 fp=0xc0200e03a0 sp=0xc0200e0398 pc=0x4ef719\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpechaee0k_test.go:27\
    \ +0x3d fp=0xc0200e03c0 sp=0xc0200e03a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpechaee0k_test.go:27 +0x3d fp=0xc0200e03e0 sp=0xc0200e03c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpechaee0k_test.go:27\
    \ +0x3d fp=0xc0200e0400 sp=0xc0200e03e0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpechaee0k_test.go:27 +0x3d fp=0xc0200e0420 sp=0xc0200e0400 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpechaee0k_test.go:27\
    \ +0x3d fp=0xc0200e0440 sp=0xc0200e0420 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpechaee0k_test.go:27 +0x3d fp=0xc0200e0460 sp=0xc0200e0440 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpechaee0k_test.go:27\
    \ +0x3d fp=0xc0200e0480 sp=0xc0200e0460 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpechaee0k_test.go:27 +0x3d fp=0xc0200e04a0 sp=0xc0200e0480 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpechaee0k_test.go:27\
    \ +0x3d fp=0xc0200e04c0 sp=0xc0200e04a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpechaee0k_test.go:27 +0x3d fp=0xc0200e04e0 sp=0xc0200e04c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpechaee0k_test.go:27\
    \ +0x3d fp=0xc0200e0500 sp=0xc0200e04e0 pc=0x4ef69d\ncommand-line-arg"
  timestamp: 1660073755
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        }\n        \n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5pwdscqy_test.go:54: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp5pwdscqy_test.go:54:\
    \ expected '%!s(int=12354)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5pwdscqy_test.go:54: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmp5pwdscqy_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp5pwdscqy_test.go:54: expected '%!s(int=546)', got '%!s(int=544)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.043s\nFAIL\n"
  timestamp: 1660073752
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    \n    for {\n       \
    \ x -= 2\n        y -= 2\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 && y % 2 == 0 {\n            return x\n        }\n        x /= 2\n  \
    \      y /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n\
    \  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp805psz63_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp805psz63_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp805psz63_test.go:50: expected '%!s(int=12354)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp805psz63_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=1308)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp805psz63_test.go:50: expected '%!s(int=28)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp805psz63_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=2)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp805psz63_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.044s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n\
    \        } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return\
    \ x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        fmt.Println(\"x is bigger than y\")\n       \
    \ return -1\n    }\n    if x == y {\n        fmt.Println(\"x and y are equal\"\
    )\n        return x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x%2 ==\
    \ 0 {\n        return x\n    }\n    \n    return -1\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=go,algorithm |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"math\"\n)\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd0bg2fp3_test.go:35:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073750
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x+1, y)\n    }\n\
    \    return choose_num(x, y+1)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpn5db6rtt_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpn5db6rtt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=13)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpn5db6rtt_test.go:49: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpn5db6rtt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=10469)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpn5db6rtt_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpn5db6rtt_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=27)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpn5db6rtt_test.go:49: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.046s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= 2\n    y -= 2\n    \n    for {\n        if x % 2 ==\
    \ 0 && y % 2 == 0 {\n            return x + y\n        }\n        x /= 2\n   \
    \     y /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpyc4hmdzp_test.go:56: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpyc4hmdzp_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpyc4hmdzp_test.go:56: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpyc4hmdzp_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpyc4hmdzp_test.go:56: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpyc4hmdzp_test.go:56:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpyc4hmdzp_test.go:56: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.038s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp4zpfftym_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp4zpfftym_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  if y % 2 == 0 {\n        return choose_num(x, y/2)\n    }\n    return choose_num(x/2,\
    \ y/2)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160390\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f356?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.choose_num(0x1?,\
    \ 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:16 +0xb9 fp=0xc0201603a0 sp=0xc020160398 pc=0x4ef719\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27\
    \ +0x3d fp=0xc0201603c0 sp=0xc0201603a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27 +0x3d fp=0xc0201603e0 sp=0xc0201603c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27\
    \ +0x3d fp=0xc020160400 sp=0xc0201603e0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27 +0x3d fp=0xc020160420 sp=0xc020160400 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27\
    \ +0x3d fp=0xc020160440 sp=0xc020160420 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27 +0x3d fp=0xc020160460 sp=0xc020160440 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27\
    \ +0x3d fp=0xc020160480 sp=0xc020160460 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27 +0x3d fp=0xc0201604a0 sp=0xc020160480 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27\
    \ +0x3d fp=0xc0201604c0 sp=0xc0201604a0 pc=0x4ef69d\ncommand-line-arguments_test.choose_num(0x0?,\
    \ 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27 +0x3d fp=0xc0201604e0 sp=0xc0201604c0 pc=0x4ef69d\n\
    command-line-arguments_test.choose_num(0x0?, 0x0?)\n\t/tmp/tmpxk6u8_28_test.go:27\
    \ +0x3d fp=0xc020160500 sp=0xc0201604e0 pc=0x4ef69d\ncommand-line-arg"
  timestamp: 1660073756
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for {\n        x -= 2\n        if x %\
    \ 2 == 0 {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073765
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return x + choose_num(x+1, y)\n    }\n\
    \    if y % 2 == 0 {\n        return y + choose_num(x, y+1)\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpax56s1vi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpax56s1vi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpax56s1vi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpax56s1vi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=5233)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpax56s1vi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpax56s1vi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpax56s1vi_test.go:52: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=14)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=12354)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=15700)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=28)', got '%!s(int=16)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp47388c2q_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp47388c2q_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073568
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 && y % 2 == 0 {\n        return x + y\n    }\n \
    \   if x % 2 == 0 {\n        return x + y\n    }\n    if y % 2 == 0 {\n      \
    \  return x + y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=25)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=10467)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpibbeavh6_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=37)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpibbeavh6_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n\
    \        }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp31kdoq44_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp31kdoq44_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp31kdoq44_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp31kdoq44_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp31kdoq44_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp31kdoq44_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmp31kdoq44_test.go:52: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.033s\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return x\n \
    \       }\n        x /= 2\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp5wmhjf_d_test.go:53: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmp5wmhjf_d_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    if x % 2 == 0 {\n        return choose_num(x/2, y)\n    }\n  \
    \  return choose_num(x/2, y)\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwtbhhfoo_test.go:49: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpwtbhhfoo_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x = x / 2\n        } else {\n            x = x * 3 + 1\n\
    \        }\n        if y % 2 == 0 {\n            y = y / 2\n        } else {\n\
    \            y = y * 3 + 1\n        }\n        if x >= y {\n            return\
    \ x\n        }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate :=\
    \ choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n\
    \     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=14)', got '%!s(int=46)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=40)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=12354)', got '%!s(int=6177)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=7852)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=28)', got '%!s(int=88)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=82)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpkshhemh3_test.go:57: expected '%!s(int=-1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpkshhemh3_test.go:57:\
    \ expected '%!s(int=546)', got '%!s(int=273)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            x = x / 2\n\
    \        } else {\n            x = x * 3 + 1\n        }\n    }\n    \n    return\
    \ x\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpbef3mjwk_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpbef3mjwk_test.go:54:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.041s\nFAIL\n"
  timestamp: 1660073752
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for i := x; i <= y; i++\
    \ {\n        if i%2 == 0 {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpb1t9f7_i_test.go:48: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpb1t9f7_i_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073570
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    x /= 2\n    \n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    \n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp2zzxqzpj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmp2zzxqzpj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmp2zzxqzpj_test.go:54:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmp2zzxqzpj_test.go:54: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073571
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    x -= y\n    \n    for i := 0; i < y; i++ {\n        if x\
    \ % 2 == 0 {\n            return x\n        }\n        x /= 2\n    }\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpenibtazf_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpenibtazf_test.go:55: expected '%!s(int=-1)', got '%!s(int=7)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073569
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    \n    // The range is\
    \ inclusive of the lower bound, so we add one to \n    // the upper bound to get\
    \ the range [x, y] inclusive.\n    \n    // The loop will stop when x is greater\
    \ than or equal to y.\n    for i := x + 1; i <= y; i++ {\n        if i % 2 ==\
    \ 0 {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpfl9yxxjm_test.go:53: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpfl9yxxjm_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpfl9yxxjm_test.go:53: expected '%!s(int=28)', got '%!s(int=8)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpfl9yxxjm_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__7\
    \ (0.00s)\n        tmpfl9yxxjm_test.go:53: expected '%!s(int=546)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.045s\nFAIL\n"
  timestamp: 1660073753
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for {\n        x -= 2\n        if x%2 == 0 {\n            return x\n     \
    \   }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073766
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x >= y {\n        return -1\n    }\n    if x == y {\n        return\
    \ x\n    }\n    \n    // The first even number that is less than or equal to x\
    \ and greater than or equal to y\n    x -= 2\n    y -= 2\n    \n    for {\n  \
    \      if x % 2 == 0 {\n            x /= 2\n        } else {\n            y /=\
    \ 2\n        }\n        if x == y {\n            return x\n        }\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073767
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x <= y {\n        return -1\n    }\n    \n    x -= y\n    \n \
    \   for i := 0; i < y; i++ {\n        if x%2 == 0 {\n            return x\n  \
    \      }\n        x /= 2\n    }\n    \n    return -1\n}\n</code>\n<|/ a tags=python,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with choose_num(12, 15).\n<|/ c |>\n\
    <| c |>\nIt does work. Try it yourself. It returns 14 as expected.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with choose_num(12, 15).\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns 14 as expected.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it with choose_num(12, 15).\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\ndef choose_num(x : int, y : int) -> int:\n    if x <= y:\n        return\
    \ -1\n    \n    x -= y\n    \n    for i := 0; i < y; i++ :\n        if x%2 ==\
    \ 0 :\n            return x\n        x /= 2\n    \n    return -1\n</code>\n<|/\
    \ a tags=python,algorithm |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. Try it with choose_num(12, 15).\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns 14 as expected.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\ndef choose_num(x : int, y : int) -> int:\n    if x <= y:\n     \
    \   return -1\n    \n    x -= y\n    \n    for i := 0; i < y; i++ :\n        if\
    \ x%2 == 0 :\n            return x\n        x /= 2\n    \n    return -1\n</code>\n\
    <|/ a tags=python,algorithm |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c \nfunc\
    \ TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpagv5ysnh_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073753
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= 2\n    y -=\
    \ 2\n    \n    for {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x + y\n        }\n        x /= 2\n        y /= 2\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpnpxxlhx8_test.go:53: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpnpxxlhx8_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=4)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpnpxxlhx8_test.go:53: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpnpxxlhx8_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=80)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpnpxxlhx8_test.go:53: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpnpxxlhx8_test.go:53:\
    \ expected '%!s(int=-1)', got '%!s(int=16)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpnpxxlhx8_test.go:53: expected '%!s(int=-1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpnpxxlhx8_test.go:53:\
    \ expected '%!s(int=546)', got '%!s(int=1088)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.033s\nFAIL\n"
  timestamp: 1660073754
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        x -= 2\n        if x % 2 == 0 {\n            return x\n    \
    \    }\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073578
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for i := 0; i < y; i++ {\n        if x % 2 == 0 {\n            return i\n \
    \       }\n        x /= 2\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpz3e4_jgi_test.go:52: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpz3e4_jgi_test.go:52:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
- exit_code: null
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x > y {\n        x, y = y, x\n    }\n    for {\n        if x %\
    \ 2 == 0 {\n            x /= 2\n        } else {\n            y /= 2\n       \
    \ }\n        if x == y {\n            return x\n        }\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073761
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// >>> choose_num(12,\
    \ 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int)\
    \ int {\n    if x < y {\n        return -1\n    }\n    \n    x -= y\n    \n  \
    \  for {\n        if x % 2 == 0 {\n            return x\n        }\n        x\
    \ /= 2\n    }\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=12354)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpvs42xsne_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpvs42xsne_test.go:51:\
    \ expected '%!s(int=546)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073567
