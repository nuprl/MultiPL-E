language: go_test.go
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := a; i <= b; i++\
    \ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5pmw7b3z_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a <= i {\n            break\n        }\n        result = append(result,\
    \ a)\n        a /= 10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=13)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[]', got '[%!s(int=17)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074179
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := a; i <=\
    \ b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpodzk0_3e_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpodzk0_3e_test.go:35\
    \ +0xcd\ntesting.tRunner(0xc000192680, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := a; i <= b; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, i)\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp69sgumec_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp69sgumec_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp69sgumec_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp69sgumec_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a <= i {\n            break\n        }\n        result = append(result,\
    \ a)\n        a /= 10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=132) %!s(int=13)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmp73fhin2g_test.go:45: expected '[]', got '[%!s(int=17)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074179
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1jtnfbx_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        digit,\
    \ ok := (a / b) % 10\n        if ok {\n            result = append(result, digit)\n\
    \        }\n        a = b\n        b = (a / b) / 10\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v2ns_dn_test.go:20:22: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := a; i <=\
    \ b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpodzk0_3e_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpodzk0_3e_test.go:35\
    \ +0xcd\ntesting.tRunner(0xc000192680, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a <= i {\n            break\n        }\n        result := append(result,\
    \ i)\n        i += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplttbr8b2_test.go:24:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        digit,\
    \ a := a % 10, a\n        digit, b := b % 10, b\n        if digit == 0 {\n   \
    \         continue\n        }\n        if digit < a {\n            continue\n\
    \        }\n        if digit > b {\n            continue\n        }\n        result\
    \ = append(result, digit)\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074338
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ < b {\n            result += []int{a}\n        }\n        a += 2\n    }\n  \
    \  return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbm_nlzv__test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1jtnfbx_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a > 0 {\n            result := append(result, a%10)\n        \
    \    a = a / 10\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphu_ect4_test.go:21:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074178
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a > 0 {\n\
    \        if a % 2 == 0 {\n            result = append(result, a)\n        }\n\
    \        a /= 2\n    }\n    for b > 0 {\n        if b % 2 == 0 {\n           \
    \ result = append(result, b)\n        }\n        b /= 2\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjuotaogw_test.go:19:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfdph2hmd_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a <= i {\n            break\n        }\n        result = append(result,\
    \ i)\n        i += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        digit,\
    \ a := a % 10, a\n        digit, b := b % 10, b\n        if digit == 0 {\n   \
    \         continue\n        }\n        if digit > 0 {\n            result = append(result,\
    \ digit)\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb2p8jw1f_test.go:20:16: a declared but not used

    /tmp/tmpb2p8jw1f_test.go:21:16: b declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1jtnfbx_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a <= i {\n            break\n        }\n        result = append(result,\
    \ i)\n        i += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0)]'\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__2\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL: TestGenerate_Integers/test_num__3\
    \ (0.00s)\n        tmposdss59v_test.go:46: expected '[]', got '[%!s(int=0) %!s(int=2)\
    \ %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a <= b {\n\
    \        if a % 2 == 0 {\n            result = append(result, a)\n        }\n\
    \        a /= 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnqt9ggfc_test.go:19:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := 0; i <\
    \ b - a + 1; i++ {\n        if a <= i {\n            break\n        }\n      \
    \  result = append(result, a)\n        a += 2\n    }\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x503920, 0x54a0b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x503920,\
    \ 0x54a0b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpe53k0iyk_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpe53k0iyk_test.go:37\
    \ +0xf1\ntesting.tRunner(0xc0001036c0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a >= b {\n            break\n        }\n        result := append(result,\
    \ a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptyyudwog_test.go:23:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a > i {\n            result += make([]int, 0)\n        }\n       \
    \ result += append(result, i)\n        i += 2\n    }\n    return result\n}\n\n\
    func TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2p4yin59_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    /tmp/tmp2p4yin59_test.go:24:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ < 10 {\n            result = append(result, a)\n        }\n        a += 2\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmpl8sg0i5t_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmpl8sg0i5t_test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074179
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a >= b {\n            break\n        }\n        result = append(result,\
    \ a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp9hmxi7m8_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp9hmxi7m8_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp9hmxi7m8_test.go:45:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1jtnfbx_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1jtnfbx_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a < b {\n\
    \        if a % 2 == 0 {\n            result = append(result, a)\n        }\n\
    \        a /= 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu5ji9vkj_test.go:19:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := a; i <= b; i++\
    \ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5pmw7b3z_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50l80379_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a >= b {\n            break\n        }\n        result = append(result,\
    \ a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp9hmxi7m8_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp9hmxi7m8_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp9hmxi7m8_test.go:45:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := 0; i <\
    \ b - a + 1; i++ {\n        if a <= i {\n            result = append(result, a)\n\
    \            break\n        }\n        result = append(result, a)\n        a +=\
    \ 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x503920, 0x54a0b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x503920,\
    \ 0x54a0b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpdjkyv1k3_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpdjkyv1k3_test.go:38\
    \ +0x131\ntesting.tRunner(0xc0001a01a0, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a > 0 {\n            a /= 10\n            result += []int{a}\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwau6ddw6_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50l80379_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a < b {\n\
    \        if a % 2 == 0 {\n            result = append(result, a)\n        }\n\
    \        a /= 2\n        i++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074338
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := a; i <= b; i++\
    \ {\n        if i%2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp5pmw7b3z_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp5pmw7b3z_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a >= i {\n            result += []int{a}\n            a -= i\n   \
    \     }\n        i++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsydqad0r_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        if a\
    \ < b {\n            result += append(result, a)\n        }\n        a += 2\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjgk13a4_test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a > i {\n            result += []int{a}\n        }\n        a += 2\n\
    \        if a > b {\n            break\n        }\n        result += []int{a}\n\
    \        i += 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2pp9jj5_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    /tmp/tmpd2pp9jj5_test.go:28:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ < 10 {\n            result = append(result, a)\n        } else {\n         \
    \   a /= 10\n            b /= 10\n            if a > b {\n                a =\
    \ b\n            }\n            for i := a; i <= b; i++ {\n                result\
    \ = append(result, i)\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074339
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ > 0 {\n            digit, a := a / 10, a % 10\n            if digit % 2 == 0\
    \ {\n                result = append(result, digit)\n            }\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz0orgtuk_test.go:21:20: a declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a >= b {\n            break\n        }\n        if a < b {\n \
    \           a += 1\n        }\n        result = append(result, a)\n    }\n   \
    \ return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpo50bho4z_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n\
    \        tmpo50bho4z_test.go:47: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpo50bho4z_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpo50bho4z_test.go:47:\
    \ expected '[]', got '[%!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22)\
    \ %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29)\
    \ %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36)\
    \ %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43)\
    \ %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50)\
    \ %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57)\
    \ %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64)\
    \ %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71)\
    \ %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78)\
    \ %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85)\
    \ %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := 0; i <\
    \ b; i++ {\n        if a <= i {\n            break\n        }\n        result\
    \ = append(result, i)\n        a -= i\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x503920, 0x54a0b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x503920,\
    \ 0x54a0b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpwevi0dl2_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpwevi0dl2_test.go:37\
    \ +0xe9\ntesting.tRunner(0xc000192680, 0x528fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := a; i <=\
    \ b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpodzk0_3e_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpodzk0_3e_test.go:35\
    \ +0xcd\ntesting.tRunner(0xc000192680, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ > b {\n            break\n        }\n        result <- a\n        a += 2\n \
    \   }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0r77cst_test.go:23:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a <= b {\n\
    \        if a % 2 == 0 {\n            result += []int{a}\n        }\n        a\
    \ /= 2\n        i++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyxxppu4d_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ < b {\n            result += []int{a}\n        }\n        a += 2\n    }\n  \
    \  return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbm_nlzv__test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a >= b {\n            break\n        }\n        result = append(result,\
    \ a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__1\
    \ (0.00s)\n        tmp9hmxi7m8_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n\
    \        tmp9hmxi7m8_test.go:45: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]',\
    \ got '[]'\n    --- FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp9hmxi7m8_test.go:45:\
    \ expected '[]', got '[%!s(int=17) %!s(int=19) %!s(int=21) %!s(int=23) %!s(int=25)\
    \ %!s(int=27) %!s(int=29) %!s(int=31) %!s(int=33) %!s(int=35) %!s(int=37) %!s(int=39)\
    \ %!s(int=41) %!s(int=43) %!s(int=45) %!s(int=47) %!s(int=49) %!s(int=51) %!s(int=53)\
    \ %!s(int=55) %!s(int=57) %!s(int=59) %!s(int=61) %!s(int=63) %!s(int=65) %!s(int=67)\
    \ %!s(int=69) %!s(int=71) %!s(int=73) %!s(int=75) %!s(int=77) %!s(int=79) %!s(int=81)\
    \ %!s(int=83) %!s(int=85) %!s(int=87)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := a; i <=\
    \ b; i++ {\n        if i % 2 == 0 {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\npanic: runtime error: makeslice:\
    \ cap out of range [recovered]\n\tpanic: runtime error: makeslice: cap out of\
    \ range\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x502920, 0x5490b0})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x502920,\
    \ 0x5490b0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.generate_integers(...)\n\t/tmp/tmpodzk0_3e_test.go:18\n\
    command-line-arguments_test.TestGenerate_Integers(0x0?)\n\t/tmp/tmpodzk0_3e_test.go:35\
    \ +0xcd\ntesting.tRunner(0xc000192680, 0x527fc8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b - a + 1)\n    for i := 0; i <\
    \ b - a + 1; i++ {\n        result := append(result, i)\n    }\n    return result\n\
    }\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3x05sq1x_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a < b {\n\
    \        if a % 2 == 0 {\n            result = append(result, a)\n        }\n\
    \        a /= 2\n        i++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074338
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a >= b {\n            break\n        }\n        result <- a\n\
    \        a /= 10\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthccqs2s_test.go:23:9: invalid operation: cannot send to non-channel result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: null
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for a <= b {\n\
    \        if a % 2 == 0 {\n            result = append(result, a)\n        }\n\
    \        a /= 2\n        i++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074190
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ < 10 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a > 9 {\n\
    \            fmt.Printf(\"%v\\n\", a)\n        }\n        if a > b {\n       \
    \     fmt.Printf(\"%v\\n\", a)\n        }\n        if a < b {\n            fmt.Printf(\"\
    %v\\n\", a)\n        }\n        if a < 10 {\n            fmt.Printf(\"%v\\n\"\
    , a)\n        }\n        if a > 9 {\n            fmt.Printf(\"%v\\n\", a)\n  \
    \      }\n        if a > b {\n            fmt.Printf(\"%v\\n\", a)\n        }\n\
    \        if a < b {\n            fmt.Printf(\"%v\\n\", a)\n        }\n       \
    \ if a < 10 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a >\
    \ 9 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a > b {\n \
    \           fmt.Printf(\"%v\\n\", a)\n        }\n        if a < b {\n        \
    \    fmt.Printf(\"%v\\n\", a)\n        }\n        if a < 10 {\n            fmt.Printf(\"\
    %v\\n\", a)\n        }\n        if a > 9 {\n            fmt.Printf(\"%v\\n\",\
    \ a)\n        }\n        if a > b {\n            fmt.Printf(\"%v\\n\", a)\n  \
    \      }\n        if a < b {\n            fmt.Printf(\"%v\\n\", a)\n        }\n\
    \        if a < 10 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n      \
    \  if a > 9 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a >\
    \ b {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a < b {\n \
    \           fmt.Printf(\"%v\\n\", a)\n        }\n        if a < 10 {\n       \
    \     fmt.Printf(\"%v\\n\", a)\n        }\n        if a > 9 {\n            fmt.Printf(\"\
    %v\\n\", a)\n        }\n        if a > b {\n            fmt.Printf(\"%v\\n\",\
    \ a)\n        }\n        if a < b {\n            fmt.Printf(\"%v\\n\", a)\n  \
    \      }\n        if a < 10 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n\
    \        if a > 9 {\n            fmt.Printf(\"%v\\n\", a)\n        }\n       \
    \ if a > b {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a <\
    \ b {\n            fmt.Printf(\"%v\\n\", a)\n        }\n        if a < 10 {\n\
    \            fmt.Printf(\"%v\\n\", a)\n        }\n        if a > 9\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9bb9hf9_test.go:108:6: expected ''('', found TestGenerate_Integers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a > i {\n            result += []int{a}\n        }\n        a += 2\n\
    \        if a > b {\n            break\n        }\n        result += []int{a}\n\
    \        i += 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2pp9jj5_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    /tmp/tmpd2pp9jj5_test.go:28:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a > i {\n            result += append(result, a%10)\n            a\
    \ /= 10\n        }\n        i++\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgp_i1qs__test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074178
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a > 0 {\n            result += []int{a%10}\n            a = a\
    \ / 10\n        }\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_k_u4oo0_test.go:21:13: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a <= b {\n        if a\
    \ % 2 == 0 {\n            result = append(result, a)\n        }\n        a +=\
    \ 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n\
    \  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmpuwr_18i__test.go:44: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmpuwr_18i__test.go:44:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0, b)\n    for i := 0; i < b; i++\
    \ {\n        if a > 0 {\n            result := append(result, a%10)\n        \
    \    a = a / 10\n        } else {\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate := generate_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2, 10), expected: []int{2, 4, 6,\
    \ 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4, 6, 8} },\n   \
    \  { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpynf8k2dw_test.go:21:13: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i % 2 == 0 {\n            result = append(result, i)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n \
    \ candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmp00yyuym5_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmp00yyuym5_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    i := 0\n    for i <= b {\n\
    \        if a > i {\n            result += []int{a}\n        }\n        a += 2\n\
    \        if a > b {\n            break\n        }\n        result += []int{a}\n\
    \        i += 1\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T)\
    \ {\n  candidate := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2,\
    \ 10), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2pp9jj5_test.go:22:13: invalid operation: operator + not defined on result
    (variable of type []int)

    /tmp/tmpd2pp9jj5_test.go:28:9: invalid operation: operator + not defined on result
    (variable of type []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074328
- exit_code: 2
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for a < b {\n        result\
    \ := append(result, a)\n        a += 2\n    }\n    return result\n}\n\nfunc TestGenerate_Integers(t\
    \ *testing.T) {\n  candidate := generate_integers\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2, 10), expected: []int{2, 4, 6, 8} },\n     { actual:\
    \ candidate(10, 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(132,\
    \ 2), expected: []int{2, 4, 6, 8} },\n     { actual: candidate(17, 89), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1jtnfbx_test.go:20:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given two positive integers a and b, return the even digits between\
    \ a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2,\
    \ 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6,\
    \ 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int,\
    \ b int) []int {\n    result := make([]int, 0)\n    for i := a; i <= b; i++ {\n\
    \        if i%2 == 0 {\n            result = append(result, i)\n        }\n  \
    \  }\n    return result\n}\n\nfunc TestGenerate_Integers(t *testing.T) {\n  candidate\
    \ := generate_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 10), expected:\
    \ []int{2, 4, 6, 8} },\n     { actual: candidate(10, 2), expected: []int{2, 4,\
    \ 6, 8} },\n     { actual: candidate(132, 2), expected: []int{2, 4, 6, 8} },\n\
    \     { actual: candidate(17, 89), expected: []int{} },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGenerate_Integers (0.00s)\n    --- FAIL: TestGenerate_Integers/test_num__0\
    \ (0.00s)\n        tmppxuqo_xd_test.go:43: expected '[%!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8)]', got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10)]'\n\
    \    --- FAIL: TestGenerate_Integers/test_num__1 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__2 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8)]', got '[]'\n    ---\
    \ FAIL: TestGenerate_Integers/test_num__3 (0.00s)\n        tmppxuqo_xd_test.go:43:\
    \ expected '[]', got '[%!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074177
