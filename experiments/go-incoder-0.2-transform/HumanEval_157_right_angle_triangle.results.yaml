language: go_test.go
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a + b > c {\n        return false\n    }\n    if a +\
    \ c > b {\n        return false\n    }\n    if b + c > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwpk83ro3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwpk83ro3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpwpk83ro3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwpk83ro3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwpk83ro3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwpk83ro3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpg01eqhde_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpg01eqhde_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpg01eqhde_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpg01eqhde_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpg01eqhde_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // The formula to calculate the area of a triangle\
    \ is given by \n    // A = 1/2 * (a + b + c)\n    // where a is the base of the\
    \ triangle, b is the height of the triangle \n    // and c is the length of the\
    \ side.\n    // The formula to calculate the area of a triangle is given by \n\
    \    // A = 1/2 * (a + b + c)\n    // where a is the base of the triangle, b is\
    \ the height of the triangle \n    // and c is the length of the side.\n    //\
    \ The formula to calculate the area of a triangle is given by \n    // A = 1/2\
    \ * (a + b + c)\n    // where a is the base of the triangle, b is the height of\
    \ the triangle \n    // and c is the length of the side.\n    // The formula to\
    \ calculate the area of a triangle is given by \n    // A = 1/2 * (a + b + c)\n\
    \    // where a is the base of the triangle, b is the height of the triangle \n\
    \    // and c is the length of the side.\n    // The formula to calculate the\
    \ area of a triangle is given by \n    // A = 1/2 * (a + b + c)\n    // where\
    \ a is the base of the triangle, b is the height of the triangle \n    // and\
    \ c is the length of the side.\n    // The formula to calculate the area of a\
    \ triangle is given by \n    // A = 1/2 * (a + b + c)\n    // where a is the base\
    \ of the triangle, b is the height of the triangle \n    // and c is the length\
    \ of the side.\n    // The formula to calculate the area of a triangle is given\
    \ by \n    // A = 1/2 * (a + b + c)\n    // where a is the base of the triangle,\
    \ b is the height of the triangle \n    // and c is the length of the side.\n\
    \    // The formula to calculate the area of a triangle is given by \n    // A\
    \ = 1/2 * (a + b + c)\n    // where a is the base of the triangle, b is the height\
    \ of the triangle \n    // and c is the length of the side.\n    // The formula\
    \ to calculate the area of a triangle is given by \n    // A = 1/2 * (a + b +\
    \ c)\n    // where a is the base of the triangle, b is the height of the triangle\
    \ \n    // and c is the length of the side.\n    // The formula to calculate the\
    \ area of a triangle is given by \n    // A = 1/2 * (a + b + c)\n    // where\
    \ a is the base of the triangle, b is the height of the triangle \n    // and\
    \ c is the length of the side.\n    // The formula to calculate the area of a\
    \ triangle is given by \n    // A = 1/2 * (a + b + c)\n    // where a is the base\
    \ of the triangle, b is the height of the triangle \n    // and c is the length\
    \ of the side.\n    // The formula to calculate the area of a triangle is given\
    \ by \n    // A = 1/2 * (a + b + c)\n    // where a is the base of the \nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp42jg7_rf_test.go:65:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        } else {\n            return true\n        }\n    } else {\n\
    \        if c > b {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpm12h90nb_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpm12h90nb_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpm12h90nb_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check if all sides are equal\n    if a == b {\n\
    \        return a == c\n    }\n\n    // Check if all sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check if all sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check if any side is\
    \ 90 degree\n    if a > b {\n        if a > c {\n            return b > c\n  \
    \      }\n        return a > c\n    }\n\n    // Check if any side is 90 degree\n\
    \    if b > c {\n        return b > c\n    }\n\n    // Check if any side is 90\
    \ degree\n    if c > a {\n        return c > a\n    }\n\n    // Check if any side\
    \ is 90 degree\n    if a > c {\n        return a > c\n    }\n\n    // Check if\
    \ any side is 90 degree\n    if b > a {\n        return b > a\n    }\n\n    //\
    \ Check if any side is 90 degree\n    if c > b {\n        return c > b\n    }\n\
    \n    // Check if any side is 90 degree\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpzrpau_qj_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzrpau_qj_test.go:93:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzrpau_qj_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzrpau_qj_test.go:93:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpzrpau_qj_test.go:93: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a != b {\n        return\
    \ false\n    }\n\n    // Check that the sides are equal\n    if a != c {\n   \
    \     return false\n    }\n\n    // Check that the sides are equal\n    if b !=\
    \ c {\n        return false\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return true\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c {\n        return true\n    }\n\n    // Check that the\
    \ sides are equal\n    if b == c {\n        return true\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == b+c {\n        return true\n    }\n\n\
    \    // Check that the sides are equal\n    if a == c-b {\n        return true\n\
    \    }\n\n    // Check that the sides are equal\n    if b == c-a {\n        return\
    \ true\n    }\n\n    // Check that the sides are equal\n    if c == a-b {\n  \
    \      return true\n    }\n\n    // Check that the sides are equal\n    if a ==\
    \ b+c && b == c-a {\n        return true\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c-b && c == a-b {\n        return true\n    }\n\n   \
    \ // Check that the sides are equal\n    if b == c-a && a == b+c {\n        return\
    \ true\n    }\n\n    // Check that the sides are equal\n    if c == a-b && a ==\
    \ c-b {\n        return true\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b+c && c == a-b {\n        return true\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c-b && b == c-a {\n        return true\n  \
    \  }\n\n    // Check that the sides are equal\n    if b == c-a && c == a-b {\n\
    \        return true\n    }\n\n    // Check that the sides are equal\n    if c\
    \ == a-b && a == b+c {\n        return true\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b+c && b == c-a {\n        return true\n    }\n\n   \
    \ // Check that the sides are equal\n    if a == c-b && c == a-b {\n        return\
    \ true\n    }\n\n    // Check that the sides are equal\n    if b == c-a && c ==\
    \ a-b {\n        return true\n    }\n\n    // Check that the sides are equal\n\
    \    if c == a-b && a == b+c {\n        return true\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c && b == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp59yvb0k6_test.go:140:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a > b {\n        if a >\
    \ c {\n            return false\n        }\n        return true\n    }\n    \n\
    \    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp6knqlaky_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp6knqlaky_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp6knqlaky_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp6knqlaky_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp6knqlaky_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check if all sides are equal\n    if a == b {\n\
    \        return a == c\n    }\n\n    // Check if all sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check if all sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == b {\n        return a == c\n    }\n\n    // Check if all\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ if all sides are equal\n    if b == c {\n        return a == b\n    }\n\n  \
    \  // Check if all sides are equal\n    if a == b {\n        return a == c\n \
    \   }\n\n    // Check if all sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check if all sides are equal\n    if b == c {\n    \
    \    return a == b\n    }\n\n    // Check if all sides are equal\n    if a ==\
    \ b {\n        return a == c\n    }\n\n    // Check if all sides are equal\n \
    \   if a == c {\n        return b == c\n    }\n\n    // Check if all sides are\
    \ equal\n    if b == c {\n        return a == b\n    }\n\n    // Check if all\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n\n    // Check\
    \ if all sides are equal\n    if a == c {\n        return b == c\n    }\n\n  \
    \  // Check if all sides are equal\n    if b == c {\n        return a == b\n \
    \   }\n\n    // Check if all sides are equal\n    if a == b {\n        return\
    \ a == c\n    }\n\n    // Check if all sides are equal\n    if a == c {\n    \
    \    return b == c\n    }\n\n    // Check if all sides are equal\n    if b ==\
    \ c {\n        return a == b\n    }\n\n    // Check if all sides are equal\n \
    \   if a == b {\n        return a == c\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == c {\n        return b == c\n    }\n\n    // Check if all\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ if all sides are equal\n    if a == b {\n        return a == c\n    }\n\n  \
    \  // Check if all sides are equal\n    if a == c {\n        return b == c\n \
    \   }\n\n    // Check if all sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check if all sides are equal\n    if a == b {\n    \
    \    return a == c\n    }\n\n    // Check if all sides are equal\n    if a ==\
    \ c {\n        return b == c\n    }\n\n    // Check if all sides are equal\n \
    \   if b == c {\n        return a == b\n    }\n\n    // Check if all sides are\
    \ equal\n    if \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate :=\
    \ right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ true },\n     { actual: candidate(1, 2, 3), expected: false },\n     { actual:\
    \ candidate(10, 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected:\
    \ false },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual:\
    \ candidate(10, 5, 7), expected: false },\n     { actual: candidate(5, 12, 13),\
    \ expected: true },\n     { actual: candidate(15, 8, 17), expected: true },\n\
    \     { actual: candidate(48, 55, 73), expected: true },\n     { actual: candidate(1,\
    \ 1, 1), expected: false },\n     { actual: candidate(2, 2, 10), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx_j43d56_test.go:155:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    \n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpe41vgbfi_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpe41vgbfi_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe41vgbfi_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpe41vgbfi_test.go:47:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpe41vgbfi_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b < c:\n    \
    \    return true\n    case a < c && b > c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lk9_4tl_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        if a > c {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpvhjmm0ad_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpvhjmm0ad_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpvhjmm0ad_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpvhjmm0ad_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpvhjmm0ad_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpvhjmm0ad_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq9yrwxf9_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false\n    }\n    if a + b > c {\n        return\
    \ false\n    }\n    if a + c > b {\n        return false\n    }\n    if b + c\
    \ > a {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpp2xexeq7_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpp2xexeq7_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpp2xexeq7_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpp2xexeq7_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpp2xexeq7_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpp2xexeq7_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // \nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplwkyj2hz_test.go:165:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return false\n        } else {\n            return true\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpcjrnqgzr_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpcjrnqgzr_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpcjrnqgzr_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    d := b * b - 4 * a * c\n    if d < 0 {\n        return false\n\
    \    }\n    \n    s := (-b + d) / (2 * a)\n    if s <= 0 {\n        return false\n\
    \    }\n    \n    t := (-b - d) / (2 * a)\n    if t <= 0 {\n        return false\n\
    \    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwnnzj8vd_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwnnzj8vd_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpwnnzj8vd_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwnnzj8vd_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwnnzj8vd_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwnnzj8vd_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > b {\n        return false\n    }\n    if a > c {\n\
    \        return false\n    }\n    if b > a {\n        return false\n    }\n  \
    \  if c > a {\n        return false\n    }\n    if a > b {\n        return false\n\
    \    }\n    if b > c {\n        return false\n    }\n    if c > b {\n        return\
    \ false\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n\
    \        return false\n    }\n    if c > a {\n        return false\n    }\n  \
    \  if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    if a > c {\n        return\
    \ false\n    }\n    if b > a {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    if a > b {\n        return false\n    }\n  \
    \  if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    if a > c {\n        return false\n    }\n    if b > a {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    if a > b {\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  if c > b {\n        return false\n    }\n    if a > c {\n        return false\n\
    \    }\n    if b > a {\n        return false\n    }\n    if c > a {\n        return\
    \ false\n    }\n    if a > b {\n        return false\n    }\n    if b > c {\n\
    \        return false\n    }\n    if c > b {\n        return false\n    }\n  \
    \  if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > b {\n\
    \        return false\n    }\n    if a > c {\n        return false\n    }\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdwomjocx_test.go:163:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // if one side is 90 degree, return false\n    if a == b {\n\
    \        return false\n    }\n    \n    // if one side is right angled, return\
    \ true\n    if a == c {\n        return true\n    }\n    \n    // if two sides\
    \ are 90 degree, return false\n    if b == c {\n        return false\n    }\n\
    \    \n    // if two sides are right angled, return true\n    if a == b {\n  \
    \      return true\n    }\n    \n    // if two sides are equal, return false\n\
    \    if a == c {\n        return false\n    }\n    \n    // if three sides are\
    \ equal, return true\n    if b == c {\n        return true\n    }\n    \n    //\
    \ if three sides are equal, return true\n    if a == b {\n        return true\n\
    \    }\n    \n    // if three sides are equal, return true\n    if a == c {\n\
    \        return true\n    }\n    \n    // if three sides are equal, return true\n\
    \    if b == c {\n        return true\n    }\n    \n    // if three sides are\
    \ equal, return true\n    if a == b {\n        return true\n    }\n    \n    //\
    \ if three sides are equal, return true\n    if a == c {\n        return true\n\
    \    }\n    \n    // if three sides are equal, return true\n    if b == c {\n\
    \        return true\n    }\n    \n    // if three sides are equal, return true\n\
    \    if a == b {\n        return true\n    }\n    \n    // if three sides are\
    \ equal, return true\n    if a == c {\n        return true\n    }\n    \n    //\
    \ if three sides are equal, return true\n    if b == c {\n        return true\n\
    \    }\n    \n    // if three sides are equal, return true\n    if a == b {\n\
    \        return true\n    }\n    \n    // if three sides are equal, return true\n\
    \    if a == c {\n        return true\n    }\n    \n    // if three sides are\
    \ equal, return true\n    if b == c {\n        return true\n    }\n    \n    //\
    \ if three sides are equal, return true\n    if a == b {\n        return true\n\
    \    }\n    \n    // if three sides are equal, return true\n    if a == c {\n\
    \        return true\n    }\n    \n    // if three sides are equal, return true\n\
    \    if b == c {\n        return true\n    }\n    \n    // if three sides are\
    \ equal, return true\n    if a == b {\n        return true\n    }\n    \n    //\
    \ \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuk1596lr_test.go:133:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b && a > c:\n        return true\n  \
    \  case b > a && b > c:\n        return true\n    case c > a && c > b:\n     \
    \   return true\n    default:\n        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpeqk5xa5c_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpeqk5xa5c_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpeqk5xa5c_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpg01eqhde_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpg01eqhde_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpg01eqhde_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpg01eqhde_test.go:45:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpg01eqhde_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            if a > c {\n                return true\n            }\
    \ else {\n                return false\n            }\n        } else {\n    \
    \        return false\n        }\n    } else {\n        if b > c {\n         \
    \   if a > c {\n                return false\n            } else {\n         \
    \       return true\n            }\n        } else {\n            return true\n\
    \        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpky00c8_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpky00c8_z_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpky00c8_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpky00c8_z_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpky00c8_z_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpky00c8_z_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    d := b\
    \ * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    if d > 0 {\n\
    \        d /= 2\n    }\n    if a == b {\n        return b == c\n    }\n    if\
    \ a == c {\n        return c == b\n    }\n    if b == c {\n        return a ==\
    \ b\n    }\n    return d < 0\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdq55gxti_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpdq55gxti_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpdq55gxti_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpdq55gxti_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpdq55gxti_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpdq55gxti_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a > c {\n        a = c\n    }\n    if b > c {\n        b = c\n    }\n\
    \    if a > b {\n        a = b\n    }\n    if a == b {\n        return true\n\
    \    }\n    if a == c {\n        return false\n    }\n    if b == c {\n      \
    \  return false\n    }\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpnlicwoy0_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpnlicwoy0_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpnlicwoy0_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnlicwoy0_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnlicwoy0_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        if a > c {\n\
    \            return true\n        } else {\n            return false\n       \
    \ }\n    } else {\n        if b > c {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpvhjmm0ad_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpvhjmm0ad_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpvhjmm0ad_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpvhjmm0ad_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpvhjmm0ad_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpvhjmm0ad_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    ab := b - a\n    cb := c - b\n    \n    if ab == cb {\n    \
    \    return true\n    }\n    \n    abc := ab * cb\n    \n    if abc > 0 {\n  \
    \      return false\n    }\n    \n    abc /= 2\n    \n    if abc > 1 {\n     \
    \   return true\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpf8vodem9_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpf8vodem9_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpf8vodem9_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpf8vodem9_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpf8vodem9_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpf8vodem9_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpf8vodem9_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpf8vodem9_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp42b4nabu_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a != b {\n \
    \       if a != c {\n            return false\n        }\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if b != c {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a != c {\n \
    \       return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp3q8aahan_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp3q8aahan_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp3q8aahan_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp3q8aahan_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp3q8aahan_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp3q8aahan_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp3q8aahan_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp3q8aahan_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative.\n    if\
    \ a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are non-zero.\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n\n    // Check that the sides are equal\n    if a == b {\n   \
    \     return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == c\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == c\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqpe4juzd_test.go:152:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    switch\
    \ {\n    case a > c && b > c:\n        return true\n    case a > c && b < c:\n\
    \        return false\n    case a < c && b > c:\n        return false\n    case\
    \ a < c && b < c:\n        return true\n    default:\n        return false\n \
    \   }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpvg801q5p_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpvg801q5p_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a == b {\n\
    \        return false\n    }\n    if a == c {\n        return true\n    }\n  \
    \  if b == c {\n        return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpvkre_37d_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpvkre_37d_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpvkre_37d_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpvkre_37d_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpvkre_37d_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpvkre_37d_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    return false\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmph3vki4kf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmph3vki4kf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmph3vki4kf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmph3vki4kf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmph3vki4kf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmph3vki4kf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b > c:\n    \
    \    return true\n    case a < c && b < c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmaghi80c_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n\n    // Check that the three sides are equal\n    if\
    \ a == b {\n        return c == b\n    }\n\n    // Check that the three sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ b == c+a\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return b == c+a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ b == c+a\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return b == c+a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ b == c+a\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return b == c+a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ b == c+a\n    }\n\n    // Check that the three sides are equal\n    if a ==\
    \ b+c {\n        return b == c+a\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b+c {\n        return b == c+a\n    }\n\n    // Check that\
    \ the three sides are equal\n    if a == b+c {\n        return b == c+a\n    }\n\
    \n    // Check that the three sides are equal\n    if a == b+c {\n        return\
    \ b == \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfqr70mbv_test.go:126:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    switch\
    \ {\n    case a > c && b > c:\n        return true\n    case a > c && b < c:\n\
    \        return false\n    case a < c && b > c:\n        return false\n    case\
    \ a < c && b < c:\n        return true\n    default:\n        return false\n \
    \   }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpvg801q5p_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpvg801q5p_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a == b {\n        return c == b\n    }\n    if a ==\
    \ c {\n        return b == c\n    }\n    if b == c {\n        return a == c\n\
    \    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmprpmhkzg1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmprpmhkzg1_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmprpmhkzg1_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmprpmhkzg1_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmprpmhkzg1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmprpmhkzg1_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmprpmhkzg1_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmprpmhkzg1_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0l0vryks_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0l0vryks_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp0l0vryks_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // If one side is 90 degree, return true\n    if a == b {\n\
    \        return a == c\n    }\n    \n    // If one side is right angled, return\
    \ true\n    if a == c {\n        return b == c\n    }\n    \n    // If two sides\
    \ are 90 degree, return false\n    if b == c {\n        return false\n    }\n\
    \    \n    // If two sides are right angled, return false\n    if a == b {\n \
    \       return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if a == c {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if b == c {\n        return false\n    }\n    \n    // If\
    \ two sides are equal, return false\n    if a == b {\n        return false\n \
    \   }\n    \n    // If two sides are equal, return false\n    if a == c {\n  \
    \      return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if b == c {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if a == b {\n        return false\n    }\n    \n    // If\
    \ two sides are equal, return false\n    if a == c {\n        return false\n \
    \   }\n    \n    // If two sides are equal, return false\n    if b == c {\n  \
    \      return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if a == b {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if a == c {\n        return false\n    }\n    \n    // If\
    \ two sides are equal, return false\n    if b == c {\n        return false\n \
    \   }\n    \n    // If two sides are equal, return false\n    if a == b {\n  \
    \      return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if a == c {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if b == c {\n        return false\n    }\n    \n    // If\
    \ two sides are equal, return false\n    if a == b {\n        return false\n \
    \   }\n    \n    // If two sides are equal, return false\n    if a == c {\n  \
    \      return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if b == c {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if a == b {\n        return false\n    }\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5twih7fr_test.go:132:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c-a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72eyvbja_test.go:140:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a + b > c {\n        return false\n\
    \    }\n    if a + c > b {\n        return false\n    }\n    if b + c > a {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp0hdapgs2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0hdapgs2_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp0hdapgs2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp0hdapgs2_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0hdapgs2_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp0hdapgs2_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        if b > a {\n            return true\n\
    \        }\n        return false\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpy1azoi8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpy1azoi8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpy1azoi8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpy1azoi8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpy1azoi8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpy1azoi8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a == b {\n        return\
    \ c == b\n    }\n    \n    if a == c {\n        return b == c\n    }\n    \n \
    \   if b == c {\n        return a == b\n    }\n    \n    if a == b+c {\n     \
    \   return a == c\n    }\n    \n    if a == c+b {\n        return a == b\n   \
    \ }\n    \n    if b == c+a {\n        return a == b\n    }\n    \n    if c ==\
    \ a+b {\n        return a == b\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpdmhrmn1d_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpdmhrmn1d_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpdmhrmn1d_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpdmhrmn1d_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpdmhrmn1d_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpdmhrmn1d_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpdmhrmn1d_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpdmhrmn1d_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    \n    d\
    \ := b * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    \n  \
    \  x := (-b + d) / (2 * a)\n    y := (-b - d) / (2 * a)\n    if x == y {\n   \
    \     return true\n    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmphqkso_fg_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmphqkso_fg_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmphqkso_fg_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmphqkso_fg_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmphqkso_fg_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmphqkso_fg_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        }\n    } else {\n        if c > b\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpnxngio_p_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnxngio_p_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpnxngio_p_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpnxngio_p_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c-a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72eyvbja_test.go:140:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjc7mu4b0_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > b {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ c {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > b {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > b {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ c {\n        return false\n    }\n    if a == b {\n        return true\n   \
    \ }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > b {\n        return false\n    }\n    if a == b {\n\
    \        return true\n    }\n    if a == c {\n        return true\n    }\n   \
    \ if b == c {\n        return true\n    }\n    if a > c {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp55tj8qqm_test.go:164:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        if a > c {\n            return true\n        }\n        return\
    \ false\n    }\n    if b > c {\n        if b > a {\n            return true\n\
    \        }\n        return false\n    }\n    if c > a {\n        if c > b {\n\
    \            return true\n        }\n        return false\n    }\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp5llvdlbj_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp5llvdlbj_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp5llvdlbj_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp5llvdlbj_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp5llvdlbj_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp5llvdlbj_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return true\n    }\n    if b == c {\n        return false\n    }\n    if a\
    \ > b {\n        if a > c {\n            return true\n        }\n        if b\
    \ > c {\n            return false\n        }\n    }\n    if b > c {\n        if\
    \ b > a {\n            return true\n        }\n        if c > a {\n          \
    \  return false\n        }\n    }\n    if c > a {\n        if c > b {\n      \
    \      return true\n        }\n        if a > b {\n            return false\n\
    \        }\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpuzf4zz_l_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpuzf4zz_l_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    return a +\
    \ b > c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp12k19cky_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmp12k19cky_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp12k19cky_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvi4xhmn9_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    \n    // If any of a, b or c is zero or negative,\
    \ return false\n    if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\
    \    \n    // If any of a, b or c is equal to or greater than the sum of the\n\
    \    // other two, return false\n    if a + b > c || a + c > b {\n        return\
    \ false\n    }\n    \n    // If any of a, b or c is equal to or greater than the\
    \ product of\n    // the other two, return false\n    if a * b > c || a * c >\
    \ b {\n        return false\n    }\n    \n    // If any of a, b or c is equal\
    \ to or greater than the square of the\n    // other two, return false\n    if\
    \ a * a == b * b || a * a == c * c || b * b == c * c {\n        return false\n\
    \    }\n    \n    // If any of a, b or c is equal to or greater than the cube\
    \ of the\n    // other two, return false\n    if a * a * b > c * c || a * a *\
    \ c > b * b || b * b * c > a * c {\n        return false\n    }\n    \n    //\
    \ If any of a, b or c is equal to or greater than the square root of\n    // the\
    \ other two, return false\n    if a * a == b * b * c || a * b * c == c * c ||\
    \ a * c * b == b * c {\n        return false\n    }\n    \n    // If any of a,\
    \ b or c is equal to or greater than the cube root of\n    // the other two, return\
    \ false\n    if a * a * b * c > a * c * b || a * a * c * b > b * b * c || b *\
    \ b * c * a > a * c * c {\n        return false\n    }\n    \n    // If any of\
    \ a, b or c is equal to or greater than the square root of\n    // the other two,\
    \ return false\n    if a * a == b * b * c || a * b * c == c * c || a * c * b ==\
    \ b * c {\n        return false\n    }\n    \n    // If any of a, b or c is equal\
    \ to or greater than the cube root of\n    // the other two, return false\n  \
    \  if a * a * b * c > a * c * b || a * a * c * b > b * b * c || b * b * c * a\
    \ > a * c * c {\n        return false\n    }\n    \n    // If any of a, b or c\
    \ is equal to or greater than the square root of\n    // the other two, return\
    \ false\n    if a * \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeuo9tmir_test.go:75:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a == b {\n        return false\n    }\n    if a == c\
    \ {\n        return true\n    }\n    if b == c {\n        return true\n    }\n\
    \    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c,\
    \ a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a == b {\n    \
    \    return false\n    }\n    if a == c {\n        return true\n    }\n    if\
    \ b == c {\n        return true\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a == b {\n        return false\n    }\n    if a == c\
    \ {\n        return true\n    }\n    if b == c {\n        return true\n    }\n\
    \    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c,\
    \ a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a == b {\n    \
    \    return false\n    }\n    if a == c {\n        return true\n    }\n    if\
    \ b == c {\n        return true\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a == b {\n        return false\n    }\n    if a == c\
    \ {\n        return true\n    }\n    if b == c {\n        return true\n    }\n\
    \    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c,\
    \ a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a == b {\n    \
    \    return false\n    }\n    if a == c {\n        return true\n    }\n    if\
    \ b == c {\n        return true\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a == b {\n        return false\n    }\n    if a == c\
    \ \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp73xp6f7h_test.go:143:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return false\n        }\n        return true\n    }\n \
    \   if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmprieadxr9_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmprieadxr9_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmprieadxr9_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmprieadxr9_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmprieadxr9_test.go:54: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ b > a + c:\n        return false\n    case c > a + b:\n        return false\n\
    \    case a > b + c && b > a + c && c > a + b:\n        return true\n    case\
    \ a > b + c && b > a + c && c > a + b {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0d873lsr_test.go:32:9: expected operand, found ''return''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b {\n \
    \       return a == c\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == c {\n \
    \       return b == c\n    }\n    \n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == c {\n        return b == c\n\
    \    }\n    \n    // Check that the three sides are equal\n    if b == c {\n \
    \       return a == b\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b {\n \
    \       return a == c\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == b {\n        return a == c\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == c {\n \
    \       return b == c\n    }\n    \n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return a == c\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == c {\n        return b == c\n\
    \    }\n    \n    // Check that the three sides are equal\n    if b == c {\n \
    \       return a == b\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == b {\n        return a == c\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe51yb0sp_test.go:137:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == 0 || b == 0 || c == 0 {\n      \
    \  return false\n    }\n\n    // Check that the three sides are equal\n    if\
    \ a == b && b == c {\n        return true\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c && c == b {\n        return true\n    }\n\n \
    \   // Check that the three sides are equal\n    if a == b || a == c || b == c\
    \ {\n        return false\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return true\n    }\n\n    // Check that the three sides\
    \ are equal\n    if a == c {\n        return true\n    }\n\n    // Check that\
    \ the three sides are equal\n    if b == c {\n        return true\n    }\n\n \
    \   // Check that the three sides are equal\n    if a == b {\n        return true\n\
    \    }\n\n    // Check that the three sides are equal\n    if a == c {\n     \
    \   return true\n    }\n\n    // Check that the three sides are equal\n    if\
    \ b == c {\n        return true\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == c {\n        return true\n    }\n\n    // Check that the\
    \ three sides are equal\n    if b == c {\n        return true\n    }\n\n    //\
    \ Check that the three sides are equal\n    if a == b {\n        return true\n\
    \    }\n\n    // Check that the three sides are equal\n    if a == c {\n     \
    \   return true\n    }\n\n    // Check that the three sides are equal\n    if\
    \ b == c {\n        return true\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b {\n        return true\n    }\n\n    // Check that the\
    \ three sides are equal\n    if a == c {\n        return true\n    }\n\n    //\
    \ Check that the three sides are equal\n    if b == c {\n        return true\n\
    \    }\n\n    // Check that the three sides are equal\n    if a == c {\n     \
    \   return true\n    }\n\n    // Check that the three sides are equal\n    if\
    \ b == c {\n        return true\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b {\n        return true\n    }\n\n    // Check that the\
    \ three sides are equal\n    if a == c {\n        return true\n    }\n\n    //\
    \ Check that the three sides are equal\n    if b == c {\n        return true\n\
    \    }\n\n    // Check that the three sides are equal\n    if a == c {\n     \
    \   return true\n    }\n\n    // Check that the three sides are equal\n    if\
    \ b == c {\n        return true\n    }\n\n    // Check that the three sides are\
    \ equal\n    if a == b\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpju5p348k_test.go:150:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b, a\n\
    \    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b,\
    \ c = c, b\n    }\n    if a + b > c {\n        return false\n    }\n    if a +\
    \ c > b {\n        return false\n    }\n    if b + c > a {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwpk83ro3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwpk83ro3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpwpk83ro3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpwpk83ro3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwpk83ro3_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwpk83ro3_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        } else {\n            return true\n        }\n    } else {\n\
    \        if c > b {\n            return false\n        } else {\n            return\
    \ true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpwantsc4j_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpwantsc4j_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpwantsc4j_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpwantsc4j_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpwantsc4j_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpwantsc4j_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpwantsc4j_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvi4xhmn9_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ a > c + b:\n        return false\n    case b > c + a:\n        return false\n\
    \    case a > b + c and b > c + a:\n        return true\n    case a > c + b and\
    \ b > c + a:\n        return true\n    case a > b + c and c > b + a:\n       \
    \ return true\n    case a > c + b and c > b + a:\n        return true\n    case\
    \ b > c + a and c > b + a:\n        return true\n    default:\n        return\
    \ false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9jhr_2xh_test.go:29:20: expected '':'', found and

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a ==\
    \ 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a > b {\n     \
    \   a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n\
    \    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c,\
    \ b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n     \
    \   a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a >\
    \ b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n\
    \    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b,\
    \ a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n     \
    \   b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if a >\
    \ c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n\
    \    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c,\
    \ a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n     \
    \   a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n\
    \    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c,\
    \ b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n     \
    \   a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a >\
    \ b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n\
    \    if b > c {\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate :=\
    \ right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ true },\n     { actual: candidate(1, 2, 3), expected: false },\n     { actual:\
    \ candidate(10, 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected:\
    \ false },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual:\
    \ candidate(10, 5, 7), expected: false },\n     { actual: candidate(5, 12, 13),\
    \ expected: true },\n     { actual: candidate(15, 8, 17), expected: true },\n\
    \     { actual: candidate(48, 55, 73), expected: true },\n     { actual: candidate(1,\
    \ 1, 1), expected: false },\n     { actual: candidate(2, 2, 10), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppf1o44na_test.go:130:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    if a > c {\n        return\
    \ false\n    }\n    if b > a {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    if a > b {\n        return false\n    }\n  \
    \  if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    if a > c {\n        return false\n    }\n    if b > a {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    if a > b {\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  if c > b {\n        return false\n    }\n    if a > c {\n        return false\n\
    \    }\n    if b > a {\n        return false\n    }\n    if c > a {\n        return\
    \ false\n    }\n    if a > b {\n        return false\n    }\n    if b > c {\n\
    \        return false\n    }\n    if c > b {\n        return false\n    }\n  \
    \  if a > c {\n        return false\n    }\n    if b > a {\n        return false\n\
    \    }\n    if c > a {\n        return false\n    }\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > b {\n\
    \        return false\n    }\n    if a > c {\n        return false\n    }\n  \
    \  if b > a {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    if a > b {\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if c > b {\n        return false\n    }\n    if a > c {\n\
    \        return false\n    }\n    if b > a {\n        return false\n    }\n  \
    \  if c > a {\n        return false\n    }\n    if a > b {\n        return false\n\
    \    }\n    if b > c {\n        return false\n    }\n    if c > b {\n        return\
    \ false\n    }\n    if a > c {\n        return false\n    }\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpisd4d1k9_test.go:163:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp8q0n3scy_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp8q0n3scy_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp8q0n3scy_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp8q0n3scy_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp8q0n3scy_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return false\n       \
    \ }\n        return true\n    }\n    if b > c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpc46yzr1h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpc46yzr1h_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpc46yzr1h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpc46yzr1h_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpc46yzr1h_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return true\n    }\n    if a == c {\n       \
    \ return true\n    }\n    if b == c {\n        return true\n    }\n    if a >\
    \ b {\n        if a > c {\n            return true\n        }\n        if b >\
    \ c {\n            return false\n        }\n    }\n    if b > c {\n        if\
    \ b > a {\n            return true\n        }\n        if c > a {\n          \
    \  return false\n        }\n    }\n    if c > a {\n        if c > b {\n      \
    \      return true\n        }\n        if a > b {\n            return false\n\
    \        }\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp3o6hc_z2_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp3o6hc_z2_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp3o6hc_z2_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp3o6hc_z2_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp3o6hc_z2_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > 0 &&\
    \ b > 0 && c > 0:\n        return true\n    case a > 0 && b > 0 && c < 0:\n  \
    \      return false\n    case a > 0 && b < 0 && c > 0:\n        return false\n\
    \    case a > 0 && b < 0 && c < 0:\n        return true\n    case a < 0 && b >\
    \ 0 && c > 0:\n        return false\n    case a < 0 && b > 0 && c < 0:\n     \
    \   return true\n    case a < 0 && b < 0 && c > 0:\n        return false\n   \
    \ case a < 0 && b < 0 && c < 0:\n        return true\n    default:\n        return\
    \ false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpm7kkaoyv_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpm7kkaoyv_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpm7kkaoyv_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpm7kkaoyv_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpm7kkaoyv_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a + b > c {\n        return false\n    }\n    if a + c > b {\n       \
    \ return false\n    }\n    if b + c > a {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmphdcdem6i_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmphdcdem6i_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmphdcdem6i_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmphdcdem6i_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmphdcdem6i_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmphdcdem6i_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if c > b {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwu72366k_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwu72366k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwu72366k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpwu72366k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a > b {\n       \
    \ if b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp322sa0vq_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp322sa0vq_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp322sa0vq_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp322sa0vq_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a == 0 || b == 0\
    \ || c == 0 {\n        return false\n    }\n    if a > b {\n        a, b = b,\
    \ a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n     \
    \   b, c = c, b\n    }\n    return a == b == c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2efqz_hp_test.go:31:22: invalid operation: a == b == c (mismatched types
    untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a == b {\n\
    \        return false\n    }\n    if b == c {\n        return false\n    }\n \
    \   if c == a {\n        return false\n    }\n    if a == c {\n        return\
    \ false\n    }\n    if b == c {\n        return false\n    }\n    if c == a {\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp3wiueveo_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp3wiueveo_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp3wiueveo_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp3wiueveo_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp3wiueveo_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp3wiueveo_test.go:80:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a > b {\n        if a > c {\n\
    \            return true\n        }\n    } else {\n        if b > c {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4jx39rn9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4jx39rn9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp4jx39rn9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp4jx39rn9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp4jx39rn9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp4jx39rn9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b {\n        return c ==\
    \ b\n    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n \
    \       return a == b\n    }\n    if a == b+c {\n        return a == c\n    }\n\
    \    if a == c+b {\n        return b == c\n    }\n    if b == c+a {\n        return\
    \ a == b\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpoqmnad3u_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpoqmnad3u_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpoqmnad3u_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpoqmnad3u_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpoqmnad3u_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpoqmnad3u_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpoqmnad3u_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpoqmnad3u_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b {\n \
    \       return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c {\n        return false\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return false\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == b+c {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b-c {\n\
    \        return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c-b {\n        return false\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b*c {\n        return false\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == c*b {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b*c {\n\
    \        return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c*b {\n        return false\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b*c {\n        return false\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == c*b {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b*c {\n\
    \        return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c*b {\n        return false\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b*c {\n        return false\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == c*b {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b*c {\n\
    \        return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c*b {\n        return false\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b*c {\n        return false\n    }\n    \n    //\
    \ Check that the three sides are equal\n    if a == c*b {\n        return false\n\
    \    }\n    \n    // Check that the three sides are equal\n    if a == b*c {\n\
    \        return false\n    }\n    \n    // Check that the three sides are equal\n\
    \    if a == c*b {\n        return false\n    }\n    \n    // Check that the three\
    \ sides are equal\n    if a == b*c {\n        return false\n    }\n    \n    //\
    \ Check that the three sides are \nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplwg2_qmw_test.go:138:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // If one side is greater than the other, the triangle is not\
    \ right-angled.\n    if a > b {\n        return false\n    }\n    if a > c {\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  \n    // If two sides are equal, triangle is right-angled.\n    if a == b {\n\
    \        return true\n    }\n    \n    // If two sides are equal, triangle is\
    \ right-angled.\n    if a == c {\n        return true\n    }\n    \n    // If\
    \ two sides are equal, triangle is right-angled.\n    if b == c {\n        return\
    \ true\n    }\n    \n    // If two sides are equal, triangle is right-angled.\n\
    \    if a == b {\n        return true\n    }\n    \n    // If two sides are equal,\
    \ triangle is right-angled.\n    if a == c {\n        return true\n    }\n   \
    \ \n    // If two sides are equal, triangle is right-angled.\n    if b == c {\n\
    \        return true\n    }\n    \n    // If two sides are equal, triangle is\
    \ right-angled.\n    if a == b {\n        return true\n    }\n    \n    // If\
    \ two sides are equal, triangle is right-angled.\n    if a == c {\n        return\
    \ true\n    }\n    \n    // If two sides are equal, triangle is right-angled.\n\
    \    if b == c {\n        return true\n    }\n    \n    // If two sides are equal,\
    \ triangle is right-angled.\n    if a == b {\n        return true\n    }\n   \
    \ \n    // If two sides are equal, triangle is right-angled.\n    if a == c {\n\
    \        return true\n    }\n    \n    // If two sides are equal, triangle is\
    \ right-angled.\n    if b == c {\n        return true\n    }\n    \n    // If\
    \ two sides are equal, triangle is right-angled.\n    if a == b {\n        return\
    \ true\n    }\n    \n    // If two sides are equal, triangle is right-angled.\n\
    \    if a == c {\n        return true\n    }\n    \n    // If two sides are equal,\
    \ triangle is right-angled.\n    if b == c {\n        return true\n    }\n   \
    \ \n    // If two sides are equal, triangle is right-angled.\n    if a == b {\n\
    \        return true\n    }\n    \n    // If two sides are equal, triangle is\
    \ right-angled.\n    if a == c {\n        return true\n    }\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5nfmaha5_test.go:118:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b+c:\n        return false\n    case\
    \ a > b+c:\n        return false\n    case a > b+c:\n        return false\n  \
    \  default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp9qzcwk2r_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp9qzcwk2r_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp9qzcwk2r_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp9qzcwk2r_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp9qzcwk2r_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return true\n    }\n    if b == c {\n        return true\n    }\n    if a ==\
    \ b+c {\n        return true\n    }\n    if a == b+2*c {\n        return true\n\
    \    }\n    if a == b+3*c {\n        return true\n    }\n    return false\n}\n\
    \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpsqd3nvhe_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpsqd3nvhe_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpsqd3nvhe_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpsqd3nvhe_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpsqd3nvhe_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpsqd3nvhe_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return true\n        }\
    \ else {\n            return false\n        }\n    } else {\n        if b > c\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ b > a + c:\n        return false\n    case a > b + c:\n        return false\n\
    \    default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwu6d5a_w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpwu6d5a_w_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwu6d5a_w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwu6d5a_w_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwu6d5a_w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    switch {\n    case a > 0 && b > 0 && c > 0:\n    \
    \    return true\n    case a > 0 && b > 0 && c < 0:\n        return false\n  \
    \  case a > 0 && b < 0 && c > 0:\n        return false\n    case a > 0 && b <\
    \ 0 && c < 0:\n        return true\n    case a < 0 && b > 0 && c > 0:\n      \
    \  return false\n    case a < 0 && b > 0 && c < 0:\n        return true\n    case\
    \ a < 0 && b < 0 && c > 0:\n        return false\n    case a < 0 && b < 0 && c\
    \ < 0:\n        return true\n    default:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp8q0n3scy_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmp8q0n3scy_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp8q0n3scy_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp8q0n3scy_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp8q0n3scy_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    if a > b {\n       \
    \ if b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp322sa0vq_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp322sa0vq_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp322sa0vq_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp322sa0vq_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if a > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return false\n    }\n    if b == c {\n        return false\n    }\n \
    \   return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpf1f1izin_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpf1f1izin_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpf1f1izin_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpf1f1izin_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpf1f1izin_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpf1f1izin_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpf1f1izin_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpf1f1izin_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a > b {\n        if a >\
    \ c {\n            return true\n        } else {\n            return false\n \
    \       }\n    } else {\n        if b > c {\n            return true\n       \
    \ } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp93fyw8zm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp93fyw8zm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp93fyw8zm_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp93fyw8zm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp93fyw8zm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp93fyw8zm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b < c:\n    \
    \    return true\n    case a < c && b > c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lk9_4tl_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a +\
    \ b > c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpl5qkrsea_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpl5qkrsea_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpl5qkrsea_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpl5qkrsea_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpl5qkrsea_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpl5qkrsea_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073702
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return false\n    }\n    if a == c {\n      \
    \  return true\n    }\n    if b == c {\n        return false\n    }\n    \n  \
    \  // The formula to calculate the area of a triangle is (a + b + c) / 2\n   \
    \ // The formula to calculate the area of a right angle triangle is (a + b + c)\
    \ / 2\n    // The formula to calculate the area of a right angle triangle is (a\
    \ + b + c) / 2\n    // The formula to calculate the area of a right angle triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // The formula to calculate the area\
    \ of a right angle triangle is (a + b + c) / 2\n    // The formula to calculate\
    \ the area of a right angle triangle is (a + b + c) / 2\n    // The formula to\
    \ calculate the area of a right angle triangle is (a + b + c) / 2\n    // The\
    \ formula to calculate the area of a right angle triangle is (a + b + c) / 2\n\
    \    // The formula to calculate the area of a right angle triangle is (a + b\
    \ + c) / 2\n    // The formula to calculate the area of a right angle triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // The formula to calculate the area\
    \ of a right angle triangle is (a + b + c) / 2\n    // The formula to calculate\
    \ the area of a right angle triangle is (a + b + c) / 2\n    // The formula to\
    \ calculate the area of a right angle triangle is (a + b + c) / 2\n    // The\
    \ formula to calculate the area of a right angle triangle is (a + b + c) / 2\n\
    \    // The formula to calculate the area of a right angle triangle is (a + b\
    \ + c) / 2\n    // The formula to calculate the area of a right angle triangle\
    \ is (a + b + c) / 2\n    // The formula to calculate the area of a right angle\
    \ triangle is (a + b + c) / 2\n    // The formula to calculate the area of a right\
    \ angle triangle is (a + b + c) / 2\n    // The formula to calculate the area\
    \ of a right angle triangle is (a + b + c) / 2\n    // The formula to calculate\
    \ the area of a right angle triangle is (a + b + c) / 2\n    // The formula to\
    \ calculate the area of a right angle triangle \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzzw_qknp_test.go:56:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073700
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b > c:\n    \
    \    return true\n    case a < c && b < c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmaghi80c_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    // return true\
    \ if all sides are equal\n    if a == b {\n        return a == c\n    }\n    \n\
    \    // return true if all sides are equal\n    if a == c {\n        return b\
    \ == c\n    }\n    \n    // return true if all sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == b {\n        return b == c\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == c {\n        return c == b\n    }\n    \n    //\
    \ return true if all sides are equal\n    if b == c {\n        return c == a\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == b {\n   \
    \     return c == a\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == c {\n        return b == a\n    }\n    \n    // return true if all\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == b {\n        return c == a\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == c {\n   \
    \     return b == a\n    }\n    \n    // return true if all sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == b {\n        return c == a\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == c {\n        return b == a\n\
    \    }\n    \n    // return true if all sides are equal\n    if b == c {\n   \
    \     return a == b\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == b {\n        return c == a\n    }\n    \n    // return true if all\
    \ sides are equal\n    if a == c {\n        return b == a\n    }\n    \n    //\
    \ return true if all sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == b {\n   \
    \     return c == a\n    }\n    \n    // return true if all sides are equal\n\
    \    if a == c {\n        return b == a\n    }\n    \n    // return true if all\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n    \n    //\
    \ return true if all sides are equal\n    if a == b {\n        return c == a\n\
    \    }\n    \n    // return true if all sides are equal\n    if a == c {\n   \
    \     return b == a\n    }\n    \n    // return true if all sides are equal\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkrugio5t_test.go:136:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        return\
    \ false\n    }\n    if b > c {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    if a == b {\n        return true\n    }\n  \
    \  if a == c {\n        return true\n    }\n    if b == c {\n        return true\n\
    \    }\n    if a == b+c {\n        return true\n    }\n    if b == c+a {\n   \
    \     return true\n    }\n    if c == a+b {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpsu14c0nx_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpsu14c0nx_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpsu14c0nx_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpsu14c0nx_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpsu14c0nx_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpsu14c0nx_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpsu14c0nx_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpsu14c0nx_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073702
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > b+c:\n\
    \        return false\n    case b > a+c:\n        return false\n    case c > a+b:\n\
    \        return false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpe3bvepx0_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpe3bvepx0_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpe3bvepx0_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpe3bvepx0_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b < c:\n    \
    \    return true\n    case a < c && b > c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3lk9_4tl_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073695
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a > b {\n        if a >\
    \ c {\n            return true\n        }\n    } else {\n        if b > c {\n\
    \            return true\n        }\n    }\n    \n    if a > c {\n        return\
    \ false\n    }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwq5wkwb0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpwq5wkwb0_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpwq5wkwb0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpwq5wkwb0_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpwq5wkwb0_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    if a ==\
    \ b {\n        return c == a\n    }\n    if a == c {\n        return b == c\n\
    \    }\n    if b == c {\n        return a == b\n    }\n    return false\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpamvoxh3c_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpamvoxh3c_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpamvoxh3c_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpamvoxh3c_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpamvoxh3c_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpamvoxh3c_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpamvoxh3c_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpamvoxh3c_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    d := b\
    \ * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    if d == 0\
    \ {\n        return true\n    }\n    s := (-b + d) / (2 * a)\n    if s == 0 {\n\
    \        return true\n    }\n    t := (-b - d) / (2 * a)\n    if t < 0 {\n   \
    \     return false\n    }\n    if t == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpl4j1jrdq_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpl4j1jrdq_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpl4j1jrdq_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpl4j1jrdq_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpl4j1jrdq_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpl4j1jrdq_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvi4xhmn9_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    \n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpkuaa8vwi_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpkuaa8vwi_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpkuaa8vwi_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpkuaa8vwi_test.go:46:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpkuaa8vwi_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ true\n        } else {\n            return false\n        }\n    } else {\n\
    \        if c > b {\n            return true\n        } else {\n            return\
    \ false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpwu72366k_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpwu72366k_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpwu72366k_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmpwu72366k_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if a > b {\n \
    \       return false\n    }\n    if b > c {\n        return false\n    }\n   \
    \ if b > a {\n        return false\n    }\n    if c > a {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpbi8eqjlr_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpbi8eqjlr_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpbi8eqjlr_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpbi8eqjlr_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpbi8eqjlr_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpbi8eqjlr_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpbi8eqjlr_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpbi8eqjlr_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpbi8eqjlr_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        a,\
    \ b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if c > a {\n\
    \        c, a = a, c\n    }\n    if a == 0 || b == 0 || c == 0 {\n        return\
    \ false\n    }\n    if a > b+c {\n        return false\n    }\n    if b > c+a\
    \ {\n        return false\n    }\n    if c > a+b {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpm04i78zp_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpm04i78zp_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpm04i78zp_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpm04i78zp_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c-a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == a-b\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == a-b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == a-b\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ a-b\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == a-b\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == \nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72eyvbja_test.go:140:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073697
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp781gfd1h_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp781gfd1h_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a == b {\n        return c == b\n    }\n    if a == c {\n     \
    \   return b == c\n    }\n    if b == c {\n        return a == b\n    }\n    return\
    \ false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpofv3s7ia_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpofv3s7ia_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpofv3s7ia_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpofv3s7ia_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpofv3s7ia_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpofv3s7ia_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpofv3s7ia_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpofv3s7ia_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if a >\
    \ c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n\
    \    return a == b == c\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyf5rzsa9_test.go:27:22: invalid operation: a == b == c (mismatched types
    untyped bool and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073702
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp0l0vryks_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp0l0vryks_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp0l0vryks_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a != b {\n        return\
    \ false\n    }\n\n    // Check that the sides are equal\n    if a != c {\n   \
    \     return false\n    }\n\n    // Check that the sides are equal\n    if b !=\
    \ c {\n        return false\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return true\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c {\n        return true\n    }\n\n    // Check that the\
    \ sides are equal\n    if b == c {\n        return true\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == b {\n        return true\n    }\n\n  \
    \  // Check that the sides are equal\n    if a == c {\n        return true\n \
    \   }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ true\n    }\n\n    // Check that the sides are equal\n    if a == b {\n    \
    \    return true\n    }\n\n    // Check that the sides are equal\n    if a ==\
    \ c {\n        return true\n    }\n\n    // Check that the sides are equal\n \
    \   if b == c {\n        return true\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b {\n        return true\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == c {\n        return true\n    }\n\n    // Check\
    \ that the sides are equal\n    if b == c {\n        return true\n    }\n\n  \
    \  // Check that the sides are equal\n    if a == b {\n        return true\n \
    \   }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ true\n    }\n\n    // Check that the sides are equal\n    if b == c {\n    \
    \    return true\n    }\n\n    // Check that the sides are equal\n    if a ==\
    \ b {\n        return true\n    }\n\n    // Check that the sides are equal\n \
    \   if a == c {\n        return true\n    }\n\n    // Check that the sides are\
    \ equal\n    if b == c {\n        return true\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return true\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return true\n    }\n\n  \
    \  // Check that the sides are equal\n    if b == c {\n        return true\n \
    \   }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ true\n    }\n\n    // Check that the sides are equal\n    if a == c {\n    \
    \    return true\n    }\n\n    // Check that the sides are equal\n    if b ==\
    \ c {\n        return true\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpplph4w05_test.go:161:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073702
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpp0p0kfh7_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpp0p0kfh7_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, b\n    }\n\
    \    if a == 0 || b == 0 || c == 0 {\n        return false\n    }\n    d := b\
    \ * b - 4 * a * c\n    if d < 0 {\n        return false\n    }\n    return d >\
    \ 0\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpn72nucmu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpn72nucmu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpn72nucmu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpn72nucmu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpn72nucmu_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpn72nucmu_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check if all sides are equal\n    if a == b {\n\
    \        return a == c\n    }\n\n    // Check if all sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check if all sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == b {\n        return b == c\n    }\n\n    // Check if all\
    \ sides are equal\n    if a == c {\n        return c == b\n    }\n\n    // Check\
    \ if all sides are equal\n    if b == c {\n        return c == a\n    }\n\n  \
    \  // Check if all sides are equal\n    if a == b {\n        return c == a\n \
    \   }\n\n    // Check if all sides are equal\n    if a == c {\n        return\
    \ b == a\n    }\n\n    // Check if all sides are equal\n    if b == c {\n    \
    \    return a == b\n    }\n\n    // Check if all sides are equal\n    if a ==\
    \ b {\n        return c == a\n    }\n\n    // Check if all sides are equal\n \
    \   if a == c {\n        return b == a\n    }\n\n    // Check if all sides are\
    \ equal\n    if b == c {\n        return a == b\n    }\n\n    // Check if all\
    \ sides are equal\n    if a == b {\n        return c == a\n    }\n\n    // Check\
    \ if all sides are equal\n    if a == c {\n        return b == a\n    }\n\n  \
    \  // Check if all sides are equal\n    if b == c {\n        return a == b\n \
    \   }\n\n    // Check if all sides are equal\n    if a == b {\n        return\
    \ c == a\n    }\n\n    // Check if all sides are equal\n    if a == c {\n    \
    \    return b == a\n    }\n\n    // Check if all sides are equal\n    if b ==\
    \ c {\n        return a == b\n    }\n\n    // Check if all sides are equal\n \
    \   if a == b {\n        return c == a\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == c {\n        return b == a\n    }\n\n    // Check if all\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ if all sides are equal\n    if a == b {\n        return c == a\n    }\n\n  \
    \  // Check if all sides are equal\n    if a == c {\n        return b == a\n \
    \   }\n\n    // Check if all sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check if all sides are equal\n    if a == b {\n    \
    \    return c == a\n    }\n\n    // Check if all sides are equal\n    if a ==\
    \ c {\n        return b == a\n    }\n\n    // Check if all sides are equal\n \
    \   if b == c {\n        return a == b\n    }\n\n    // Check if all sides are\
    \ equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9ojo9hpl_test.go:156:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073702
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4xh92mfu_test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp4xh92mfu_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073697
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b > c:\n    \
    \    return false\n    case a < c && b < c:\n        return true\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp42b4nabu_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpn9k6sicm_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpn9k6sicm_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpn9k6sicm_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpn9k6sicm_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpn9k6sicm_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpn9k6sicm_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return false\n        } else {\n            return true\n\
    \        }\n    } else {\n        if c > b {\n            return false\n     \
    \   } else {\n            return true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpjsgem__9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpjsgem__9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpjsgem__9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpnfnepxlq_test.go:71:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpnfnepxlq_test.go:71: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b {\n        return c ==\
    \ b\n    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n \
    \       return a == b\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return false\n     \
    \   } else {\n            return true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    if a > b {\n        if a >\
    \ c {\n            return true\n        } else {\n            return false\n \
    \       }\n    } else {\n        if b > c {\n            return true\n       \
    \ } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp93fyw8zm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp93fyw8zm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp93fyw8zm_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp93fyw8zm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp93fyw8zm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp93fyw8zm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here.\n    \n    \n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp2pmc36cy_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp2pmc36cy_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp2pmc36cy_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp2pmc36cy_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp2pmc36cy_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp2pmc36cy_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    if a == b {\n        return true\n    }\n    \n    if a == c\
    \ {\n        return true\n    }\n    \n    if b == c {\n        return true\n\
    \    }\n    \n    if a == b+c {\n        return true\n    }\n    \n    if a ==\
    \ c+b {\n        return true\n    }\n    \n    if b == c+a {\n        return true\n\
    \    }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpijv17vev_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpijv17vev_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpijv17vev_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpijv17vev_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpijv17vev_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpijv17vev_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpijv17vev_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpijv17vev_test.go:72:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpijv17vev_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b > c:\n    \
    \    return true\n    case a < c && b < c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmaghi80c_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are positive\n    if a <=\
    \ 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the side\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5mzzqkxv_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    // If one side is 90 degree, return true\n    if a == b {\n\
    \        return true\n    }\n    \n    // If one side is right angled, return\
    \ true\n    if a == c || b == c {\n        return true\n    }\n    \n    // If\
    \ two sides are 90 degree, return false\n    if a == b {\n        return false\n\
    \    }\n    \n    // If two sides are right angled, return false\n    if a ==\
    \ c || b == c {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if a == b {\n        return false\n    }\n    \n    // If\
    \ two sides are equal, return false\n    if a == c {\n        return false\n \
    \   }\n    \n    // If two sides are equal, return false\n    if b == c {\n  \
    \      return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if a == c || b == c {\n        return false\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if a == b {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if a == c {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if b ==\
    \ c {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if a == c || b == c {\n        return false\n    }\n    \n    //\
    \ If two sides are equal, return false\n    if a == b {\n        return false\n\
    \    }\n    \n    // If two sides are equal, return false\n    if a == c {\n \
    \       return false\n    }\n    \n    // If two sides are equal, return false\n\
    \    if b == c {\n        return false\n    }\n    \n    // If two sides are equal,\
    \ return false\n    if a == c || b == c {\n        return false\n    }\n    \n\
    \    // If two sides are equal, return false\n    if a == b {\n        return\
    \ false\n    }\n    \n    // If two sides are equal, return false\n    if a ==\
    \ c {\n        return false\n    }\n    \n    // If two sides are equal, return\
    \ false\n    if b == c {\n        return false\n    }\n    \n    // If two sides\
    \ are equal, return false\n    if a == c || b == c {\n        return false\n \
    \   }\n    \n    // If two sides are equal, return false\n    if a == b {\n  \
    \      return false\n    }\n    \n    // If \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb67pii73_test.go:128:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are all positive\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b+c {\n        return b == c+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+b {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == b+c {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == c+b {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b+c {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == c+b {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == b+c {\n   \
    \     return c == b+a\n    }\n\n    // Check that the sides are equal\n    if\
    \ a == c+b {\n        return c == b+a\n    }\n\n    // Check that the sides are\
    \ equal\n    if a == b+c {\n        return c == b+a\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c+b {\n        return c == b+a\n    }\n\n \
    \   // Check that the sides are equal\n    if a == b+c {\n        return c ==\
    \ b+a\n    }\n\n    // Check that the sides are equal\n    if a == c+\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa2uaa9ir_test.go:135:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    \n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpyypj9ang_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpyypj9ang_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpyypj9ang_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpyypj9ang_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpyypj9ang_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpyypj9ang_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1_t98hms_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1_t98hms_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073699
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpzhx0it8d_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpzhx0it8d_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp4ht2g1wr_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4ht2g1wr_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp4ht2g1wr_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp4ht2g1wr_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmp4ht2g1wr_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp4ht2g1wr_test.go:74:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp4ht2g1wr_test.go:74: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmp4ht2g1wr_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp4ht2g1wr_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return false\n       \
    \ }\n        return true\n    }\n    if b > c {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpjlpyuiro_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpjlpyuiro_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpjlpyuiro_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpjlpyuiro_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpjlpyuiro_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b + c:\n        return false\n    case\
    \ b > a + c:\n        return false\n    case c > a + b:\n        return false\n\
    \    default:\n        return true\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpma2hs67w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpma2hs67w_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpma2hs67w_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpma2hs67w_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    \n    // return true\
    \ if a > b and b > c\n    if a > b {\n        if b > c {\n            return true\n\
    \        } else {\n            return false\n        }\n    } else {\n       \
    \ if b > c {\n            return false\n        } else {\n            return true\n\
    \        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp2pne3bnn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp2pne3bnn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmp2pne3bnn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmp2pne3bnn_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmp2pne3bnn_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp2pne3bnn_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    if c > a {\n        return false\n   \
    \ }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpn9k6sicm_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpn9k6sicm_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpn9k6sicm_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpn9k6sicm_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpn9k6sicm_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpn9k6sicm_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        a, b = b, a\n    }\n    if b >\
    \ c {\n        b, c = c, b\n    }\n    if c > a {\n        c, a = a, c\n    }\n\
    \    if a > c {\n        a = c\n    }\n    if b > c {\n        b = c\n    }\n\
    \    if a > b {\n        a = b\n    }\n    return a == b\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpqhtnq0bq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpqhtnq0bq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpqhtnq0bq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpqhtnq0bq_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpqhtnq0bq_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if a < b {\n        if c >\
    \ b {\n            return false\n        }\n        return true\n    }\n    if\
    \ b < c {\n        if a > c {\n            return false\n        }\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1kcpwt16_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp1kcpwt16_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp1kcpwt16_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1kcpwt16_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmp1kcpwt16_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmp1kcpwt16_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if a > c {\n            return\
    \ true\n        }\n        return false\n    }\n    if b > c {\n        return\
    \ false\n    }\n    if a == b {\n        return true\n    }\n    if a == c {\n\
    \        return true\n    }\n    if b == c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpsc2nfqhv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpsc2nfqhv_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpsc2nfqhv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpsc2nfqhv_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpsc2nfqhv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpsc2nfqhv_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpsc2nfqhv_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpsc2nfqhv_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpsc2nfqhv_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    \n    // Check if all sides are equal\n    if a ==\
    \ b {\n        return false\n    }\n    if a == c {\n        return false\n  \
    \  }\n    if b == c {\n        return false\n    }\n    \n    // Check if all\
    \ sides are equal\n    if a > b {\n        return false\n    }\n    if a > c {\n\
    \        return false\n    }\n    if b > c {\n        return false\n    }\n  \
    \  \n    // Check if all sides are equal\n    if a < b {\n        return false\n\
    \    }\n    if a < c {\n        return false\n    }\n    if b < c {\n        return\
    \ false\n    }\n    \n    // Check if all sides are equal\n    if a == b {\n \
    \       return false\n    }\n    if a == c {\n        return false\n    }\n  \
    \  if b == c {\n        return false\n    }\n    \n    // Check if all sides are\
    \ equal\n    if a > b {\n        return false\n    }\n    if a > c {\n       \
    \ return false\n    }\n    if b > c {\n        return false\n    }\n    \n   \
    \ // Check if all sides are equal\n    if a < b {\n        return false\n    }\n\
    \    if a < c {\n        return false\n    }\n    if b < c {\n        return false\n\
    \    }\n    \n    // Check if all sides are equal\n    if a == b {\n        return\
    \ false\n    }\n    if a == c {\n        return false\n    }\n    if b == c {\n\
    \        return false\n    }\n    \n    // Check if all sides are equal\n    if\
    \ a > b {\n        return false\n    }\n    if a > c {\n        return false\n\
    \    }\n    if b > c {\n        return false\n    }\n    \n    // Check if all\
    \ sides are equal\n    if a < b {\n        return false\n    }\n    if a < c {\n\
    \        return false\n    }\n    if b < c {\n        return false\n    }\n  \
    \  \n    // Check if all sides are equal\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return false\n    }\n    if b == c {\n      \
    \  return false\n    }\n    \n    // Check if all sides are equal\n    if a >\
    \ b {\n        return false\n    }\n    if a > c {\n        return false\n   \
    \ }\n    if b > c {\n        return false\n    }\n    \n    // Check if all sides\
    \ are equal\n    if a < b {\n        return false\n    }\n    if a < c {\n   \
    \     return false\n    }\n    if b < c {\n        return false\n    }\n    \n\
    \    // Check if all sides are equal\n    if a == b {\n        return false\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplisv5d3z_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ < 0 || b < 0 || c < 0 {\n        return false\n    }\n\n    // Check that the\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the sides are equal\n    if a == c {\n        return b == c\n    }\n\n\
    \    // Check that the sides are equal\n    if b == c {\n        return a == b\n\
    \    }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1nyq_ij_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return true\n        }\n\
    \        return false\n    }\n    if b > c {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpyhmft9n1_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpyhmft9n1_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpyhmft9n1_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpyhmft9n1_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpyhmft9n1_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpyhmft9n1_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return false\n        } else {\n            return true\n\
    \        }\n    } else {\n        if c > b {\n            return false\n     \
    \   } else {\n            return true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpjsgem__9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__5 (0.00s)\n        tmpjsgem__9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpjsgem__9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__9\
    \ (0.00s)\n        tmpjsgem__9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return true\n        }\
    \ else {\n            return false\n        }\n    } else {\n        if b > c\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return false\n     \
    \   } else {\n            return true\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpv2sbjojk_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpv2sbjojk_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > b +\
    \ c:\n        return false\n    case b > a + c:\n        return false\n    case\
    \ c > a + b:\n        return false\n    default:\n        return true\n    }\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpif9zp3b3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpif9zp3b3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpif9zp3b3_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpif9zp3b3_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073705
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        if a > c {\n            return true\n        }\
    \ else {\n            return false\n        }\n    } else {\n        if b > c\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpqsoec408_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpqsoec408_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073701
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b && b == c {\n        return\
    \ true\n    }\n    if a == c {\n        return true\n    }\n    if b == c {\n\
    \        return true\n    }\n    if a > b {\n        if a > c {\n            return\
    \ true\n        }\n        if b > c {\n            return false\n        }\n \
    \   }\n    if b > c {\n        if b > a {\n            return true\n        }\n\
    \        if c > a {\n            return false\n        }\n    }\n    if c > a\
    \ {\n        if c > b {\n            return true\n        }\n        if a > b\
    \ {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpqu03yglj_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpqu03yglj_test.go:81:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpqu03yglj_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpqu03yglj_test.go:81:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmpqu03yglj_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a,\
    \ c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a + b >\
    \ c {\n        return false\n    }\n    if a + c > b {\n        return false\n\
    \    }\n    if b + c > a {\n        return false\n    }\n    return true\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9f2h7mrv_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9f2h7mrv_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the three sides are non-negative\n \
    \   if a <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the three sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the three sides are equal\n    if a == b\
    \ {\n        return c == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the three\
    \ sides are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check\
    \ that the three sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the three sides are equal\n    if b == c\
    \ {\n        return a == b\n    }\n\n    // Check that the three sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check\
    \ that the three sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the three sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the three sides are equal\n    if a == c\
    \ {\n        return b == c\n    }\n\n    // Check that the three sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the three\
    \ sides are equal\n    if a == b {\n        return c == \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq9yrwxf9_test.go:146:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073694
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return false\n\
    \    }\n    if a == c {\n        return true\n    }\n    if b == c {\n       \
    \ return true\n    }\n    if a > c {\n        return false\n    }\n    if b >\
    \ a {\n        return false\n    }\n    return true\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp9avaunv4_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp9avaunv4_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp9avaunv4_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp9avaunv4_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp9avaunv4_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp9avaunv4_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073705
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    if a > b {\n        if a > c {\n            return true\n  \
    \      } else {\n            return false\n        }\n    } else {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp0ryv80ic_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmp0ryv80ic_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmp0ryv80ic_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp0ryv80ic_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp0ryv80ic_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp0ryv80ic_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    d := b * b - 4 * a * c\n    if d < 0 {\n        return false\n\
    \    }\n    \n    s := (-b + d) / (2 * a)\n    if s <= 0 {\n        return false\n\
    \    }\n    \n    x := (-b - s) / a\n    if x >= 0 {\n        return true\n  \
    \  }\n    \n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp6iud18xf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp6iud18xf_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp6iud18xf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp6iud18xf_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp6iud18xf_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp6iud18xf_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 2
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return false\n \
    \   case a > c && b < c:\n        return true\n    case a < c && b > c:\n    \
    \    return true\n    case a < c && b < c:\n        return false\n    }\n}\n\n\
    func TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmaghi80c_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a > b {\n        if\
    \ b > c {\n            return true\n        } else {\n            return false\n\
    \        }\n    } else {\n        if c > b {\n            return true\n      \
    \  } else {\n            return false\n        }\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmppn_lj75l_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__10 (0.00s)\n        tmppn_lj75l_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Check that the sides are non-negative\n    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return false\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the sides are equal\n\
    \    if b == c {\n        return a == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == b {\n        return c == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == c {\n        return b == c\n    }\n\n    //\
    \ Check that the sides are equal\n    if b == c {\n        return a == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == b {\n        return\
    \ c == b\n    }\n\n    // Check that the sides are equal\n    if a == c {\n  \
    \      return b == c\n    }\n\n    // Check that the sides are equal\n    if b\
    \ == c {\n        return a == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == b {\n        return c == b\n    }\n\n    // Check that the sides\
    \ are equal\n    if a == c {\n        return b == c\n    }\n\n    // Check that\
    \ the sides are equal\n    if b == c {\n        return a == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == b {\n        return c == b\n   \
    \ }\n\n    // Check that the sides are equal\n    if a == c {\n        return\
    \ b == c\n    }\n\n    // Check that the sides are equal\n    if b == c {\n  \
    \      return a == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == b {\n        return c == b\n    }\n\n    // Check that the sides are equal\n\
    \    if a == c {\n        return b == c\n    }\n\n    // Check that the sides\
    \ are equal\n    if b == c {\n        return a == b\n    }\n\n    // Check that\
    \ the sides are equal\n    if a == b {\n        return c == b\n    }\n\n    //\
    \ Check that the sides are equal\n    if a == c {\n        return b == c\n   \
    \ }\n\n    // Check that the sides are equal\n    if b == c {\n        return\
    \ a == b\n    }\n\n    // Check that the sides are equal\n    if a == b {\n  \
    \      return c == b\n    }\n\n    // Check that the sides are equal\n    if a\
    \ == c {\n        return b == c\n    }\n\n    // Check that the \nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvi4xhmn9_test.go:154:6: expected ''('', found TestRight_Angle_Triangle

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073698
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    if a == b {\n        return c ==\
    \ b\n    }\n    if a == c {\n        return b == c\n    }\n    if b == c {\n \
    \       return a == b\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpbn9dyxg9_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpbn9dyxg9_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073703
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Write your code here\n    if a == 0 || b == 0 ||\
    \ c == 0 {\n        return false\n    }\n    \n    switch {\n    case a > c &&\
    \ b > c:\n        return true\n    case a > c && b < c:\n        return false\n\
    \    case a < c && b > c:\n        return false\n    case a < c && b < c:\n  \
    \      return true\n    default:\n        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmp4jd5_u9n_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp4jd5_u9n_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmp4jd5_u9n_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073704
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        if b > c {\n            return\
    \ false\n        }\n        return true\n    }\n    if b > c {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpzbpojwbr_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmpzbpojwbr_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073696
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > c && b > c:\n        return true\n  \
    \  case a > c && b < c:\n        return false\n    case a < c && b < c:\n    \
    \    return false\n    case a < c && b > c:\n        return true\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpitsq0ajc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpitsq0ajc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpitsq0ajc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpitsq0ajc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpitsq0ajc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpitsq0ajc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073705
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    \n    switch {\n    case a > b+c:\n        return false\n    case\
    \ b > a+c:\n        return false\n    case c > a+b:\n        return false\n  \
    \  }\n    \n    return true\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__1\
    \ (0.00s)\n        tmpo_8277uh_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__3 (0.00s)\n        tmpo_8277uh_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__5\
    \ (0.00s)\n        tmpo_8277uh_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmpo_8277uh_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073705
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b {\n        return false\n    }\n    if b\
    \ > c {\n        return false\n    }\n    if a == b {\n        return true\n \
    \   }\n    if a == c {\n        return true\n    }\n    if b == c {\n        return\
    \ true\n    }\n    if a > c {\n        return false\n    }\n    if b > a {\n \
    \       return false\n    }\n    if c > a {\n        return false\n    }\n   \
    \ if a > b {\n        return false\n    }\n    if b > c {\n        return false\n\
    \    }\n    if c > b {\n        return false\n    }\n    if a > c {\n        return\
    \ false\n    }\n    if b > a {\n        return false\n    }\n    if c > a {\n\
    \        return false\n    }\n    if a > b {\n        return false\n    }\n  \
    \  if b > c {\n        return false\n    }\n    if c > b {\n        return false\n\
    \    }\n    if a > c {\n        return false\n    }\n    if b > a {\n        return\
    \ false\n    }\n    if c > a {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmps0hrvcif_test.go:104: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmps0hrvcif_test.go:104:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__3\
    \ (0.00s)\n        tmps0hrvcif_test.go:104: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__4 (0.00s)\n        tmps0hrvcif_test.go:104:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__6\
    \ (0.00s)\n        tmps0hrvcif_test.go:104: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__7 (0.00s)\n        tmps0hrvcif_test.go:104:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__8\
    \ (0.00s)\n        tmps0hrvcif_test.go:104: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__9 (0.00s)\n        tmps0hrvcif_test.go:104:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__10\
    \ (0.00s)\n        tmps0hrvcif_test.go:104: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073705
