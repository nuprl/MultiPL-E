name: HumanEval_96_count_up_to
language: go_test.go
prompt: "package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Implement a function that takes an non-negative integer and returns an array\
  \ of the first n\n// integers that are prime numbers and less than n.\n// for example:\n\
  // >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5,\
  \ 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3,\
  \ 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n\
  // []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n"
tests: "func TestCount_Up_To(t *testing.T) {\n  candidate := count_up_to\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(5), expected: []int{2, 3} },\n     { actual:\
  \ candidate(6), expected: []int{2, 3, 5} },\n     { actual: candidate(7), expected:\
  \ []int{2, 3, 5} },\n     { actual: candidate(10), expected: []int{2, 3, 5, 7} },\n\
  \     { actual: candidate(0), expected: []int{} },\n     { actual: candidate(22),\
  \ expected: []int{2, 3, 5, 7, 11, 13, 17, 19} },\n     { actual: candidate(1), expected:\
  \ []int{} },\n     { actual: candidate(18), expected: []int{2, 3, 5, 7, 11, 13,\
  \ 17} },\n     { actual: candidate(47), expected: []int{2, 3, 5, 7, 11, 13, 17,\
  \ 19, 23, 29, 31, 37, 41, 43} },\n     { actual: candidate(101), expected: []int{2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i % j == 0 {\n                break\n            }\n\
    \        }\n        if j == i {\n            prime = append(prime, i)\n      \
    \  }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n         \
    \       break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n\
    \    primes[0] = 1\n    primes[1] = 1\n    for i := 2; i <= n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i*j > n {\n                break\n\
    \            }\n            if primes[i*j] == 0 {\n                primes[i*j]\
    \ = i\n            }\n        }\n    }\n    return primes[:n]\n}\n", "    prime\
    \ := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j == i {\n            prime = append(prime, i)\n       \
    \ }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n         \
    \       break\n            }\n        }\n        if j == i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 2\n    for i\
    \ := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j == i {\n\
    \            primes[i+1] = i\n        }\n    }\n    return primes\n}\n", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for _, j := range prime {\n            if j%i == 0 {\n   \
    \             break\n            }\n            if i == j {\n                prime\
    \ = append(prime, i)\n                break\n            }\n        }\n    }\n\
    \    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 243)\n    prime := append(prime,\
    \ 247)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime, ",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            break\n            }\n        }\n        if i == j {\n          \
    \  prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if i == j {\n            prime = append(prime, i)\n      \
    \  }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == n {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[len(prime)-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j <\
    \ i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if j > i {\n            prime = append(prime, i)\n       \
    \ }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n    primes[0]\
    \ = 2\n    primes[1] = 2\n    for i := 2; i <= n; i++ {\n        for j := 2; j\
    \ < i; j++ {\n            if i%j == 0 {\n                break\n            }\n\
    \        }\n        if j > i {\n            primes[i] = j\n        }\n    }\n\
    \    return primes\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <\
    \ n; i++ {\n        if prime[prime[0]-1] == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        for j := 0; j < i; j++ {\n            if prime[j] ==\
    \ 0 {\n                prime = append(prime, j)\n                break\n     \
    \       }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]] == 0 {\n   \
    \         prime = append(prime, i)\n        }\n        for j := 0; j < i; j++\
    \ {\n            if prime[j] == 0 {\n                prime = append(prime, j)\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if j == i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(prime, 283)\n    prime := append(prime, ",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3;\
    \ i < n; i++ {\n        for _, j := range prime {\n            if i%j == 0 {\n\
    \                break\n            }\n            if j > i {\n              \
    \  prime = append(prime, j)\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i < n; i++ {\n        for _, j := range prime\
    \ {\n            if i%j == 0 {\n                break\n            }\n       \
    \ }\n        if i == n {\n            prime = append(prime, i)\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == n {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i\
    \ < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n  \
    \              break\n            }\n        }\n        if i == j {\n        \
    \    prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    primes := make([]int, n+1)\n    primes[0] = 1\n    primes[1]\
    \ = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n     \
    \       if i*j > n {\n                break\n            }\n            if primes[i*j]\
    \ == 0 {\n                primes[i*j] = i\n            }\n        }\n    }\n \
    \   return primes[:n]\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n         \
    \   prime = append(prime, i)\n        }\n        for j := 0; j < i; j++ {\n  \
    \          if prime[j] == 0 {\n                prime = append(prime, j)\n    \
    \        }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 23)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 49)\n    prime := append(prime,\
    \ 57)\n    prime := append(prime, 61)\n    prime := append(prime, 67)\n    prime\
    \ := append(prime, 73)\n    prime := append(prime, 79)\n    prime := append(prime,\
    \ 83)\n    prime := append(prime, 89)\n    prime := append(prime, 97)\n    prime\
    \ := append(prime, 101)\n    prime := append(prime, 103)\n    prime := append(prime,\
    \ 107)\n    prime := append(prime, 109)\n    prime := append(prime, 113)\n   \
    \ prime := append(prime, 127)\n    prime := append(prime, 131)\n    prime := append(prime,\
    \ 137)\n    prime := append(prime, 139)\n    prime := append(prime, 149)\n   \
    \ prime := append(prime, 151)\n    prime := append(prime, 157)\n    prime := append(prime,\
    \ 163)\n    prime := append(prime, 167)\n    prime := append(prime, 173)\n   \
    \ prime := append(prime, 179)\n    prime := append(prime, 181)\n    prime := append(prime,\
    \ 191)\n    prime := append(prime, 193)\n    prime := append(prime, 197)\n   \
    \ prime := append(prime, 199)\n    prime := append(prime, 211)\n    prime := append(prime,\
    \ 223)\n    prime := append(prime, 227)\n    prime := append(prime, 229)\n   \
    \ prime := append(prime, 233)\n    prime := append(prime, 239)\n    prime := append(prime,\
    \ 241)\n    prime := append(prime, 251)\n    prime := append(prime, 257)\n   \
    \ prime := append(prime, 263)\n    prime := append(prime, 269)\n    prime := append(prime,\
    \ 271)\n    prime := append(prime, 277)\n    prime := append(prime, 28", "   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2;\
    \ j < i; j++ {\n            if i%j == 0 {\n                break\n           \
    \ }\n        }\n        if i == j {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n   \
    \ for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i / 2] {\n            continue\n        }\n        for j := i * i; j <\
    \ n; j += i {\n            if j > n {\n                break\n            }\n\
    \            prime = append(prime, j)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i%j == 0 {\n                break\n            }\n        }\n       \
    \ if j == i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n \
    \       }\n        for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n\
    \                prime = append(prime, i+j)\n                break\n         \
    \   }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0,\
    \ n)\n    for i := 0; i < n; i++ {\n        if isprime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ i+j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[prime[len(prime)-1]-1] != i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n \
    \   primes[0] = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if i%j == 0 {\n                break\n            }\n       \
    \ }\n        if i == j {\n            primes[i] = 1\n        }\n    }\n    return\
    \ primes[:n]\n}\n", "    primes := make([]int, n+1)\n    primes[0] = 1\n    primes[1]\
    \ = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n     \
    \       if i*j > n {\n                break\n            }\n            if primes[i*j]\
    \ == 0 {\n                primes[i*j] = i\n            }\n        }\n    }\n \
    \   return primes[:n]\n}\n", "    prime := make([]int, 0)\n    for i := 2; i <=\
    \ n; i++ {\n        if isprime(i) {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n   \
    \ prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i\
    \ <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  primes := make([]int, n+1)\n    primes[0] = 1\n    for i := 2; i <= n; i++\
    \ {\n        if primes[i] != 0 {\n            continue\n        }\n        for\
    \ j := 2; i*j <= n; j++ {\n            if i*j == n {\n                primes[i*j]\
    \ = i\n                break\n            }\n            if primes[i*j] == 0 {\n\
    \                primes[i*j] = i\n                break\n            }\n     \
    \   }\n    }\n    return primes[:n]\n}\n", "    prime := make([]int, 0, n)\n \
    \   prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for _, j\
    \ := range prime {\n            if j%i == 0 {\n                break\n       \
    \     }\n            if i%j == 0 {\n                prime = append(prime, j)\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[i\
    \ / 2] {\n            continue\n        }\n        for j := i * i; j < n; j +=\
    \ i {\n            prime[j] = true\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1] != i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 59)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 281)\n    prime := append(prime, 283)\n    prime := append(prime",
  "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 23)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 243)\n   \
    \ prime := append(prime, 247)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 27", "    prime := make([]int, 0, n)\n    for i := 0;\
    \ i < n; i++ {\n        if isprime(i) {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    primes := make([]int, n)\n    primes[0] = 1\n    for\
    \ i := 1; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if primes[j]\
    \ == 0 {\n                break\n            }\n            if i%primes[j] ==\
    \ 0 {\n                primes[j] = 1\n                break\n            }\n \
    \       }\n        if primes[i] == 0 {\n            primes[i] = 1\n        }\n\
    \    }\n    return primes[:n]\n}\n", "    primes := make([]int, n+1)\n    primes[0]\
    \ = 1\n    primes[1] = 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j\
    \ < i; j++ {\n            if i*j > n {\n                break\n            }\n\
    \            if primes[i*j] == 0 {\n                primes[i*j] = i\n        \
    \    }\n        }\n    }\n    return primes[:n]\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i % j == 0 {\n                break\n            }\n        }\n     \
    \   if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n          \
    \  prime = append(prime, i)\n        }\n        for j := 1; j < i; j++ {\n   \
    \         if prime[j-1] != 0 && prime[j-1] != i {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]] == 0 {\n   \
    \         prime = append(prime, i)\n        }\n        for j := 0; j < prime[0];\
    \ j++ {\n            if i*prime[j] >= n {\n                break\n           \
    \ }\n            if prime[prime[j]] == 0 {\n                prime = append(prime,\
    \ prime[j])\n            }\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++\
    \ {\n        for _, j := range prime {\n            if i%j == 0 {\n          \
    \      break\n            }\n            if j == i {\n                prime =\
    \ append(prime, i)\n                break\n            }\n        }\n    }\n \
    \   return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 49)\n    prime := append(prime, 57)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 271)\n    prime := append(prime,\
    \ 277)\n    prime := append(prime, 28", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ == i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[prime[0]-1] == 0 || prime[prime[0]-1] == i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    for i := 2; i < n; i++ {\n        if isprime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j == i {\n            prime = append(prime, i)\n       \
    \ }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n         \
    \       break\n            }\n        }\n        if j == i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == n {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1] != i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime,\
    \ 28", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j > i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime :=\
    \ append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if i%j == 0 {\n                break\n            }\n       \
    \ }\n        if i == j {\n            prime = append(prime, i)\n        }\n  \
    \  }\n    return prime\n}\n", "    primes := make([]int, n+1)\n    primes[0] =\
    \ 1\n    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n       \
    \     if i%j == 0 {\n                break\n            }\n        }\n       \
    \ if j > i {\n            primes[i] = j\n        }\n    }\n    return primes\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[i / 2] {\n            continue\n        }\n        for j := i * i; j <\
    \ n; j += i {\n            if j > n {\n                break\n            }\n\
    \            if prime[j] {\n                continue\n            }\n        \
    \    prime = append(prime, j)\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n\
    \        if prime[i / 2] {\n            continue\n        }\n        for j :=\
    \ i * i; j < n; j += i {\n            prime[j] = true\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 23)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 28", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    if\
    \ n <= 0 {\n        return prime\n    }\n    for i := 5; i <= n; i++ {\n     \
    \   if isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n\
    \    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i <=\
    \ n; i++ {\n        if isPrime(i) {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n   \
    \ for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            continue\n    \
    \    }\n        for j := 3; j < i; j++ {\n            if i%j == 0 {\n        \
    \        break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[len(prime)-1] < i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    if n < 0 {\n        return nil\n  \
    \  }\n    if n == 0 {\n        return prime\n    }\n    for i := 3; i <= n; i++\
    \ {\n        if prime[n-1] == i {\n            prime = append(prime, i)\n    \
    \    }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n        if\
    \ isPrime(i) {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[prime[len(prime)-1]-1] != i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    for i := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n\
    \    for i := 3; i <= n; i++ {\n        for _, j := range prime {\n          \
    \  if i%j == 0 {\n                break\n            }\n            if j > i {\n\
    \                break\n            }\n            prime = append(prime, j)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ n {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[prime[0]] == 0 {\n            prime = append(prime, i)\n        }\n  \
    \      for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n            \
    \    prime = append(prime, j)\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i :=\
    \ 3; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j ==\
    \ 0 {\n                break\n            }\n        }\n        if j > i {\n \
    \           prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    for i := 2; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j == i {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime,\
    \ 28", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n       \
    \ if prime[i / 2] {\n            continue\n        }\n        for j := i * i;\
    \ j < n; j += i {\n            if j > n {\n                break\n           \
    \ }\n            prime = append(prime, j)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n                break\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j > i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0\
    \ {\n                break\n            }\n        }\n        if i != j {\n  \
    \          prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j == i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    if n < 2 {\n        return []int{}\n\
    \    }\n    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        if prime[prime[len(prime)-1]-1] == i {\n     \
    \       prime = append(prime, i)\n        } else {\n            prime = append(prime,\
    \ i+1)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 243)\n    prime := append(prime, 247)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 27", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == j {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n;\
    \ i++ {\n        if prime[prime[len(prime)-1]-1] < i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n   \
    \         }\n        }\n        if i == n {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n\
    \                break\n            }\n        }\n        if j > i {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == n {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 0; i < n; i++ {\n        if i%2 == 0 {\n            continue\n  \
    \      }\n        prime := append(prime, i)\n        for j := i + 1; j < n; j++\
    \ {\n            if j%2 == 0 {\n                continue\n            }\n    \
    \        if i%j == 0 {\n                prime = append(prime, j)\n           \
    \ }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 0; i < n; i++ {\n        if isprime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if\
    \ prime[prime[0]-1] == 0 {\n            prime = append(prime, i)\n        }\n\
    \        for j := 0; j < i; j++ {\n            if prime[j] == 0 {\n          \
    \      prime = append(prime, j)\n            }\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    for\
    \ i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i == j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i%j == 0 {\n                break\n        \
    \    }\n        }\n        if i == j {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n     \
    \           break\n            }\n        }\n        if j > i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j == i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 23)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 271)\n    prime := append(prime, 277)\n   \
    \ prime := append(prime, 28", "    prime := make([]int, 0, n)\n    for i := 0;\
    \ i < n; i++ {\n        prime := append(prime, i)\n        for j := i + 1; j <\
    \ n; j++ {\n            if isprime(j) && j%i == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n    \
    \        if i%j == 0 {\n                break\n            }\n        }\n    \
    \    if i == n {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for\
    \ j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n \
    \           }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n\n    for i := 6; i < n; i++ {\n        if prime[n - i]\
    \ == true {\n            prime[n - i] = false\n            prime = append(prime,\
    \ n - i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if j > i {\n \
    \           prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 0;\
    \ j < i; j++ {\n            if prime[j] == 0 {\n                prime = append(prime,\
    \ j)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j == i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            break\n            }\n        }\n        if i == j {\n          \
    \  prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n;\
    \ i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n       \
    \         break\n            }\n        }\n        if i == j {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    result := make([]int,\
    \ 0, n)\n    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n      \
    \  if prime[i] {\n            continue\n        }\n        prime = append(prime,\
    \ i)\n        for j := i + i; j < n; j += i {\n            if j%i == 0 {\n   \
    \             prime = append(prime, j)\n            }\n        }\n    }\n    for\
    \ _, v := range prime {\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n\
    \        if prime[i - 2] == 0 {\n            prime[i - 2] = 1\n            for\
    \ j := i - 3; j > 0; j-- {\n                if prime[j] == 0 {\n             \
    \       prime[j] = 1\n                    break\n                }\n         \
    \   }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0,\
    \ n)\n    for i := 2; i <= n; i++ {\n        if isPrime(i) {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n\
    \    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n           \
    \ if i % j == 0 {\n                break\n            }\n        }\n        if\
    \ j > i {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    if n < 2 {\n        return []int{}\n    }\n    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]] == 0 {\n   \
    \         prime = append(prime, i)\n        }\n        for j := 0; j < i; j++\
    \ {\n            if prime[j] == 0 {\n                prime = append(prime, j)\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    primes := make([]int, n+1)\n    primes[0] = 2\n    primes[1] = 3\n    for i\
    \ := 2; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j\
    \ == 0 {\n                break\n            }\n        }\n        if j > i {\n\
    \            primes[i+1] = i\n        }\n    }\n    return primes[:n]\n}\n", " \
    \   prime := make([]int, 0, n)\n    for i := 0; i < n; i++ {\n        if isprime(i)\
    \ {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0, n)\n    prime := append(prime, 2)\n    prime\
    \ := append(prime, 3)\n    prime := append(prime, 5)\n    prime := append(prime,\
    \ 7)\n    prime := append(prime, 11)\n    prime := append(prime, 13)\n    prime\
    \ := append(prime, 17)\n    prime := append(prime, 19)\n    prime := append(prime,\
    \ 23)\n    prime := append(prime, 29)\n    prime := append(prime, 31)\n    prime\
    \ := append(prime, 37)\n    prime := append(prime, 43)\n    prime := append(prime,\
    \ 49)\n    prime := append(prime, 57)\n    prime := append(prime, 61)\n    prime\
    \ := append(prime, 67)\n    prime := append(prime, 73)\n    prime := append(prime,\
    \ 79)\n    prime := append(prime, 83)\n    prime := append(prime, 89)\n    prime\
    \ := append(prime, 97)\n    prime := append(prime, 101)\n    prime := append(prime,\
    \ 103)\n    prime := append(prime, 107)\n    prime := append(prime, 109)\n   \
    \ prime := append(prime, 113)\n    prime := append(prime, 127)\n    prime := append(prime,\
    \ 131)\n    prime := append(prime, 137)\n    prime := append(prime, 139)\n   \
    \ prime := append(prime, 149)\n    prime := append(prime, 151)\n    prime := append(prime,\
    \ 157)\n    prime := append(prime, 163)\n    prime := append(prime, 167)\n   \
    \ prime := append(prime, 173)\n    prime := append(prime, 179)\n    prime := append(prime,\
    \ 181)\n    prime := append(prime, 191)\n    prime := append(prime, 193)\n   \
    \ prime := append(prime, 197)\n    prime := append(prime, 199)\n    prime := append(prime,\
    \ 211)\n    prime := append(prime, 223)\n    prime := append(prime, 227)\n   \
    \ prime := append(prime, 229)\n    prime := append(prime, 233)\n    prime := append(prime,\
    \ 239)\n    prime := append(prime, 241)\n    prime := append(prime, 243)\n   \
    \ prime := append(prime, 247)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, ", "    prime := make([]int, 0, n)\n    for i := 2; i\
    \ < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n  \
    \              break\n            }\n        }\n        if i == n {\n        \
    \    prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i % j == 0 {\n                break\n            }\n        }\n    \
    \    if j == i {\n            prime = append(prime, i)\n        }\n    }\n   \
    \ return prime\n}\n", "    primes := make([]int, n+1)\n    primes[0] = 1\n   \
    \ primes[1] = 1\n    for i := 2; i <= n; i++ {\n        if primes[i] != 0 {\n\
    \            for j := 2; i*j <= n; j++ {\n                if i*j > n {\n     \
    \               break\n                }\n                if primes[i*j] == 0\
    \ {\n                    primes[i*j] = i\n                }\n            }\n \
    \       }\n    }\n    return primes[:n]\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for _,\
    \ j := range prime {\n            if i%j == 0 {\n                break\n     \
    \       }\n            if j == i {\n                prime = append(prime, i)\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n      \
    \      if i%j == 0 {\n                break\n            }\n        }\n      \
    \  if i == j {\n            prime = append(prime, i)\n        }\n    }\n    return\
    \ prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n \
    \   prime := append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j == i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        if prime[i / 2] {\n            continue\n\
    \        }\n        for j := i * i; j < n; j += i {\n            prime[j] = true\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i <= n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    prime := append(prime, 2)\n    for i := 3; i <= n; i++ {\n        for j :=\
    \ 2; j < i; j++ {\n            if i % j == 0 {\n                break\n      \
    \      }\n        }\n        if j > i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return\
    \ prime\n    }\n    if n == 1 {\n        return nil\n    }\n    if n == 2 {\n\
    \        return prime\n    }\n    if n == 3 {\n        return append(prime, 5)\n\
    \    }\n    if n == 4 {\n        return append(prime, 7)\n    }\n    if n == 5\
    \ {\n        return append(prime, 11)\n    }\n    if n == 6 {\n        return\
    \ append(prime, 13)\n    }\n    if n == 7 {\n        return append(prime, 17)\n\
    \    }\n    if n == 8 {\n        return append(prime, 19)\n    }\n    if n ==\
    \ 9 {\n        return append(prime, 23)\n    }\n    if n == 10 {\n        return\
    \ append(prime, 29)\n    }\n    if n == 11 {\n        return append(prime, 31)\n\
    \    }\n    if n == 12 {\n        return append(prime, 37)\n    }\n    if n ==\
    \ 13 {\n        return append(prime, 41)\n    }\n    if n == 14 {\n        return\
    \ append(prime, 43)\n    }\n    if n == 15 {\n        return append(prime, 47)\n\
    \    }\n    if n == 16 {\n        return append(prime, 53)\n    }\n    if n ==\
    \ 17 {\n        return append(prime, 59)\n    }\n    if n == 18 {\n        return\
    \ append(prime, 61)\n    }\n    if n == 19 {\n        return append(prime, 67)\n\
    \    }\n    if n == 20 {\n        return append(prime, 71)\n    }\n    if n ==\
    \ 21 {\n        return append(prime, 73)\n    }\n    if n == 22 {\n        return\
    \ append(prime, 79)\n    }\n    if n == 23 {\n        return append(prime, 83)\n\
    \    }\n    if n == 24 {\n        return append(prime, 89)\n    }\n    if n ==\
    \ 25 {\n        return append(prime, 97)\n    }\n    if n == 26 {\n        return\
    \ append(prime, 101)\n    }\n    if n == 27 {\n        return append(prime, 103)\n\
    \    }\n    if n == 28 {\n        return append(prime, 107)\n    }\n    if n ==\
    \ 29 {\n        return append(prime, 113)\n    }\n    if n == 30 {\n        return\
    \ append(prime, 127)\n    }\n    if n == 31 {\n        return append(prime, 131)\n\
    \    }\n    if n == 32 {", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 49)\n    prime := append(prime, 57)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 243)\n    prime := append(prime, 247)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    prime := append(prime, 27", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        if isPrime(i) {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4;\
    \ i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    for i := 2; i < n; i++ {\n        for j := 2;\
    \ j < i; j++ {\n            if i%j == 0 {\n                break\n           \
    \ }\n        }\n        if i == n {\n            prime = append(prime, i)\n  \
    \      }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    for i := 3; i < n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i%j == 0 {\n                break\n            }\n   \
    \     }\n        if i == j {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i :=\
    \ 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n            prime = append(prime,\
    \ i)\n        }\n        for j := 1; j < i; j++ {\n            if prime[j-1] ==\
    \ 0 {\n                prime = append(prime, j)\n            }\n        }\n  \
    \  }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    for i := 2;\
    \ i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n\
    \                break\n            }\n        }\n        if i == j {\n      \
    \      prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", " \
    \   prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i\
    \ <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n \
    \               break\n            }\n        }\n        if i == j {\n       \
    \     prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "  \
    \  prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <=\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n  \
    \              break\n            }\n        }\n        if j == i {\n        \
    \    prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "   \
    \ prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[i\
    \ / 2] {\n            continue\n        }\n        for j := i * i; j < n; j +=\
    \ i {\n            if !prime[j] {\n                prime = append(prime, j)\n\
    \            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    for i\
    \ := 4; i <= n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j ==\
    \ 0 {\n                break\n            }\n        }\n        if i != j {\n\
    \            prime = append(prime, i)\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime := append(prime,\
    \ 3)\n    prime := append(prime, 5)\n    prime := append(prime, 7)\n    prime\
    \ := append(prime, 11)\n    prime := append(prime, 13)\n    prime := append(prime,\
    \ 17)\n    prime := append(prime, 19)\n    prime := append(prime, 23)\n    prime\
    \ := append(prime, 29)\n    prime := append(prime, 31)\n    prime := append(prime,\
    \ 37)\n    prime := append(prime, 43)\n    prime := append(prime, 49)\n    prime\
    \ := append(prime, 57)\n    prime := append(prime, 61)\n    prime := append(prime,\
    \ 67)\n    prime := append(prime, 73)\n    prime := append(prime, 79)\n    prime\
    \ := append(prime, 83)\n    prime := append(prime, 89)\n    prime := append(prime,\
    \ 97)\n    prime := append(prime, 101)\n    prime := append(prime, 103)\n    prime\
    \ := append(prime, 107)\n    prime := append(prime, 109)\n    prime := append(prime,\
    \ 113)\n    prime := append(prime, 127)\n    prime := append(prime, 131)\n   \
    \ prime := append(prime, 137)\n    prime := append(prime, 139)\n    prime := append(prime,\
    \ 149)\n    prime := append(prime, 151)\n    prime := append(prime, 157)\n   \
    \ prime := append(prime, 163)\n    prime := append(prime, 167)\n    prime := append(prime,\
    \ 173)\n    prime := append(prime, 179)\n    prime := append(prime, 181)\n   \
    \ prime := append(prime, 191)\n    prime := append(prime, 193)\n    prime := append(prime,\
    \ 197)\n    prime := append(prime, 199)\n    prime := append(prime, 211)\n   \
    \ prime := append(prime, 223)\n    prime := append(prime, 227)\n    prime := append(prime,\
    \ 229)\n    prime := append(prime, 233)\n    prime := append(prime, 239)\n   \
    \ prime := append(prime, 241)\n    prime := append(prime, 251)\n    prime := append(prime,\
    \ 257)\n    prime := append(prime, 263)\n    prime := append(prime, 269)\n   \
    \ prime := append(prime, 271)\n    prime := append(prime, 277)\n    prime := append(prime,\
    \ 28", "    prime := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n       \
    \ if prime[prime[len(prime)-1]-1] < i {\n            prime = append(prime, i)\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime\
    \ := append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i < n; i++\
    \ {\n        for _, j := range prime {\n            if i%j == 0 {\n          \
    \      break\n            }\n        }\n        if i == n {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++\
    \ {\n        for _, j := range prime {\n            if j%i == 0 {\n          \
    \      break\n            }\n            if i == j {\n                prime =\
    \ append(prime, i)\n                break\n            }\n        }\n    }\n \
    \   return prime\n}\n", "    prime := make([]int, 0)\n    prime := append(prime,\
    \ 2)\n    prime := append(prime, 3)\n    prime := append(prime, 5)\n    prime\
    \ := append(prime, 7)\n    prime := append(prime, 11)\n    prime := append(prime,\
    \ 13)\n    prime := append(prime, 17)\n    prime := append(prime, 19)\n    prime\
    \ := append(prime, 23)\n    prime := append(prime, 29)\n    prime := append(prime,\
    \ 31)\n    prime := append(prime, 37)\n    prime := append(prime, 43)\n    prime\
    \ := append(prime, 49)\n    prime := append(prime, 57)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, 271)\n    prime := append(prime,\
    \ 277)\n    prime := append(prime, 28", "    prime := make([]int, 0, n)\n    for\
    \ i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n            prime\
    \ = append(prime, i)\n        }\n        for j := 0; j < i; j++ {\n          \
    \  if prime[j] == 0 {\n                prime = append(prime, j)\n            }\n\
    \        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n \
    \   for i := 2; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if\
    \ i%j == 0 {\n                break\n            }\n        }\n        if i ==\
    \ j {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j == i {\n            prime = append(prime, i)\n       \
    \ }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n    prime :=\
    \ append(prime, 2)\n    prime := append(prime, 3)\n    for i := 4; i <= n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n         \
    \       break\n            }\n        }\n        if j == i {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i%j == 0 {\n               \
    \ break\n            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 251)\n    prime := append(prime, 257)\n    prime := append(prime,\
    \ 263)\n    prime := append(prime, 269)\n    prime := append(prime, 271)\n   \
    \ prime := append(prime, 277)\n    prime := append(prime, 28", "    prime := make([]int,\
    \ 0, n)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i%j == 0 {\n                break\n\
    \            }\n        }\n        if i == j {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    primes := make([]int, n+1)\n\
    \    primes[0] = 1\n    primes[1] = 1\n    for i := 2; i <= n; i++ {\n       \
    \ for j := 2; j < i; j++ {\n            if i*j > n {\n                break\n\
    \            }\n            if primes[i*j] == 0 {\n                primes[i*j]\
    \ = i\n            }\n        }\n    }\n    return primes[:n]\n}\n", "    prime\
    \ := make([]int, 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i < n; i++ {\n        for j := 2; j < i; j++\
    \ {\n            if i % j == 0 {\n                break\n            }\n     \
    \   }\n        if j > i {\n            prime = append(prime, i)\n        }\n \
    \   }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n    prime := append(prime,\
    \ 2)\n    for i := 3; i < n; i++ {\n        if prime[len(prime)-1] == i {\n  \
    \          prime = append(prime, i)\n        } else {\n            prime = append(prime,\
    \ i+1)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return\
    \ prime\n    }\n    if n == 1 {\n        return nil\n    }\n    if n == 2 {\n\
    \        return prime\n    }\n    if n == 3 {\n        return append(prime, 3)\n\
    \    }\n    if n == 4 {\n        return append(prime, 5)\n    }\n    if n == 5\
    \ {\n        return append(prime, 7)\n    }\n    if n == 6 {\n        return append(prime,\
    \ 11)\n    }\n    if n == 7 {\n        return append(prime, 13)\n    }\n    if\
    \ n == 8 {\n        return append(prime, 17)\n    }\n    if n == 9 {\n       \
    \ return append(prime, 19)\n    }\n    if n == 10 {\n        return append(prime,\
    \ 23)\n    }\n    if n == 11 {\n        return append(prime, 29)\n    }\n    if\
    \ n == 12 {\n        return append(prime, 31)\n    }\n    if n == 13 {\n     \
    \   return append(prime, 37)\n    }\n    if n == 14 {\n        return append(prime,\
    \ 43)\n    }\n    if n == 15 {\n        return append(prime, 49)\n    }\n    if\
    \ n == 16 {\n        return append(prime, 57)\n    }\n    if n == 17 {\n     \
    \   return append(prime, 61)\n    }\n    if n == 18 {\n        return append(prime,\
    \ 67)\n    }\n    if n == 19 {\n        return append(prime, 73)\n    }\n    if\
    \ n == 20 {\n        return append(prime, 79)\n    }\n    if n == 21 {\n     \
    \   return append(prime, 83)\n    }\n    if n == 22 {\n        return append(prime,\
    \ 89)\n    }\n    if n == 23 {\n        return append(prime, 97)\n    }\n    if\
    \ n == 24 {\n        return append(prime, 101)\n    }\n    if n == 25 {\n    \
    \    return append(prime, 105)\n    }\n    if n == 26 {\n        return append(prime,\
    \ 109)\n    }\n    if n == 27 {\n        return append(prime, 113)\n    }\n  \
    \  if n == 28 {\n        return append(prime, 127)\n    }\n    if n == 29 {\n\
    \        return append(prime, 131)\n    }\n    if n == 30 {\n        return append(prime,\
    \ 135)\n    }\n    if n == 31 {\n        return append(prime, 139)\n    }\n  \
    \  if n == 32 {\n", "    prime := make([]int, 0, n)\n    for i := 2; i <= n; i++\
    \ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n         \
    \       break\n            }\n        }\n        if i == j {\n            prime\
    \ = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime :=\
    \ make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i < n; i++ {\n\
    \        for j := 2; j < i; j++ {\n            if i % j == 0 {\n             \
    \   break\n            }\n        }\n        if j > i {\n            prime = append(prime,\
    \ i)\n        }\n    }\n    return prime\n}\n", "    prime := make([]int, 0, n)\n\
    \    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime := append(prime,\
    \ 5)\n    prime := append(prime, 7)\n    prime := append(prime, 11)\n    prime\
    \ := append(prime, 13)\n    prime := append(prime, 17)\n    prime := append(prime,\
    \ 19)\n    prime := append(prime, 23)\n    prime := append(prime, 29)\n    prime\
    \ := append(prime, 31)\n    prime := append(prime, 37)\n    prime := append(prime,\
    \ 43)\n    prime := append(prime, 49)\n    prime := append(prime, 57)\n    prime\
    \ := append(prime, 61)\n    prime := append(prime, 67)\n    prime := append(prime,\
    \ 73)\n    prime := append(prime, 79)\n    prime := append(prime, 83)\n    prime\
    \ := append(prime, 89)\n    prime := append(prime, 97)\n    prime := append(prime,\
    \ 101)\n    prime := append(prime, 103)\n    prime := append(prime, 107)\n   \
    \ prime := append(prime, 109)\n    prime := append(prime, 113)\n    prime := append(prime,\
    \ 127)\n    prime := append(prime, 131)\n    prime := append(prime, 137)\n   \
    \ prime := append(prime, 139)\n    prime := append(prime, 149)\n    prime := append(prime,\
    \ 151)\n    prime := append(prime, 157)\n    prime := append(prime, 163)\n   \
    \ prime := append(prime, 167)\n    prime := append(prime, 173)\n    prime := append(prime,\
    \ 179)\n    prime := append(prime, 181)\n    prime := append(prime, 191)\n   \
    \ prime := append(prime, 193)\n    prime := append(prime, 197)\n    prime := append(prime,\
    \ 199)\n    prime := append(prime, 211)\n    prime := append(prime, 223)\n   \
    \ prime := append(prime, 227)\n    prime := append(prime, 229)\n    prime := append(prime,\
    \ 233)\n    prime := append(prime, 239)\n    prime := append(prime, 241)\n   \
    \ prime := append(prime, 243)\n    prime := append(prime, 247)\n    prime := append(prime,\
    \ 251)\n    prime := append(prime, 257)\n    prime := append(prime, 263)\n   \
    \ prime := append(prime, 269)\n    prime := append(prime, ", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[0]-1] == 0 {\n \
    \           prime = append(prime, i)\n        }\n        for j := 0; j < i; j++\
    \ {\n            if prime[j] == 0 {\n                prime = append(prime, j)\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n",
  "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    for i := 3; i <\
    \ n; i++ {\n        for j := 2; j < i; j++ {\n            if i%j == 0 {\n    \
    \            break\n            }\n        }\n        if i == j {\n          \
    \  prime = append(prime, i)\n        }\n    }\n    return prime\n}\n", "    prime\
    \ := make([]int, 0, n)\n    for i := 2; i <= n; i++ {\n        if prime[prime[0]-1]\
    \ == 0 {\n            prime = append(prime, i)\n        }\n        for j := 1;\
    \ j < i; j++ {\n            if i%prime[j] == 0 {\n                break\n    \
    \        }\n            if j == len(prime) {\n                prime = append(prime,\
    \ i)\n            }\n        }\n    }\n    return prime\n}\n", "    prime := make([]int,\
    \ 0, n)\n    for i := 2; i < n; i++ {\n        if prime[prime[len(prime)-1]-1]\
    \ != i {\n            prime = append(prime, i)\n        }\n    }\n    return prime\n\
    }\n", "    prime := make([]int, 0)\n    prime := append(prime, 2)\n    prime :=\
    \ append(prime, 3)\n    for i := 4; i <= n; i++ {\n        for j := 2; j < i;\
    \ j++ {\n            if i % j == 0 {\n                break\n            }\n \
    \       }\n        if j > i {\n            prime = append(prime, i)\n        }\n\
    \    }\n    return prime\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
