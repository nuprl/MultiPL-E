name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string\
  \ {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0]\
    \ += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n\
    \    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n  \
    \  gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0]\
    \ -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] +=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += ", "    var\
    \ letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        letterGrades[i] = letterGrades[i-1]\n        if grades[i] > 3.0 {\n \
    \           letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i]\
    \ < 3.0 {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else\
    \ if grades[i] < 3.7 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n\
    \        } else if grades[i] > 3.7 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 4.0 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 4.0 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 4.3 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 4.3\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 4.7 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 4.7 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 5.0 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 5.0 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 5.3 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 5.3\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 5.7 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 5.7 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 6.0 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 6.0 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 6.3 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 6.3\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 6.7 {\n            letterGrades[i] = letterGrades[i]", "    gradesLen\
    \ := len(grades)\n    gradesGPA := make([]float64, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        gradesGPA[i] = grades[i]\n    }\n    gradesGPA[0]\
    \ = gradesGPA[0]\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\n    gradesGPA[gradesLen-2]\
    \ = gradesGPA[gradesLen-2]\n    gradesGPA[gradesLen-3] = gradesGPA[gradesLen-3]\n\
    \    gradesGPA[gradesLen-4] = gradesGPA[gradesLen-4]\n    gradesGPA[gradesLen-5]\
    \ = gradesGPA[gradesLen-5]\n    gradesGPA[gradesLen-6] = gradesGPA[gradesLen-6]\n\
    \    gradesGPA[gradesLen-7] = gradesGPA[gradesLen-7]\n    gradesGPA[gradesLen-8]\
    \ = gradesGPA[gradesLen-8]\n    gradesGPA[gradesLen-9] = gradesGPA[gradesLen-9]\n\
    \    gradesGPA[gradesLen-10] = gradesGPA[gradesLen-10]\n    gradesGPA[gradesLen-11]\
    \ = gradesGPA[gradesLen-11]\n    gradesGPA[gradesLen-12] = gradesGPA[gradesLen-12]\n\
    \    gradesGPA[gradesLen-13] = gradesGPA[gradesLen-13]\n    gradesGPA[gradesLen-14]\
    \ = gradesGPA[gradesLen-14]\n    gradesGPA[gradesLen-15] = gradesGPA[gradesLen-15]\n\
    \    gradesGPA[gradesLen-16] = gradesGPA[gradesLen-16]\n    gradesGPA[gradesLen-17]\
    \ = gradesGPA[gradesLen-17]\n    gradesGPA[gradesLen-18] = gradesGPA[gradesLen-18]\n\
    \    gradesGPA[gradesLen-19] = gradesGPA[gradesLen-19]\n    gradesGPA[gradesLen-20]\
    \ = gradesGPA[gradesLen-20]\n    gradesGPA[gradesLen-21] = gradesGP", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.", "    var letter []string\n\
    \    var gpas []float64\n    var i int\n    for i = 0; i < len(grades); i++ {\n\
    \        gpa := grades[i]\n        if gpa > 3.0 {\n            letter = append(letter,\
    \ \"B+\")\n            gpas = append(gpas, gpa)\n        } else if gpa > 2.7 {\n\
    \            letter = append(letter, \"B\")\n            gpas = append(gpas, gpa)\n\
    \        } else if gpa > 2.3 {\n            letter = append(letter, \"B-\")\n\
    \            gpas = append(gpas, gpa)\n        } else if gpa > 1.3 {\n       \
    \     letter = append(letter, \"C+\")\n            gpas = append(gpas, gpa)\n\
    \        } else if gpa > 0.7 {\n            letter = append(letter, \"C\")\n \
    \           gpas = append(gpas, gpa)\n        } else if gpa > 0.3 {\n        \
    \    letter = append(letter, \"C-\")\n            gpas = append(gpas, gpa)\n \
    \       } else if gpa > 0.0 {\n            letter = append(letter, \"D+\")\n \
    \           gpas = append(gpas, gpa)\n        } else if gpa > 0.0 {\n        \
    \    letter = append(letter, \"D\")\n            gpas = append(gpas, gpa)\n  \
    \      } else if gpa > 0.0 {\n            letter = append(letter, \"D-\")\n  \
    \          gpas = append(gpas, gpa)\n        } else {\n            letter = append(letter,\
    \ \"E\")\n            gpas = append(gpas, gpa)\n        }\n    }\n    return letter\n\
    }\n", "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are calculated using the formula\n\
    \    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA - 1.7\n    //\
    \ GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n    for i :=\
    \ 1; i < grades_len; i++ {\n        letter_grades[i] = fmt.Sprintf(\"%+.2f\",\
    \ grades[i] - 2.7)\n    }\n    \n    return letter_grades\n}\n", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through each grade and determine letter grade\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 6.0 {\n            letterGrades[i] = \"A\"\n\
    \        }\n    }\n    return letterGrades\n}\n", "    var grades_string []string\n\
    \    var gpas []float64\n    var letter string\n    var i int\n    var j int\n\
    \    for i = 0; i < len(grades); i++ {\n        gpas = append(gpas, grades[i])\n\
    \    }\n    for i = 0; i < len(gpas); i++ {\n        if gpas[i] > 3.0 {\n    \
    \        letter = \"B+\"\n        } else if gpas[i] > 2.7 {\n            letter\
    \ = \"B\"\n        } else if gpas[i] > 2.3 {\n            letter = \"B-\"\n  \
    \      } else if gpas[i] > 2.0 {\n            letter = \"C+\"\n        } else\
    \ if gpas[i] > 1.7 {\n            letter = \"C\"\n        } else if gpas[i] >\
    \ 1.3 {\n            letter = \"C-\"\n        } else if gpas[i] > 1.0 {\n    \
    \        letter = \"D+\"\n        } else if gpas[i] > 0.7 {\n            letter\
    \ = \"D\"\n        } else if gpas[i] > 0.0 {\n            letter = \"D-\"\n  \
    \      } else {\n            letter = \"E\"\n        }\n        grades_string\
    \ = append(grades_string, letter)\n    }\n    return grades_string\n}\n", "  \
    \  gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    result := make([]string, len(grades))\n    \n    // Loop through each grade\
    \ and add it to the result list\n    for i := 0; i < len(grades); i++ {\n    \
    \    // If the grade is greater than or equal to 3.0 then add \"A+\"\n       \
    \ if grades[i] >= 3.0 {\n            result[i] = \"A+\"\n        }\n        //\
    \ If the grade is greater than or equal to 3.7 then add \"A\"\n        if grades[i]\
    \ >= 3.7 {\n            result[i] = \"A\"\n        }\n        // If the grade\
    \ is greater than or equal to 3.3 then add \"A-\"\n        if grades[i] >= 3.3\
    \ {\n            result[i] = \"A-\"\n        }\n        // If the grade is greater\
    \ than or equal to 3.0 then add \"B+\"\n        if grades[i] >= 3.0 {\n      \
    \      result[i] = \"B+\"\n        }\n        // If the grade is greater than\
    \ or equal to 2.7 then add \"B\"\n        if grades[i] >= 2.7 {\n            result[i]\
    \ = \"B\"\n        }\n        // If the grade is greater than or equal to 2.3\
    \ then add \"B-\"\n        if grades[i] >= 2.3 {\n            result[i] = \"B-\"\
    \n        }\n        // If the grade is greater than or equal to 2.0 then add\
    \ \"C+\"\n        if grades[i] >= 2.0 {\n            result[i] = \"C+\"\n    \
    \    }\n        // If the grade is greater than or equal to 1.7 then add \"C\"\
    \n        if grades[i] >= 1.7 {\n            result[i] = \"C\"\n        }\n  \
    \      // If the grade is greater than or equal to 1.3 then add \"C-\"\n     \
    \   if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n        }\n       \
    \ // If the grade is greater than or equal to 1.0 then add \"D+\"\n        if\
    \ grades[i] >= 1.0 {\n            result[i] = \"D+\"\n        }\n        // If\
    \ the grade is greater than or equal to 0.7 then add \"D\"\n        if grades[i]\
    \ >= 0.7 {\n            result[i] = \"D\"\n        }\n        // If the grade\
    \ is greater than or equal to 0.0 then add \"D-\"\n        if grades[i] >= 0.0\
    \ {\n            result[i] = \"D-\"\n        }\n        // If the grade is less\
    \ than 0.0 then add \"E\"\n        if grades[i] < 0.0 {\n            result[i]\
    \ = \"E\"\n        }\n    }\n    \n    return result\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n \
    \   }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n \
    \       if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        }\
    \ else if grades[i] >= 3.7 && grades[i] <= 4.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] <= 3.7 {\n        \
    \    letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ <= 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 && grades[i] <= 3.0 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 && grades[i] <= 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] <= 2.3 {\n       \
    \     letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ <= 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] <= 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] <= 1.3 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.7 && grades[i] <= 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n \
    \   }\n    return letterGrades\n}\n", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    for i := 0; i < grades_len; i++ {\n     \
    \   if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letter_grades[i] = \"\
    C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i]\
    \ = \"D\"\n        } else if grades[i] < 0.0 {\n            letter_grades[i] =\
    \ \"D-\"\n        } else {\n            letter_grades[i] = \"E\"\n        }\n\
    \    }\n    return letter_grades\n}\n", "    result := make([]string, len(grades))\n\
    \    for i := range grades {\n        if grades[i] < 3.0 {\n            result[i]\
    \ = \"E\"\n            continue\n        }\n        if grades[i] < 3.3 {\n   \
    \         result[i] = \"D-\"\n            continue\n        }\n        if grades[i]\
    \ < 3.7 {\n            result[i] = \"C+\"\n            continue\n        }\n \
    \       if grades[i] < 4.0 {\n            result[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.3 {\n            result[i] = \"B\"\n    \
    \        continue\n        }\n        if grades[i] < 4.7 {\n            result[i]\
    \ = \"B-\"\n            continue\n        }\n        if grades[i] < 5.0 {\n  \
    \          result[i] = \"A+\"\n            continue\n        }\n        if grades[i]\
    \ < 5.3 {\n            result[i] = \"A\"\n            continue\n        }\n  \
    \      if grades[i] < 5.7 {\n            result[i] = \"A-\"\n            continue\n\
    \        }\n        if grades[i] < 6.0 {\n            result[i] = \"A\"\n    \
    \        continue\n        }\n        if grades[i] < 6.3 {\n            result[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 6.7 {\n  \
    \          result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 7.0 {\n            result[i] = \"B+\"\n            continue\n        }\n \
    \       if grades[i] < 7.3 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        if grades[i] < 7.7 {\n            result[i] = \"B-\"\n   \
    \         continue\n        }\n        if grades[i] < 8.0 {\n            result[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 8.3 {\n  \
    \          result[i] = \"C\"\n            continue\n        }\n        if grades[i]\
    \ < 8.7 {\n            result[i] = \"C-\"\n            continue\n        }\n \
    \       if grades[i] < 9.0 {\n            result[i] = \"C\"\n            continue\n\
    \        }\n        if grades[i] < 9.3 {\n            result[i] = \"C+\"\n   \
    \         continue\n        }\n        if grades[i] < 9.7 {\n            result[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] < 10.0 {\n  \
    \          result[i] = \"D+\"\n            continue\n        }\n        if grades[i]\
    \ < 10.3 {\n            result[i] = \"D\"\n            continue\n        }\n \
    \       if grades[i] < 10.7 {\n            result[i] = \"D-\"\n            continue\n\
    \        }\n        if grades[i] < 11.0 {\n            result[i] = \"D\"\n   \
    \         continue\n        }\n        if grades[i] < 11.3 {\n            result[i]\
    \ = \"D+\"\n            continue\n        }\n        if grades[i] < 11.7 {\n \
    \           result[i] = \"D\"\n            continue\n        }\n        if grades[i]\
    \ < 12.0 {\n            result[i] = \"E\"\n            continue\n        }\n \
    \   }\n    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n \
    \           letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 1.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    grades := append([]float64{}, grades...)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append("]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
