name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string\
  \ {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0]\
    \ += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n\
    \    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n  \
    \  gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0]\
    \ -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] +=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += ", "    var\
    \ letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        letterGrades[i] = letterGrades[i-1]\n        if grades[i] > 3.0 {\n \
    \           letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i]\
    \ < 3.0 {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else\
    \ if grades[i] < 3.7 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n\
    \        } else if grades[i] > 3.7 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 4.0 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 4.0 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 4.3 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 4.3\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 4.7 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 4.7 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 5.0 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 5.0 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 5.3 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 5.3\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 5.7 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 5.7 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 6.0 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 6.0 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 6.3 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 6.3\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 6.7 {\n            letterGrades[i] = letterGrades[i]", "    gradesLen\
    \ := len(grades)\n    gradesGPA := make([]float64, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        gradesGPA[i] = grades[i]\n    }\n    gradesGPA[0]\
    \ = gradesGPA[0]\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\n    gradesGPA[gradesLen-2]\
    \ = gradesGPA[gradesLen-2]\n    gradesGPA[gradesLen-3] = gradesGPA[gradesLen-3]\n\
    \    gradesGPA[gradesLen-4] = gradesGPA[gradesLen-4]\n    gradesGPA[gradesLen-5]\
    \ = gradesGPA[gradesLen-5]\n    gradesGPA[gradesLen-6] = gradesGPA[gradesLen-6]\n\
    \    gradesGPA[gradesLen-7] = gradesGPA[gradesLen-7]\n    gradesGPA[gradesLen-8]\
    \ = gradesGPA[gradesLen-8]\n    gradesGPA[gradesLen-9] = gradesGPA[gradesLen-9]\n\
    \    gradesGPA[gradesLen-10] = gradesGPA[gradesLen-10]\n    gradesGPA[gradesLen-11]\
    \ = gradesGPA[gradesLen-11]\n    gradesGPA[gradesLen-12] = gradesGPA[gradesLen-12]\n\
    \    gradesGPA[gradesLen-13] = gradesGPA[gradesLen-13]\n    gradesGPA[gradesLen-14]\
    \ = gradesGPA[gradesLen-14]\n    gradesGPA[gradesLen-15] = gradesGPA[gradesLen-15]\n\
    \    gradesGPA[gradesLen-16] = gradesGPA[gradesLen-16]\n    gradesGPA[gradesLen-17]\
    \ = gradesGPA[gradesLen-17]\n    gradesGPA[gradesLen-18] = gradesGPA[gradesLen-18]\n\
    \    gradesGPA[gradesLen-19] = gradesGPA[gradesLen-19]\n    gradesGPA[gradesLen-20]\
    \ = gradesGPA[gradesLen-20]\n    gradesGPA[gradesLen-21] = gradesGP", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.", "    var letter []string\n\
    \    var gpas []float64\n    var i int\n    for i = 0; i < len(grades); i++ {\n\
    \        gpa := grades[i]\n        if gpa > 3.0 {\n            letter = append(letter,\
    \ \"B+\")\n            gpas = append(gpas, gpa)\n        } else if gpa > 2.7 {\n\
    \            letter = append(letter, \"B\")\n            gpas = append(gpas, gpa)\n\
    \        } else if gpa > 2.3 {\n            letter = append(letter, \"B-\")\n\
    \            gpas = append(gpas, gpa)\n        } else if gpa > 1.3 {\n       \
    \     letter = append(letter, \"C+\")\n            gpas = append(gpas, gpa)\n\
    \        } else if gpa > 0.7 {\n            letter = append(letter, \"C\")\n \
    \           gpas = append(gpas, gpa)\n        } else if gpa > 0.3 {\n        \
    \    letter = append(letter, \"C-\")\n            gpas = append(gpas, gpa)\n \
    \       } else if gpa > 0.0 {\n            letter = append(letter, \"D+\")\n \
    \           gpas = append(gpas, gpa)\n        } else if gpa > 0.0 {\n        \
    \    letter = append(letter, \"D\")\n            gpas = append(gpas, gpa)\n  \
    \      } else if gpa > 0.0 {\n            letter = append(letter, \"D-\")\n  \
    \          gpas = append(gpas, gpa)\n        } else {\n            letter = append(letter,\
    \ \"E\")\n            gpas = append(gpas, gpa)\n        }\n    }\n    return letter\n\
    }\n", "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are calculated using the formula\n\
    \    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA - 1.7\n    //\
    \ GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n    for i :=\
    \ 1; i < grades_len; i++ {\n        letter_grades[i] = fmt.Sprintf(\"%+.2f\",\
    \ grades[i] - 2.7)\n    }\n    \n    return letter_grades\n}\n", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through each grade and determine letter grade\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 6.0 {\n            letterGrades[i] = \"A\"\n\
    \        }\n    }\n    return letterGrades\n}\n", "    var grades_string []string\n\
    \    var gpas []float64\n    var letter string\n    var i int\n    var j int\n\
    \    for i = 0; i < len(grades); i++ {\n        gpas = append(gpas, grades[i])\n\
    \    }\n    for i = 0; i < len(gpas); i++ {\n        if gpas[i] > 3.0 {\n    \
    \        letter = \"B+\"\n        } else if gpas[i] > 2.7 {\n            letter\
    \ = \"B\"\n        } else if gpas[i] > 2.3 {\n            letter = \"B-\"\n  \
    \      } else if gpas[i] > 2.0 {\n            letter = \"C+\"\n        } else\
    \ if gpas[i] > 1.7 {\n            letter = \"C\"\n        } else if gpas[i] >\
    \ 1.3 {\n            letter = \"C-\"\n        } else if gpas[i] > 1.0 {\n    \
    \        letter = \"D+\"\n        } else if gpas[i] > 0.7 {\n            letter\
    \ = \"D\"\n        } else if gpas[i] > 0.0 {\n            letter = \"D-\"\n  \
    \      } else {\n            letter = \"E\"\n        }\n        grades_string\
    \ = append(grades_string, letter)\n    }\n    return grades_string\n}\n", "  \
    \  gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14]\n\
    \    gradesSorted[len(grades", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    result := make([]string, len(grades))\n    \n    // Loop through each grade\
    \ and add it to the result list\n    for i := 0; i < len(grades); i++ {\n    \
    \    // If the grade is greater than or equal to 3.0 then add \"A+\"\n       \
    \ if grades[i] >= 3.0 {\n            result[i] = \"A+\"\n        }\n        //\
    \ If the grade is greater than or equal to 3.7 then add \"A\"\n        if grades[i]\
    \ >= 3.7 {\n            result[i] = \"A\"\n        }\n        // If the grade\
    \ is greater than or equal to 3.3 then add \"A-\"\n        if grades[i] >= 3.3\
    \ {\n            result[i] = \"A-\"\n        }\n        // If the grade is greater\
    \ than or equal to 3.0 then add \"B+\"\n        if grades[i] >= 3.0 {\n      \
    \      result[i] = \"B+\"\n        }\n        // If the grade is greater than\
    \ or equal to 2.7 then add \"B\"\n        if grades[i] >= 2.7 {\n            result[i]\
    \ = \"B\"\n        }\n        // If the grade is greater than or equal to 2.3\
    \ then add \"B-\"\n        if grades[i] >= 2.3 {\n            result[i] = \"B-\"\
    \n        }\n        // If the grade is greater than or equal to 2.0 then add\
    \ \"C+\"\n        if grades[i] >= 2.0 {\n            result[i] = \"C+\"\n    \
    \    }\n        // If the grade is greater than or equal to 1.7 then add \"C\"\
    \n        if grades[i] >= 1.7 {\n            result[i] = \"C\"\n        }\n  \
    \      // If the grade is greater than or equal to 1.3 then add \"C-\"\n     \
    \   if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n        }\n       \
    \ // If the grade is greater than or equal to 1.0 then add \"D+\"\n        if\
    \ grades[i] >= 1.0 {\n            result[i] = \"D+\"\n        }\n        // If\
    \ the grade is greater than or equal to 0.7 then add \"D\"\n        if grades[i]\
    \ >= 0.7 {\n            result[i] = \"D\"\n        }\n        // If the grade\
    \ is greater than or equal to 0.0 then add \"D-\"\n        if grades[i] >= 0.0\
    \ {\n            result[i] = \"D-\"\n        }\n        // If the grade is less\
    \ than 0.0 then add \"E\"\n        if grades[i] < 0.0 {\n            result[i]\
    \ = \"E\"\n        }\n    }\n    \n    return result\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n \
    \   }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n \
    \       if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        }\
    \ else if grades[i] >= 3.7 && grades[i] <= 4.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] <= 3.7 {\n        \
    \    letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ <= 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 && grades[i] <= 3.0 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 && grades[i] <= 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] <= 2.3 {\n       \
    \     letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ <= 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] <= 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] <= 1.3 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.7 && grades[i] <= 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n \
    \   }\n    return letterGrades\n}\n", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    for i := 0; i < grades_len; i++ {\n     \
    \   if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letter_grades[i] = \"\
    C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i]\
    \ = \"D\"\n        } else if grades[i] < 0.0 {\n            letter_grades[i] =\
    \ \"D-\"\n        } else {\n            letter_grades[i] = \"E\"\n        }\n\
    \    }\n    return letter_grades\n}\n", "    result := make([]string, len(grades))\n\
    \    for i := range grades {\n        if grades[i] < 3.0 {\n            result[i]\
    \ = \"E\"\n            continue\n        }\n        if grades[i] < 3.3 {\n   \
    \         result[i] = \"D-\"\n            continue\n        }\n        if grades[i]\
    \ < 3.7 {\n            result[i] = \"C+\"\n            continue\n        }\n \
    \       if grades[i] < 4.0 {\n            result[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.3 {\n            result[i] = \"B\"\n    \
    \        continue\n        }\n        if grades[i] < 4.7 {\n            result[i]\
    \ = \"B-\"\n            continue\n        }\n        if grades[i] < 5.0 {\n  \
    \          result[i] = \"A+\"\n            continue\n        }\n        if grades[i]\
    \ < 5.3 {\n            result[i] = \"A\"\n            continue\n        }\n  \
    \      if grades[i] < 5.7 {\n            result[i] = \"A-\"\n            continue\n\
    \        }\n        if grades[i] < 6.0 {\n            result[i] = \"A\"\n    \
    \        continue\n        }\n        if grades[i] < 6.3 {\n            result[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 6.7 {\n  \
    \          result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 7.0 {\n            result[i] = \"B+\"\n            continue\n        }\n \
    \       if grades[i] < 7.3 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        if grades[i] < 7.7 {\n            result[i] = \"B-\"\n   \
    \         continue\n        }\n        if grades[i] < 8.0 {\n            result[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 8.3 {\n  \
    \          result[i] = \"C\"\n            continue\n        }\n        if grades[i]\
    \ < 8.7 {\n            result[i] = \"C-\"\n            continue\n        }\n \
    \       if grades[i] < 9.0 {\n            result[i] = \"C\"\n            continue\n\
    \        }\n        if grades[i] < 9.3 {\n            result[i] = \"C+\"\n   \
    \         continue\n        }\n        if grades[i] < 9.7 {\n            result[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] < 10.0 {\n  \
    \          result[i] = \"D+\"\n            continue\n        }\n        if grades[i]\
    \ < 10.3 {\n            result[i] = \"D\"\n            continue\n        }\n \
    \       if grades[i] < 10.7 {\n            result[i] = \"D-\"\n            continue\n\
    \        }\n        if grades[i] < 11.0 {\n            result[i] = \"D\"\n   \
    \         continue\n        }\n        if grades[i] < 11.3 {\n            result[i]\
    \ = \"D+\"\n            continue\n        }\n        if grades[i] < 11.7 {\n \
    \           result[i] = \"D\"\n            continue\n        }\n        if grades[i]\
    \ < 12.0 {\n            result[i] = \"E\"\n            continue\n        }\n \
    \   }\n    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n \
    \           letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 1.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    grades := append([]float64{}, grades...)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(", "    var grades_string []string\n\
    \    var i int\n    var grade float64\n    for i = 0; i < len(grades); i++ {\n\
    \        grade = grades[i]\n        if grade > 3.0 {\n            grades_string\
    \ = append(grades_string, \"B-\")\n        } else if grade > 2.7 {\n         \
    \   grades_string = append(grades_string, \"B-\")\n        } else if grade > 2.3\
    \ {\n            grades_string = append(grades_string, \"B-\")\n        } else\
    \ if grade > 1.7 && grade < 2.3 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 && grade < 1.7 {\n            grades_string\
    \ = append(grades_string, \"C\")\n        } else if grade > 1.0 {\n          \
    \  grades_string = append(grades_string, \"C+\")\n        } else if grade > 0.7\
    \ {\n            grades_string = append(grades_string, \"C\")\n        } else\
    \ if grade > 0.0 && grade < 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    // Loop\
    \ through each grade and assign a letter grade to it.\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C+\"\n \
    \       } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"C\"\n  \
    \      } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"C-\"\n  \
    \      } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D+\"\n  \
    \      } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"E\"\n    \
    \    } else {\n            letterGrades[i] = \"F\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    result := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    result[0]\
    \ = \"A+\"\n    \n    // The second letter grade is always B\n    for i := 1;\
    \ i < gradesLen; i++ {\n        if grades[i] > 3.7 && grades[i] < 3.3 {\n    \
    \        result[i] = \"B+\"\n        } else if grades[i] > 3.3 && grades[i] <\
    \ 3.0 {\n            result[i] = \"B\"\n        } else if grades[i] > 3.0 && grades[i]\
    \ < 2.7 {\n            result[i] = \"B-\"\n        } else if grades[i] > 2.7 &&\
    \ grades[i] < 2.3 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ > 2.3 && grades[i] < 2.0 {\n            result[i] = \"B-\"\n        } else if\
    \ grades[i] > 2.0 && grades[i] < 1.7 {\n            result[i] = \"C+\"\n     \
    \   } else if grades[i] > 1.7 && grades[i] < 1.3 {\n            result[i] = \"\
    C\"\n        } else if grades[i] > 1.3 && grades[i] < 1.0 {\n            result[i]\
    \ = \"C-\"\n        } else if grades[i] > 1.0 && grades[i] < 0.7 {\n         \
    \   result[i] = \"C\"\n        } else if grades[i] > 0.7 && grades[i] < 0.0 {\n\
    \            result[i] = \"D-\"\n        } else {\n            result[i] = \"\
    D\"\n        }\n    }\n    \n    // The last letter grade is always E\n    result[gradesLen-1]\
    \ = \"E\"\n    \n    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >=\
    \ 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3\
    \ {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    for i = 0; i < len(grades); i++ {\n\
    \        gpas = append(gpas, grades[i])\n    }\n    for i = 0; i < len(gpas);\
    \ i++ {\n        if gpas[i] > 3.0 {\n            letter = \"B+\"\n        } else\
    \ if gpas[i] > 2.7 {\n            letter = \"B\"\n        } else if gpas[i] >\
    \ 2.3 {\n            letter = \"B-\"\n        } else if gpas[i] > 2.0 {\n    \
    \        letter = \"C+\"\n        } else if gpas[i] > 1.7 {\n            letter\
    \ = \"C\"\n        } else if gpas[i] > 1.3 {\n            letter = \"C-\"\n  \
    \      } else if gpas[i] > 1.0 {\n            letter = \"D+\"\n        } else\
    \ if gpas[i] > 0.7 {\n            letter = \"D\"\n        } else if gpas[i] >\
    \ 0.0 {\n            letter = \"D-\"\n        } else {\n            letter = \"\
    E\"\n        }\n        grades_string = append(grades_string, letter)\n    }\n\
    \    return grades_string\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 1; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i-1]\
    \ + \"+\"\n        if grades[i] > grades[i-1] {\n            letterGrades[i] =\
    \ letterGrades[i] + \"-\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    \n  \
    \  for i := 1; i < gradesLen; i++ {\n        if grades[i-1] > grades[i] {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"C-\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"D+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"D-\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // Loop through grades\n    for i := 0; i < gradesLen; i++ {\n    \
    \    // If grade is less than or equal to zero, skip it\n        if grades[i]\
    \ <= 0.0 {\n            continue\n        }\n        \n        // If grade is\
    \ greater than or equal to 3.7, skip it\n        if grades[i] > 3.7 {\n      \
    \      continue\n        }\n        \n        // If grade is greater than or equal\
    \ to 3.3, skip it\n        if grades[i] > 3.3 {\n            continue\n      \
    \  }\n        \n        // If grade is greater than or equal to 3.0, skip it\n\
    \        if grades[i] > 3.0 {\n            continue\n        }\n        \n   \
    \     // If grade is greater than or equal to 2.7, skip it\n        if grades[i]\
    \ > 2.7 {\n            continue\n        }\n        \n        // If grade is greater\
    \ than or equal to 2.3, skip it\n        if grades[i] > 2.3 {\n            continue\n\
    \        }\n        \n        // If grade is greater than or equal to 2.0, skip\
    \ it\n        if grades[i] > 2.0 {\n            continue\n        }\n        \n\
    \        // If grade is greater than or equal to 1.7, skip it\n        if grades[i]\
    \ > 1.7 {\n            continue\n        }\n        \n        // If grade is greater\
    \ than or equal to 1.3, skip it\n        if grades[i] > 1.3 {\n            continue\n\
    \        }\n        \n        // If grade is greater than or equal to 1.0, skip\
    \ it\n        if grades[i] > 1.0 {\n            continue\n        }\n        \n\
    \        // If grade is greater than or equal to 0.7, skip it\n        if grades[i]\
    \ > 0.7 {\n            continue\n        }\n        \n        // If grade is greater\
    \ than or equal to 0.0, skip it\n        if grades[i] > 0.0 {\n            continue\n\
    \        }\n        \n        // If grade is less than or equal to 0, skip it\n\
    \        if grades[i] <= 0.0 {\n            continue\n        }\n        \n  \
    \      // If grade is less than or equal to 3.7, skip it\n        if grades[i]\
    \ <= 3.7 {\n            continue\n        }\n        \n        // If grade is\
    \ less than or equal to 3.3, skip it\n        if grades[i] <= 3.3 {\n        \
    \    continue\n        }\n        \n        // If grade is less than or equal\
    \ to 3.0, skip it\n        if grades[i] <= 3.0 {\n            continue\n     \
    \   }\n        \n        // If grade is less than or equal to 2.7, skip it\n \
    \       if grades[i] <= 2.7 {\n            continue\n        }\n        \n   \
    \     // If grade is less than or equal to 2.3, skip it\n        if grades[i]\
    \ <= 2.3 {\n            continue\n        }\n        \n        // If ", "    var\
    \ result []string\n    \n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 3.0\
    \ {\n            grade = grade + 3.0\n        }\n        \n        if grade >\
    \ 2.7 {\n            grade = grade - 2.7\n        }\n        if grade < 2.7 {\n\
    \            grade = grade + 2.7\n        }\n        \n        if grade > 2.3\
    \ {\n            grade = grade - 2.3\n        }\n        if grade < 2.3 {\n  \
    \          grade = grade + 2.3\n        }\n        \n        if grade > 2.0 {\n\
    \            grade = grade - 2.0\n        }\n        if grade < 2.0 {\n      \
    \      grade = grade + 2.0\n        }\n        \n        if grade > 1.7 {\n  \
    \          grade = grade - 1.7\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade + 1.7\n        }\n        \n        if grade > 1.3 {\n    \
    \        grade = grade - 1.3\n        }\n        if grade < 1.3 {\n          \
    \  grade = grade + 1.3\n        }\n        \n        if grade > 1.0 {\n      \
    \      grade = grade - 1.0\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade + 1.0\n        }\n        \n        if grade > 0.7 {\n            grade\
    \ = grade - 0.7\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        \n        if grade > 0.0 {\n            grade = grade\
    \ - 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        \n        if grade > 0.0 {\n            grade = grade - 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        \n        if grade > 0.0 {\n            grade = grade - 0.0\n  \
    \      }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n\
    \        \n        if grade > 0.0 {\n            grade = grade - 0.0\n       \
    \ }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n  \
    \      \n        if grade > 0.0 {\n            grade = grade - 0.0\n        }\n\
    \        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n      \
    \  \n        if grade > 0.0 {\n            grade = grade - 0.0\n        }\n  \
    \      if grade < 0.0 ", "    var letterGrades []string\n    \n    // The first\
    \ letter grade is always A+\n    letterGrades = append(letterGrades, \"A+\")\n\
    \    \n    // The second letter grade is always A if the first letter grade is\
    \ A+\n    if grades[0] == 4.0 {\n        letterGrades = append(letterGrades, \"\
    A\")\n    }\n    \n    // The third letter grade is always A if the first two\
    \ letter grades are A+\n    if grades[1] > 3.7 && grades[1] < 3.3 {\n        letterGrades\
    \ = append(letterGrades, \"A-\")\n    }\n    \n    // The fourth letter grade\
    \ is always B+ if the first three letter grades are A+, A or A-\n    if grades[2]\
    \ > 3.3 && grades[2] < 3.0 && grades[3] > 2.7 && grades[3] < 2.3 {\n        letterGrades\
    \ = append(letterGrades, \"B+\")\n    }\n    \n    // The fifth letter grade is\
    \ always B if the fourth letter grade is B+\n    if grades[4] > 2.7 && grades[4]\
    \ < 2.3 {\n        letterGrades = append(letterGrades, \"B\")\n    }\n    \n \
    \   // The sixth letter grade is always B if the fourth letter grade is B+\n \
    \   if grades[4] > 2.3 && grades[4] < 2.0 {\n        letterGrades = append(letterGrades,\
    \ \"B-\")\n    }\n    \n    // The seventh letter grade is always C+ if the fifth\
    \ letter grade is B+, B or B-\n    if grades[5] > 2.0 && grades[5] < 1.7 {\n \
    \       letterGrades = append(letterGrades, \"C+\")\n    }\n    \n    // The eighth\
    \ letter grade is always C if the sixth letter grade is C+\n    if grades[6] >\
    \ 1.7 {\n        letterGrades = append(letterGrades, \"C\")\n    }\n    \n   \
    \ // The ninth letter grade is always C if the sixth letter grade is C+\n    if\
    \ grades[6] > 1.3 && grades[6] < 1.0 {\n        letterGrades = append(letterGrades,\
    \ \"C-\")\n    }\n    \n    // The tenth letter grade is always D+ if the seventh\
    \ letter grade is C+, C or C-\n    if grades[7] > 1.0 && grades[7] < 0.7 {\n \
    \       letterGrades = append(letterGrades, \"D+\")\n    }\n    \n    // The ",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[0] < 0] = 0\n\
    \    gradesSorted[gradesSorted[0] > 1] = 1\n    gradesSorted[gradesSorted[1] <\
    \ 0] = 0\n    gradesSorted[gradesSorted[1] > 1] = 1\n    gradesSorted[gradesSorted[2]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[2] > 1] = 1\n    gradesSorted[gradesSorted[3]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[3] > 1] = 1\n    gradesSorted[gradesSorted[4]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[4] > 1] = 1\n    gradesSorted[gradesSorted[5]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[5] > 1] = 1\n    gradesSorted[gradesSorted[6]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[6] > 1] = 1\n    gradesSorted[gradesSorted[7]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[7] > 1] = 1\n    gradesSorted[gradesSorted[8]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[8] > 1] = 1\n    gradesSorted[gradesSorted[9]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[9] > 1] = 1\n    gradesSorted[gradesSorted[10]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[10] > 1] = 1\n    gradesSorted[gradesSorted[11]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[11] > 1] = 1\n    gradesSorted[gradesSorted[12]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[12] > 1] = 1\n    gradesSorted[gradesSorted[13]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[13] > 1] = 1\n    gradesSorted[gradesSorted[14]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[14] > 1] = 1\n    gradesSorted[gradesSorted[15]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[15] > 1] = 1\n    gradesSorted[gradesSorted[16]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[16] > 1] = 1\n    gradesSorted[gradesSorted[17]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[17] > ", "    result := []string{}\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade < 3.0 {\n            grade = 3.0\n\
    \        }\n        if grade < 2.0 {\n            grade = grade + 2.0\n      \
    \  }\n        if grade > 2.0 {\n            grade = grade - 2.0\n        }\n \
    \       if grade < 1.0 {\n            grade = grade + 1.0\n        }\n       \
    \ if grade > 1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade > 0.7\
    \ {\n            grade = grade - 0.7\n        }\n        if grade < 0.3 {\n  \
    \          grade = grade + 0.3\n        }\n        if grade > 0.3 {\n        \
    \    grade = grade - 0.3\n        }\n        if grade < 0.1 {\n            grade\
    \ = grade + 0.1\n        }\n        if grade > 0.1 {\n            grade = grade\
    \ - 0.1\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade > 0.0 {\n            grade = grade - 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade > 0.0 {\n            grade = grade - 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ > 0.0 {\n            grade = grade - 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade > 0.0 {\n  \
    \          grade = grade - 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade > 0.0 {\n            grade\
    \ = grade - 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 0.0 {\n            grade = grade - 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade > 0.0 {\n            grade = grade - 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade > 0.0 {\n            grade = grade - 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade > 0.0\
    \ {", "    grades_len := len(grades)\n    letterGrades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        letter := \"\"\n        if grades[i]\
    \ >= 4.0 {\n            letter = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letter = \"A\"\n        } else if grades[i] >= 3.3 {\n          \
    \  letter = \"A-\"\n        } else if grades[i] >= 3.0 {\n            letter =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letter = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 {\n            letter = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letter = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letter = \"C-\"\n        } else if grades[i] >= 1.0 {\n         \
    \   letter = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letter\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letter = \"D-\"\n\
    \        } else {\n            letter = \"E\"\n        }\n        letterGrades[i]\
    \ = letter\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   grade", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Calculate the letter grades\n    for i := 0; i < gradesLen;\
    \ i++ {\n        letterGrades[i] = \"\"\n        if grades[i] >= 4.0 {\n     \
    \       letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 && grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   grades_len := len(grades)\n    letterGrades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n \
    \           letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n \
    \           letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n \
    \           letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n  \
    \          letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n  \
    \          letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n   \
    \         letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n   \
    \         letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n   \
    \         letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n    \
    \        letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    var grades_string\
    \ []string\n    var gpas []float64\n    var letter string\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var\
    \ o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t\
    \ int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n\
    \    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n \
    \   var e int\n    var f int\n    var g int\n    var h int\n    var i int\n  \
    \  var j int\n    var k int\n    var l int\n    var m int\n    var n int\n   \
    \ var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var\
    \ t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y\
    \ int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n\
    \    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n \
    \   var j int\n    var k int\n    var l int\n    var m int\n    var n int\n  \
    \  var o int\n    var p int\n    var q int\n    var r int\n    var s int\n   \
    \ var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var\
    \ y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d\
    \ int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n\
    \    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n \
    \   var o int\n    var p int\n    var q int\n    var r int\n    var s int\n  \
    \  var t int\n    var u int\n    var v int\n    var w int\n    var x int\n   \
    \ var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var\
    \ d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i\
    \ int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n\
    \    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n \
    \   var t int\n    var u int\n    var v int\n    var w int\n    var x int\n  \
    \  var y int\n    var z int\n    var a int\n    var b ", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"E\"\n    letterGrades[gradesLen-2] = \"D-\"\
    \n    letterGrades[gradesLen-3] = \"D\"\n    letterGrades[gradesLen-4] = \"C-\"\
    \n    letterGrades[gradesLen-5] = \"C\"\n    letterGrades[gradesLen-6] = \"B+\"\
    \n    letterGrades[gradesLen-7] = \"B\"\n    letterGrades[gradesLen-8] = \"B-\"\
    \n    letterGrades[gradesLen-9] = \"B\"\n    letterGrades[gradesLen-10] = \"A+\"\
    \n    letterGrades[gradesLen-11] = \"A\"\n    letterGrades[gradesLen-12] = \"\
    A-\"\n    letterGrades[gradesLen-13] = \"A\"\n    letterGrades[gradesLen-14] =\
    \ \"A+\"\n    letterGrades[gradesLen-15] = \"A\"\n    letterGrades[gradesLen-16]\
    \ = \"A-\"\n    letterGrades[gradesLen-17] = \"A\"\n    letterGrades[gradesLen-18]\
    \ = \"A+\"\n    letterGrades[gradesLen-19] = \"A\"\n    letterGrades[gradesLen-20]\
    \ = \"A-\"\n    letterGrades[gradesLen-21] = \"A\"\n    letterGrades[gradesLen-22]\
    \ = \"A+\"\n    letterGrades[gradesLen-23] = \"A\"\n    letterGrades[gradesLen-24]\
    \ = \"A-\"\n    letterGrades[gradesLen-25] = \"A\"\n    letterGrades[gradesLen-26]\
    \ = \"A+\"\n    letterGrades[gradesLen-27] = \"A\"\n    letterGrades[gradesLen-28]\
    \ = \"A-\"\n    letterGrades[gradesLen-29] = \"A\"\n    letterGrades[gradesLen-30]\
    \ = \"A+\"\n    letterGrades[gradesLen-31] = \"A\"\n    letterGrades[gradesLen-32]\
    \ = \"A-\"\n    letterGrades[gradesLen-33] = \"A\"\n    letterGrades[gradesLen-34]\
    \ = \"A+\"\n    letterGrades[gradesLen-35] = \"A\"\n    letterGrades[gradesLen-",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen - 1] = \"D-\"\n    for\
    \ i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n        if grades[i]\
    \ >= 3.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.7\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.3 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n\
    \            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 4.0 && grades[i]\
    \ < 4.3 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 4.3 && grades[i] < 4.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 4.7 && grades[i] < 5.0 {\n            letterGrades[i] = \"A\"\
    \n        } else if grades[i] >= 5.0 && grades[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 5.7 && grades[i]\
    \ < 6.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 6.0 {\n            letterGrades[i] = \"A\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // Loop through each grade and add it to the letter grade list\n  \
    \  for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n        \
    \    letter_grades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n      \
    \      letter_grades[i] = \"B\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.3 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 1.7 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n        }\
    \ else if grades[i] < 1.0 {\n            letter_grades[i] = \"D\"\n        } else\
    \ {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n", "    result := make([]string, len(grades))\n    for i := range grades {\n\
    \        if grades[i] >= 4.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            result[i] = \"A\"\n        } else if grades[i]\
    \ >= 3.3 {\n            result[i] = \"A-\"\n        } else if grades[i] >= 3.0\
    \ {\n            result[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          result[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n         \
    \   result[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n            result[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 {\n            result[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n     \
    \   } else if grades[i] >= 1.0 {\n            result[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            result[i] = \"D-\"\n        } else {\n            result[i]\
    \ = \"E\"\n        }\n    }\n    return result\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    sort.Float64s(grades)\n    for i := range grades {\n     \
    \   gradesSorted[i] = grades[i]\n    }\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    grades", "    grades_string := []string{}\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    gradesMax := grades[gradesLen-1]\n    gradesMin := grades[0]\n\
    \    gradesAvg := grades[gradesLen-2]\n    gradesGrade := grades[gradesLen-3]\n\
    \    gradesGradeAvg := grades[gradesLen-4]\n    gradesGradeGrade := grades[gradesLen-5]\n\
    \    gradesGradeGradeAvg := grades[gradesLen-6]\n    gradesGradeGradeGrade :=\
    \ grades[gradesLen-7]\n    gradesGradeGradeGradeAvg := grades[gradesLen-8]\n \
    \   gradesGradeGradeGradeGrade := grades[gradesLen-9]\n    gradesGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-10]\n    gradesGradeGradeGradeGradeGrade := grades[gradesLen-11]\n\
    \    gradesGradeGradeGradeGradeGradeAvg := grades[gradesLen-12]\n    gradesGradeGradeGradeGradeGradeGrade\
    \ := grades[gradesLen-13]\n    gradesGradeGradeGradeGradeGradeGradeAvg := grades[gradesLen-14]\n\
    \    gradesGradeGradeGradeGradeGradeGradeGrade := grades[gradesLen-15]\n    gradesGradeGradeGradeGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-16]\n    gradesGradeGradeGradeGradeGradeGradeGradeGrade\
    \ := grades[gradesLen-17]\n    gradesGradeGradeGradeGradeGradeGradeGradeAvg :=\
    \ grades[gradesLen-18]\n    gradesGradeGradeGradeGradeGradeGradeGradeGrade :=\
    \ grades[gradesLen-19]\n    gradesGradeGradeGradeGradeGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-20]\n    gradesGradeGradeGradeGradeGradeGradeGradeGradeGrade\
    \ := grades[gradesLen-21]\n    gradesGradeGradeGradeGradeGradeGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-22]", "    var result []string\n    var gpas []float64\n\
    \    var letter string\n    for _, grade := range grades {\n        if grade >\
    \ 0 {\n            gpas = append(gpas, grade)\n        } else {\n            gpas\
    \ = append(gpas, 0)\n        }\n    }\n    for _, gpa := range gpas {\n      \
    \  if gpa > 0 {\n            letter = \"A+\"\n            if gpa > 3.0 {\n   \
    \             letter = \"A\"\n                if gpa > 2.3 {\n               \
    \     letter = \"A-\"\n                    if gpa > 1.7 {\n                  \
    \      letter = \"B+\"\n                        if gpa > 1.3 {\n             \
    \               letter = \"B\"\n                            if gpa > 0.7 {\n \
    \                               letter = \"B-\"\n                            \
    \    if gpa > 0.3 {\n                                    letter = \"C+\"\n   \
    \                                 if gpa > 0.1 {\n                           \
    \             letter = \"C\"\n                                        if gpa >\
    \ 0.0 {\n                                            letter = \"C-\"\n       \
    \                                     if gpa > -0.1 {\n                      \
    \                          letter = \"D+\"\n                                 \
    \               if gpa > -0.3 {\n                                            \
    \        letter = \"D\"\n                                                    if\
    \ gpa > -0.7 {\n                                                        letter\
    \ = \"D-\"\n                                                        if gpa > -1.0\
    \ {\n                                                            letter = \"E\"\
    \n                                                            result = append(result,\
    \ letter)\n                                                        }\n       \
    \                                             }\n                            \
    \                    }\n                                            }\n      \
    \                                  }\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \          result = append(result, letter)\n        }\n    }\n    return result\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n \
    \           letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"D-\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"B+\"\n        } else if grades[i] >= 4.7 && grades[i]\
    \ < 5.0 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.0 && grades[i] < 5.3 {\n            letter_grades[i] = \"A+\"\n       \
    \ } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n         \
    \   letter_grades[i] = \"A+\"\n        } else if grades[i] >= 6.0 {\n        \
    \    letter_grades[i] = \"A\"\n        }\n    }\n    return letter_grades\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSor", "    result := make([]string, len(grades))\n\
    \    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] < 3.0 {\n\
    \            result[i] = \"E\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 4.0 {\n            result[i] = \"D-\"\n            continue\n\
    \        }\n        \n        if grades[i] < 5.0 {\n            result[i] = \"\
    C+\"\n            continue\n        }\n        \n        if grades[i] < 6.0 {\n\
    \            result[i] = \"B-\"\n            continue\n        }\n        \n \
    \       if grades[i] < 7.0 {\n            result[i] = \"B+\"\n            continue\n\
    \        }\n        \n        if grades[i] < 8.0 {\n            result[i] = \"\
    A-\"\n            continue\n        }\n        \n        if grades[i] < 9.0 {\n\
    \            result[i] = \"A+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 10.0 {\n            result[i] = \"A-\"\n            continue\n\
    \        }\n        \n        if grades[i] < 11.0 {\n            result[i] = \"\
    A+\"\n            continue\n        }\n        \n        if grades[i] < 12.0 {\n\
    \            result[i] = \"B+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 13.0 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        \n        if grades[i] < 14.0 {\n            result[i] = \"\
    B-\"\n            continue\n        }\n        \n        if grades[i] < 15.0 {\n\
    \            result[i] = \"C+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 16.0 {\n            result[i] = \"C\"\n            continue\n\
    \        }\n        \n        if grades[i] < 17.0 {\n            result[i] = \"\
    C-\"\n            continue\n        }\n        \n        if grades[i] < 18.0 {\n\
    \            result[i] = \"D+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 19.0 {\n            result[i] = \"D\"\n            continue\n\
    \        }\n        \n        if grades[i] < 20.0 {\n            result[i] = \"\
    D-\"\n            continue\n        }\n        \n        if grades[i] < 21.0 {\n\
    \            result[i] = \"E\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 22.0 {\n            result[i] = \"F\"\n            continue\n\
    \        }\n        \n        if grades[i] < 23.0 {\n            result[i] = \"\
    F\"\n            continue\n        }\n        \n        if grades[i] < 24.0 {\n\
    \            result[i] = \"F\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 25.0 {\n            result[i] = \"F\"\n            continue\n\
    \        }\n        \n        if grades[i] < 26.0 {\n            result[i] = \"\
    F\"\n            continue\n        }\n        \n        if grades[i] < 27.0 {\n\
    \            result[i] = \"F\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 28.0 {\n            result[i] = \"F\"", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    \n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"C+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"B+\"\n \
    \       } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n  \
    \      } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n  \
    \      } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"C+\"\n  \
    \      } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"D+\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] < 3.3 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7 {\n   \
    \         letterGrades[i] = \"B+\"\n        } else if grades[i] < 4.0 {\n    \
    \        letterGrades[i] = \"B\"\n        } else if grades[i] < 4.3 {\n      \
    \      letterGrades[i] = \"A-\"\n        } else if grades[i] < 4.7 {\n       \
    \     letterGrades[i] = \"A\"\n        } else if grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] < 5.3 {\n          \
    \  letterGrades[i] = \"B+\"\n        } else if grades[i] < 5.7 {\n           \
    \ letterGrades[i] = \"B\"\n        } else if grades[i] < 6.0 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] < 6.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] < 6.7 {\n            letterGrades[i] = \"\
    B\"\n        } else if grades[i] < 7.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] < 7.3 {\n            letterGrades[i] = \"C\"\n \
    \       } else if grades[i] < 7.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] < 8.0 {\n            letterGrades[i] = \"C\"\n     \
    \   } else if grades[i] < 8.3 {\n            letterGrades[i] = \"C\"\n       \
    \ } else if grades[i] < 8.7 {\n            letterGrades[i] = \"C\"\n        }\
    \ else if grades[i] < 9.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] < 9.3 {\n            letterGrades[i] = \"C\"\n        } else if\
    \ grades[i] < 9.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i]\
    \ < 10.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] <\
    \ 10.3 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] < 10.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] < 11.",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    gradesIndex := 0\n    gradesCount := 0\n\
    \    gradesTotal := 0.0\n    gradesAverages := make([]float64, len(grades))\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesTotal += gradesSorted[i]\n\
    \        gradesAverages[gradesIndex] = gradesSorted[i]\n        gradesIndex++\n\
    \        gradesCount++\n    }\n\n    gradesAverages[gradesIndex] = gradesTotal\
    \ / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount = 0\n    gradesTotal\
    \ = 0.0\n    for i := 0; i < len(grades); i++ {\n        gradesTotal += gradesAverages[i]\n\
    \        gradesCount++\n        if gradesTotal >= gradesSorted[i] {\n        \
    \    gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex] = gradesTotal\
    \ / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount = 0\n    gradesTotal\
    \ = 0.0\n    for i := 0; i < len(grades); i++ {\n        gradesTotal += gradesAverages[i]\n\
    \        gradesCount++\n        if gradesTotal >= gradesSorted[i] {\n        \
    \    gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex] = gradesTotal\
    \ / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount = 0\n    gradesTotal\
    \ = 0.0\n    for i := 0; i < len(grades); i++ {\n        gradesTotal += gradesAverages[i]\n\
    \        gradesCount++\n        if gradesTotal >= gradesSorted[i] {\n        \
    \    gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex] = gradesTotal\
    \ / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount = 0\n    gradesTotal\
    \ = 0.0\n    for i := 0; i < len(grades); i++ {\n        gradesTotal += gradesAverages[i]\n\
    \        gradesCount++\n        if gradesTotal >= gradesSorted[i] {\n        \
    \    gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex] = gradesTotal\
    \ / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount = 0\n    gradesTotal\
    \ = 0.0\n    for i := 0; i < ", "    var result []string\n    var gpas []float64\n\
    \    for _, grade := range grades {\n        if grade > 0 {\n            gpas\
    \ = append(gpas, grade)\n        }\n    }\n    for _, gpa := range gpas {\n  \
    \      if gpa > 0 {\n            result := []string{\"\"}\n            switch\
    \ {\n            case gpa > 3.7:\n                result := append(result, \"\
    A+\")\n            case gpa > 3.3:\n                result := append(result, \"\
    A\")\n            case gpa > 3:\n                result := append(result, \"A-\"\
    )\n            case gpa > 2.7:\n                result := append(result, \"B+\"\
    )\n            case gpa > 2.3:\n                result := append(result, \"B\"\
    )\n            case gpa > 2:\n                result := append(result, \"B-\"\
    )\n            case gpa > 1.7:\n                result := append(result, \"C+\"\
    )\n            case gpa > 1.3:\n                result := append(result, \"C\"\
    )\n            case gpa > 1:\n                result := append(result, \"C-\"\
    )\n            case gpa > 0.7:\n                result := append(result, \"D+\"\
    )\n            case gpa > 0.3:\n                result := append(result, \"D\"\
    )\n            case gpa > 0:\n                result := append(result, \"D-\"\
    )\n            case gpa > 0.0:\n                result := append(result, \"E\"\
    )\n            }\n            result = append(result, \"\")\n        }\n    }\n\
    \    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    for i := 1; i < gradesLen; i++\
    \ {\n        if grades[i-1] > grades[i] {\n            letterGrades[i] = \"D-\"\
    \n        } else if grades[i-1] < grades[i] {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i-1] == grades[i] {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i-1] > grades[i] && grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i-1] > grades[i]\
    \ && grades[i-1] > grades[i] {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i-1] < grades[i] && grades[i-1] > grades[i] {\n           \
    \ letterGrades[i] = \"B-\"\n        } else if grades[i-1] < grades[i] && grades[i-1]\
    \ < grades[i] {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1]\
    \ == grades[i] && grades[i-1] > grades[i] {\n            letterGrades[i] = \"\
    B\"\n        } else if grades[i-1] == grades[i] && grades[i-1] < grades[i] {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i-1] == grades[i]\
    \ && grades[i-1] == grades[i] {\n            letterGrades[i] = \"A+\"\n      \
    \  } else if grades[i-1] == grades[i] && grades[i-1] > grades[i] {\n         \
    \   letterGrades[i] = \"A\"\n        } else if grades[i-1] == grades[i] && grades[i-1]\
    \ < grades[i] {\n            letterGrades[i] = \"A-\"\n        } else if grades[i-1]\
    \ == grades[i] && grades[i-1] == grades[i] {\n            letterGrades[i] = \"\
    A\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2] = \"D\"\
    \n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4] = \"C\"\
    \n    letterGrades[gradesLen-5] = \"B-\"\n    letterGrades[gradesLen-6] = \"B\"\
    \n    letterGrades[gradesLen-7] = \"A-\"\n    letterGrades[gradesLen-8] = \"A\"\
    \n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10] = \"\
    B+\"\n    letterGrades[gradesLen-11] = \"C+\"\n    letterGrades[gradesLen-12]\
    \ = \"D+\"\n    letterGrades[gradesLen-13] = \"D\"\n    letterGrades[gradesLen-14]\
    \ = \"C\"\n    letterGrades[gradesLen-15] = \"B\"\n    letterGrades[gradesLen-16]\
    \ = \"A\"\n    letterGrades[gradesLen-17] = \"A+\"\n    letterGrades[gradesLen-18]\
    \ = \"B+\"\n    letterGrades[gradesLen-19] = \"C+\"\n    letterGrades[gradesLen-20]\
    \ = \"D+\"\n    letterGrades[gradesLen-21] = \"D-\"\n    letterGrades[gradesLen-22]\
    \ = \"C-\"\n    letterGrades[gradesLen-23] = \"C\"\n    letterGrades[gradesLen-24]\
    \ = \"B-\"\n    letterGrades[gradesLen-25] = \"B\"\n    letterGrades[gradesLen-26]\
    \ = \"A-\"\n    letterGrades[gradesLen-27] = \"A\"\n    letterGrades[gradesLen-28]\
    \ = \"A+\"\n    letterGrades[gradesLen-29] = \"B+\"\n    letterGrades[gradesLen-30]\
    \ = \"C+\"\n    letterGrades[gradesLen-31] = \"D+\"\n    letterGrades[gradesLen-32]\
    \ = \"D\"\n    letterGrades[gradesLen-33] = \"C\"\n    letterGrades[gradesLen-34]\
    \ = \"B-\"\n    letterGrades[gradesLen-35] = \"B\"\n    letterGrades[gradesLen-",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n      \
    \      letter_grades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n     \
    \       letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n    \
    \        letter_grades[i] = \"B\"\n        } else if grades[i] >= 1.7 {\n    \
    \        letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.3 {\n   \
    \         letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.0 {\n   \
    \         letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n  \
    \          letter_grades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n", "    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] < 3.3 {\n            letterGrades[i] = \"C-\"\n \
    \       } else if grades[i] < 3.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] < 4.0 {\n            letterGrades[i] = \"B+\"\n    \
    \    } else if grades[i] < 4.3 {\n            letterGrades[i] = \"B\"\n      \
    \  } else if grades[i] < 4.7 {\n            letterGrades[i] = \"B-\"\n       \
    \ } else if grades[i] < 5.0 {\n            letterGrades[i] = \"A+\"\n        }\
    \ else if grades[i] < 5.3 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] < 5.7 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] < 6.0 {\n            letterGrades[i] = \"A\"\n        } else {\n \
    \           letterGrades[i] = \"A+\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    var result []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 3.0\n        }\n        if grade < 2.0\
    \ {\n            grade = grade - 2.0\n        }\n        if grade < 1.7 {\n  \
    \          grade = grade - 1.7\n        }\n        if grade < 1.0 {\n        \
    \    grade = grade - 1.0\n        }\n        if grade < 0.7 {\n            grade\
    \ = grade - 0.7\n        }\n        if grade < 0.3 {\n            grade = grade\
    \ - 0.3\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade > 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade > 1.0 {\n            grade = grade + 1.0\n        }\n \
    \       if grade > 2.0 {\n            grade = grade + 2.0\n        }\n       \
    \ if grade > 3.0 {\n            grade = grade + 3.0\n        }\n        if grade\
    \ > 3.7 {\n            grade = grade + 4.0\n        }\n        if grade > 4.0\
    \ {\n            grade = grade + 5.0\n        }\n        if grade > 5.0 {\n  \
    \          grade = grade + 6.0\n        }\n        if grade > 6.0 {\n        \
    \    grade = grade + 7.0\n        }\n        if grade > 7.0 {\n            grade\
    \ = grade + 8.0\n        }\n        if grade > 8.0 {\n            grade = grade\
    \ + 9.0\n        }\n        if grade > 9.0 {\n            grade = grade + 10.0\n\
    \        }\n        if grade > 10.0 {\n            grade = grade + 11.0\n    \
    \    }\n        if grade > 11.0 {\n            grade = grade + 12.0\n        }\n\
    \        if grade > 12.0 {\n            grade = grade + 13.0\n        }\n    \
    \    if grade > 13.0 {\n            grade = grade + 14.0\n        }\n        if\
    \ grade > 14.0 {\n            grade = grade + 15.0\n        }\n        if grade\
    \ > 15.0 {\n            grade = grade + 16.0\n        }\n        if grade > 16.0\
    \ {\n            grade = grade + 17.0\n        }\n        if grade > 17.0 {\n\
    \            grade = grade + 18.0\n        }\n        if grade > 18.0 {\n    \
    \        grade = grade + 19.0\n        }\n        if grade > 19.0 {\n        \
    \    grade = gra", "    grades := append([]float64{}, grades...)\n    grades =\
    \ append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(", "    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] <= 1.3 {\n       \
    \     letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.1 && grades[i]\
    \ <= 0.7 {\n            letter_grades[i] = \"C-\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 0.1 {\n            letter_grades[i] = \"D+\"\n      \
    \  } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D\"\n      \
    \  } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n", "    var grades_string []string\n    \n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    var grades_string\
    \ []string\n    for _, grade := range grades {\n        if grade > 3.0 {\n   \
    \         grades_string = append(grades_string, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            grades_string = append(grades_string, \"B\")\n        }\
    \ else if grade > 2.3 {\n            grades_string = append(grades_string, \"\
    B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{0.0}, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, grade", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    //\
    \ Loop through each grade and add it to the letter grades list\n    for i := 0;\
    \ i < grades_len; i++ {\n        letter_grades[i] = \"\"\n        \n        //\
    \ Loop through each letter grade and add it to the letter grades list\n      \
    \  for j := 0; j < len(letter_grades); j++ {\n            letter_grades[j] +=\
    \ letter_grades[j+1]\n        }\n        \n        // If the grade is greater\
    \ than or equal to 3.0 add \"A+\"\n        if grades[i] >= 3.0 {\n           \
    \ letter_grades[i] += \"A+\"\n        }\n        \n        // If the grade is\
    \ greater than or equal to 3.7 add \"A\"\n        if grades[i] >= 3.7 {\n    \
    \        letter_grades[i] += \"A\"\n        }\n        \n        // If the grade\
    \ is greater than or equal to 3.3 add \"A-\"\n        if grades[i] >= 3.3 {\n\
    \            letter_grades[i] += \"A-\"\n        }\n        \n        // If the\
    \ grade is greater than or equal to 3.0 add \"B+\"\n        if grades[i] >= 3.0\
    \ {\n            letter_grades[i] += \"B+\"\n        }\n        \n        // If\
    \ the grade is greater than or equal to 2.7 add \"B\"\n        if grades[i] >=\
    \ 2.7 {\n            letter_grades[i] += \"B\"\n        }\n        \n        //\
    \ If the grade is greater than or equal to 2.3 add \"B-\"\n        if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] += \"B-\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 2.0 add \"C+\"\n        if grades[i]\
    \ >= 2.0 {\n            letter_grades[i] += \"C+\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 1.7 add \"C\"\n        if grades[i]\
    \ >= 1.7 {\n            letter_grades[i] += \"C\"\n        }\n        \n     \
    \   // If the grade is greater than or equal to 1.3 add \"C-\"\n        if grades[i]\
    \ >= 1.3 {\n            letter_grades[i] += \"C-\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 1.0 add \"D+\"\n        if grades[i]\
    \ >= 1.0 {\n            letter_grades[i] += \"D+\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 0.7 add \"D\"\n        if grades[i]\
    \ >= 0.7 {\n            letter_grades[i] += \"D\"\n        }\n        \n     \
    \   // If the grade is greater than or equal to 0.0 add \"D-\"\n        if grades[i]\
    \ >= 0.0 {\n            letter_grades[i] += ", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2] = \"D\"\
    \n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4] = \"C\"\
    \n    letterGrades[gradesLen-5] = \"B-\"\n    letterGrades[gradesLen-6] = \"B\"\
    \n    letterGrades[gradesLen-7] = \"A-\"\n    letterGrades[gradesLen-8] = \"A\"\
    \n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10] = \"\
    B+\"\n    letterGrades[gradesLen-11] = \"C+\"\n    letterGrades[gradesLen-12]\
    \ = \"C\"\n    letterGrades[gradesLen-13] = \"B-\"\n    letterGrades[gradesLen-14]\
    \ = \"B\"\n    letterGrades[gradesLen-15] = \"A-\"\n    letterGrades[gradesLen-16]\
    \ = \"A\"\n    letterGrades[gradesLen-17] = \"A+\"\n    letterGrades[gradesLen-18]\
    \ = \"B+\"\n    letterGrades[gradesLen-19] = \"C+\"\n    letterGrades[gradesLen-20]\
    \ = \"C\"\n    letterGrades[gradesLen-21] = \"B-\"\n    letterGrades[gradesLen-22]\
    \ = \"B\"\n    letterGrades[gradesLen-23] = \"A-\"\n    letterGrades[gradesLen-24]\
    \ = \"A\"\n    letterGrades[gradesLen-25] = \"A+\"\n    letterGrades[gradesLen-26]\
    \ = \"B+\"\n    letterGrades[gradesLen-27] = \"C+\"\n    letterGrades[gradesLen-28]\
    \ = \"C\"\n    letterGrades[gradesLen-29] = \"B-\"\n    letterGrades[gradesLen-30]\
    \ = \"B\"\n    letterGrades[gradesLen-31] = \"A-\"\n    letterGrades[gradesLen-32]\
    \ = \"A\"\n    letterGrades[gradesLen-33] = \"A+\"\n    letterGrades[gradesLen-34]\
    \ = \"B+\"\n    letterGrades[gradesLen-35] = \"C+\"\n    letterGrades[gradesLen-",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   \n    // Loop through all the grades and find the letter grade\n    for i\
    \ := 0; i < gradesLen; i++ {\n        \n        // If the grade is greater than\
    \ or equal to 3.7\n        // then it is an A+\n        if grades[i] >= 3.7 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.3 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.0 {\n \
    \           letterGrades[i] = \"A-\"\n        } else if grades[i] >= 2.7 {\n \
    \           letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n \
    \           letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 {\n  \
    \          letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.3 {\n  \
    \          letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.0 {\n   \
    \         letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.7 {\n   \
    \         letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n   \
    \         letterGrades[i] = \"D\"\n        } else {\n            letterGrades[i]\
    \ = \"D-\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    sort.Float64s(grades)\n    for i := range\
    \ grades {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    grades", "    result := make([]string, len(grades))\n    i := 0\n  \
    \  for _, grade := range grades {\n        if grade > 3.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grade > 2.7 {\n            result[i] = \"B+\"\n\
    \        } else if grade > 2.3 {\n            result[i] = \"B\"\n        } else\
    \ if grade > 1.7 {\n            result[i] = \"C+\"\n        } else if grade >\
    \ 1.3 {\n            result[i] = \"C\"\n        } else if grade > 0.7 {\n    \
    \        result[i] = \"C-\"\n        } else if grade > 0.3 {\n            result[i]\
    \ = \"D+\"\n        } else if grade > 0.0 {\n            result[i] = \"D\"\n \
    \       } else if grade > -0.3 {\n            result[i] = \"D-\"\n        } else\
    \ if grade > -0.7 {\n            result[i] = \"E\"\n        } else {\n       \
    \     result[i] = \"F\"\n        }\n        i++\n    }\n    return result\n}\n",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The second letter grade is always B\n    letter_grades[1] = \"\
    B\"\n    \n    // The third letter grade is always C- \n    letter_grades[2] =\
    \ \"C-\"\n    \n    // The fourth letter grade is always C\n    letter_grades[3]\
    \ = \"C\"\n    \n    // The fifth letter grade is always A-\n    letter_grades[4]\
    \ = \"A-\"\n    \n    // The sixth letter grade is always D+\n    letter_grades[5]\
    \ = \"D+\"\n    \n    // The seventh letter grade is always D\n    letter_grades[6]\
    \ = \"D\"\n    \n    // The eighth letter grade is always D-\n    letter_grades[7]\
    \ = \"D-\"\n    \n    // The ninth letter grade is always E\n    letter_grades[8]\
    \ = \"E\"\n    \n    // The tenth letter grade is always E\n    letter_grades[9]\
    \ = \"E\"\n    \n    // The eleventh letter grade is always E\n    letter_grades[10]\
    \ = \"E\"\n    \n    // The twelfth letter grade is always E\n    letter_grades[11]\
    \ = \"E\"\n    \n    // The thirteenth letter grade is always E\n    letter_grades[12]\
    \ = \"E\"\n    \n    // The fourteenth letter grade is always E\n    letter_grades[13]\
    \ = \"E\"\n    \n    // The fifteenth letter grade is always E\n    letter_grades[14]\
    \ = \"E\"\n    \n    // The sixteenth letter grade is always E\n    letter_grades[15]\
    \ = \"E\"\n    \n    // The seventeenth letter grade is always E\n    letter_grades[16]\
    \ = \"E\"\n    \n    // The eighteenth letter grade is always E\n    letter_grades[17]\
    \ = \"E\"\n    \n    // The nineteenth letter grade is always E\n    letter_grades[18]\
    \ = \"E\"\n    \n    // The twentieth letter grade is always E\n    letter_grades[19]\
    \ = \"E\"\n    \n    // The twenty-first letter grade is always E\n    letter_grades[20]\
    \ = \"E\"\n    \n    // The twenty-second letter gra", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2] = \"D\"\
    \n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4] = \"C\"\
    \n    letterGrades[gradesLen-5] = \"B+\"\n    letterGrades[gradesLen-6] = \"B\"\
    \n    letterGrades[gradesLen-7] = \"B-\"\n    letterGrades[gradesLen-8] = \"B\"\
    \n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10] = \"\
    A\"\n    letterGrades[gradesLen-11] = \"A-\"\n    letterGrades[gradesLen-12] =\
    \ \"A\"\n    letterGrades[gradesLen-13] = \"+\"\n    letterGrades[gradesLen-14]\
    \ = \"A\"\n    letterGrades[gradesLen-15] = \"-\"\n    letterGrades[gradesLen-16]\
    \ = \"A\"\n    letterGrades[gradesLen-17] = \"+\"\n    letterGrades[gradesLen-18]\
    \ = \"A\"\n    letterGrades[gradesLen-19] = \"-\"\n    letterGrades[gradesLen-20]\
    \ = \"A\"\n    letterGrades[gradesLen-21] = \"+\"\n    letterGrades[gradesLen-22]\
    \ = \"A\"\n    letterGrades[gradesLen-23] = \"-\"\n    letterGrades[gradesLen-24]\
    \ = \"A\"\n    letterGrades[gradesLen-25] = \"+\"\n    letterGrades[gradesLen-26]\
    \ = \"A\"\n    letterGrades[gradesLen-27] = \"-\"\n    letterGrades[gradesLen-28]\
    \ = \"A\"\n    letterGrades[gradesLen-29] = \"+\"\n    letterGrades[gradesLen-30]\
    \ = \"A\"\n    letterGrades[gradesLen-31] = \"-\"\n    letterGrades[gradesLen-32]\
    \ = \"A\"\n    letterGrades[gradesLen-33] = \"+\"\n    letterGrades[gradesLen-34]\
    \ = \"A\"\n    letterGrades[gradesLen-35] = \"-\"\n    letterGrades[gradesLen-36]\
    \ = \"A\"\n    letterGrades[grades", "    grades_len := len(grades)\n    letterGrades\
    \ := make([]string, grades_len)\n    \n    // Calculate the average GPA\n    avg\
    \ := 0.0\n    for i := 0; i < grades_len; i++ {\n        avg += grades[i]\n  \
    \  }\n    avg /= float64(grades_len)\n\n    // Calculate the letter grade for\
    \ each GPA\n    for i := 0; i < grades_len; i++ {\n        if grades[i] > avg\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] < avg {\n\
    \            letterGrades[i] = \"A-\"\n        } else {\n            letterGrades[i]\
    \ = \"B+\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen :=\
    \ len(grades)\n    gradesMax := gradesLen - 1\n    gradesMin := 0\n    gradesSum,\
    \ gradesAvg := 0.0, 0.0\n    gradesGrade := \"\"\n    gradesLetterGrade := []string{}\n\
    \    for i := gradesMin; i <= gradesMax; i++ {\n        gradesSum += grades[i]\n\
    \        gradesAvg = gradesSum / float64(gradesLen)\n        if gradesAvg >= 4.0\
    \ {\n            gradesGrade = \"A+\"\n        } else if gradesAvg > 3.7 {\n \
    \           gradesGrade = \"A\"\n        } else if gradesAvg > 3.3 {\n       \
    \     gradesGrade = \"A-\"\n        } else if gradesAvg > 3.0 {\n            gradesGrade\
    \ = \"B+\"\n        } else if gradesAvg > 2.7 {\n            gradesGrade = \"\
    B\"\n        } else if gradesAvg > 2.3 {\n            gradesGrade = \"B-\"\n \
    \       } else if gradesAvg > 2.0 {\n            gradesGrade = \"C+\"\n      \
    \  } else if gradesAvg > 1.7 {\n            gradesGrade = \"C\"\n        } else\
    \ if gradesAvg > 1.3 {\n            gradesGrade = \"C-\"\n        } else if gradesAvg\
    \ > 1.0 {\n            gradesGrade = \"D+\"\n        } else if gradesAvg > 0.7\
    \ {\n            gradesGrade = \"D\"\n        } else if gradesAvg > 0.0 {\n  \
    \          gradesGrade = \"D-\"\n        } else {\n            gradesGrade = \"\
    E\"\n        }\n        gradesLetterGrade = append(gradesLetterGrade, gradesGrade)\n\
    \    }\n    return gradesLetterGrade\n}\n", "    grades := append([]float64{},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n \
    \   }\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7\
    \ {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n\
    \            letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n \
    \           letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n \
    \           letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n  \
    \          letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n  \
    \          letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n  \
    \          letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n   \
    \         letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    \n    return letterGrades\n}\n", "    result\
    \ := make([]string, len(grades))\n    for i := range grades {\n        if grades[i]\
    \ < 3.0 {\n            result[i] = \"E\"\n            continue\n        }\n  \
    \      if grades[i] < 4.0 {\n            result[i] = \"D+\"\n            continue\n\
    \        }\n        if grades[i] < 5.0 {\n            result[i] = \"D-\"\n   \
    \         continue\n        }\n        if grades[i] < 6.0 {\n            result[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 7.0 {\n  \
    \          result[i] = \"C\"\n            continue\n        }\n        if grades[i]\
    \ < 8.0 {\n            result[i] = \"B-\"\n            continue\n        }\n \
    \       if grades[i] < 9.0 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        if grades[i] < 10.0 {\n            result[i] = \"A-\"\n  \
    \          continue\n        }\n        if grades[i] < 11.0 {\n            result[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 12.0 {\n  \
    \          result[i] = \"A+\"\n            continue\n        }\n        result[i]\
    \ = \"A\"\n    }\n    return result\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-1])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-2])\n    gradesSorted = append(gradesSorted, grades[len(grades)-3])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-4])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-5])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-6])\n    gradesSorted = append(gradesSorted, grades[len(grades)-7])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-8])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-9])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-10])\n    gradesSorted = append(gradesSorted, grades[len(grades)-11])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-12])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-13])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-14])\n    gradesSorted = append(gradesSorted, grades[len(grades)-15])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-16])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-17])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-18])\n    gradesSorted = append(gradesSorted, grades[len(grades)-19])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-20])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-21])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-22])\n    gradesSorted = append(gradesSorted, grades[len(grades)-23])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-24])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-25])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-26])\n    gradesSorted = append(grades", "    gradesLen :=\
    \ len(grades)\n    result := make([]string, gradesLen)\n    \n    // The first\
    \ letter grade is A+\n    result[0] = \"A+\"\n    \n    // The second letter grade\
    \ is B\n    for i := 1; i < gradesLen; i++ {\n        // If the current grade\
    \ is greater than 3.7, then it is B+\n        if grades[i] > 3.7 {\n         \
    \   result[i] = \"B+\"\n        } else {\n            // If the current grade\
    \ is greater than 3.3, then it is B\n            if grades[i] > 3.3 {\n      \
    \          result[i] = \"B\"\n            } else {\n                // If the\
    \ current grade is greater than 3.0, then it is C+\n                if grades[i]\
    \ > 3.0 {\n                    result[i] = \"C+\"\n                } else {\n\
    \                    // If the current grade is greater than 2.7, then it is C\n\
    \                    if grades[i] > 2.7 {\n                        result[i] =\
    \ \"C\"\n                    } else {\n                        // If the current\
    \ grade is greater than 2.3, then it is C-\n                        if grades[i]\
    \ > 2.3 {\n                            result[i] = \"C-\"\n                  \
    \      } else {\n                            // If the current grade is greater\
    \ than 2.0, then it is D+\n                            if grades[i] > 2.0 {\n\
    \                                result[i] = \"D+\"\n                        \
    \    } else {\n                                // If the current grade is greater\
    \ than 1.7, then it is D\n                                if grades[i] > 1.7 {\n\
    \                                    result[i] = \"D\"\n                     \
    \           } else {\n                                    // If the current grade\
    \ is greater than 1.3, then it is D-\n                                    if grades[i]\
    \ > 1.3 {\n                                        result[i] = \"D-\"\n      \
    \                              } else {\n                                    \
    \    // If the current grade is greater than 1.0, then it is E\n             \
    \                           if grades[i] > 1.0 {\n                           \
    \                 result[i] = \"E\"\n                                        }\
    \ else {\n                                            // If the current grade\
    \ is greater than 0.0, then it is F\n                                        \
    \    if grades[i] > 0.0 {\n                                                result[i]\
    \ = \"F\"\n                                            } else {\n            \
    \                                    // If the current grade is greater than 0.0,\
    \ then it is F\n                                                if grades[i] >\
    \ 0.0 {\n                                                    result[i] = \"F\"\
    \n                                                }\n                        \
    \                    }\n                                        }\n          \
    \                          }\n                                }\n            \
    \                }\n                        }\n                    }\n       \
    \         }\n            }\n        }\n    }\n    \n    return result\n}\n", " \
    \   grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n       \
    \     letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"D-\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"C+\"\n       \
    \ } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 4.7 && grades[i]\
    \ < 5.0 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.0 && grades[i] < 5.3 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n        \
    \    letter_grades[i] = \"D\"\n        } else if grades[i] >= 6.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        }\n    }\n    return letter_grades\n}\n",
  "    var result []string\n    for _, grade := range grades {\n        if grade >\
    \ 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 3.0 {\n\
    \            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n      \
    \      grade = grade + 2.0\n        }\n        if grade < 1.7 {\n            grade\
    \ = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade = grade\
    \ + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade + 0.7\n\
    \        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n      \
    \  }\n        if grade < 0.1 {\n            grade = grade + 0.1\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade > 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ > 0.1 {\n            grade = grade + 0.1\n        }\n        if grade > 0.3\
    \ {\n            grade = grade + 0.3\n        }\n        if grade > 0.7 {\n  \
    \          grade = grade + 0.7\n        }\n        if grade > 1.0 {\n        \
    \    grade = grade + 1.0\n        }\n        if grade > 2.0 {\n            grade\
    \ = grade + 2.0\n        }\n        if grade > 3.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade > 4.0 {\n            grade = grade + 4.0\n\
    \        }\n        if grade > 5.0 {\n            grade = grade + 5.0\n      \
    \  }\n        if grade > 6.0 {\n            grade = grade + 6.0\n        }\n \
    \       if grade > 7.0 {\n            grade = grade + 7.0\n        }\n       \
    \ if grade > 8.0 {\n            grade = grade + 8.0\n        }\n        if grade\
    \ > 9.0 {\n            grade = grade + 9.0\n        }\n        if grade > 10.0\
    \ {\n            grade = grade + 10.0\n        }\n        if grade > 11.0 {\n\
    \            grade = grade + 11.0\n        }\n        if grade > 12.0 {\n    \
    \        grade = grade + 12.0\n        }\n        if grade > 13.0 {\n        \
    \    grade = grade + 13.0\n        }\n        if grade > 14.0 {\n            grade\
    \ = grade + 14.0\n        }\n        if grade > 15.0 {\n            grade = grade\
    \ + 15.0\n        }\n        if grade > 16.0 {\n            grade = grade + 16.0\n",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen\
    \ - 1] = \"D-\"\n    for i := 2; i < gradesLen; i++ {\n        if grades[i-1]\
    \ > grades[i] {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1]\
    \ < grades[i] {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1]\
    \ == grades[i] {\n            letterGrades[i] = \"A+\"\n        } else {\n   \
    \         letterGrades[i] = \"A\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount := 0\n    gradesTotal\
    \ := 0.0\n    for _, grade := range gradesSorted {\n        gradesCount++\n  \
    \      gradesTotal += grade\n    }\n\n    letterGrades := make([]string, gradesCount)\n\
    \    for i := 0; i < gradesCount; i++ {\n        letter := \"\"\n        if gradesTotal\
    \ >= gradesSorted[i] {\n            letter = \"A+\"\n            gradesTotal -=\
    \ gradesSorted[i]\n        } else {\n            if gradesTotal >= gradesSorted[i+1]\
    \ {\n                letter = \"A\"\n                gradesTotal -= gradesSorted[i+1]\n\
    \            } else {\n                if gradesTotal >= gradesSorted[i+2] {\n\
    \                    letter = \"A-\"\n                    gradesTotal -= gradesSorted[i+2]\n\
    \                } else {\n                    if gradesTotal >= gradesSorted[i+3]\
    \ {\n                        letter = \"B+\"\n                        gradesTotal\
    \ -= gradesSorted[i+3]\n                    } else {\n                       \
    \ if gradesTotal >= gradesSorted[i+4] {\n                            letter =\
    \ \"B\"\n                            gradesTotal -= gradesSorted[i+4]\n      \
    \                  } else {\n                            if gradesTotal >= gradesSorted[i+5]\
    \ {\n                                letter = \"B-\"\n                       \
    \         gradesTotal -= gradesSorted[i+5]\n                            } else\
    \ {\n                                if gradesTotal >= gradesSorted[i+6] {\n \
    \                                   letter = \"C+\"\n                        \
    \            gradesTotal -= gradesSorted[i+6]\n                              \
    \  } else {\n                                    if gradesTotal >= gradesSorted[i+7]\
    \ {\n                                        letter = \"C\"\n                \
    \                        gradesTotal -= gradesSorted[i+7]\n                  \
    \                  } else {\n                                        if gradesTotal\
    \ >= gradesSorted[i+8] {\n                                            letter =\
    \ \"C-\"\n                                            gradesTotal -= gradesSorted[i+8]\n\
    \                                        } else {\n                          \
    \                  if gradesTotal >= gradesSorted[i+9] {\n                   \
    \                             letter = \"D+\"\n                              \
    \                  gradesTotal -= gradesSorted[i+9]\n                        \
    \                    } else {\n                                              \
    \  if gradesTotal >= gradesSorted[i+10] {\n                                  \
    \                  letter = \"D\"\n                                          \
    \          gradesTotal -= gradesSorted[i+10]\n                               \
    \                 } else {\n                                                 \
    \   if gradesTotal >= gradesSorted[i+11] {\n                                 \
    \                       letter = \"D-\"\n                                    \
    \                    gradesTotal -= gradesSorted[i+11]\n                     \
    \                               } else {\n                                   \
    \                     if gradesTotal >= gradesSorted[i+12] {\n               \
    \                                             letter = \"E\"\n               \
    \                                             grade", "    var result []string\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            result\
    \ := append(result, fmt.Sprintf(\"A+\"))\n        } else if grade > 2.7 {\n  \
    \          result := append(result, fmt.Sprintf(\"B\"))\n        } else if grade\
    \ > 2.3 {\n            result := append(result, fmt.Sprintf(\"B-\"))\n       \
    \ } else if grade > 2.0 {\n            result := append(result, fmt.Sprintf(\"\
    C+\"))\n        } else if grade > 1.7 {\n            result := append(result,\
    \ fmt.Sprintf(\"C\"))\n        } else if grade > 1.3 {\n            result :=\
    \ append(result, fmt.Sprintf(\"C-\"))\n        } else if grade > 1.0 {\n     \
    \       result := append(result, fmt.Sprintf(\"D+\"))\n        } else if grade\
    \ > 0.7 {\n            result := append(result, fmt.Sprintf(\"D\"))\n        }\
    \ else if grade > 0.0 {\n            result := append(result, fmt.Sprintf(\"D-\"\
    ))\n        } else {\n            result := append(result, fmt.Sprintf(\"E\"))\n\
    \        }\n    }\n    return result\n}\n", "    grades_len := len(grades)\n \
    \   letter_grades := make([]string, grades_len)\n    \n    // The first letter\
    \ grade is A+\n    letter_grades[0] = \"A+\"\n    \n    // The second letter grade\
    \ is A if the GPA is > 3.7\n    letter_grades[1] = \"A\"\n    \n    // The third\
    \ letter grade is A if the GPA is > 3.3\n    letter_grades[2] = \"A-\"\n    \n\
    \    // The fourth letter grade is B+ if the GPA is > 2.7\n    letter_grades[3]\
    \ = \"B+\"\n    \n    // The fifth letter grade is B if the GPA is > 2.3\n   \
    \ letter_grades[4] = \"B\"\n    \n    // The sixth letter grade is B- if the GPA\
    \ is > 2.0\n    letter_grades[5] = \"B-\"\n    \n    // The seventh letter grade\
    \ is C+ if the GPA is > 1.7\n    letter_grades[6] = \"C+\"\n    \n    // The eighth\
    \ letter grade is C if the GPA is > 1.3\n    letter_grades[7] = \"C\"\n    \n\
    \    // The ninth letter grade is C- if the GPA is > 1.0\n    letter_grades[8]\
    \ = \"C-\"\n    \n    // The tenth letter grade is D+ if the GPA is > 0.7\n  \
    \  letter_grades[9] = \"D+\"\n    \n    // The eleventh letter grade is D if the\
    \ GPA is > 0.0\n    letter_grades[10] = \"D\"\n    \n    // The twelfth letter\
    \ grade is D- if the GPA is < 0.0\n    letter_grades[11] = \"D-\"\n    \n    //\
    \ The last letter grade is E if the GPA is 0.0\n    letter_grades[12] = \"E\"\n\
    \    \n    // The function should return a list of letter grades\n    // If the\
    \ GPA is less than 0.0 the function should return an empty list\n    // If the\
    \ GPA is greater than 1.0 the function should return an empty list\n    // If\
    \ the GPA is greater than or equal to 0.0 the function should return an empty\
    \ list\n    // If the GPA is less than or equal to 0.0 the function should return\
    \ an empty list\n    // If the GPA is less than or equal to 1.0 the function should\
    \ return an empty list\n    // If the GPA is greater than or equal to 1.0 the\
    \ function should return an empty list\n    \n    // The function should return\
    \ a list of letter grades\n    // If the GPA is less than 0.0 the function should\
    \ return an empty list\n    // If the GPA is greater than 1.0 ", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    //\
    \ The first letter grade is A+\n    letter_grades[0] = \"A+\"\n    \n    // The\
    \ second letter grade is A if GPA > 3.7\n    letter_grades[1] = \"A\"\n    \n\
    \    // The third letter grade is A if GPA > 3.3\n    letter_grades[2] = \"A-\"\
    \n    \n    // The fourth letter grade is B+ if GPA > 3.0\n    letter_grades[3]\
    \ = \"B+\"\n    \n    // The fifth letter grade is B if GPA > 2.7\n    letter_grades[4]\
    \ = \"B\"\n    \n    // The sixth letter grade is B if GPA > 2.3\n    letter_grades[5]\
    \ = \"B-\"\n    \n    // The seventh letter grade is C+ if GPA > 2.0\n    letter_grades[6]\
    \ = \"C+\"\n    \n    // The eighth letter grade is C if GPA > 1.7\n    letter_grades[7]\
    \ = \"C\"\n    \n    // The ninth letter grade is C if GPA > 1.3\n    letter_grades[8]\
    \ = \"C-\"\n    \n    // The tenth letter grade is D+ if GPA > 1.0\n    letter_grades[9]\
    \ = \"D+\"\n    \n    // The eleventh letter grade is D if GPA > 0.7\n    letter_grades[10]\
    \ = \"D\"\n    \n    // The twelfth letter grade is D if GPA > 0.0\n    letter_grades[11]\
    \ = \"D-\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[12]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[13]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[14]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[15]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[16]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[17]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[18]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n", "    grades :=\
    \ make([]float64, len(grades))\n    grades[0] = grades[0]\n    grades[len(grades)-1]\
    \ = grades[len(grades)-1]\n    \n    result := make([]string, len(grades))\n \
    \   \n    i := 0\n    for i < len(grades)-1 {\n        if grades[i] > grades[i+1]\
    \ {\n            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n\
    \            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n\
    \            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n\
    \            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n\
    \            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n\
    \            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n\
    \            result[i] = \"D+\"\n            i += 2\n        } else if grades[i]\
    \ < grades[i+1] {\n            result[i] = \"D-\"\n            i += 2\n      \
    \  } else {\n            result[i] = \"D\"\n            i += 1\n        }\n  \
    \  }\n    \n    for i < len(grades) {\n        if grades[i] > grades[i+1] {\n",
  "    grades_len := len(grades)\n    letters := make([]string, grades_len)\n    \n\
    \    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n      \
    \      letters[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n           \
    \ letters[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n            letters[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n        \
    \    letters[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7\
    \ {\n            letters[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letters[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n      \
    \      letters[i] = \"D\"\n        } else if grades[i] < 0.0 {\n            letters[i]\
    \ = \"D-\"\n        } else {\n            letters[i] = \"E\"\n        }\n    }\n\
    \    return letters\n}\n", "    gradesLen := len(grades)\n    letterGrades :=\
    \ make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if\
    \ grades[i] < 3.0 {\n            letterGrades[i] = \"E\"\n        } else if grades[i]\
    \ >= 3.0 && grades[i] < 3.7 {\n            letterGrades[i] = \"D+\"\n        }\
    \ else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n          \
    \  letterGrades[i] = \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] <\
    \ 4.6 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 4.6\
    \ && grades[i] < 4.9 {\n            letterGrades[i] = \"B-\"\n        } else if\
    \ grades[i] >= 4.9 && grades[i] < 5.2 {\n            letterGrades[i] = \"B\"\n\
    \        } else if grades[i] >= 5.2 && grades[i] < 5.5 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 5.5 && grades[i] < 5.8 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 5.8 && grades[i]\
    \ < 6.1 {\n            letterGrades[i] = \"A+\"\n        } else {\n          \
    \  letterGrades[i] = \"A\"\n        }\n    }\n    return letterGrades\n}\n", " \
    \   gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, ", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    result := make([]string, len(grades))\n    \n    // Write your code here\n\
    \    \n    return result\n}\n", "    result := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade > 3.0 {\n            grade = \"B+\"\n     \
    \   } else if grade > 2.7 {\n            grade = \"B\"\n        } else if grade\
    \ > 2.3 {\n            grade = \"B-\"\n        } else if grade > 2.0 {\n     \
    \       grade = \"C+\"\n        } else if grade > 1.7 {\n            grade = \"\
    C\"\n        } else if grade > 1.3 {\n            grade = \"C-\"\n        } else\
    \ if grade > 1.0 {\n            grade = \"D+\"\n        } else if grade > 0.7\
    \ {\n            grade = \"D\"\n        } else if grade > 0.0 {\n            grade\
    \ = \"D-\"\n        } else {\n            grade = \"E\"\n        }\n        result\
    \ = append(result, grade)\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, grade := range grades {\n        if grade >= 3.0 {\n            result\
    \ = append(result, fmt.Sprintf(\"A+\"))\n        } else if grade >= 2.7 {\n  \
    \          result = append(result, fmt.Sprintf(\"B\"))\n        } else if grade\
    \ >= 2.3 {\n            result = append(result, fmt.Sprintf(\"B-\"))\n       \
    \ } else if grade >= 2.0 {\n            result = append(result, fmt.Sprintf(\"\
    C+\"))\n        } else if grade >= 1.7 {\n            result = append(result,\
    \ fmt.Sprintf(\"C\"))\n        } else if grade >= 1.3 {\n            result =\
    \ append(result, fmt.Sprintf(\"C-\"))\n        } else if grade >= 1.0 {\n    \
    \        result = append(result, fmt.Sprintf(\"D+\"))\n        } else if grade\
    \ >= 0.7 {\n            result = append(result, fmt.Sprintf(\"D\"))\n        }\
    \ else if grade >= 0.0 {\n            result = append(result, fmt.Sprintf(\"D-\"\
    ))\n        } else {\n            result = append(result, fmt.Sprintf(\"E\"))\n\
    \        }\n    }\n    return result\n}\n", "    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n        \
    \    letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C+\"\n \
    \       } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"C\"\n  \
    \      } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"C-\"\n  \
    \      } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"D+\"\n  \
    \      } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    ", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 2; i < gradesLen; i++ {\n        if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    var letterGrades []string\n    for _, grade := range grades {\n   \
    \     if grade > 3.0 {\n            letterGrades = append(letterGrades, \"B+\"\
    )\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2] = \"D\"\
    \n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4] = \"C\"\
    \n    letterGrades[gradesLen-5] = \"B-\"\n    letterGrades[gradesLen-6] = \"B\"\
    \n    letterGrades[gradesLen-7] = \"A-\"\n    letterGrades[gradesLen-8] = \"A\"\
    \n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10] = \"\
    B+\"\n    letterGrades[gradesLen-11] = \"C+\"\n    letterGrades[gradesLen-12]\
    \ = \"C\"\n    letterGrades[gradesLen-13] = \"B-\"\n    letterGrades[gradesLen-14]\
    \ = \"B\"\n    letterGrades[gradesLen-15] = \"A-\"\n    letterGrades[gradesLen-16]\
    \ = \"A\"\n    letterGrades[gradesLen-17] = \"A+\"\n    letterGrades[gradesLen-18]\
    \ = \"B+\"\n    letterGrades[gradesLen-19] = \"C+\"\n    letterGrades[gradesLen-20]\
    \ = \"C\"\n    letterGrades[gradesLen-21] = \"B-\"\n    letterGrades[gradesLen-22]\
    \ = \"B\"\n    letterGrades[gradesLen-23] = \"A-\"\n    letterGrades[gradesLen-24]\
    \ = \"A\"\n    letterGrades[gradesLen-25] = \"A+\"\n    letterGrades[gradesLen-26]\
    \ = \"B+\"\n    letterGrades[gradesLen-27] = \"C+\"\n    letterGrades[gradesLen-28]\
    \ = \"C\"\n    letterGrades[gradesLen-29] = \"B-\"\n    letterGrades[gradesLen-30]\
    \ = \"B\"\n    letterGrades[gradesLen-31] = \"A-\"\n    letterGrades[gradesLen-32]\
    \ = \"A\"\n    letterGrades[gradesLen-33] = \"A+\"\n    letterGrades[gradesLen-34]\
    \ = \"B+\"\n    letterGrades[gradesLen-35] = \"C+\"\n    letterGrades[gradesLen-",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] < 3.3 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] < 4.0 {\n    \
    \        letterGrades[i] = \"B\"\n        } else if grades[i] < 4.3 {\n      \
    \      letterGrades[i] = \"A-\"\n        } else if grades[i] < 4.7 {\n       \
    \     letterGrades[i] = \"A\"\n        } else if grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := 0; i < len(grades); i++ {\n        if grades[i] <\
    \ 3.0 {\n            result[i] = \"E\"\n        } else {\n            switch {\n\
    \            case grades[i] >= 3.0:\n                result[i] = \"D+\"\n    \
    \        case grades[i] >= 2.7:\n                result[i] = \"D\"\n         \
    \   case grades[i] >= 2.3:\n                result[i] = \"C-\"\n            case\
    \ grades[i] >= 2.0:\n                result[i] = \"C\"\n            case grades[i]\
    \ >= 1.7:\n                result[i] = \"B+\"\n            case grades[i] >= 1.3:\n\
    \                result[i] = \"B\"\n            case grades[i] >= 1.0:\n     \
    \           result[i] = \"A+\"\n            case grades[i] >= 0.7:\n         \
    \       result[i] = \"A\"\n            case grades[i] >= 0.0:\n              \
    \  result[i] = \"A-\"\n            default:\n                result[i] = \"A+\"\
    \n            }\n        }\n    }\n    return result\n}\n", "    var letterGrades\
    \ []string\n    var gpas []float64\n    for _, grade := range grades {\n     \
    \   if grade > 3.0 {\n            gpas = append(gpas, grade)\n        }\n    }\n\
    \    for _, grade := range gpas{\n        if grade > 3.0 {\n            letterGrades\
    \ = append(letterGrades, \"A+\")\n        }\n        if grade > 2.7 {\n      \
    \      letterGrades = append(letterGrades, \"B\")\n        }\n        if grade\
    \ > 2.3 {\n            letterGrades = append(letterGrades, \"B-\")\n        }\n\
    \        if grade > 1.7 {\n            letterGrades = append(letterGrades, \"\
    C\")\n        }\n        if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        }\n        if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        }\n        if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        }\n        if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        }\n        if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    var grades_string\
    \ []string\n    for _, grade := range grades {\n        if grade > 3.0 {\n   \
    \         grades_string = append(grades_string, \"B+\")\n        } else if grade\
    \ > 2.7 {\n            grades_string = append(grades_string, \"B\")\n        }\
    \ else if grade > 2.3 {\n            grades_string = append(grades_string, \"\
    B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    // The\
    \ first letter grade is always A+\n    letter_grades[0] = \"A+\"\n    \n    //\
    \ The last letter grade is always D-\n    letter_grades[grades_len-1] = \"D-\"\
    \n    \n    // The middle letter grades are calculated using the formula\n   \
    \ // letter_grade = (GPA - lowest_grade) / highest_grade * 100\n    // The lowest\
    \ grade is always 0\n    lowest_grade := 0\n    \n    // The highest grade is\
    \ always 100\n    highest_grade := 100\n    \n    // The middle grade is calculated\
    \ using the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade\
    \ * 100\n    // The middle grade is always 0\n    middle_grade := 0\n    \n  \
    \  // The middle grade is calculated using the formula\n    // middle_grade =\
    \ (GPA - lowest_grade) / highest_grade * 100\n    // The middle grade is always\
    \ 0\n    middle_grade := 0\n    \n    // The middle grade is calculated using\
    \ the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade * 100\n\
    \    // The middle grade is always 0\n    middle_grade := 0\n    \n    // The\
    \ middle grade is calculated using the formula\n    // middle_grade = (GPA - lowest_grade)\
    \ / highest_grade * 100\n    // The middle grade is always 0\n    middle_grade\
    \ := 0\n    \n    // The middle grade is calculated using the formula\n    //\
    \ middle_grade = (GPA - lowest_grade) / highest_grade * 100\n    // The middle\
    \ grade is always 0\n    middle_grade := 0\n    \n    // The middle grade is calculated\
    \ using the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade\
    \ * 100\n    // The middle grade is always 0\n    middle_grade := 0\n    \n  \
    \  // The middle grade is calculated using the formula\n    // middle_grade =\
    \ (GPA - lowest_grade) / highest_grade * 100\n    // The middle grade is always\
    \ 0\n    middle_grade := 0\n    \n    // The middle grade is calculated using\
    \ the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade * 100\n\
    \    // The middle grade is always 0\n    middle_grade := 0\n    \n    // The\
    \ middle grade is calculated using the ", "    result := make([]string, len(grades))\n\
    \    \n    for i := range grades {\n        if grades[i] >= 4.0 {\n          \
    \  result[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n            result[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            result[i] = \"A-\"\
    \n        } else if grades[i] >= 3.0 {\n            result[i] = \"B+\"\n     \
    \   } else if grades[i] >= 2.7 {\n            result[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            result[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            result[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n   \
    \         result[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n         \
    \   result[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n            result[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            result[i] = \"D-\"\
    \n        } else {\n            result[i] = \"E\"\n        }\n    }\n    \n  \
    \  return result\n}\n", "    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    sort.Float64s(grades)\n    gradesSorted =\
    \ grades\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 1.0)\n    gradesSorted = append(gradesSorted, 2.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.0)\n    gradesSorted = append(gradesSorted, 3.7)\n    gradesSorted = append(gradesSorted,\
    \ 3.3)\n    gradesSorted = append(gradesSorted, 2.7)\n    gradesSorted = append(gradesSorted,\
    \ 2.3)\n    gradesSorted = append(gradesSorted, 2.0)\n    gradesSorted = append(gradesSorted,\
    \ 1.7)\n    gradesSorted = append(gradesSorted, 1.3)\n    gradesSorted = append(gradesSorted,\
    \ 1.0)\n    gradesSorted = append(gradesSorted, 0.7)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSor", "    gradesLen\
    \ := len(grades)\n    result := make([]string, gradesLen)\n    for i := 0; i <\
    \ gradesLen; i++ {\n        if grades[i] < 3.0 {\n            result[i] = \"E\"\
    \n            continue\n        }\n        if grades[i] < 3.3 {\n            result[i]\
    \ = \"D-\"\n            continue\n        }\n        if grades[i] < 3.7 {\n  \
    \          result[i] = \"C+\"\n            continue\n        }\n        if grades[i]\
    \ < 4.0 {\n            result[i] = \"B+\"\n            continue\n        }\n \
    \       if grades[i] < 4.3 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        if grades[i] < 4.7 {\n            result[i] = \"B-\"\n   \
    \         continue\n        }\n        if grades[i] < 5.0 {\n            result[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 5.3 {\n  \
    \          result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 5.7 {\n            result[i] = \"A-\"\n            continue\n        }\n \
    \       if grades[i] < 6.0 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 6.3 {\n            result[i] = \"A+\"\n   \
    \         continue\n        }\n        if grades[i] < 6.7 {\n            result[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 7.0 {\n   \
    \         result[i] = \"B+\"\n            continue\n        }\n        if grades[i]\
    \ < 7.3 {\n            result[i] = \"B\"\n            continue\n        }\n  \
    \      if grades[i] < 7.7 {\n            result[i] = \"B-\"\n            continue\n\
    \        }\n        if grades[i] < 8.0 {\n            result[i] = \"C+\"\n   \
    \         continue\n        }\n        if grades[i] < 8.3 {\n            result[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] < 8.7 {\n   \
    \         result[i] = \"C-\"\n            continue\n        }\n        if grades[i]\
    \ < 9.0 {\n            result[i] = \"C\"\n            continue\n        }\n  \
    \      if grades[i] < 9.3 {\n            result[i] = \"C+\"\n            continue\n\
    \        }\n        if grades[i] < 9.7 {\n            result[i] = \"C\"\n    \
    \        continue\n        }\n        if grades[i] < 10.0 {\n            result[i]\
    \ = \"D+\"\n            continue\n        }\n        if grades[i] < 10.3 {\n \
    \           result[i] = \"D\"\n            continue\n        }\n        if grades[i]\
    \ < 10.7 {\n            result[i] = \"D-\"\n            continue\n        }\n\
    \        if grades[i] < 11.0 {\n            result[i] = \"D\"\n            continue\n\
    \        }\n        if grades[i] < 11.3 {\n            result[i] = \"D+\"\n  \
    \          continue\n        }\n        if grades[i] < 11.7 {\n            result[i]\
    \ = \"D\"\n            continue\n        }\n        if grades[i] < 12.0 {\n  \
    \          result[i] = \"E", "    result := []string{}\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grade = grade - 3.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 3.0\n        }\n \
    \       if grade < 2.0 {\n            grade = grade - 2.0\n        }\n       \
    \ if grade < 1.7 {\n            grade = grade - 1.7\n        }\n        if grade\
    \ < 1.0 {\n            grade = grade - 1.0\n        }\n        if grade < 0.7\
    \ {\n            grade = grade - 0.7\n        }\n        if grade < 0.3 {\n  \
    \          grade = grade - 0.3\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < -0.3 {\n            grade\
    \ = grade + 0.3\n        }\n        if grade < -0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        if grade < -1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade < -2.0 {\n            grade = grade + 2.0\n     \
    \   }\n        if grade < -3.0 {\n            grade = grade + 3.0\n        }\n\
    \        if grade < -4.0 {\n            grade = grade + 4.0\n        }\n     \
    \   if grade < -5.0 {\n            grade = grade + 5.0\n        }\n        if\
    \ grade < -6.0 {\n            grade = grade + 6.0\n        }\n        if grade\
    \ < -7.0 {\n            grade = grade + 7.0\n        }\n        if grade < -8.0\
    \ {\n            grade = grade + 8.0\n        }\n        if grade < -9.0 {\n \
    \           grade = grade + 9.0\n        }\n        if grade < -10.0 {\n     \
    \       grade = grade + 10.0\n        }\n        if grade < -11.0 {\n        \
    \    grade = grade + 11.0\n        }\n        if grade < -12.0 {\n           \
    \ grade = grade + 12.0\n        }\n        if grade < -13.0 {\n            grade\
    \ = grade + 13.0\n        }\n        if grade < -14.0 {\n            grade = grade\
    \ + 14.0\n        }\n        if grade < -15.0 {\n            grade = grade + 15.0\n\
    \        }\n        if grade < -16.0 {\n            grade = grade + 16.0\n   \
    \     }\n        if grade < -17.0 {\n            grade = grade + 17.0\n      \
    \  }\n        if grade < -18.0 {\n            grade = grade + 18.0\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    sort.Float64s(grades)\n    gradesSorted\
    \ = grades\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n", "    grades := make([]float64, len(grades))\n    grades[0] = 4.0\n\
    \    grades[1] = 3.7\n    grades[2] = 3.3\n    grades[3] = 3.0\n    grades[4]\
    \ = 2.7\n    grades[5] = 2.3\n    grades[6] = 2.0\n    grades[7] = 1.7\n    grades[8]\
    \ = 1.3\n    grades[9] = 1.0\n    grades[10] = 0.7\n    grades[11] = 0.0\n   \
    \ grades[12] = 0.0\n    grades[13] = 0.0\n    grades[14] = 0.0\n    grades[15]\
    \ = 0.0\n    grades[16] = 0.0\n    grades[17] = 0.0\n    grades[18] = 0.0\n  \
    \  grades[19] = 0.0\n    grades[20] = 0.0\n    grades[21] = 0.0\n    grades[22]\
    \ = 0.0\n    grades[23] = 0.0\n    grades[24] = 0.0\n    grades[25] = 0.0\n  \
    \  grades[26] = 0.0\n    grades[27] = 0.0\n    grades[28] = 0.0\n    grades[29]\
    \ = 0.0\n    grades[30] = 0.0\n    grades[31] = 0.0\n    grades[32] = 0.0\n  \
    \  grades[33] = 0.0\n    grades[34] = 0.0\n    grades[35] = 0.0\n    grades[36]\
    \ = 0.0\n    grades[37] = 0.0\n    grades[38] = 0.0\n    grades[39] = 0.0\n  \
    \  grades[40] = 0.0\n    grades[41] = 0.0\n    grades[42] = 0.0\n    grades[43]\
    \ = 0.0\n    grades[44] = 0.0\n    grades[45] = 0.0\n    grades[46] = 0.0\n  \
    \  grades[47] = 0.0\n    grades[48] = 0.0\n    grades[49] = 0.0\n    grades[50]\
    \ = 0.0\n    grades[51] = 0.0\n    grades[52] = 0.0\n    grades[53] = 0.0\n  \
    \  grades[54] = 0.0\n    grades[55] = 0.0\n    grades[56] = 0.0\n    grades[57]\
    \ = 0.0\n    grades[58] = 0.0\n    grades[59] = 0.0\n    grades[60] = 0.0\n  \
    \  grades[61] = 0.0\n    grades[62] = 0.0\n    grades[63] = 0.0\n    grades[64]\
    \ = 0.0\n    grades[65] = 0.0\n    grades[66] = 0.0\n    grades[67] = 0.0\n  \
    \  grades[68] = 0.0\n    grades[69] = 0.0\n    grades[70] = 0.0\n    grades[71]",
  "    var grades_string []string\n    var gpas []float64\n    var letter string\n\
    \    var i int\n    for i = 0; i < len(grades); i++ {\n        gpas = append(gpas,\
    \ grades[i])\n    }\n    for i = 0; i < len(gpas); i++ {\n        if gpas[i] >\
    \ 3.0 {\n            letter = \"B+\"\n        } else if gpas[i] > 2.7 {\n    \
    \        letter = \"B\"\n        } else if gpas[i] > 2.3 {\n            letter\
    \ = \"B-\"\n        } else if gpas[i] > 2.0 {\n            letter = \"C+\"\n \
    \       } else if gpas[i] > 1.7 {\n            letter = \"C\"\n        } else\
    \ if gpas[i] > 1.3 {\n            letter = \"C-\"\n        } else if gpas[i] >\
    \ 1.0 {\n            letter = \"D+\"\n        } else if gpas[i] > 0.7 {\n    \
    \        letter = \"D\"\n        } else if gpas[i] > 0.0 {\n            letter\
    \ = \"D-\"\n        } else {\n            letter = \"E\"\n        }\n        grades_string\
    \ = append(grades_string, letter)\n    }\n    return grades_string\n}\n", "  \
    \  gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   \n    // The first letter grade is always A+\n    letterGrades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    // The middle letter grades are calculated using the formula\n\
    \    // GPA * 100 / GPA - 100\n    for i := 1; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = fmt.Sprintf(\"%+.2f\", grades[i]*100/grades[i-1]-100)\n    }\n    \n    return\
    \ letterGrades\n}\n", "    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    gradesMax := gradesLen - 1\n    gradesMin := 0\n    gradesSum,\
    \ gradesProduct, gradesAvg := 0, 0, 0\n    for i := 0; i < gradesLen; i++ {\n\
    \        gradesSum += grades[i]\n        gradesProduct *= grades[i]\n        gradesAvg\
    \ += grades[i]\n    }\n    gradesAvg /= float64(gradesLen)\n    gradesProduct\
    \ /= float64(gradesLen)\n    gradesSum /= float64(gradesLen)\n    gradesMax /=\
    \ float64(gradesLen)\n    gradesMin /= float64(gradesLen)\n    gradesMax += gradesMin\n\
    \    gradesSum -= gradesAvg\n    gradesProduct -= gradesAvg\n    gradesAvg /=\
    \ float64(gradesLen)\n    gradesProduct /= float64(gradesLen)\n    gradesSum /=\
    \ float64(gradesLen)\n    gradesMax /= float64(gradesLen)\n    gradesMin /= float64(gradesLen)\n\
    \    gradesMax += gradesMin\n    gradesSum -= gradesAvg\n    gradesProduct -=\
    \ gradesAvg\n    gradesAvg /= float64(gradesLen)\n    gradesProduct /= float64(gradesLen)\n\
    \    gradesSum /= float64(gradesLen)\n    gradesMax /= float64(gradesLen)\n  \
    \  gradesMin /= float64(gradesLen)\n    gradesMax += gradesMin\n    gradesSum\
    \ -= gradesAvg\n    gradesProduct -= gradesAvg\n    gradesAvg /= float64(gradesLen)\n\
    \    gradesProduct /= float64(gradesLen)\n    gradesSum /= float64(gradesLen)\n\
    \    gradesMax /= float64(gradesLen)\n    gradesMin /= float64(gradesLen)\n  \
    \  gradesMax += gradesMin\n    gradesSum -= gradesAvg\n    gradesProduct -= gradesAvg\n\
    \    gradesAvg /= float64(gradesLen)\n    gradesProduct /= float64(gradesLen)\n\
    \    gradesSum /= float64(gradesLen)\n    gradesMax /= float64(gradesLen)\n  \
    \  gradesMin /= float64(gradesLen)\n    gradesMax += gradesMin\n    grades", " \
    \   result := []string{}\n    \n    // The first letter grade is always A+\n \
    \   result := append(result, \"A+\")\n    \n    // The second letter grade is\
    \ always B\n    result := append(result, \"B\")\n    \n    // The third letter\
    \ grade is always C- \n    result := append(result, \"C-\")\n    \n    // The\
    \ fourth letter grade is always C\n    result := append(result, \"C\")\n    \n\
    \    // The fifth letter grade is always A-\n    result := append(result, \"A-\"\
    )\n    \n    // The sixth letter grade is always D+\n    result := append(result,\
    \ \"D+\")\n    \n    // The seventh letter grade is always D\n    result := append(result,\
    \ \"D\")\n    \n    // The eighth letter grade is always D-\n    result := append(result,\
    \ \"D-\")\n    \n    // The ninth letter grade is always E\n    result := append(result,\
    \ \"E\")\n    \n    return result\n}\n", "    gradesLen := len(grades)\n    gradesGPA\
    \ := make([]float64, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n      \
    \  gradesGPA[i] = grades[i]\n    }\n    gradesGPA[0] = gradesGPA[0] / 4.0\n  \
    \  gradesGPA[1] = gradesGPA[1] / 3.7\n    gradesGPA[2] = gradesGPA[2] / 3.3\n\
    \    gradesGPA[3] = gradesGPA[3] / 3.0\n    gradesGPA[4] = gradesGPA[4] / 2.7\n\
    \    gradesGPA[5] = gradesGPA[5] / 2.3\n    gradesGPA[6] = gradesGPA[6] / 2.0\n\
    \    gradesGPA[7] = gradesGPA[7] / 1.7\n    gradesGPA[8] = gradesGPA[8] / 1.3\n\
    \    gradesGPA[9] = gradesGPA[9] / 1.0\n    gradesGPA[10] = gradesGPA[10] / 0.7\n\
    \    gradesGPA[11] = gradesGPA[11] / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\
    \ / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1]\
    \ = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen]\
    \ / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen]\
    \ = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\
    \ / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1]\
    \ = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen]\
    \ / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen]\
    \ = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[grades",
  "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n \
    \   for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSor",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[1] = \"D-\"\n    letterGrades[2]\
    \ = \"D\"\n    letterGrades[3] = \"C-\"\n    letterGrades[4] = \"C\"\n    letterGrades[5]\
    \ = \"B-\"\n    letterGrades[6] = \"B\"\n    letterGrades[7] = \"A-\"\n    letterGrades[8]\
    \ = \"A+\"\n    letterGrades[9] = \"A\"\n    letterGrades[10] = \"B+\"\n    letterGrades[11]\
    \ = \"B\"\n    letterGrades[12] = \"C+\"\n    letterGrades[13] = \"C\"\n    letterGrades[14]\
    \ = \"D+\"\n    letterGrades[15] = \"D\"\n    letterGrades[16] = \"D-\"\n    letterGrades[17]\
    \ = \"E\"\n    letterGrades[18] = \"F\"\n    letterGrades[19] = \"F+\"\n    letterGrades[20]\
    \ = \"F\"\n    letterGrades[21] = \"F-\"\n    letterGrades[22] = \"F\"\n    letterGrades[23]\
    \ = \"F+\"\n    letterGrades[24] = \"F\"\n    letterGrades[25] = \"F-\"\n    letterGrades[26]\
    \ = \"F\"\n    letterGrades[27] = \"F+\"\n    letterGrades[28] = \"F\"\n    letterGrades[29]\
    \ = \"F-\"\n    letterGrades[30] = \"F\"\n    letterGrades[31] = \"F+\"\n    letterGrades[32]\
    \ = \"F\"\n    letterGrades[33] = \"F-\"\n    letterGrades[34] = \"F\"\n    letterGrades[35]\
    \ = \"F+\"\n    letterGrades[36] = \"F\"\n    letterGrades[37] = \"F-\"\n    letterGrades[38]\
    \ = \"F\"\n    letterGrades[39] = \"F+\"\n    letterGrades[40] = \"F\"\n    letterGrades[41]\
    \ = \"F-\"\n    letterGrades[42] = \"F\"\n    letterGrades[43] = \"F+\"\n    letterGrades[44]\
    \ = \"F\"\n    letterGrades[45] = \"F-\"\n    letterGrades[46] = \"F\"\n    letterGrades[47]\
    \ = \"F+\"\n    letterGrades[48] = \"F", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[gradesSorted\
    \ == 0] = -1.0\n    gradesSorted[gradesSorted < 0] = -1.0\n    gradesSorted[gradesSorted\
    \ > 0] = 0.0\n    gradesSorted[gradesSorted == -1.0] = 1.0\n    gradesSorted[gradesSorted\
    \ == 1.0] = 2.0\n    gradesSorted[gradesSorted == 2.0] = 3.0\n    gradesSorted[gradesSorted\
    \ == 3.0] = 4.0\n    gradesSorted[gradesSorted == 4.0] = 5.0\n    gradesSorted[gradesSorted\
    \ == 5.0] = 6.0\n    gradesSorted[gradesSorted == 6.0] = 7.0\n    gradesSorted[gradesSorted\
    \ == 7.0] = 8.0\n    gradesSorted[gradesSorted == 8.0] = 9.0\n    gradesSorted[gradesSorted\
    \ == 9.0] = 10.0\n    gradesSorted[gradesSorted == 10.0] = 11.0\n    gradesSorted[gradesSorted\
    \ == 11.0] = 12.0\n    gradesSorted[gradesSorted == 12.0] = 13.0\n    gradesSorted[gradesSorted\
    \ == 13.0] = 14.0\n    gradesSorted[gradesSorted == 14.0] = 15.0\n    gradesSorted[gradesSorted\
    \ == 15.0] = 16.0\n    gradesSorted[gradesSorted == 16.0] = 17.0\n    gradesSorted[gradesSorted\
    \ == 17.0] = 18.0\n    gradesSorted[gradesSorted == 18.0] = 19.0\n    gradesSorted[gradesSorted\
    \ == 19.0] = 20.0\n    gradesSorted[gradesSorted == 20.0] = 1.0\n    gradesSorted[gradesSorted\
    \ == -1.0] = 1.0\n    gradesSorted[gradesSorted == 1.0] = 2.0\n    gradesSorted[gradesSorted\
    \ == 2.0] = 3.0\n    gradesSorted[gradesSorted == 3.0] = 4.0\n    gradesSorted[gradesSorted\
    \ == 4.0] = 5.0\n    gradesSorted[gradesSorted == 5.0] = 6.0\n    gradesSorted[gradesSorted\
    \ == 6.0] = 7.0\n    gradesSorted[gradesSorted ", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    \n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B\"\n\
    \        } else if grades[i] >= 1.7 {\n            letter_grades[i] = \"C+\"\n\
    \        } else if grades[i] >= 1.3 {\n            letter_grades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n\
    \        } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n  \
    \  return letter_grades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    for i := range gradesSorted {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSortedSorted := make([]float64, len(gradesSorted))\n    sort.Float64s(gradesSorted)\n\
    \    gradesSortedSortedCopy := make([]float64, len(gradesSortedSorted))\n    copy(gradesSortedSortedCopy,\
    \ gradesSortedSorted)\n    gradesSortedSortedCopy = append(gradesSortedSortedCopy,\
    \ gradesSortedSorted[len(gradesSortedSorted)-1])\n    gradesSortedSortedCopy =\
    \ append(gradesSortedSortedCopy, gradesSortedSorted[0])\n    gradesSortedSortedCopy\
    \ = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n    gradesSortedSortedCopy\
    \ = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 4.0 && grades[i]\
    \ < 4.3 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 4.3 && grades[i] < 4.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 4.7 && grades[i] < 5.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 5.0 && grades[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 5.7 && grades[i]\
    \ < 6.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 6.0 {\n            letterGrades[i] = \"A+\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    gradesCount := 0\n    gradesTotal := 0.0\n    for _, grade := range gradesSorted\
    \ {\n        gradesCount += 1\n        gradesTotal += grade\n    }\n\n    gradesCount\
    \ -= 1 // remove last grade\n    gradesTotal -= gradesSorted[len(gradesSorted)-1]\n\
    \n    gradesGrades := make([]string, gradesCount)\n    for i := 0; i < gradesCount;\
    \ i++ {\n        gradesGrades[i] = fmt.Sprintf(\"%+.2f\", gradesSorted[i]/gradesTotal)\n\
    \    }\n\n    return gradesGrades\n}\n", "    gradesLen := len(grades)\n    gradesMax\
    \ := grades[gradesLen-1]\n    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-2]\n\
    \    gradesGrade := grades[gradesLen-3]\n    gradesGrades := []string{}\n    gradesGrades\
    \ = append(gradesGrades, \"A+\")\n    gradesGrades = append(gradesGrades, \"A\"\
    )\n    gradesGrades = append(gradesGrades, \"A-\")\n    gradesGrades = append(gradesGrades,\
    \ \"B+\")\n    gradesGrades = append(gradesGrades, \"B\")\n    gradesGrades =\
    \ append(gradesGrades, \"B-\")\n    gradesGrades = append(gradesGrades, \"C+\"\
    )\n    gradesGrades = append(gradesGrades, \"C\")\n    gradesGrades = append(gradesGrades,\
    \ \"C-\")\n    gradesGrades = append(gradesGrades, \"D+\")\n    gradesGrades =\
    \ append(gradesGrades, \"D\")\n    gradesGrades = append(gradesGrades, \"D-\"\
    )\n    gradesGrades = append(gradesGrades, \"E\")\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= gradesMax {\n            grades[i] = grades[i]\
    \ - gradesMax\n            gradesGrades = append(gradesGrades, \"D\")\n      \
    \  }\n        if grades[i] >= gradesMin {\n            grades[i] = grades[i] -\
    \ gradesMin\n            gradesGrades = append(gradesGrades, \"C\")\n        }\n\
    \        if grades[i] >= gradesAvg {\n            grades[i] = grades[i] - gradesAvg\n\
    \            gradesGrades = append(gradesGrades, \"B\")\n        }\n        if\
    \ grades[i] >= gradesGrade {\n            grades[i] = grades[i] - gradesGrade\n\
    \            gradesGrades = append(gradesGrades, \"A\")\n        }\n        if\
    \ grades[i] < gradesGrade {\n            grades[i] = grades[i] + gradesGrade\n\
    \            gradesGrades = append(gradesGrades, \"E\")\n        }\n    }\n  \
    \  return gradesGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = \"\"\n    }\n    \n    for i := gradesLen - 1; i >= 0; i-- {\n        if grades[i]\
    \ >= 3.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.7\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.3 {\n\
    \            letterGrades[i] = \"D-\"\n        } else if grades[i] >= 0.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    // Loop\
    \ through the grades and add them to the letter grades array\n    for i := 0;\
    \ i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n        \
    \    letter_grades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i]\
    \ < 2.7 {\n            letter_grades[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i]\
    \ < 1.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n         \
    \   letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"A+\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    var letterGrades []string\n    for _,\
    \ grade := range grades {\n        if grade > 3.0 {\n            letterGrades\
    \ = append(letterGrades, \"B+\")\n        } else if grade > 2.7 {\n          \
    \  letterGrades = append(letterGrades, \"B\")\n        } else if grade > 2.3 {\n\
    \            letterGrades = append(letterGrades, \"B-\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades = append(letterGrades, \"C+\")\n        }\
    \ else if grade > 1.7 {\n            letterGrades = append(letterGrades, \"C\"\
    )\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    var grades_string\
    \ []string\n    var gpas []float64\n    var letter string\n    var i int\n   \
    \ var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var\
    \ o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t\
    \ int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n\
    \    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n \
    \   var e int\n    var f int\n    var g int\n    var h int\n    var i int\n  \
    \  var j int\n    var k int\n    var l int\n    var m int\n    var n int\n   \
    \ var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var\
    \ t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y\
    \ int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n\
    \    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n \
    \   var j int\n    var k int\n    var l int\n    var m int\n    var n int\n  \
    \  var o int\n    var p int\n    var q int\n    var r int\n    var s int\n   \
    \ var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var\
    \ y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d\
    \ int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n\
    \    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n \
    \   var o int\n    var p int\n    var q int\n    var r int\n    var s int\n  \
    \  var t int\n    var u int\n    var v int\n    var w int\n    var x int\n   \
    \ var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var\
    \ d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i\
    \ int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n\
    \    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n \
    \   var t int\n    var u int\n    var v int\n    var w int\n    var x int\n  \
    \  var y int\n    var z int\n    var a int\n    var b ", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    sort.Float64s(grades)\n    for i := range\
    \ gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    for i := 1; i < gradesLen; i++ {\n\
    \        if grades[i] > grades[i-1] {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] < grades[i-1] {\n            letterGrades[i] = \"\
    D-\"\n        } else if grades[i] == grades[i-1] {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] > grades[i-1] && grades[i] < grades[i+1]\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] > grades[i-1]\
    \ && grades[i] != grades[i+1] {\n            letterGrades[i] = \"B+\"\n      \
    \  } else if grades[i] < grades[i-1] && grades[i] != grades[i+1] {\n         \
    \   letterGrades[i] = \"B\"\n        } else if grades[i] > grades[i-1] && grades[i]\
    \ != grades[i+1] {\n            letterGrades[i] = \"A-\"\n        } else if grades[i]\
    \ < grades[i-1] && grades[i] != grades[i+1] {\n            letterGrades[i] = \"\
    A+\"\n        } else {\n            letterGrades[i] = \"A\"\n        }\n    }\n\
    \    return letterGrades\n}\n", "    var letterGrades []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    gradesCount := 0\n    gradesTotal := 0.0\n    for _, grade := range gradesSorted\
    \ {\n        gradesCount += 1\n        gradesTotal += grade\n    }\n\n    gradesGrades\
    \ := make([]string, gradesCount)\n    for i := 0; i < gradesCount; i++ {\n   \
    \     gradesGrades[i] = fmt.Sprintf(\"%+.2f\", gradesSorted[i]/gradesTotal)\n\
    \    }\n\n    return gradesGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3]\
    \ = \"C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5]\
    \ = \"B-\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7]\
    \ = \"A-\"\n    letterGrades[gradesLen-8] = \"A\"\n    letterGrades[gradesLen-9]\
    \ = \"A+\"\n    letterGrades[gradesLen-10] = \"B+\"\n    letterGrades[gradesLen-11]\
    \ = \"C+\"\n    letterGrades[gradesLen-12] = \"C\"\n    letterGrades[gradesLen-13]\
    \ = \"B-\"\n    letterGrades[gradesLen-14] = \"B\"\n    letterGrades[gradesLen-15]\
    \ = \"A-\"\n    letterGrades[gradesLen-16] = \"A\"\n    letterGrades[gradesLen-17]\
    \ = \"A+\"\n    letterGrades[gradesLen-18] = \"B+\"\n    letterGrades[gradesLen-19]\
    \ = \"C+\"\n    letterGrades[gradesLen-20] = \"C\"\n    letterGrades[gradesLen-21]\
    \ = \"B-\"\n    letterGrades[gradesLen-22] = \"B\"\n    letterGrades[gradesLen-23]\
    \ = \"A-\"\n    letterGrades[gradesLen-24] = \"A\"\n    letterGrades[gradesLen-25]\
    \ = \"A+\"\n    letterGrades[gradesLen-26] = \"B+\"\n    letterGrades[gradesLen-27]\
    \ = \"C+\"\n    letterGrades[gradesLen-28] = \"C\"\n    letterGrades[gradesLen-29]\
    \ = \"B-\"\n    letterGrades[gradesLen-30] = \"B\"\n    letterGrades[gradesLen-31]\
    \ = \"A-\"\n    letterGrades[gradesLen-32] = \"A\"\n    letterGrades[gradesLen-33]\
    \ = \"A+\"\n    letterGrades[gradesLen-34] = \"B+\"\n    letterGrades[gradesLen-35]\
    \ = \"C+\"\n    letterGrades[gradesLen-", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade", "    var grades_string []string\n  \
    \  \n    // Loop through each grade and add it to the grades_string\n    for _,\
    \ grade := range grades {\n        if grade > 3.0 {\n            grades_string\
    \ = append(grades_string, \"B+\")\n        } else if grade > 2.7 {\n         \
    \   grades_string = append(grades_string, \"B\")\n        } else if grade > 2.3\
    \ {\n            grades_string = append(grades_string, \"B-\")\n        } else\
    \ if grade > 1.3 {\n            grades_string = append(grades_string, \"C+\")\n\
    \        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"E\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"A\")\n        }\n    }\n    \n    return grades_string\n}\n", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    //\
    \ The first letter grade is A+\n    letter_grades[0] = \"A+\"\n    \n    // The\
    \ last letter grade is D-\n    letter_grades[grades_len-1] = \"D-\"\n    \n  \
    \  // The middle letter grades are the letter grades using the formula\n    //\
    \ GPA - 2.7\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i] =\
    \ letter_grades[i-1] + \n            fmt.Sprintf(\"%+.2f\", grades[i] - 2.7)\n\
    \    }\n    \n    return letter_grades\n}\n", "    result := make([]string, len(grades))\n\
    \    i := 0\n    for _, grade := range grades {\n        if grade > 3.0 {\n  \
    \          result[i] = \"B+\"\n        } else if grade > 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grade > 2.3 {\n            result[i] = \"B-\"\n \
    \       } else if grade > 2.0 {\n            result[i] = \"C+\"\n        } else\
    \ if grade > 1.7 {\n            result[i] = \"C\"\n        } else if grade > 1.3\
    \ {\n            result[i] = \"C-\"\n        } else if grade > 1.0 {\n       \
    \     result[i] = \"D+\"\n        } else if grade > 0.7 {\n            result[i]\
    \ = \"D\"\n        } else if grade > 0.0 {\n            result[i] = \"D-\"\n \
    \       } else {\n            result[i] = \"E\"\n        }\n        i++\n    }\n\
    \    return result\n}\n", "    var grades_string []string\n    for _, grade :=\
    \ range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    grades_len :=\
    \ len(grades)\n    letters := make([]string, grades_len)\n    \n    // The first\
    \ letter must be A+\n    letters[0] = \"A+\"\n    \n    // The last letter must\
    \ be D-\n    letters[grades_len-1] = \"D-\"\n    \n    // The middle letters must\
    \ be A, B, C or D\n    for i := 0; i < grades_len/2; i++ {\n        if grades[i]\
    \ > 3.0 {\n            letters[i] = \"B+\"\n        } else if grades[i] >= 3.0\
    \ && grades[i] <= 3.7 {\n            letters[i] = \"B\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] <= 3.3 {\n            letters[i] = \"B-\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] <= 3.0 {\n            letters[i] = \"C+\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] <= 2.7 {\n            letters[i]\
    \ = \"C\"\n        } else if grades[i] >= 2.7 && grades[i] <= 2.3 {\n        \
    \    letters[i] = \"C-\"\n        } else if grades[i] >= 2.3 && grades[i] <= 2.0\
    \ {\n            letters[i] = \"D+\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ <= 1.7 {\n            letters[i] = \"D\"\n        } else if grades[i] >= 1.7\
    \ && grades[i] <= 1.3 {\n            letters[i] = \"D-\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] <= 1.0 {\n            letters[i] = \"E\"\n        }\n  \
    \  }\n    \n    return letters\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    //\
    \ Loop through the grades\n    for i := 0; i < gradesLen; i++ {\n        // If\
    \ the grade is greater than or equal to 3.7\n        if grades[i] >= 3.7 {\n \
    \           // If the grade is greater than or equal to 3.0\n            if grades[i]\
    \ >= 3.0 {\n                // If the grade is greater than or equal to 2.0\n\
    \                if grades[i] >= 2.0 {\n                    // If the grade is\
    \ greater than or equal to 1.0\n                    if grades[i] >= 1.0 {\n  \
    \                      // If the grade is greater than or equal to 0.7\n     \
    \                   if grades[i] >= 0.7 {\n                            // If the\
    \ grade is greater than or equal to 0.0\n                            if grades[i]\
    \ >= 0.0 {\n                                // If the grade is less than or equal\
    \ to 0.0\n                                if grades[i] <= 0.0 {\n            \
    \                        // If the grade is less than or equal to 0.7\n      \
    \                              if grades[i] <= 0.7 {\n                       \
    \                 // If the grade is less than or equal to 1.0\n             \
    \                           if grades[i] <= 1.0 {\n                          \
    \                  // If the grade is less than or equal to 2.0\n            \
    \                                if grades[i] <= 2.0 {\n                     \
    \                           // If the grade is less than or equal to 3.0\n   \
    \                                             if grades[i] <= 3.0 {\n        \
    \                                            // If the grade is less than or equal\
    \ to 4.0\n                                                    if grades[i] <=\
    \ 4.0 {\n                                                        // If the grade\
    \ is less than or equal to 5.0\n                                             \
    \           if grades[i] <= 5.0 {\n                                          \
    \                  // If the grade is less than or equal to 6.0\n            \
    \                                                if grades[i] <= 6.0 {\n     \
    \                                                           // If the grade is\
    \ less than or equal to 7.0\n                                                \
    \                if grades[i] <= 7.0 {\n                                     \
    \                               // If the grade is less than or equal to 8.0\n\
    \                                                                    if grades[i]\
    \ <= 8.0 {\n                                                                 \
    \       // If the grade is less than or equal to 9.0\n                       \
    \                                                 if grades[i] <= 9.0 {\n    \
    \                                                                        // If\
    \ the grade is less than or equal to 10.0\n                                  \
    \                                          if grades[i] <= 10.0 {\n          \
    \                                                                      // If the\
    \ grade is less than or equal to 11.0\n                                      \
    \                                          if grades[i] <= 11.0 {\n          \
    \                                                                          //\
    \ If the grade is less than or equal to 12.0\n                               \
    \                                                     if grades[i] <= 12.0 {\n\
    \                                                                            \
    \            // If the grade is less than or equal to 13.0\n                 \
    \                                                                       if grades[i]\
    \ <= 13.0 {\n                                                                \
    \                            // If the grade is less than or equal to 14.0\n \
    \                                                                            \
    \               if grades[i] <= 14.0 {\n                                     \
    \                                                           // If the grade is\
    \ less than or equal to 15.0\n                                               \
    \                                                 if grades[i] <= 15.0 {\n   \
    \                                                                            \
    \                     // If the grade is less than or equal to 16.0\n        \
    \                                                                            \
    \                if grades[i] <= 16.0 {\n                                    \
    \                                                                    // If the\
    \ grade is ", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    for i := 1; i < gradesLen; i++\
    \ {\n        letterGrades[i] = letterGrades[i-1] + \"+\"\n        if grades[i]\
    \ > grades[i-1] {\n            letterGrades[i] = letterGrades[i] + \"-\"\n   \
    \     }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen - 1] = \"D-\"\n    for\
    \ i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n    }\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.3 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    grades_string := []string{}\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted := gradesSorted[:len(grades)-1]\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, grades[0])\n    gradesSorted =\
    \ append(gradesSorted, grades[len(grades)-1])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-2])\n    gradesSorted = append(gradesSorted, grades[len(grades)-3])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-4])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-5])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-6])\n    gradesSorted = append(gradesSorted, grades[len(grades)-7])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-8])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-9])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-10])\n    gradesSorted = append(gradesSorted, grades[len(grades)-11])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-12])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-13])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-14])\n    gradesSorted = append(gradesSorted, grades[len(grades)-15])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-16])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-17])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-18])\n    gradesSorted = append(gradesSorted, grades[len(grades)-19])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-20])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-21])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-22])\n    gradesSorted = append(gradesSorted, grades[len(grades)-23])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-24])\n    grades",
  "    grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   \n    // The first letter grade is always A+\n    letterGrades[0] = \"A+\"\
    \n    \n    // The last letter grade is always E\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    // The middle letter grades are the letter grades using the\
    \ formula\n    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA -\
    \ 1.7\n    // GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n\
    \    for i := 1; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i-1]\
    \ + \n            string(grades[i-1] - grades[i-1]*float64(2.7)/float64(2.3)/float64(2.0)/float64(1.7)/float64(1.3)/float64(1.0)/float64(0.7)/float64(0.0))\n\
    \    }\n    \n    return letterGrades\n}\n", "    grades_count := len(grades)\n\
    \    letter_grades := make([]string, grades_count)\n    \n    // The first letter\
    \ grade is A+\n    letter_grades[0] = \"A+\"\n    \n    // The second letter grade\
    \ is B\n    letter_grades[1] = \"B\"\n    \n    // The third letter grade is C-\
    \ \n    letter_grades[2] = \"C-\"\n    \n    // The fourth letter grade is C\n\
    \    letter_grades[3] = \"C\"\n    \n    // The fifth letter grade is A-\n   \
    \ letter_grades[4] = \"A-\"\n    \n    // The sixth letter grade is D+\n    letter_grades[5]\
    \ = \"D+\"\n    \n    // The seventh letter grade is D\n    letter_grades[6] =\
    \ \"D\"\n    \n    // The eighth letter grade is D-\n    letter_grades[7] = \"\
    D-\"\n    \n    // The ninth letter grade is E\n    letter_grades[8] = \"E\"\n\
    \    \n    // The tenth letter grade is F\n    letter_grades[9] = \"F\"\n    \n\
    \    // The eleventh letter grade is F\n    letter_grades[10] = \"F\"\n    \n\
    \    // The twelfth letter grade is F\n    letter_grades[11] = \"F\"\n    \n \
    \   // The thirteenth letter grade is F\n    letter_grades[12] = \"F\"\n    \n\
    \    // The fourteenth letter grade is F\n    letter_grades[13] = \"F\"\n    \n\
    \    // The fifteenth letter grade is F\n    letter_grades[14] = \"F\"\n    \n\
    \    // The sixteenth letter grade is F\n    letter_grades[15] = \"F\"\n    \n\
    \    // The seventeenth letter grade is F\n    letter_grades[16] = \"F\"\n   \
    \ \n    // The eighteenth letter grade is F\n    letter_grades[17] = \"F\"\n \
    \   \n    // The nineteenth letter grade is F\n    letter_grades[18] = \"F\"\n\
    \    \n    // The twentieth letter grade is F\n    letter_grades[19] = \"F\"\n\
    \    \n    // The twenty-first letter grade is F\n    letter_grades[20] = \"F\"\
    \n    \n    // The twenty-second letter grade is F\n    letter_grades[21] = \"\
    F\"\n    \n    // The twenty-", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ grades[0])\n    gradesSorted = append(gradesSorted, grades[len(grades)-1])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-2])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-3])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-4])\n    gradesSorted = append(gradesSorted, grades[len(grades)-5])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-6])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-7])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-8])\n    gradesSorted = append(gradesSorted, grades[len(grades)-9])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-10])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-11])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-12])\n    gradesSorted = append(gradesSorted, grades[len(grades)-13])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-14])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-15])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-16])\n    gradesSorted = append(gradesSorted, grades[len(grades)-17])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-18])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-19])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-20])\n    gradesSorted = append(gradesSorted, grades[len(grades)-21])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-22])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-23])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-24])\n    gradesSorted = append(gradesSorted, grades[len(grades)-25])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grade", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen - 1] = \"D-\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i] = \"B+\"\n\
    \        } else if grades[i] < 3.3 {\n            letterGrades[i] = \"B\"\n  \
    \      } else if grades[i] < 3.7 {\n            letterGrades[i] = \"B-\"\n   \
    \     } else if grades[i] < 4.0 {\n            letterGrades[i] = \"A+\"\n    \
    \    } else if grades[i] < 4.3 {\n            letterGrades[i] = \"A\"\n      \
    \  } else if grades[i] < 4.7 {\n            letterGrades[i] = \"A-\"\n       \
    \ } else if grades[i] < 5.0 {\n            letterGrades[i] = \"C+\"\n        }\
    \ else if grades[i] < 5.3 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] < 5.7 {\n            letterGrades[i] = \"C-\"\n        } else if\
    \ grades[i] < 6.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i]\
    \ < 6.3 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] <\
    \ 6.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] <= 1.3 {\n       \
    \     letter_grades[i] = \"C+\"\n        } else if grades[i] >= 1.1 && grades[i]\
    \ <= 0.7 {\n            letter_grades[i] = \"C\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 0.1 {\n            letter_grades[i] = \"C-\"\n      \
    \  } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D+\"\n     \
    \   } else if grades[i] <= -0.1 {\n            letter_grades[i] = \"D\"\n    \
    \    } else if grades[i] <= -0.7 {\n            letter_grades[i] = \"D-\"\n  \
    \      } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return\
    \ letter_grades\n}\n", "    gradesSorted := make([]float64, len(grades))\n   \
    \ copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    grade", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSor",
  "    grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"A+\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    result := []string{}\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grade = grade - 3.0\n      \
    \  }\n        if grade < 2.0 {\n            grade = grade + 2.0\n        }\n \
    \       if grade < 1.0 {\n            grade = grade + 1.0\n        }\n       \
    \ if grade < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade\
    \ < 0.3 {\n            grade = grade + 0.3\n        }\n        if grade < 0.1\
    \ {\n            grade = grade + 0.1\n        }\n        if grade < 0.01 {\n \
    \           grade = grade + 0.01\n        }\n        if grade < 0.001 {\n    \
    \        grade = grade + 0.001\n        }\n        if grade < 0.0001 {\n     \
    \       grade = grade + 0.0001\n        }\n        if grade < 0.00001 {\n    \
    \        grade = grade + 0.00001\n        }\n        if grade < 0.000001 {\n \
    \           grade = grade + 0.0000001\n        }\n        if grade < 0.0000001\
    \ {\n            grade = grade + 0.00000001\n        }\n        if grade < 0.000000001\
    \ {\n            grade = grade + 0.000000001\n        }\n        if grade < 0.0000000001\
    \ {\n            grade = grade + 0.0000000001\n        }\n        if grade < 0.00000000001\
    \ {\n            grade = grade + 0.00000000001\n        }\n        if grade <\
    \ 0.000000000001 {\n            grade = grade + 0.000000000001\n        }\n  \
    \      if grade < 0.0000000000001 {\n            grade = grade + 0.0000000000001\n\
    \        }\n        if grade < 0.00000000000001 {\n            grade = grade +\
    \ 0.00000000000001\n        }\n        if grade < 0.000000000000001 {\n      \
    \      grade = grade + 0.000000000000001\n        }\n        if grade < 0.0000000000000001{\n\
    \            grade = grade + 0.0000000000000001\n        }\n        if grade <\
    \ 0.00000000000000001 {\n            grade = grade + 0.00000000000000001\n   \
    \     }\n        if grade < 0.000000000000000001{\n            grade = grade +\
    \ 0.000000000000000001\n        }\n        if grade < 0.0000000000000000001 {\n\
    \            grade = grade + 0.0000000000000000001\n        }\n        if grade\
    \ < 0.00000000000000000001 {\n            grade = grade + 0.00000000000000000001\n\
    \        }\n        if grade < 0.000000000000000000001 {\n            grade =\
    \ grade + 0.", "    grades_string := \"\"\n    for _, grade := range grades {\n\
    \        if grade > 3.0 {\n            grades_string += \"A+\"\n        } else\
    \ if grade > 2.7 {\n            grades_string += \"B+\"\n        } else if grade\
    \ > 2.3 {\n            grades_string += \"B\"\n        } else if grade > 1.7 {\n\
    \            grades_string += \"C+\"\n        } else if grade > 1.3 {\n      \
    \      grades_string += \"C\"\n        } else if grade > 1.0 {\n            grades_string\
    \ += \"D+\"\n        } else if grade > 0.7 {\n            grades_string += \"\
    D\"\n        } else if grade > 0.0 {\n            grades_string += \"D-\"\n  \
    \      } else {\n            grades_string += \"E\"\n        }\n    }\n    return\
    \ []string{grades_string}\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    gradesCount := 0\n    gradesSumOfGrades\
    \ := 0.0\n    for _, grade := range gradesSorted {\n        gradesCount += 1\n\
    \        gradesSumOfGrades += grade\n    }\n\n    gradesCount -= 1\n    gradesSumOfGrades\
    \ /= float64(gradesCount)\n\n    gradesLetters := make([]string, gradesCount)\n\
    \    for i := 0; i < gradesCount; i++ {\n        gradesLetters[i] = fmt.Sprintf(\"\
    %+.2f\", gradesSorted[i]/gradesSumOfGrades)\n    }\n\n    return gradesLetters\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted := append([]float64{},\
    \ gradesSorted...)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted\
    \ := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted, 0)\n  \
    \  gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(", "    var letter string\n    var gpa, sum float64\n\
    \    for _, grade := range grades {\n        gpa = grade\n        sum += gpa\n\
    \    }\n    if sum == 0.0 {\n        letter = \"E\"\n    } else {\n        if\
    \ gpa > 4.0 {\n            letter = \"A+\"\n        } else if gpa > 3.7 {\n  \
    \          letter = \"A\"\n        } else if gpa > 3.3 {\n            letter =\
    \ \"A-\"\n        } else if gpa > 3.0 {\n            letter = \"B+\"\n       \
    \ } else if gpa > 2.7 {\n            letter = \"B\"\n        } else if gpa > 2.3\
    \ {\n            letter = \"B-\"\n        } else if gpa > 2.0 {\n            letter\
    \ = \"C+\"\n        } else if gpa > 1.7 {\n            letter = \"C\"\n      \
    \  } else if gpa > 1.3 {\n            letter = \"C-\"\n        } else if gpa >\
    \ 1.0 {\n            letter = \"D+\"\n        } else if gpa > 0.7 {\n        \
    \    letter = \"D\"\n        } else if gpa > 0.0 {\n            letter = \"D-\"\
    \n        } else {\n            letter = \"E\"\n        }\n    }\n    return []string{letter}\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(grade", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    //\
    \ The first letter grade is always A+\n    letter_grades[0] = \"A+\"\n    \n \
    \   // The last letter grade is always E\n    letter_grades[grades_len-1] = \"\
    E\"\n    \n    // The grades are sorted in descending order\n    for i := grades_len-2;\
    \ i >= 0; i-- {\n        if grades[i] >= 3.0 {\n            letter_grades[i+1]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i+1]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i+1]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 {\n            letter_grades[i+1]\
    \ = \"C+\"\n        } else if grades[i] >= 1.3 {\n            letter_grades[i+1]\
    \ = \"C\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i+1]\
    \ = \"C-\"\n        } else if grades[i] >= 0.3 {\n            letter_grades[i+1]\
    \ = \"D+\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i+1]\
    \ = \"D\"\n        } else {\n            letter_grades[i+1] = \"D-\"\n       \
    \ }\n    }\n    return letter_grades\n}\n", "    gradesLen := len(grades)\n  \
    \  letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++\
    \ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n   \
    \     } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n    \
    \    } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n    \
    \    } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n     \
    \   } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n     \
    \   } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n     \
    \   } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n      \
    \  } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n      \
    \  } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    \n    for i := 1; i < gradesLen;\
    \ i++ {\n        if grades[i-1] <= 3.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i-1] > 3.0 && grades[i-1] <= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i-1] > 3.7 && grades[i-1] <= 3.3 {\n     \
    \       letterGrades[i] = \"A-\"\n        } else if grades[i-1] > 3.3 && grades[i-1]\
    \ <= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1]\
    \ > 3.0 && grades[i-1] <= 2.7 {\n            letterGrades[i] = \"B\"\n       \
    \ } else if grades[i-1] > 2.7 && grades[i-1] <= 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i-1] > 2.3 && grades[i-1] <= 2.0 {\n    \
    \        letterGrades[i] = \"C+\"\n        } else if grades[i-1] > 2.0 && grades[i-1]\
    \ <= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i-1]\
    \ > 1.7 && grades[i-1] <= 1.3 {\n            letterGrades[i] = \"C-\"\n      \
    \  } else if grades[i-1] > 1.3 && grades[i-1] <= 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i-1] > 1.0 && grades[i-1] <= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i-1] > 0.7 && grades[i-1]\
    \ <= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n         \
    \   letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    \n   \
    \ \n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n\
    \            letterGrades[i] = \"E\"\n            continue\n        }\n      \
    \  \n        \n        if grades[i] > 3.0 {\n            letterGrades[i] = \"\
    D-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 2.7 {\n            letterGrades[i] = \"C-\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"B+\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"A+\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"A\"\n            continue\n       \
    \ }\n        \n        \n        if grades[i] < 0.3 {\n            letterGrades[i]\
    \ = \"A-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 0.0 {\n            letterGrades[i] = \"A\"\n            continue\n       \
    \ }\n        \n        \n        if grades[i] < -3.0 {\n            letterGrades[i]\
    \ = \"D+\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -2.7 {\n            letterGrades[i] = \"C\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -2.3 {\n            letterGrades[i]\
    \ = \"B\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.7 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -1.3 {\n            letterGrades[i]\
    \ = \"A-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.0 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -1.7 {\n            letterGrades[i]\
    \ = \"A\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.3 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -1.0 {\n            letterGrades[i]\
    \ = \"A\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.7 {\n            letterGrade", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSor",
  "    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade + 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < -3.0 {\n            grade = grade - 3.0\n        }\n\
    \        if grade < -2.0 {\n            grade = grade - 2.0\n        }\n     \
    \   if grade < -1.7 {\n            grade = grade - 1.7\n        }\n        if\
    \ grade < -1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ < -0.7 {\n            grade = grade - 0.7\n        }\n        if grade < -0.3\
    \ {\n            grade = grade - 0.3\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade > 3.0 {\n        \
    \    grade = grade - 3.0\n        }\n        if grade > 2.0 {\n            grade\
    \ = grade - 2.0\n        }\n        if grade > 1.7 {\n            grade = grade\
    \ - 1.7\n        }\n        if grade > 1.0 {\n            grade = grade - 1.0\n\
    \        }\n        if grade > 0.7 {\n            grade = grade - 0.7\n      \
    \  }\n        if grade > 0.3 {\n            grade = grade - 0.3\n        }\n \
    \       if grade > 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade\
    \ > 2.0 {\n            grade = grade - 2.0\n        }\n        if grade > 1.7\
    \ {\n            grade = grade - 1.7\n        }\n        if grade > 1.0 {\n  \
    \          grade = grade - 1.0\n        }\n        if grade > 0.7 {\n        \
    \    grade = grade - 0.7\n        }\n        if grade > 0.3 {\n            grade\
    \ = grade - 0.3\n        }\n        if grade > 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if ", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    result := make([]string, len(grades))\n\
    \    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 3.0 {\n\
    \            result[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n      \
    \      result[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 {\n            result[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n     \
    \   } else if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.3 {\n            result[i] = \"D-\"\n        } else if grades[i]\
    \ >= 0.0 {\n            result[i] = \"E\"\n        } else {\n            result[i]\
    \ = \"F\"\n        }\n    }\n    \n    return result\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    ", "    grades := make([]float64, len(grades))\n\
    \    for i := 0; i < len(grades); i++ {\n        grades[i] = grades[i]\n    }\n\
    \    grades[len(grades)-1] = grades[len(grades)-1]\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The middle letter grades are the letter grades using the\
    \ table\n    // above and the GPA of the student\n    for i := 0; i < grades_len;\
    \ i++ {\n        letter_grades[i] = letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            ", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\
    \n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n        \
    \    letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\
    \n        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n  \
    \  return letterGrades\n}\n", "    var result []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grade = grade - 3.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 3.0\n        }\n \
    \       if grade < 2.0 {\n            grade = grade - 2.0\n        }\n       \
    \ if grade < 1.7 {\n            grade = grade - 1.7\n        }\n        if grade\
    \ < 1.0 {\n            grade = grade - 1.0\n        }\n        if grade < 0.7\
    \ {\n            grade = grade - 0.7\n        }\n        if grade < 0.3 {\n  \
    \          grade = grade - 0.3\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade > 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade > 1.0 {\n            grade = grade\
    \ + 1.0\n        }\n        if grade > 1.7 {\n            grade = grade + 1.7\n\
    \        }\n        if grade > 2.0 {\n            grade = grade + 2.0\n      \
    \  }\n        if grade > 2.3 {\n            grade = grade + 2.3\n        }\n \
    \       if grade > 2.7 {\n            grade = grade + 2.7\n        }\n       \
    \ if grade > 3.0 {\n            grade = grade + 3.0\n        }\n        if grade\
    \ > 3.7 {\n            grade = grade + 3.7\n        }\n        if grade > 4.0\
    \ {\n            grade = grade + 4.0\n        }\n        if grade > 4.7 {\n  \
    \          grade = grade + 4.7\n        }\n        if grade > 5.0 {\n        \
    \    grade = grade + 5.0\n        }\n        if grade > 5.7 {\n            grade\
    \ = grade + 5.7\n        }\n        if grade > 6.0 {\n            grade = grade\
    \ + 6.0\n        }\n        if grade > 6.7 {\n            grade = grade + 6.7\n\
    \        }\n        if grade > 7.0 {\n            grade = grade + 7.0\n      \
    \  }\n        if grade > 7.7 {\n            grade = grade + 7.7\n        }\n \
    \       if grade > 8.0 {\n            grade = grade + 8.0\n        }\n       \
    \ if grade > 8.7 {\n            grade = grade + 8.7\n        }\n        if grade\
    \ > 9.0 {\n            grade = grade + 9.0\n        }\n        if grade > 9.7\
    \ {\n            grade = grade + 9.7\n        }\n        if grade "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
