name: HumanEval_34_unique
language: go_test.go
prompt: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0,\
  \ 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n"
tests: "func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
  \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for\
    \ _, v := range l {\n        if !seen[v] {\n            result = append(result,\
    \ v)\n            seen[v] = true\n        }\n    }\n    return result\n}\n", " \
    \   seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v :=\
    \ range l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range\
    \ l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    seen := map[int]bool{}\n    result := []int{}\n    for _, v := range l {\n\
    \        if seen[v] {\n            continue\n        }\n        seen[v] = true\n\
    \        result = append(result, v)\n    }\n    return result\n}\n", "    seen\
    \ := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v := range l\
    \ {\n        if seen[v] {\n            continue\n        }\n        seen[v] =\
    \ true\n        result = append(result, v)\n    }\n    return result\n}\n", " \
    \   s := make(map[int]bool)\n    for _, v := range l {\n        if _, ok := s[v];\
    \ !ok {\n            s[v] = true\n            l = append(l, v)\n        }\n  \
    \  }\n    return l\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l {\n        if seen[v] {\n            continue\n     \
    \   }\n        seen[v] = true\n        result = append(result, v)\n    }\n   \
    \ return result\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    s := make([]int, len(l))\n    i := 0\n    for _,\
    \ v := range l {\n        if v != s[i] {\n            s[i] = v\n        }\n  \
    \      i++\n    }\n    return s[:i]\n}\n", "    seen := make(map[int]bool)\n \
    \   result := make([]int, 0)\n    for _, v := range l {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return result\n}\n", "    seen := map[int]bool{}\n    result\
    \ := []int{}\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if !seen[v] {\n            seen[v] =\
    \ true\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    seen := make(map[int]bool)\n    result := make([]int, 0, len(l))\n\
    \    for _, v := range l {\n        if seen[v] {\n            continue\n     \
    \   }\n        seen[v] = true\n        result = append(result, v)\n    }\n   \
    \ return result\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    seen := make(map[int]bool)\n    result := make([]int,\
    \ 0)\n    for _, v := range l {\n        if seen[v] {\n            continue\n\
    \        }\n        seen[v] = true\n        result = append(result, v)\n    }\n\
    \    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
