name: HumanEval_48_is_palindrome
language: go_test.go
prompt: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n\
  // >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n\
  // >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\n"
tests: "func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
  \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"), expected:\
  \ true },\n     { actual: candidate(\"zbcd\"), expected: false },\n     { actual:\
  \ candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"xywyz\"),\
  \ expected: false },\n     { actual: candidate(\"xywzx\"), expected: false },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    length := len(text)\n    if length < 2 {\n        return true\n\
    \    }\n    if length == 1 {\n        return text == text[:1]\n    }\n    if length\
    \ == 2 {\n        return text == text[:1] + text[1:]\n    }\n    i := 0\n    j\
    \ := length-1\n    for i < j {\n        if text[i] != text[j] {\n            return\
    \ false\n        }\n        i++\n        j--\n    }\n    return true\n}\n", " \
    \   if len(text) < 2 {\n        return true\n    }\n    if text[0] != text[len(text)-1]\
    \ {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n", "    text := strings.ToLower(text)\n    length := len(text)\n    if length\
    \ < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n   \
    \ middle := length/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n", "    text := strings.ToLower(text)\n    for i := 0;\
    \ i < len(text)/2; i++ {\n        if text[i] != text[len(text)-1-i] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n", "    text := strings.ToLower(text)\n\
    \    length := len(text)\n    if length < 2 {\n        return true\n    }\n  \
    \  start := 0\n    end := length / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n", "    text := strings.ToLower(text)\n\
    \    length := len(text)\n    if length == 0 {\n        return true\n    }\n \
    \   if length == 1 {\n        return text == text[0:length]\n    }\n    start\
    \ := 0\n    end := length-1\n    for start < end {\n        if text[start] !=\
    \ text[end] {\n            return false\n        }\n        start++\n        end--\n\
    \    }\n    return true\n}\n", "    text := strings.ToLower(text)\n    text :=\
    \ strings.Trim(text, \" \")\n    text := strings.Replace(text, \" \", \"\", -1)\n\
    \    text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"%\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"#\", \"\", -1)\n    text := strings.Replace(text, \"$\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"+\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"%\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"#\", \"\", -1)\n    text := strings.Replace(text, \"$\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"+\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace", " \
    \   if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n  \
    \  last := text[len(text)-1]\n    return first == last\n}\n", "    text := strings.ToLower(text)\n\
    \    for i := 0; i < len(text)/2; i++ {\n        if text[i] != text[len(text)-1-i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    text\
    \ := strings.ToLower(text)\n    length := len(text)\n    start := 0\n    end :=\
    \ length-1\n    \n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n", "    if len(text) == 0 {\n        return\
    \ true\n    }\n\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n\n    return true\n}\n", "    text :=\
    \ strings.ToLower(text)\n    length := len(text)\n    if length < 2 {\n      \
    \  return true\n    }\n    start := 0\n    end := length-1\n    middle := (start\
    \ + end) / 2\n    for start < end {\n        if text[middle] != text[start] {\n\
    \            return false\n        }\n        start++\n        end--\n       \
    \ middle = (start + end) / 2\n    }\n    return true\n}\n", "    text := strings.ToLower(text)\n\
    \    length := len(text)\n    start := 0\n    end := length-1\n    \n    // Check\
    \ if string length is even\n    if length % 2 == 0 {\n        // If length is\
    \ even, check if first and last chars are equal\n        if text[start] == text[end]\
    \ {\n            return true\n        }\n    }\n    \n    // Check if string length\
    \ is odd\n    if length % 2 == 1 {\n        // If length is odd, check if first\
    \ and last chars are different\n        if text[start] != text[end] {\n      \
    \      return true\n        }\n    }\n    \n    // Loop through string and check\
    \ if chars are equal\n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n", "    text := strings.ToLower(text)\n    length :=\
    \ len(text)\n    if length == 0 {\n        return true\n    }\n    if length ==\
    \ 1 {\n        return text == text[0:length]\n    }\n    start := 0\n    end :=\
    \ length-1\n    middle := (start + end) / 2\n    for start < end {\n        if\
    \ text[middle] != text[middle+1] {\n            return false\n        }\n    \
    \    middle++\n    }\n    return true\n}\n", "    if len(text) <= 1 {\n      \
    \  return true\n    }\n\n    left, right := 0, len(text) - 1\n    for left < right\
    \ {\n        if text[left] != text[right] {\n            return false\n      \
    \  }\n        left++\n        right--\n    }\n\n    return true\n}\n", "    text\
    \ := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n    \n \
    \   for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        \n        start++\n        end--\n    }\n    \n  \
    \  return true\n}\n", "    if len(text) <= 1 {\n        return true\n    }\n \
    \   left := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n\
    \    for left < right {\n        if text[left] != text[right] {\n            return\
    \ false\n        }\n        left++\n        right--\n    }\n    return true\n\
    }\n", "    if len(text) == 0 {\n        return true\n    }\n    first := text[0]\n\
    \    last := text[len(text)-1]\n    for i := 1; i < len(text); i++ {\n       \
    \ if text[i] != first{\n            return false\n        }\n    }\n    return\
    \ last == first\n}\n", "    length := len(text)\n    if length == 0 {\n      \
    \  return true\n    }\n    if length == 1 {\n        return text == text[0:length]\n\
    \    }\n    start := 0\n    end := length-1\n    middle := (start + end) / 2\n\
    \    for start < end {\n        if text[middle] != text[middle+1] {\n        \
    \    return false\n        }\n        middle++\n    }\n    return true\n}\n",
  "    text := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n \
    \   \n    for start < end {\n        if text[start] != text[end] {\n         \
    \   return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
