name: HumanEval_79_decimal_to_binary
language: go_test.go
prompt: "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You will be given a number in decimal form and your task is to convert it\
  \ to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\n"
tests: "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(0), expected: \"db0db\" },\n    \
  \ { actual: candidate(32), expected: \"db100000db\" },\n     { actual: candidate(103),\
  \ expected: \"db1100111db\" },\n     { actual: candidate(15), expected: \"db1111db\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n      \
    \  result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    return result\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result += \"0\"\
    \n    }\n    return result\n}\n", "    binaryString := \"\"\n    binaryString\
    \ += \"db\"\n    for i := 0; i < decimal; i++ {\n        if decimal % 2 == 0 {\n\
    \            binaryString += \"1\"\n        } else {\n            binaryString\
    \ += \"0\"\n        }\n        decimal = decimal / 2\n    }\n    return binaryString\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result\
    \ += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n\
    \        result += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if\
    \ decimal > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    decimal\
    \ /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n \
    \   }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= 2\n    if decimal > 0 {\n        result += binary_to_decimal(decimal)\n\
    \    }\n    decimal /= ", "    result := \"\"\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    if decimal\
    \ > 0 {\n        result += \"1\"\n    }\n    return result\n}\n", "    result\
    \ := \"\"\n    decimal %= 2\n    for i := 0; i < len(decimal); i++ {\n       \
    \ if decimal > 0 {\n            result += fmt.Sprintf(\"%c\", decimal%2)\n   \
    \         decimal /= 2\n        } else {\n            result += fmt.Sprintf(\"\
    %c\", decimal%2)\n            decimal *= 2\n        }\n    }\n    return \"db\"\
    \ + result + \"db\"\n}\n", "    result := \"\"\n    decimal %= 2\n    for i :=\
    \ 0; i < decimal; i++ {\n        result += \"0\"\n    }\n    result += \"1\"\n\
    \    return result\n}\n", "    result := \"\"\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %=\
    \ 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n  \
    \  }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= ", "    // Your code here\n    result := \"\"\n    i :=\
    \ 0\n    for i < decimal {\n        if decimal % 2 == 0 {\n            result\
    \ += fmt.Sprintf(\"0\", decimal%2)\n        } else {\n            result += fmt.Sprintf(\"\
    1\", decimal%2)\n        }\n        decimal /= 2\n        i++\n    }\n    return\
    \ \"db\" + result + \"db\"\n}\n", "    result := \"\"\n    decimal %= 2\n    for\
    \ i := 0; i < decimal; i++ {\n        result += \"1\"\n    }\n    for i := decimal\
    \ - 1; i >= 0; i-- {\n        result += \"0\"\n    }\n    return \"db\" + result\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result\
    \ += binary_to_decimal(decimal)\n    }\n    decimal /= 2\n    if decimal > 0 {\n\
    \        result += binary_to_decimal(decimal)\n    }\n    return result\n}\n",
  "    binary := make([]byte, 32)\n    i := 0\n    for decimal%2 == 0 {\n        binary[i]\
    \ = '1'\n        decimal = decimal / 2\n        i++\n    }\n    for decimal%2\
    \ == 1 {\n        binary[i] = '0'\n        decimal = decimal / 2\n        i++\n\
    \    }\n    binary[i] = 'b'\n    return string(binary)\n}\n", "    binary := make([]byte,\
    \ 32)\n    i := 0\n    for ; i < 32; i++ {\n        binary[i] = byte(decimal %\
    \ 2)\n        decimal /= 2\n    }\n    binary[31] = 'b'\n    return string(binary)\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result\
    \ += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n    if decimal > 0\
    \ {\n        result += decimal_to_binary(decimal/2)\n    }\n    decimal %= 2\n\
    \    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n    }\n\
    \    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= 2\n    if decimal > 0 {\n        result += decimal_to_binary(decimal/2)\n\
    \    }\n    decimal %= ", "    binary := make([]byte, 32)\n    i := 0\n    for\
    \ ; decimal > 0; decimal = decimal/2 {\n        binary[i] = byte(decimal % 2)\n\
    \        i++\n    }\n    binary[i] = byte(decimal)\n    return string(binary)\n\
    }\n", "    result := \"\"\n    decimal %= 2\n    if decimal > 0 {\n        result\
    \ += \"1\"\n    }\n    for i := 0; i < decimal; i++ {\n        result += \"0\"\
    \n    }\n    return result\n}\n", "    binaryString := \"\"\n    switch decimal\
    \ {\n    case 0:\n        binaryString = \"0\"\n    case 1:\n        binaryString\
    \ = \"1\"\n    }\n    return binaryString + \"db\"\n}\n", "    binary := make([]byte,\
    \ 32)\n    for i := 0; i < len(binary); i++ {\n        binary[i] = byte(decimal\
    \ % 2)\n        decimal /= 2\n    }\n    binary[0] = 'b'\n    binary[len(binary)-1]\
    \ = 'b'\n    return string(binary)\n}\n", "    binary := make([]byte, 32)\n  \
    \  i := 0\n    for ; i < 32; i++ {\n        if decimal >= 2 {\n            binary[i]\
    \ = byte(decimal % 2)\n            decimal /= 2\n        } else {\n          \
    \  binary[i] = byte(decimal)\n            break\n        }\n    }\n    return\
    \ string(binary)\n}\n", "    result := \"\"\n    decimal %= 2\n    if decimal\
    \ > 0 {\n        result += binary_to_decimal(decimal)\n    }\n    if decimal >\
    \ 1 {\n        result += binary_to_decimal(decimal - 1)\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
