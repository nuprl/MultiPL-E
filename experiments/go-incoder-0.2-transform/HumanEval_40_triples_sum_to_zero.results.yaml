language: go_test.go
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk8c2hlf2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk8c2hlf2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpa1w6w63b_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpa1w6w63b_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    l := len(l)\n    sum := 0\n    for i := 0; i <\
    \ l; i++ {\n        sum += l[i]\n    }\n    if sum != 0 {\n        return false\n\
    \    }\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += l[i]\n    }\n\
    \    if sum != 0 {\n        return false\n    }\n    sum := 0\n    for i := 0;\
    \ i < l; i++ {\n        sum += l[i]\n    }\n    if sum != 0 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxeyw9p74_test.go:32:7: no new variables on left side of :=

    /tmp/tmpxeyw9p74_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpxeyw9p74_test.go:33:9: no new variables on left side of :=

    /tmp/tmpxeyw9p74_test.go:34:21: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmpxeyw9p74_test.go:40:9: no new variables on left side of :=

    /tmp/tmpxeyw9p74_test.go:41:21: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmpxeyw9p74_test.go:47:9: no new variables on left side of :=

    /tmp/tmpxeyw9p74_test.go:48:21: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk8c2hlf2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk8c2hlf2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := len(l)\n    k := l - 1\n    for i := 0; i < l; i++ {\n\
    \        if l%2 == 0 {\n            if l%4 == 0 {\n                if l%8 == 0\
    \ {\n                    if l%16 == 0 {\n                        if l%32 == 0\
    \ {\n                            if l%64 == 0 {\n                            \
    \    return true\n                            }\n                        }\n \
    \                   }\n                }\n            }\n        }\n        k\
    \ /= 2\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0_dbfk_c_test.go:32:7: no new variables on left side of :=

    /tmp/tmp0_dbfk_c_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmp0_dbfk_c_test.go:33:14: cannot convert 1 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:34:21: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmp0_dbfk_c_test.go:35:14: cannot convert 2 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:36:18: cannot convert 4 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:37:22: cannot convert 8 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:38:26: cannot convert 16 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:39:30: cannot convert 32 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:40:34: cannot convert 64 (untyped int constant) to []int

    /tmp/tmp0_dbfk_c_test.go:40:34: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make(map[int]bool)\n    for _, v := range l {\n     \
    \   l[v] = true\n    }\n    for _, v := range l {\n        if s == 0 {\n     \
    \       return false\n        }\n        s -= v\n    }\n    return true\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ct2hggp_test.go:32:7: no new variables on left side of :=

    /tmp/tmp3ct2hggp_test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp3ct2hggp_test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n        if s == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpqfipca3g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpqfipca3g_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqfipca3g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpqfipca3g_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpqfipca3g_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last := l[len(l)-1]\n    for _, v := range l {\n\
    \        if v != last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprmxe2nm1_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprmxe2nm1_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    return t == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3w_ufi53_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3w_ufi53_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make([]int, len(l))\n    for i := range t {\n       \
    \ t[i] = l[i]\n    }\n    for i := range t {\n        if i != 0 {\n          \
    \  t := t[:i]\n            t := append(t, 0)\n            t := append(t, t[i+1:]...)\n\
    \            if s == sum(t) {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsu31qyu3_test.go:39:15: no new variables on left side of :=

    /tmp/tmpsu31qyu3_test.go:40:15: no new variables on left side of :=

    /tmp/tmpsu31qyu3_test.go:41:21: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n            if s == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp5euf9k7w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp5euf9k7w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp5euf9k7w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvauiqvh8_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvauiqvh8_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return false\n        }\n        sum -= v\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmphjkzu7l9_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmphjkzu7l9_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmphjkzu7l9_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmphjkzu7l9_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n            if i == 3 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpxc40mpas_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpxc40mpas_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcq1fk_bc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t > 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyim1iqs4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyim1iqs4_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    l := make([]int, len(l))\n    copy(l, l)\n   \
    \ for i := 0; i < len(l); i++ {\n        if l[i] == 0 {\n            l = append(l,\
    \ 0)\n        }\n    }\n    return len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm807040t_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    lastSum := 0\n    for _, v := range l {\n       \
    \ lastSum += v\n        if lastSum == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9yckwld_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make(map[int]bool)\n    for _, v := range l {\n     \
    \   l[v] = true\n    }\n    for _, v := range l {\n        if s == 0 {\n     \
    \       return false\n        }\n        s -= v\n    }\n    return true\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ct2hggp_test.go:32:7: no new variables on left side of :=

    /tmp/tmp3ct2hggp_test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp3ct2hggp_test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpenhwusjg_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpenhwusjg_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprtlo3ssf_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprtlo3ssf_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range\
    \ l {\n        if v != l[i] {\n            return false\n        }\n        i++\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmok36uhu_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdnq91axm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdnq91axm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n\
    \    for i < j {\n        if l[i]+l[j] == 0 {\n            i++\n            j--\n\
    \        } else {\n            if l[i]+l[j] > 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpux_sttlp_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpa1w6w63b_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpa1w6w63b_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcq1fk_bc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp_8n_362v_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_8n_362v_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    if t == 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp4vjfj0oi_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp4vjfj0oi_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp4vjfj0oi_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    for _, v := range l {\n        if v != s {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2bz0vtwd_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2bz0vtwd_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdnq91axm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdnq91axm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8d6bhfz_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074923
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpmxoyuaez_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpmxoyuaez_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsctebkta_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsctebkta_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpsctebkta_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if v > 0 {\n \
    \           sum -= v\n        }\n        if sum < 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp4qsgerqp_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp4qsgerqp_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4qsgerqp_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp4qsgerqp_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp4qsgerqp_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdj7j91hr_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdj7j91hr_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    n := len(l)\n    if n < 3 {\n        return false\n    }\n\
    \    s := 0\n    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n\
    \        return false\n    }\n    s /= 3\n    i := 0\n    for ; i < n; i++ {\n\
    \        if l[i] == s {\n            i++\n            continue\n        }\n  \
    \      if l[i] == -s {\n            i++\n            continue\n        }\n   \
    \     if l[i] == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmps3j8fh6n_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmps3j8fh6n_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmps3j8fh6n_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 ||\
    \ sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpmq3_pj4s_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpmq3_pj4s_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpmq3_pj4s_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk8c2hlf2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk8c2hlf2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last1 := l[0]\n    last2 := l[1]\n    last3 :=\
    \ l[2]\n    if last1 == last2 && last1 == last3 {\n        return true\n    }\n\
    \    if last2 == last1 && last2 == last3 {\n        return true\n    }\n    if\
    \ last3 == last1 && last3 == last2 {\n        return true\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpd4brgd7v_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpd4brgd7v_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t > 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyim1iqs4_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyim1iqs4_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyqgbq1jo_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyqgbq1jo_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[len(l)-1]\n    for _, v := range l\
    \ {\n        if v == last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp_0dg6qli_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_0dg6qli_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp09b6zll5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    m := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          m += v\n        }\n    }\n    if m == 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp8syl0jpt_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp8syl0jpt_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp8syl0jpt_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpa1w6w63b_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpa1w6w63b_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsr8ti69r_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsr8ti69r_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprtlo3ssf_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprtlo3ssf_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo0dfsugm_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo0dfsugm_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsoj41qpd_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsoj41qpd_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpsoj41qpd_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make(map[int]bool)\n    for _, v := range l {\n     \
    \   if _, ok := t[v]; ok {\n            return false\n        }\n        t[v]\
    \ = true\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpfef8pdlr_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpfef8pdlr_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpfef8pdlr_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpfef8pdlr_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpfef8pdlr_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmpfef8pdlr_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpfef8pdlr_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v := range\
    \ l {\n        if v == 0 {\n            t += 1\n        }\n    }\n    return t\
    \ == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9f_728cd_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9f_728cd_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -sum\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpy2x8fpej_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpy2x8fpej_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6jxnaxhw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvauiqvh8_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvauiqvh8_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdnq91axm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdnq91axm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last := l[0]\n    for _, v := range l[1:] {\n\
    \        if v != last {\n            return false\n        }\n        last = v\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsr8ti69r_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsr8ti69r_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        sum -= v\n    \
    \    if sum < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn81fh5a0_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn81fh5a0_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn81fh5a0_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn81fh5a0_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    for _, v := range l {\n        if v != s {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmphnlos3sz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmphnlos3sz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpi5m1zyxc_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpi5m1zyxc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpmxoyuaez_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpmxoyuaez_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v := range\
    \ l {\n        t += v\n        if t == 0 {\n            return true\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpffzqmwo7_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpffzqmwo7_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, len(l))\n    for i, v := range l {\n    \
    \    l[i] = v\n    }\n    sort.Sort(l)\n    i := 0\n    j := len(l) - 1\n    for\
    \ i < j {\n        if l[i]+l[j] == 0 {\n            i++\n            j--\n   \
    \     } else {\n            if l[i]+l[j] > 0 {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzdwi5qtq_test.go:32:7: no new variables on left side of :=

    /tmp/tmpzdwi5qtq_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpa1w6w63b_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpa1w6w63b_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps175lvm9_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps175lvm9_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk8c2hlf2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk8c2hlf2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyqgbq1jo_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyqgbq1jo_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvauiqvh8_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvauiqvh8_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6jxnaxhw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps175lvm9_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps175lvm9_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    sort.Ints(l)\n    i := 0\n    j := len(l) - 1\n    for i <\
    \ len(l) && j < len(l) {\n        if l[i]+l[j] == 0 {\n            i++\n     \
    \       j--\n        } else {\n            i++\n        }\n    }\n    return i\
    \ == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected: false },\n\
    \     { actual: candidate([]int{100, 3, 5, -100}), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnyu7qd1v_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    m := len(l)\n    n := len(l)\n    for i := m - 1; i >= 0;\
    \ i-- {\n        if l[i] != 0 {\n            n -= 1\n            if n == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpnhu7p6ay_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpnhu7p6ay_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpnhu7p6ay_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmpnhu7p6ay_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpnhu7p6ay_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpnhu7p6ay_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk8c2hlf2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk8c2hlf2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sum /= 2\n    for _, v := range l {\n       \
    \ if v > 0 {\n            sum += v\n        }\n    }\n    if sum == 0 {\n    \
    \    return true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8cbq52ii_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8cbq52ii_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6jxnaxhw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := make([]int, len(l))\n    for i, v := range\
    \ l {\n        l[i] = v - sum\n    }\n    return len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghygew_z_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return true\n    }\n    if s == t {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpp6lhonn2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp6lhonn2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    if s == 0 {\n        return true\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsk68xi8m_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsk68xi8m_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpsk68xi8m_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n      \
    \  return false\n    }\n    lastSum := 0\n    for _, v := range l {\n        lastSum\
    \ += v\n        if lastSum < 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_etw137m_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    m := len(l)\n    for i := 0; i < m; i++ {\n        if l[i]\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmp4akaidcf_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmp4akaidcf_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmp4akaidcf_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmp4akaidcf_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp4akaidcf_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp4akaidcf_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    for _, v := range\
    \ l {\n        if sum == 0 {\n            return false\n        }\n        sum\
    \ -= v\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpbiuvlqe8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__3 (0.00s)\n        tmpbiuvlqe8_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__4\
    \ (0.00s)\n        tmpbiuvlqe8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmpbiuvlqe8_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmpbiuvlqe8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, len(l))\n    for i, v := range l {\n    \
    \    l[i] = v\n    }\n    sort.Sort(l)\n    i := 0\n    j := len(l) - 1\n    k\
    \ := 0\n    for i < j {\n        if l[i]+l[j] == 0 {\n            k += 1\n   \
    \         if k == 3 {\n                return true\n            }\n        }\n\
    \        i++\n        j--\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_5otoh5_test.go:32:7: no new variables on left side of :=

    /tmp/tmpk_5otoh5_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcq1fk_bc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n\
    \        if l[i]+l[j] == 0 {\n            return true\n        }\n        if l[i]+l[j]\
    \ > 0 {\n            i++\n        } else {\n            j--\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__1\
    \ (0.00s)\n        tmpf_lp82vi_test.go:68: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpf_lp82vi_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpf_lp82vi_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpf_lp82vi_test.go:68:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n            if s == 0 {\n                return true\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp5euf9k7w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp5euf9k7w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp5euf9k7w_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp5euf9k7w_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 ||\
    \ sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate :=\
    \ triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3,\
    \ 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n     { actual:\
    \ candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual: candidate([]int{2,\
    \ 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}), expected:\
    \ false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected: false },\n\
    \     { actual: candidate([]int{100, 3, 5, -100}), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpmg1tvq6s_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpmg1tvq6s_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        if sum == 0 {\n\
    \            return true\n        }\n        sum -= v\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpbl58bukn_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpbl58bukn_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpbl58bukn_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpk8c2hlf2_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpk8c2hlf2_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n        if s == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0 &&\
    \ len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpyqgbq1jo_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpyqgbq1jo_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n        if s == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdnq91axm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdnq91axm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    m := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          m += v\n        }\n    }\n    if m == 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp8syl0jpt_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp8syl0jpt_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp8syl0jpt_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp8syl0jpt_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp49c0whhl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp09b6zll5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    l := make([]int, len(l))\n    for i := range l\
    \ {\n        l[i] = l[i] + sum\n    }\n    return len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvwtdz6r_test.go:32:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpkz1_d0ta_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpcq1fk_bc_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make(map[int]bool)\n    for _, v := range l {\n     \
    \   t[v] = true\n    }\n    for _, v := range l {\n        if !t[v] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp27qqq50s_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp27qqq50s_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp27qqq50s_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp27qqq50s_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmp27qqq50s_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmp27qqq50s_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    last := l[len(l)-1]\n    for _, v := range l {\n        if\
    \ v != last {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp3fdhqki__test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp3fdhqki__test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp3fdhqki__test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp49c0whhl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n        if s == 0 {\n            return true\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpxejzsz65_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpxejzsz65_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    count := 0\n    for _, v := range l {\n     \
    \   if v == 0 {\n            count++\n        }\n    }\n    return count == 3\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpcsi6tv10_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpcsi6tv10_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6jxnaxhw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n            if i == 3 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps4e7xtgy_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps4e7xtgy_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsoj41qpd_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsoj41qpd_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpsoj41qpd_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n        if s == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpv7gyw3rs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpv7gyw3rs_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpv7gyw3rs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpv7gyw3rs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpv7gyw3rs_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmpv7gyw3rs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp09b6zll5_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     t -= v\n        if t != 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpbw6mxnft_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpbw6mxnft_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, len(l))\n    for i, v := range l {\n    \
    \    l[i] = v\n    }\n    sort.Sort(l)\n    i := 0\n    for _, v := range l {\n\
    \        if i == 0 || v != l[i-1] {\n            i++\n            if i == 3 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcmgjif5_test.go:32:7: no new variables on left side of :=

    /tmp/tmptcmgjif5_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range\
    \ l {\n        if v != l[i] {\n            return false\n        }\n        i++\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpivgdidnb_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    m := 0\n    for _, v := range\
    \ l {\n        if v > 0 {\n            m += v\n        }\n    }\n    return m\
    \ == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwaj9imxd_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwaj9imxd_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make(map[int]bool)\n    for _, v := range l {\n     \
    \   l[v] = true\n    }\n    for _, v := range l {\n        if v == true {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3loszdz8_test.go:32:7: no new variables on left side of :=

    /tmp/tmp3loszdz8_test.go:32:10: cannot use make(map[int]bool) (value of type map[int]bool)
    as type []int in assignment

    /tmp/tmp3loszdz8_test.go:34:16: cannot use true (untyped bool constant) as int
    value in assignment

    /tmp/tmp3loszdz8_test.go:37:17: invalid operation: v == true (mismatched types
    int and untyped bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074928
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := len(l)\n    sum := 0\n    for i := 0; i\
    \ < l; i++ {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_ivtqkn_test.go:32:7: no new variables on left side of :=

    /tmp/tmpk_ivtqkn_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpk_ivtqkn_test.go:33:9: no new variables on left side of :=

    /tmp/tmpk_ivtqkn_test.go:34:21: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == len(l)\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsoj41qpd_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsoj41qpd_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpsoj41qpd_test.go:50: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    count := 0\n    for _, v := range l {\n      \
    \  if v == 0 {\n            count++\n        }\n    }\n    return count == 3\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp28kr3ej2_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp28kr3ej2_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sum /= 3\n    for _, v := range l {\n       \
    \ if v != sum {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpul9v70jo_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpul9v70jo_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp49c0whhl_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074927
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last := l[len(l)-1]\n    for _, v := range l\
    \ {\n        if v == last {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp_0dg6qli_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_0dg6qli_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    for _, v := range l {\n        if v != s {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmphnlos3sz_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmphnlos3sz_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    for _, v := range l {\n        sum -= v\n    \
    \    if sum < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn81fh5a0_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn81fh5a0_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn81fh5a0_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn81fh5a0_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpa1w6w63b_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpa1w6w63b_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    lastSum := 0\n    for _, v := range l {\n       \
    \ lastSum += v\n        if lastSum == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu9yckwld_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6jxnaxhw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    i := 0\n    for _, v := range l {\n        if v != 0 {\n \
    \           i += v\n        }\n    }\n    if i == 3 {\n        return true\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp9dgvleg1_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n\
    \        if l[i]+l[j] == 0 {\n            i++\n            j--\n        } else\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpi4beixgv_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpi4beixgv_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpi4beixgv_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpi4beixgv_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpi4beixgv_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpi4beixgv_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n    }\n\
    \    if t == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpi5m1zyxc_test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpi5m1zyxc_test.go:68:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074926
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make(map[int]bool)\n    for _, v := range l {\n     \
    \   if _, ok := t[v]; !ok {\n            t[v] = true\n        }\n    }\n    return\
    \ len(t) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpq24o9kom_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := make([]int, len(l))\n    for i, v := range l {\n    \
    \    l[i] = v\n    }\n    sort.Ints(l)\n    i := 0\n    for _, v := range l {\n\
    \        if i == 0 || v != l[i-1] {\n            i++\n            if i == 3 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpijrb5d2m_test.go:32:7: no new variables on left side of :=

    /tmp/tmpijrb5d2m_test.go:36:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmphteqrlup_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i++\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpz0aax2bb_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpz0aax2bb_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpz0aax2bb_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    if sum == 0 {\n        return false\n    }\n    count := 0\n    for\
    \ _, v := range l {\n        if v == 0 {\n            count++\n        }\n   \
    \ }\n    return count == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpp240gn0t_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp240gn0t_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if sum-v == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpz2i1zwkx_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmpz2i1zwkx_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    j := len(l) - 1\n    for i < j {\n\
    \        if l[i]+l[j] == 0 {\n            i++\n            j--\n        } else\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpg08em534_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpg08em534_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpg08em534_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpg08em534_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpg08em534_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpg08em534_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    return i == 3\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6jxnaxhw_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    return t == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwh4nj239_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwh4nj239_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvauiqvh8_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvauiqvh8_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprtlo3ssf_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprtlo3ssf_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8g6p7jfx_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8g6p7jfx_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    for _, v := range l {\n        if v != s {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp2bz0vtwd_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp2bz0vtwd_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n        }\n    }\n    return i == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp_8n_362v_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp_8n_362v_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    s /= 3\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpuvzeq1el_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpuvzeq1el_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := len(l)\n    i := 0\n    for i < l {\n        j := i +\
    \ 1\n        for j < l {\n            k := j + 1\n            for k < l {\n  \
    \              if l[j]+l[k]+l[i] != 0 {\n                    return false\n  \
    \              }\n                k++\n            }\n            j++\n      \
    \  }\n        i++\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnlzc5i1c_test.go:32:7: no new variables on left side of :=

    /tmp/tmpnlzc5i1c_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpnlzc5i1c_test.go:34:13: invalid operation: i < l (mismatched types int
    and []int)

    /tmp/tmpnlzc5i1c_test.go:36:17: invalid operation: j < l (mismatched types int
    and []int)

    /tmp/tmpnlzc5i1c_test.go:38:21: invalid operation: k < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp_5j18d77_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp_5j18d77_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_5j18d77_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp_5j18d77_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp_5j18d77_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmp_5j18d77_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpn3lpwct0_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpn3lpwct0_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n        if s == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpqfipca3g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpqfipca3g_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpqfipca3g_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpqfipca3g_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpqfipca3g_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    last, ok := l[len(l)-1]\n    if !ok {\n     \
    \   return false\n    }\n    last2, ok := l[len(l)-2]\n    if !ok {\n        return\
    \ false\n    }\n    if last2 == last {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4x6amxhz_test.go:32:17: assignment mismatch: 2 variables but 1 value

    /tmp/tmp4x6amxhz_test.go:36:18: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    if i == 3 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpi7g4uq8y_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -1\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpa1w6w63b_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpa1w6w63b_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t == 0 {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpvauiqvh8_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpvauiqvh8_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    if sum == 0 {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpnl7wgt4z_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpnl7wgt4z_test.go:60:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmpnl7wgt4z_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    for _, v := range l {\n        if sum-v == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp6k11f4p2_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 || sum == -sum\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpy2x8fpej_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpy2x8fpej_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpdnq91axm_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpdnq91axm_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v != 0 {\n            i += v\n        }\n    }\n    if i == 3 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpct_elfyc_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp_5j18d77_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmp_5j18d77_test.go:61:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp_5j18d77_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp_5j18d77_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmp_5j18d77_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmp_5j18d77_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v > 0 {\n            s -=\
    \ v\n        }\n        if s == 0 {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpv7gyw3rs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__2 (0.00s)\n        tmpv7gyw3rs_test.go:64:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpv7gyw3rs_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpv7gyw3rs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__5\
    \ (0.00s)\n        tmpv7gyw3rs_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__6 (0.00s)\n        tmpv7gyw3rs_test.go:64:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := make([]int, len(l))\n    copy(l, l)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l,\
    \ 0)\n    l := append(l, 0)\n    l := append(l, 0)\n    l := append(l, 0)\n  \
    \  l := append(l, 0)\n    l := append(l, 0)\n    l \nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxrsnqd_l_test.go:100:6: expected ''('', found TestTriples_Sum_To_Zero

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    l := len(l)\n    sum := 0\n    for i := 0; i\
    \ < l; i++ {\n        sum += l[i]\n        if sum == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk_ivtqkn_test.go:32:7: no new variables on left side of :=

    /tmp/tmpk_ivtqkn_test.go:32:10: cannot use len(l) (value of type int) as type
    []int in assignment

    /tmp/tmpk_ivtqkn_test.go:33:9: no new variables on left side of :=

    /tmp/tmpk_ivtqkn_test.go:34:21: invalid operation: i < l (mismatched types int
    and []int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    i := 0\n    for _, v := range l {\n        if\
    \ v == 0 {\n            i++\n            if i == 3 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmps4e7xtgy_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmps4e7xtgy_test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074928
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpo7dttjsr_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpo7dttjsr_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sum /= 3\n    for _, v := range l {\n       \
    \ if v != sum {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpul9v70jo_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpul9v70jo_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum == 0\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpsa4m98sj_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpsa4m98sj_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        if v > 0 {\n  \
    \          t += v\n        }\n    }\n    if t == 0 {\n        return false\n \
    \   }\n    return true\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmp4vjfj0oi_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmp4vjfj0oi_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__6\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__7 (0.00s)\n        tmp4vjfj0oi_test.go:65:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__8\
    \ (0.00s)\n        tmp4vjfj0oi_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074924
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    for _, v := range l {\n        if v != 0 {\n            s\
    \ -= v\n        }\n    }\n    return s == 0\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__0\
    \ (0.00s)\n        tmpa1wme_w5_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__1 (0.00s)\n        tmpa1wme_w5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__3\
    \ (0.00s)\n        tmpa1wme_w5_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__4 (0.00s)\n        tmpa1wme_w5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__7\
    \ (0.00s)\n        tmpa1wme_w5_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__8 (0.00s)\n        tmpa1wme_w5_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprtlo3ssf_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprtlo3ssf_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) == 0 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum == 0 {\n \
    \       return false\n    }\n    sort.Ints(l)\n    i := 0\n    j := len(l)-1\n\
    \    for i < j {\n        if l[i]+l[j] == 0 {\n            i++\n            j--\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfgok8w4w_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074929
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    sum :=\
    \ 0\n    for _, v := range l {\n        sum += v\n    }\n    if sum < 0 {\n  \
    \      return false\n    }\n    sum /= 3\n    for _, v := range l {\n        if\
    \ v != sum {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmprtlo3ssf_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmprtlo3ssf_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    sum := 0\n    for _, v := range l {\n        sum += v\n \
    \   }\n    return sum == 0 && len(l) == 3\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpg5nxl5ud_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpg5nxl5ud_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074925
