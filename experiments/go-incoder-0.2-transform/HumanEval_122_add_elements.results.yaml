language: go_test.go
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    for i := k; i < len(arr); i++ {\n       \
    \ sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_xqk9_hd_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, element\
    \ := range arr[:k] {\n        result += element\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpq5j1s6fj_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpq5j1s6fj_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) < k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpivuwv589_test.go:44: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivuwv589_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var result int\n    for i := 0;\
    \ i < k; i++ {\n        result += arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        result += arr[i-k]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpb05t6ffr_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpb05t6ffr_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpb05t6ffr_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpb05t6ffr_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    for i := k; i < len(arr); i++ {\n       \
    \ sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_xqk9_hd_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) < k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpivuwv589_test.go:44: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivuwv589_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) < k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpivuwv589_test.go:44: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpivuwv589_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    i := 0\n    for ; i < k; i++ {\n        sum\
    \ += arr[i]\n    }\n    for ; i < len(arr); i++ {\n        sum += arr[i]\n   \
    \ }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate :=\
    \ add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3,\
    \ 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfkndg3g_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    i := 0\n    for ; i < k; i++ {\n        sum\
    \ += arr[i]\n    }\n    for ; i < len(arr); i++ {\n        sum += arr[i]\n   \
    \ }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate :=\
    \ add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3,\
    \ 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90,\
    \ 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbfkndg3g_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ arr[0]\n    }\n    sum := arr[0]\n    for i := 1; i < k; i++ {\n        sum\
    \ += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n\
    \  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp815tvpo6_test.go:44: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp815tvpo6_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum +=\
    \ arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i] -\
    \ 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk7gf49ni_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, v := range\
    \ arr[:k] {\n        result += v\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp4jp7t_di_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp4jp7t_di_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptxtl6d8p_test.go:44: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptxtl6d8p_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmptxtl6d8p_test.go:44: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum +=\
    \ arr[i]\n    }\n    return sum + add_elements(arr[k:], k - k)\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g1mv6s6_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i-k]\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpu_vifac1_test.go:47: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpu_vifac1_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpu_vifac1_test.go:47: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpu_vifac1_test.go:47:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmpu_vifac1_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int = 0\n    for i := 0;\
    \ i < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpdnozx2tn_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpdnozx2tn_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp64qblr_b_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp64qblr_b_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp64qblr_b_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp64qblr_b_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum +=\
    \ arr[i]\n    }\n    return sum + add_elements(arr[k:], k - k)\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g1mv6s6_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i] - 10\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpoztto84o_test.go:47: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpoztto84o_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpoztto84o_test.go:47: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpoztto84o_test.go:47:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmpoztto84o_test.go:47: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ -1\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate\
    \ := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmptxtl6d8p_test.go:44: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmptxtl6d8p_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmptxtl6d8p_test.go:44: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for _, element\
    \ := range arr[:k] {\n        result += element\n    }\n    return result\n}\n\
    \nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99},\
    \ 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000, 5, 6},\
    \ 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1}, 1), expected:\
    \ 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpq5j1s6fj_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpq5j1s6fj_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpo27izlnb_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpo27izlnb_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    \n    sum := 0\n    for i := 0; i < k; i++ {\n        sum\
    \ += arr[i]\n    }\n    \n    for i := k; i < len(arr); i++ {\n        sum +=\
    \ arr[i] - 10\n    }\n    \n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdumvei45_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 2
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ sum(arr)\n    }\n    sum := 0\n    for i := k; i < len(arr); i++ {\n       \
    \ sum += arr[i]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_xqk9_hd_test.go:18:16: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp64qblr_b_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp64qblr_b_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp64qblr_b_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp64qblr_b_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    var sum int\n    for i := 0; i\
    \ < k; i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp64qblr_b_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp64qblr_b_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp64qblr_b_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp64qblr_b_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i] - 10\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=-4)', got '%!s(int=384)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4206)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp__qn9nuc_test.go:44: expected '%!s(int=125)', got '%!s(int=110)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp__qn9nuc_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=4120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for _, v := range\
    \ arr[:k] {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmp35mnody__test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp35mnody__test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    if len(arr) <= k {\n        return\
    \ 0\n    }\n    sum := 0\n    for i := 0; i < k; i++ {\n        sum += arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        sum += arr[i-k]\n    }\n\
    \    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T) {\n  candidate := add_elements\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111, 121, 3, 4000,\
    \ 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmpekl0oc7d_test.go:47: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmpekl0oc7d_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmpekl0oc7d_test.go:47: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpekl0oc7d_test.go:47:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\n    --- FAIL: TestAdd_Elements/test_num__4\
    \ (0.00s)\n        tmpekl0oc7d_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    result := 0\n    for i := 0; i\
    \ < k; i++ {\n        result += arr[i]\n    }\n    return result\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__1\
    \ (0.00s)\n        tmpdizan9ka_test.go:41: expected '%!s(int=0)', got '%!s(int=232)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmpdizan9ka_test.go:41:\
    \ expected '%!s(int=24)', got '%!s(int=4135)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t *testing.T)\
    \ {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n     { actual: candidate([]int{111,\
    \ 121, 3, 4000, 5, 6}, 2), expected: 0 },\n     { actual: candidate([]int{11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125 },\n     { actual: candidate([]int{111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected: 24 },\n     { actual: candidate([]int{1},\
    \ 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\n    --- FAIL: TestAdd_Elements/test_num__0\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=-4)', got '%!s(int=166)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__1 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=0)', got '%!s(int=4467)'\n    --- FAIL: TestAdd_Elements/test_num__2\
    \ (0.00s)\n        tmp5vn33eop_test.go:44: expected '%!s(int=125)', got '%!s(int=255)'\n\
    \    --- FAIL: TestAdd_Elements/test_num__3 (0.00s)\n        tmp5vn33eop_test.go:44:\
    \ expected '%!s(int=24)', got '%!s(int=8275)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073758
- exit_code: 1
  program: "package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given a non-empty array of integers arr and an integer k, return\n// the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    // Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    func add_elements(arr []int, k int) int {\n    sum := 0\n    for i := 0; i < k;\
    \ i++ {\n        sum += arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n \
    \       sum += arr[i-k-1]\n    }\n    return sum\n}\n\nfunc TestAdd_Elements(t\
    \ *testing.T) {\n  candidate := add_elements\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), expected: -4 },\n  \
    \   { actual: candidate([]int{111, 121, 3, 4000, 5, 6}, 2), expected: 0 },\n \
    \    { actual: candidate([]int{11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), expected: 125\
    \ },\n     { actual: candidate([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4), expected:\
    \ 24 },\n     { actual: candidate([]int{1}, 1), expected: 1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAdd_Elements (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.add_elements(...)\n\t/tmp/tmpu2ja_pim_test.go:22\n\
    command-line-arguments_test.TestAdd_Elements(0x0?)\n\t/tmp/tmpu2ja_pim_test.go:34\
    \ +0x692\ntesting.tRunner(0xc0001964e0, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073758
