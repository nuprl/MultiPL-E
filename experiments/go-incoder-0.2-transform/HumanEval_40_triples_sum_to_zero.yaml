name: HumanEval_40_triples_sum_to_zero
language: go_test.go
prompt: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are three distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n//\
  \ >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
  \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n//\
  \ true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
  \ []int) bool {\n"
tests: "func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
  \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual:\
  \ candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
  \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected:\
  \ false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
  \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
  \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5, -100}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n\
    \    return sum == 0\n}\n", "    sum := 0\n    for _, v := range l {\n       \
    \ sum += v\n    }\n    return sum == 0 || sum == -1\n}\n", "    if len(l) == 0\
    \ {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n  \
    \      sum += v\n    }\n    if sum < 0 {\n        return false\n    }\n    l :=\
    \ len(l)\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += l[i]\n  \
    \  }\n    if sum != 0 {\n        return false\n    }\n    sum := 0\n    for i\
    \ := 0; i < l; i++ {\n        sum += l[i]\n    }\n    if sum != 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += l[i]\n\
    \    }\n    if sum != 0 {\n        return false\n    }\n    return true\n}\n",
  "    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    return sum\
    \ == 0\n}\n", "    if len(l) == 0 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    l := len(l)\n    k := l - 1\n    for i := 0; i < l; i++ {\n\
    \        if l%2 == 0 {\n            if l%4 == 0 {\n                if l%8 == 0\
    \ {\n                    if l%16 == 0 {\n                        if l%32 == 0\
    \ {\n                            if l%64 == 0 {\n                            \
    \    return true\n                            }\n                        }\n \
    \                   }\n                }\n            }\n        }\n        k\
    \ /= 2\n    }\n    return false\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n    if s\
    \ == 0 {\n        return false\n    }\n    l := make(map[int]bool)\n    for _,\
    \ v := range l {\n        l[v] = true\n    }\n    for _, v := range l {\n    \
    \    if s == 0 {\n            return false\n        }\n        s -= v\n    }\n\
    \    return true\n}\n", "    if len(l) < 3 {\n        return false\n    }\n  \
    \  s := 0\n    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n\
    \        return false\n    }\n    for _, v := range l {\n        if v > 0 {\n\
    \            s -= v\n        }\n        if s == 0 {\n            return true\n\
    \        }\n    }\n    return false\n}\n", "    if len(l) < 3 {\n        return\
    \ false\n    }\n    sum := 0\n    for _, v := range l {\n        sum += v\n  \
    \  }\n    if sum < 0 {\n        return false\n    }\n    last := l[len(l)-1]\n\
    \    for _, v := range l {\n        if v != last {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(l) == 0 {\n        return\
    \ false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    t := 0\n    for _, v := range\
    \ l {\n        if v > 0 {\n            t += v\n        }\n    }\n    return t\
    \ == 0\n}\n", "    if len(l) < 3 {\n        return false\n    }\n    s := 0\n\
    \    for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := make([]int, len(l))\n    for i := range t {\n       \
    \ t[i] = l[i]\n    }\n    for i := range t {\n        if i != 0 {\n          \
    \  t := t[:i]\n            t := append(t, 0)\n            t := append(t, t[i+1:]...)\n\
    \            if s == sum(t) {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n", "    if len(l) == 0 {\n        return\
    \ false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    for _, v := range l {\n   \
    \     if v != 0 {\n            s -= v\n            if s == 0 {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n", "  \
    \  if len(l) == 0 {\n        return false\n    }\n    s := 0\n    for _, v :=\
    \ range l {\n        s += v\n    }\n    if s == 0 {\n        return false\n  \
    \  }\n    t := 0\n    for _, v := range l {\n        t += v\n        if t == 0\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    if\
    \ len(l) < 3 {\n        return false\n    }\n    sum := 0\n    for _, v := range\
    \ l {\n        sum += v\n    }\n    if sum < 0 {\n        return false\n    }\n\
    \    for _, v := range l {\n        if sum == 0 {\n            return false\n\
    \        }\n        sum -= v\n    }\n    return true\n}\n", "    if len(l) ==\
    \ 0 {\n        return false\n    }\n    sum := 0\n    for _, v := range l {\n\
    \        sum += v\n    }\n    if sum < 0 {\n        return false\n    }\n    i\
    \ := 0\n    for _, v := range l {\n        if v == 0 {\n            i++\n    \
    \        if i == 3 {\n                return true\n            }\n        }\n\
    \    }\n    return false\n}\n", "    if len(l) < 3 {\n        return false\n \
    \   }\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    if\
    \ sum == 0 {\n        return false\n    }\n    i := 0\n    for _, v := range l\
    \ {\n        if v != 0 {\n            i += v\n        }\n    }\n    return i ==\
    \ 3\n}\n", "    if len(l) == 0 {\n        return false\n    }\n    s := 0\n  \
    \  for _, v := range l {\n        s += v\n    }\n    if s == 0 {\n        return\
    \ false\n    }\n    t := 0\n    for _, v := range l {\n        t += v\n      \
    \  if t > 0 {\n            return false\n        }\n    }\n    return true\n}\n",
  "    if len(l) == 0 {\n        return false\n    }\n    sum := 0\n    for _, v :=\
    \ range l {\n        sum += v\n    }\n    if sum < 0 {\n        return false\n\
    \    }\n    l := make([]int, len(l))\n    copy(l, l)\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] == 0 {\n            l = append(l, 0)\n        }\n   \
    \ }\n    return len(l) == 3\n}\n", "    if len(l) == 0 {\n        return false\n\
    \    }\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n   \
    \ if sum == 0 {\n        return false\n    }\n    last, ok := l[len(l)-1]\n  \
    \  if !ok {\n        return false\n    }\n    lastSum := 0\n    for _, v := range\
    \ l {\n        lastSum += v\n        if lastSum == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(l) == 0 {\n        return\
    \ false\n    }\n    s := 0\n    for _, v := range l {\n        s += v\n    }\n\
    \    if s == 0 {\n        return false\n    }\n    l := make(map[int]bool)\n \
    \   for _, v := range l {\n        l[v] = true\n    }\n    for _, v := range l\
    \ {\n        if s == 0 {\n            return false\n        }\n        s -= v\n\
    \    }\n    return true\n}\n", "    if len(l) < 3 {\n        return false\n  \
    \  }\n    sum := 0\n    for _, v := range l {\n        sum += v\n    }\n    if\
    \ sum < 0 {\n        return false\n    }\n    i := 0\n    for _, v := range l\
    \ {\n        if v == 0 {\n            i++\n        }\n    }\n    return i == 3\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
