language: go_test.go
name: HumanEval_48_is_palindrome
results:
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:1]\n    }\n\
    \    if length == 2 {\n        return text == text[:1] + text[1:]\n    }\n   \
    \ i := 0\n    j := length-1\n    for i < j {\n        if text[i] != text[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcn9dxpi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpqcn9dxpi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplqprd02y_test.go:18:10: no new variables on left side of :=

    /tmp/tmplqprd02y_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0:length]\n    }\n    start := 0\n    end := length-1\n\
    \    for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrfg6nao_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvrfg6nao_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Replace(text, \" \", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"#\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"#\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp963vfz8a_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[middle]\
    \ != text[start] {\n            return false\n        }\n        start++\n   \
    \     end--\n        middle = (start + end) / 2\n    }\n    return true\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtgwugdi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpbtgwugdi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    // Check if string length is even\n\
    \    if length % 2 == 0 {\n        // If length is even, check if first and last\
    \ chars are equal\n        if text[start] == text[end] {\n            return true\n\
    \        }\n    }\n    \n    // Check if string length is odd\n    if length %\
    \ 2 == 1 {\n        // If length is odd, check if first and last chars are different\n\
    \        if text[start] != text[end] {\n            return true\n        }\n \
    \   }\n    \n    // Loop through string and check if chars are equal\n    for\
    \ start < end {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_emem02_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu_emem02_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0:length]\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[middle]\
    \ != text[middle+1] {\n            return false\n        }\n        middle++\n\
    \    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9y6x6clj_test.go:18:10: no new variables on left side of :=

    /tmp/tmp9y6x6clj_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhvlsbup_test.go:18:10: no new variables on left side of :=

    /tmp/tmphhvlsbup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89y8ooc__test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    for i := 1; i < len(text); i++\
    \ {\n        if text[i] != first{\n            return false\n        }\n    }\n\
    \    return last == first\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpwo0mhjyn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpwo0mhjyn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:length]\n \
    \   }\n    start := 0\n    end := length-1\n    middle := (start + end) / 2\n\
    \    for start < end {\n        if text[middle] != text[middle+1] {\n        \
    \    return false\n        }\n        middle++\n    }\n    return true\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: index out of\
    \ range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range\
    \ [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome(...)\n\t/tmp/tmpsdhw8pya_test.go:29\n\
    command-line-arguments_test.TestIs_Palindrome(0x0?)\n\t/tmp/tmpsdhw8pya_test.go:46\
    \ +0x465\ntesting.tRunner(0xc0000cc4e0, 0x527f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    char\
    \ := text[middle]\n    for {\n        if char != text[left] {\n            return\
    \ false\n        }\n        if char != text[right] {\n            return false\n\
    \        }\n        if char == text[left] && char == text[right] {\n         \
    \   return true\n        }\n        if char == text[left] {\n            left++\n\
    \        }\n        if char == text[right] {\n            right--\n        }\n\
    \        middle = (left + right) / 2\n        char = text[middle]\n    }\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmp7h7k880__test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmp7h7k880__test.go:65:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7358l4tu_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    for start < middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqcn9dxpi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpqcn9dxpi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n\n    start\
    \ := 0\n    end := len(text) - 1\n\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length\
    \ - 1\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuo4ocdjc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpuo4ocdjc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:1]\n    }\n\
    \    if length == 2 {\n        return text == text[:1] + text[1:2]\n    }\n  \
    \  if length == 3 {\n        return text == text[:1] + text[1:2] + text[2:3]\n\
    \    }\n    if length == 4 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] +\n            text[4:5]\n    }\n    if length == 5 {\n        return\
    \ text == text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6]\
    \ +\n            text[6:7]\n    }\n    if length == 6 {\n        return text ==\
    \ text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6] +\n   \
    \         text[6:7] + text[7:8]\n    }\n    if length == 7 {\n        return text\
    \ == text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6] +\n\
    \            text[6:7] + text[7:8] + text[8:9]\n    }\n    if length == 8 {\n\
    \        return text == text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:5]\
    \ + text[5:6] +\n            text[6:7] + text[7:8] + text[8:9] + text[9:10]\n\
    \    }\n    if length == 9 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] +\n            text[6:7] + text[7:8] + text[8:9]\
    \ + text[9:10] + text[10:11]\n    }\n    if length == 10 {\n        return text\
    \ == text[:1] + text[1:2] + text[2:3] + text[3:4] + text[4:5] + text[5:6] +\n\
    \            text[6:7] + text[7:8] + text[8:9] + text[9:10] + text[10:11] + text[11:12]\n\
    \    }\n    if length == 11 {\n        return text == text[:1] + text[1:2] + text[2:3]\
    \ + text[3:4] + text[4:5] + text[5:6] +\n            text[6:7] + text[7:8] + text[8:9]\
    \ + text[9:10] + text[10:11] + text[11:12] + text[12:13]\n    }\n    if length\
    \ == 12 {\n        return text == \nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp90khvtq1_test.go:65:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    for i := 1; i < len(text); i++\
    \ {\n        if text[i] != first {\n            return false\n        }\n    }\n\
    \    return last == first\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpyrdwzo25_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpyrdwzo25_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpozupw_uk_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    for start < end {\n  \
    \      if text[start] != text[end] {\n            return false\n        }\n  \
    \      start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    start\
    \ := 0\n    end := len(text) - 1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073936
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    for start < middle && end > middle {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpssut2vdl_test.go:18:10: no new variables on left side of :=

    /tmp/tmpssut2vdl_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    i := 0\n    j := length\
    \ - 1\n    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkfdsbvox_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkfdsbvox_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp65ez06t8_test.go:18:10: no new variables on left side of :=

    /tmp/tmp65ez06t8_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"_\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"@\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"#\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"$\", \"\", -1)\n    text := strings.Replace(text, \"%\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"^\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"&\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"[\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"]\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"{\", \"\", -1)\n    text := strings.Replace(text, \"}\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"<\", \"\", -1)\n    text := strings.Replace(text,\
    \ \">\", \"\", -1)\n    text := strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"`\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"+\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"=\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \":\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"+\", \"\", -1)\n    \nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4qolhny5_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 1 {\n     \
    \   return text == text[0:1]\n    }\n    i := 0\n    j := length - 1\n    for\
    \ i < j {\n        if text[i] != text[j] {\n            return false\n       \
    \ }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppfcvp3bm_test.go:18:10: no new variables on left side of :=

    /tmp/tmppfcvp3bm_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n\n    for start < end {\n        if text[start] != text[end] {\n      \
    \      return false\n        }\n        start++\n        end--\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6l9dcga_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    text\
    \ := strings.ToLower(text)\n    for i := 0; i < len(text)/2; i++ {\n        if\
    \ text[i] != text[len(text)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6prna4w9_test.go:21:10: no new variables on left side of :=

    /tmp/tmp6prna4w9_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    start\
    \ := 0\n    end := len(text) - 1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0j7de353_test.go:58:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length\
    \ - 1\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuo4ocdjc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpuo4ocdjc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n    middle := length / 2\n    return is_palindrome_test(text, middle,\
    \ length/2)\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpufamqakv_test.go:26:12: undefined: is_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0]\n    }\n    if length == 2 {\n        return text\
    \ == text[0] + text[1]\n    }\n    middle := length / 2\n    left := text[0:middle]\n\
    \    right := text[middle:]\n    return is_palindrome(left) && is_palindrome(right)\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa_ngc4vu_test.go:18:10: no new variables on left side of :=

    /tmp/tmpa_ngc4vu_test.go:18:13: undefined: strings

    /tmp/tmpa_ngc4vu_test.go:24:24: invalid operation: text == text[0] (mismatched
    types string and byte)

    /tmp/tmpa_ngc4vu_test.go:27:24: invalid operation: text == text[0] + text[1] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    // If text is empty or only contains spaces, return\
    \ true\n    if text == \"\" || text == \" \" {\n        return true\n    }\n \
    \   \n    // If text is all caps, return true\n    if strings.ToUpper(text) ==\
    \ text {\n        return true\n    }\n    \n    // If text is all lowercase, return\
    \ true\n    if strings.ToLower(text) == text {\n        return true\n    }\n \
    \   \n    // If text is all numbers, return true\n    if strings.Contains(text,\
    \ \"0123456789\") {\n        return true\n    }\n    \n    // If text is all special\
    \ characters, return true\n    if strings.Contains(text, \"!@#$%^&*()_+{}[]\\\\\
    |;:'\\\",<>?~\") {\n        return true\n    }\n    \n    // If text is all alphanumeric\
    \ characters, return true\n    if strings.Contains(text, \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ) {\n        return true\n    }\n    \n    // If text is all upper case characters,\
    \ return true\n    if strings.Contains(text, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n\
    \        return true\n    }\n    \n    // If text is all lower case characters,\
    \ return true\n    if strings.Contains(text, \"abcdefghijklmnopqrstuvwxyz\") {\n\
    \        return true\n    }\n    \n    // If text is all digits, return true\n\
    \    if strings.Contains(text, \"0123456789\") {\n        return true\n    }\n\
    \    \n    // If text is all special characters, return true\n    if strings.Contains(text,\
    \ \"!@#$%^&*()_+{}[]\\\\|;:'\\\",<>?~\") {\n        return true\n    }\n    \n\
    \    // If text is all alphanumeric characters, return true\n    if strings.Contains(text,\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n        return true\n    }\n    \n    //\
    \ If text is all upper case characters, return true\n    if strings.Contains(text,\
    \ \"abcdefghijklmnopqrstuvwxyz\") {\n        return true\n    }\n    \n    //\
    \ If text is all lower case characters, return true\n    if strings.Contains(text,\
    \ \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n        return true\n    }\n    \n    //\
    \ If text is all digits, return true\n    if \nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cn4yhzy_test.go:89:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073936
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhvlsbup_test.go:18:10: no new variables on left side of :=

    /tmp/tmphhvlsbup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpfe9unjtm_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpfe9unjtm_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073937
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Trim(text, \"\")\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpopvanjpa_test.go:75:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073670
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(text) - 1\n    for i < j {\n        if text[i] != text[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073854
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073850
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n\n    start := 0\n    end := length-1\n\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073854
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n\n    start\
    \ := 0\n    end := len(text) - 1\n\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n\n        start++\n   \
    \     end--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < middle && end > middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpozupw_uk_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpqsq5itaj_test.go:26\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpqsq5itaj_test.go:26 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpqsq5itaj_test.go:37 +0x62\ntesting.tRunner(0xc0000da1a0, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.ToUpper(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"$\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"%\", \"\", -1)\n    text := strings.Replace(text, \"^\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"&\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"+\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"_\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"=\", \"\", -1)\n    text := strings.Replace(text, \"<\", \"\", -1)\n    text\
    \ := strings.Replace(text, \">\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"[\", \"\", -1)\n    text := strings.Replace(text, \"]\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"{\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"}\", \"\", -1)\n    text := strings.Replace(text, \"|\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"~\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"`\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"$\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz7jgj570_test.go:58:35: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length/2\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle := middle + 1\n    middle := middle - 1\n\
    \    middle := middle + 1\n    middle := middle - 1\n    middle := middle + 1\n\
    \    middle := middle - 1\n    middle \nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0mowizoj_test.go:105:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    for start < end {\n        if text[start] != text[end] {\n\
    \            return false\n        }\n        start++\n        end--\n    }\n\
    \    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate :=\
    \ is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqqxo4ru_test.go:18:10: no new variables on left side of :=

    /tmp/tmpeqqxo4ru_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    middle := (start + end) / 2\n    for\
    \ start < middle && end >= middle {\n        if text[start] != text[end] {\n \
    \           return false\n        }\n        start++\n        end--\n    }\n \
    \   return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpttnpyv0n_test.go:18:10: no new variables on left side of :=

    /tmp/tmpttnpyv0n_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhvlsbup_test.go:18:10: no new variables on left side of :=

    /tmp/tmphhvlsbup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length / 2\n\
    \    char := text[middle]\n    for start < end {\n        if text[start] != char\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpuqn7j5w7_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpuqn7j5w7_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073850
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0]\n    }\n    if length == 2 {\n        return text\
    \ == text[0] + text[1]\n    }\n    if length == 3 {\n        return text == text[0]\
    \ + text[1] + text[2]\n    }\n    if length == 4 {\n        return text == text[0]\
    \ + text[1] + text[2] + text[3]\n    }\n    if length == 5 {\n        return text\
    \ == text[0] + text[1] + text[2] + text[3] + text[4]\n    }\n    if length ==\
    \ 6 {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4]\
    \ + text[5]\n    }\n    if length == 7 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4] + text[5] + text[6]\n    }\n    if length == 8\
    \ {\n        return text == text[0] + text[1] + text[2] + text[3] + text[4] +\
    \ text[5] + text[6] + text[7]\n    }\n    if length == 9 {\n        return text\
    \ == text[0] + text[1] + text[2] + text[3] + text[4] + text[5] + text[6] + text[7]\
    \ + text[8]\n    }\n    if length == 10 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9]\n\
    \    }\n    if length == 11 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\n\
    \    }\n    if length == 12 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\
    \ + text[11]\n    }\n    if length == 13 {\n        return text == text[0] + text[1]\
    \ + text[2] + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9]\
    \ + text[10] + text[11] + text[12]\n    }\n    if length == 14 {\n        return\
    \ text == text[0] + text[1] + text[2] + text[3] + text[4] + text[5] + text[6]\
    \ + text[7] + text[8] + text[9] + text[10] + text[11] + text[12] + text[13]\n\
    \    }\n    if length == 15 {\n        return text == text[0] + text[1] + text[2]\
    \ + text[3] + text[4] + text[5] + text[6] + text[7] + text[8] + text[9] + text[10]\
    \ + text[11] + text[12] + text[13] + text[\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_uwvgsqz_test.go:67:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[0:length]\n    }\n    i := 0\n    j := length-1\n   \
    \ for i < j {\n        if text[i] != text[j] {\n            return false\n   \
    \     }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiafmzck1_test.go:18:10: no new variables on left side of :=

    /tmp/tmpiafmzck1_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Replace(text, \" \", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"?\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc8q6tg65_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073937
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89y8ooc__test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073850
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length - 1\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n    start := 0\n    end := length-1\n    middle := length/2\n    for start\
    \ < middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpmb6vsd1g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpmb6vsd1g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length == 1 {\n    \
    \    return text == text[:len(text)/2]\n    }\n    i := 0\n    j := length-1\n\
    \    for i < j {\n        if text[i] != text[j] {\n            return false\n\
    \        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa5myb1v8_test.go:18:10: no new variables on left side of :=

    /tmp/tmpa5myb1v8_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    if text[0]\
    \ != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073856
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n \
    \   for start < middle && end > middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    for start < end {\n        if text[start] != text[end] {\n            return\
    \ false\n        }\n        start++\n        end--\n    }\n    return true\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp72m8ytxy_test.go:18:10: no new variables on left side of :=

    /tmp/tmp72m8ytxy_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:1]\n    }\n\
    \    if length == 2 {\n        return text == text[0:2]\n    }\n    if length\
    \ == 3 {\n        return text == text[0:3]\n    }\n    if length == 4 {\n    \
    \    return text == text[0:4]\n    }\n    if length == 5 {\n        return text\
    \ == text[0:5]\n    }\n    if length == 6 {\n        return text == text[0:6]\n\
    \    }\n    if length == 7 {\n        return text == text[0:7]\n    }\n    if\
    \ length == 8 {\n        return text == text[0:8]\n    }\n    if length == 9 {\n\
    \        return text == text[0:9]\n    }\n    if length == 10 {\n        return\
    \ text == text[0:10]\n    }\n    if length == 11 {\n        return text == text[0:11]\n\
    \    }\n    if length == 12 {\n        return text == text[0:12]\n    }\n    if\
    \ length == 13 {\n        return text == text[0:13]\n    }\n    if length == 14\
    \ {\n        return text == text[0:14]\n    }\n    if length == 15 {\n       \
    \ return text == text[0:15]\n    }\n    if length == 16 {\n        return text\
    \ == text[0:16]\n    }\n    if length == 17 {\n        return text == text[0:17]\n\
    \    }\n    if length == 18 {\n        return text == text[0:18]\n    }\n    if\
    \ length == 19 {\n        return text == text[0:19]\n    }\n    if length == 20\
    \ {\n        return text == text[0:20]\n    }\n    if length == 21 {\n       \
    \ return text == text[0:21]\n    }\n    if length == 22 {\n        return text\
    \ == text[0:22]\n    }\n    if length == 23 {\n        return text == text[0:23]\n\
    \    }\n    if length == 24 {\n        return text == text[0:24]\n    }\n    if\
    \ length == 25 {\n        return text == text[0:25]\n    }\n    if length == 26\
    \ {\n        return text == text[0:26]\n    }\n    if length == 27 {\n       \
    \ return text == text[0:27]\n    }\n    if length == 28 {\n        return text\
    \ == text[0:28]\n    }\n    if length == 29 {\n        return text == text[0:29]\n\
    \    }\n    if length == 30 {\n        return text == text[0:30]\n    }\n    if\
    \ length == 31 {\n        return text == text[0:31]\n    }\n    if length == 32\
    \ {\n        return text == text[0:32]\n    }\n    if length == 33 {\n       \
    \ return text == text[0:\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf71kmbr7_test.go:120:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"/\", \"\", -1)\n    text := strings.Replace(text, \"\\\\\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"'\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"(\", \"\", -1)\n    text := strings.Replace(text, \")\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text \nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf1i2oly7_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphj5xp9ex_test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length\
    \ - 1\n    middle := (start + end) / 2\n    for start < end {\n        if text[middle]\
    \ != text[start] {\n            return false\n        }\n        middle++\n  \
    \      start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzdkk0vbl_test.go:18:10: no new variables on left side of :=

    /tmp/tmpzdkk0vbl_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzysx77a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvzysx77a_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        \n\
    \        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkl_8s4qi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpkl_8s4qi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length <= 1 {\n        return text == text[0:length]\n \
    \   }\n    i := 0\n    j := length - 1\n    for i < j {\n        if text[i] !=\
    \ text[j] {\n            return false\n        }\n        i++\n        j--\n \
    \   }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpmb6vsd1g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpmb6vsd1g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8325anc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpv8325anc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    middle := (length-1)/2\n    for start\
    \ < middle {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqjrsme5z_test.go:18:10: no new variables on left side of :=

    /tmp/tmpqjrsme5z_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    text\
    \ := strings.ToLower(text)\n    length := len(text)\n    start := 0\n    end :=\
    \ length-1\n    middle := (start + end) / 2\n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpznecf6ud_test.go:21:10: no new variables on left side of :=

    /tmp/tmpznecf6ud_test.go:21:13: undefined: strings

    /tmp/tmpznecf6ud_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n\n    start := 0\n    end := length-1\n\n    for start < end {\n\
    \        if text[start] != text[end] {\n            return false\n        }\n\
    \        start++\n        end--\n    }\n\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    start\
    \ := 0\n    end := len(text) - 1\n    middle := (start + end) / 2\n    switch\
    \ {\n    case text[middle] != text[middle+1]:\n        return false\n    case\
    \ start > end:\n        return true\n    case start < end:\n        return is_palindrome(text[start:end+1])\n\
    \    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7dcm7iui_test.go:32:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n\n    if length == 1 {\n        return text == text[:1]\n    }\n\
    \n    first := text[:1]\n    last := text[length-1]\n\n    return first == last\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1m9o7c7d_test.go:30:21: invalid operation: first == last (mismatched types
    string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    char\
    \ := text[middle]\n    for left < right {\n        if char != text[left] {\n \
    \           return false\n        }\n        left++\n        right--\n       \
    \ middle = (left + right) / 2\n        char = text[middle]\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpp9tw10ln_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpp9tw10ln_test.go:56:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu571v6sc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpu571v6sc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:1]\n    }\n\
    \    if length == 2 {\n        return text == text[0:2]\n    }\n    if length\
    \ == 3 {\n        return text == text[0:3]\n    }\n    if length == 4 {\n    \
    \    return text == text[0:4]\n    }\n    if length == 5 {\n        return text\
    \ == text[0:5]\n    }\n    if length == 6 {\n        return text == text[0:6]\n\
    \    }\n    if length == 7 {\n        return text == text[0:7]\n    }\n    if\
    \ length == 8 {\n        return text == text[0:8]\n    }\n    if length == 9 {\n\
    \        return text == text[0:9]\n    }\n    if length == 10 {\n        return\
    \ text == text[0:10]\n    }\n    if length == 11 {\n        return text == text[0:11]\n\
    \    }\n    if length == 12 {\n        return text == text[0:12]\n    }\n    if\
    \ length == 13 {\n        return text == text[0:13]\n    }\n    if length == 14\
    \ {\n        return text == text[0:14]\n    }\n    if length == 15 {\n       \
    \ return text == text[0:15]\n    }\n    if length == 16 {\n        return text\
    \ == text[0:16]\n    }\n    if length == 17 {\n        return text == text[0:17]\n\
    \    }\n    if length == 18 {\n        return text == text[0:18]\n    }\n    if\
    \ length == 19 {\n        return text == text[0:19]\n    }\n    if length == 20\
    \ {\n        return text == text[0:20]\n    }\n    if length == 21 {\n       \
    \ return text == text[0:21]\n    }\n    if length == 22 {\n        return text\
    \ == text[0:22]\n    }\n    if length == 23 {\n        return text == text[0:23]\n\
    \    }\n    if length == 24 {\n        return text == text[0:24]\n    }\n    if\
    \ length == 25 {\n        return text == text[0:25]\n    }\n    if length == 26\
    \ {\n        return text == text[0:26]\n    }\n    if length == 27 {\n       \
    \ return text == text[0:27]\n    }\n    if length == 28 {\n        return text\
    \ == text[0:28]\n    }\n    if length == 29 {\n        return text == text[0:29]\n\
    \    }\n    if length == 30 {\n        return text == text[0:30]\n    }\n    if\
    \ length == 31 {\n        return text == text[0:31]\n    }\n    if length == 32\
    \ {\n        return text == text[0:32]\n    }\n    if length == 33 {\n       \
    \ return text == text[0:\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf71kmbr7_test.go:120:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073938
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    // Check if text is empty or only contains spaces\n\
    \    if text == \"\" || text == \" \" {\n        return true\n    }\n    \n  \
    \  // Check if text is palindrome\n    if text[start] == text[end] {\n       \
    \ return is_palindrome(text[start+1:end-1])\n    }\n    \n    return false\n}\n\
    \nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbul7oo8i_test.go:18:10: no new variables on left side of :=

    /tmp/tmpbul7oo8i_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.TrimSpace(text)\n\
    \    if len(text) == 0 {\n        return true\n    }\n    if text == string(text[len(text)-1])\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpquqfzxds_test.go:18:10: no new variables on left side of :=

    /tmp/tmpquqfzxds_test.go:18:13: undefined: strings

    /tmp/tmpquqfzxds_test.go:19:10: no new variables on left side of :=

    /tmp/tmpquqfzxds_test.go:19:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(text) - 1\n    for i < j {\n        if text[i] != text[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073854
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Replace(text, \" \", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \",\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \"[\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"]\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"{\", \"\", -1)\n    text := strings.Replace(text, \"}\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"=\", \"\", -1)\n    text := strings.Replace(text, \" \", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \",\", \"\", -1)\n    text := strings.Replace(text, \"!\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"?\", \"\", -1)\n    text := strings.Replace(text,\
    \ \";\", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"[\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"]\", \"\", -1)\n    text := strings.Replace(text, \"{\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"}\", \"\", -1)\n    text := strings.Replace(text,\
    \ \";\", \"\", -1)\n    text := strings.Replace(text, \"\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpepnkyzk2_test.go:58:35: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left < right:\n        return text[middle] == text[middle+1]\n \
    \   case left > right:\n        return text[middle] == text[middle-1]\n    default:\n\
    \        return false\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__1\
    \ (0.00s)\n        tmpmb6vsd1g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__4 (0.00s)\n        tmpmb6vsd1g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length <= 1 {\n    \
    \    return false\n    }\n    start := 0\n    end := length-1\n    middle := (start\
    \ + end) / 2\n    for start < end {\n        if text[start] != text[end] {\n \
    \           return false\n        }\n        start += 1\n        end -= 1\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl5dg4l8a_test.go:18:10: no new variables on left side of :=

    /tmp/tmpl5dg4l8a_test.go:18:13: undefined: strings

    /tmp/tmpl5dg4l8a_test.go:28:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    for\
    \ left < right {\n        if text[left] != text[right] {\n            return false\n\
    \        }\n        left++\n        right--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp89y8ooc__test.go:23:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_9gqvl6v_test.go:18:10: no new variables on left side of :=

    /tmp/tmp_9gqvl6v_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    for start < end {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv8325anc_test.go:18:10: no new variables on left side of :=

    /tmp/tmpv8325anc_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (length-1)/2\n    for start < middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpioksj1_test.go:18:10: no new variables on left side of :=

    /tmp/tmpbpioksj1_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.Split(text, \"\")\n    text := strings.Join(text,\
    \ \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\
    \")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text\
    \ := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n    text\
    \ := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n    text :=\
    \ strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text,\
    \ \"\")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text\
    \ := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n    text\
    \ := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n    text :=\
    \ strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text,\
    \ \"\")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text\
    \ := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n    text\
    \ := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n    text :=\
    \ strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text,\
    \ \"\")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr52z6t0y_test.go:75:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhvlsbup_test.go:18:10: no new variables on left side of :=

    /tmp/tmphhvlsbup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[middle]\
    \ != text[start] {\n            return false\n        }\n        start++\n   \
    \     end--\n        middle = (start + end) / 2\n    }\n    return true\n}\n\n\
    func TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbtgwugdi_test.go:18:10: no new variables on left side of :=

    /tmp/tmpbtgwugdi_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    for start < end {\n  \
    \      if text[start] != text[end] {\n            return false\n        }\n  \
    \      start++\n        end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073852
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := length / 2\n    for start < middle && end > middle {\n        if\
    \ text[start] != text[end] {\n            return false\n        }\n        start++\n\
    \        end--\n    }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ejxbd3__test.go:18:10: no new variables on left side of :=

    /tmp/tmp3ejxbd3__test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073855
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left > right:\n        return false\n    case left < right:\n  \
    \      return is_palindrome(text[middle:]) && is_palindrome(text[:middle])\n \
    \   default:\n        return text[middle] == text[middle]\n    }\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f363?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_palindrome({0x51d2aa?,\
    \ 0x2?})\n\t/tmp/tmp0hukoyju_test.go:17 +0xe5 fp=0xc0201603a8 sp=0xc0201603a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef6d3\n\
    command-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t/tmp/tmp0hukoyju_test.go:28\
    \ +0x73 fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef6d3\ncommand-line-arguments_test.is_palindrome({0x51d2aa,\
    \ 0x0?})\n\t/tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc020160420 sp=0xc0201603f8\
    \ pc=0x4ef6d3\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc020160448 sp=0xc020160420 pc=0x4ef6d3\n\
    command-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t/tmp/tmp0hukoyju_test.go:28\
    \ +0x73 fp=0xc020160470 sp=0xc020160448 pc=0x4ef6d3\ncommand-line-arguments_test.is_palindrome({0x51d2aa,\
    \ 0x0?})\n\t/tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc020160498 sp=0xc020160470\
    \ pc=0x4ef6d3\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef6d3\n\
    command-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t/tmp/tmp0hukoyju_test.go:28\
    \ +0x73 fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef6d3\ncommand-line-arguments_test.is_palindrome({0x51d2aa,\
    \ 0x0?})\n\t/tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc020160510 sp=0xc0201604e8\
    \ pc=0x4ef6d3\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmp0hukoyju_test.go:28 +0x73 fp=0xc020160538 sp=0xc020160510 pc=0x4ef6d3\n\
    command-line-arguments_test.is_palindrome({0x5"
  timestamp: 1660073941
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) < 2 {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:length]\n \
    \   }\n    if length == 2 {\n        return text == text[0:length-1] && text ==\
    \ text[1:length]\n    }\n    if length == 3 {\n        return text == text[0:length-2]\
    \ && text == text[1:length-1] && text == text[length:]\n    }\n    if length ==\
    \ 4 {\n        return text == text[0:length-3] && text == text[1:length-2] &&\
    \ text == text[length-1:length]\n    }\n    if length == 5 {\n        return text\
    \ == text[0:length-4] && text == text[1:length-3] && text == text[length-2:length-1]\
    \ && text == text[length:]\n    }\n    if length == 6 {\n        return text ==\
    \ text[0:length-5] && text == text[1:length-4] && text == text[length-3:3] &&\
    \ text == text[length-2:length-1] && text == text[length-1:length]\n    }\n  \
    \  if length == 7 {\n        return text == text[0:length-6] && text == text[1:length-5]\
    \ && text == text[length-4:4] && text == text[length-3:3] && text == text[length-2:length-1]\
    \ && text == text[length-1:length]\n    }\n    if length == 8 {\n        return\
    \ text == text[0:length-7] && text == text[1:length-6] && text == text[length-5:5]\
    \ && text == text[length-4:4] && text == text[length-3:3] && text == text[length-2:length-1]\
    \ && text == text[length-1:length]\n    }\n    if length == 9 {\n        return\
    \ text == text[0:length-8] && text == text[1:length-7] && text == text[length-6:5]\
    \ && text == text[length-5:4] && text == text[length-4:3] && text == text[length-3:3]\
    \ && text == text[length-2:length-1] && text == text[length-1:length]\n    }\n\
    \    if length == 10 {\n        return text == text[0:length-9] && text == text[1:length-8]\
    \ && text == text[length-7:6] && text == text[length-6:5] && text == text[length-5:4]\
    \ && text == text[length-4:3] && text == text[length-3:3] && text == text[length-2:length-1]\
    \ && text == text[length-1:length]\n    }\n    if length == 11 {\n        return\
    \ text == text[0:length-10] && text == text[1:length-9] && text == text[length-8:7]\
    \ && text == text[length-7:6] && text == text[length-6:5] && text == text[length-5:4]\
    \ && text == text[length-4:3] && text == text[length-3:3\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg2r1wcac_test.go:53:236: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    start := 0\n    end := length-1\n    \n    while (start < end) {\n      \
    \  if text[start] != text[end] {\n            return false\n        }\n      \
    \  \n        start++\n        end--\n    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3gayogsz_test.go:23:25: expected '';'', found ''{''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073939
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    left, right := 0, len(text) - 1\n    for left < right {\n\
    \        if text[left] != text[right] {\n            return false\n        }\n\
    \        left++\n        right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    for left < right {\n        if text[left]\
    \ != text[right] {\n            return false\n        }\n        left++\n    \
    \    right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073850
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[0:length]\n \
    \   }\n    if length%2 == 0 {\n        return is_palindrome(text[0:length/2])\
    \ && is_palindrome(text[length/2:])\n    }\n    return is_palindrome(text[0:length/2])\
    \ && is_palindrome(text[0:length/2]+text[length/2:])\n}\n\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160358\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f363?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\nruntime.rawstringtmp(0xc020160460?, 0x3?)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:130 +0x85 fp=0xc020160368\
    \ sp=0xc020160360 pc=0x44db25\nruntime.concatstrings(0x2?, {0xc020160400, 0x2,\
    \ 0x2?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:51 +0xc5\
    \ fp=0xc0201603e0 sp=0xc020160368 pc=0x44d425\nruntime.concatstring2(0xc0201604c0?,\
    \ {0xc0201604c0?, 0x2?}, {0xc0201604c1?, 0x2?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/string.go:60\
    \ +0x50 fp=0xc020160430 sp=0xc0201603e0 pc=0x44d650\ncommand-line-arguments_test.is_palindrome({0xc0201604c0,\
    \ 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28 +0xed fp=0xc020160490 sp=0xc020160430 pc=0x4ef74d\n\
    command-line-arguments_test.is_palindrome({0xc020160520, 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28\
    \ +0xf2 fp=0xc0201604f0 sp=0xc020160490 pc=0x4ef752\ncommand-line-arguments_test.is_palindrome({0xc020160580,\
    \ 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28 +0xf2 fp=0xc020160550 sp=0xc0201604f0 pc=0x4ef752\n\
    command-line-arguments_test.is_palindrome({0xc0201605e0, 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28\
    \ +0xf2 fp=0xc0201605b0 sp=0xc020160550 pc=0x4ef752\ncommand-line-arguments_test.is_palindrome({0xc020160640,\
    \ 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28 +0xf2 fp=0xc020160610 sp=0xc0201605b0 pc=0x4ef752\n\
    command-line-arguments_test.is_palindrome({0xc0201606a0, 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28\
    \ +0xf2 fp=0xc020160670 sp=0xc020160610 pc=0x4ef752\ncommand-line-arguments_test.is_palindrome({0xc020160700,\
    \ 0x3})\n\t/tmp/tmpicdbb9mu_test.go:28 +0xf2 fp=0xc0201606d0 sp=0xc020160670 pc=0x4ef752\n\
    command-line-arguments_test.is_palindrome({0xc020160760, 0x3}"
  timestamp: 1660073941
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    return first == last\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmp6i0pgi_q_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073853
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    if\
    \ text[0] != text[len(text)-1] {\n        return false\n    }\n    return is_palindrome(text[1:len(text)-1])\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_palindrome({0x51d2aa?, 0x0?})\n\t/tmp/tmpfb34fyr__test.go:24\
    \ +0x87\ncommand-line-arguments_test.is_palindrome({0x51d2a9?, 0xc00007e728?})\n\
    \t/tmp/tmpfb34fyr__test.go:24 +0x58\ncommand-line-arguments_test.TestIs_Palindrome(0x0?)\n\
    \t/tmp/tmpfb34fyr__test.go:35 +0x62\ntesting.tRunner(0xc0000cc680, 0x527f60)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    text\
    \ := strings.ToLower(text)\n    start := 0\n    end := len(text) - 1\n    for\
    \ start < end {\n        if text[start] != text[end] {\n            return false\n\
    \        }\n        start++\n        end--\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx15v73nu_test.go:21:10: no new variables on left side of :=

    /tmp/tmpx15v73nu_test.go:21:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != text[len(text)-1-i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5m032kup_test.go:18:10: no new variables on left side of :=

    /tmp/tmp5m032kup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073851
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    if length == 2 {\n     \
    \   return text == text[:1]\n    }\n    start := 0\n    end := length-1\n    middle\
    \ := (length-1)/2\n    for start < middle && end > middle {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwhb4ogbu_test.go:18:10: no new variables on left side of :=

    /tmp/tmpwhb4ogbu_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := length / 2\n\
    \    for start < middle && end > middle {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        start++\n        end--\n   \
    \ }\n    return start == end\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length < 2 {\n        return\
    \ true\n    }\n    start := 0\n    end := length-1\n    middle := (start + end)\
    \ / 2\n    for start < end {\n        if text[start] != text[end] {\n        \
    \    return false\n        }\n        start++\n        end--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplmyhpwx7_test.go:24:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    char\
    \ := text[middle]\n    for {\n        if char != text[middle] {\n            return\
    \ false\n        }\n        if left > right {\n            return true\n     \
    \   }\n        if left == right {\n            return true\n        }\n      \
    \  left++\n        right--\n        middle = (left + right) / 2\n        char\
    \ = text[middle]\n    }\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate\
    \ := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ true },\n     { actual: candidate(\"aba\"), expected: true },\n     { actual:\
    \ candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"),\
    \ expected: false },\n     { actual: candidate(\"xywyx\"), expected: true },\n\
    \     { actual: candidate(\"xywyz\"), expected: false },\n     { actual: candidate(\"\
    xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__3\
    \ (0.00s)\n        tmpadx19lqa_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Palindrome/test_num__5 (0.00s)\n        tmpadx19lqa_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Palindrome/test_num__6\
    \ (0.00s)\n        tmpadx19lqa_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073940
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if text == \"\" {\n        return true\n    }\n    left,\
    \ right := 0, len(text) - 1\n    for left < right {\n        if text[left] !=\
    \ text[right] {\n            return false\n        }\n        left++\n       \
    \ right--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073856
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    start := 0\n    end :=\
    \ len(text) - 1\n    \n    for start < end {\n        if text[start] != text[end]\
    \ {\n            return false\n        }\n        \n        start++\n        end--\n\
    \    }\n    \n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n \
    \ candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphhvlsbup_test.go:18:10: no new variables on left side of :=

    /tmp/tmphhvlsbup_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Replace(text,\
    \ \" \", \"\", -1)\n    text := strings.Replace(text, \"-\", \"\", -1)\n    text\
    \ := strings.Replace(text, \".\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"!\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"-\", \"\", -1)\n    text := strings.Replace(text,\
    \ \".\", \"\", -1)\n    text := strings.Replace(text, \"/\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"\\\\\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"*\", \"\", -1)\n    text := strings.Replace(text, \"(\", \"\", -1)\n    text\
    \ := strings.Replace(text, \")\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"'\", \"\", -1)\n    text := strings.Replace(text, \"[\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"]\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"{\", \"\", -1)\n    text := strings.Replace(text, \"}\", \"\", -1)\n    text\
    \ := strings.Replace(text, \";\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"#\", \"\", -1)\n    text := strings.Replace(text, \"$\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"%\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"^\", \"\", -1)\n    text := strings.Replace(text, \"&\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"*\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"+\", \"\", -1)\n    text := strings.Replace(text, \"=\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"<\", \"\", -1)\n    text := strings.Replace(text,\
    \ \">\", \"\", -1)\n    text := strings.Replace(text, \"?\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"!\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"-\", \"\", -1)\n    text := strings.Replace(text, \".\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"/\", \"\", -1)\n    text := strings.Replace(text,\
    \ \"\\\\\", \"\", -1)\n    text := strings.Replace(text, \"*\", \"\", -1)\n  \
    \  text := strings.Replace(text, \"(\", \"\", -1)\n    text := strings.Replace(text,\
    \ \")\", \"\", -1)\n    text := strings.Replace(text, \"'\", \"\", -1)\n    text\
    \ := strings.Replace(text, \"[\", \"\", -1)\n    \nfunc TestIs_Palindrome(t *testing.T)\
    \ {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqtp1e_1c_test.go:59:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) <= 1 {\n        return true\n    }\n    left\
    \ := 0\n    right := len(text) - 1\n    middle := (left + right) / 2\n    switch\
    \ {\n    case left > right:\n        return false\n    case left < right:\n  \
    \      return is_palindrome(text[middle:]) && is_palindrome(text[:middle])\n \
    \   default:\n        return text[middle] == text[middle-1]\n    }\n}\n\nfunc\
    \ TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: true },\n     { actual:\
    \ candidate(\"aba\"), expected: true },\n     { actual: candidate(\"aaaaa\"),\
    \ expected: true },\n     { actual: candidate(\"zbcd\"), expected: false },\n\
    \     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f363?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_palindrome({0x51d2aa?,\
    \ 0x2?})\n\t/tmp/tmpbfomstac_test.go:17 +0x105 fp=0xc0201603a8 sp=0xc0201603a0\
    \ pc=0x4ef765\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc0201603d0 sp=0xc0201603a8 pc=0x4ef6d7\n\
    command-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t/tmp/tmpbfomstac_test.go:28\
    \ +0x77 fp=0xc0201603f8 sp=0xc0201603d0 pc=0x4ef6d7\ncommand-line-arguments_test.is_palindrome({0x51d2aa,\
    \ 0x0?})\n\t/tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc020160420 sp=0xc0201603f8\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc020160448 sp=0xc020160420 pc=0x4ef6d7\n\
    command-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t/tmp/tmpbfomstac_test.go:28\
    \ +0x77 fp=0xc020160470 sp=0xc020160448 pc=0x4ef6d7\ncommand-line-arguments_test.is_palindrome({0x51d2aa,\
    \ 0x0?})\n\t/tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc020160498 sp=0xc020160470\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc0201604c0 sp=0xc020160498 pc=0x4ef6d7\n\
    command-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t/tmp/tmpbfomstac_test.go:28\
    \ +0x77 fp=0xc0201604e8 sp=0xc0201604c0 pc=0x4ef6d7\ncommand-line-arguments_test.is_palindrome({0x51d2aa,\
    \ 0x0?})\n\t/tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc020160510 sp=0xc0201604e8\
    \ pc=0x4ef6d7\ncommand-line-arguments_test.is_palindrome({0x51d2aa, 0x0?})\n\t\
    /tmp/tmpbfomstac_test.go:28 +0x77 fp=0xc020160538 sp=0xc020160510 pc=0x4ef6d7\n\
    command-line-arguments_test.is_palindrome({0x"
  timestamp: 1660073941
- exit_code: 0
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    start\
    \ := 0\n    end := len(text) - 1\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073936
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    text := strings.Trim(text,\
    \ \" \")\n    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\
    \")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text\
    \ := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n    text\
    \ := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n    text :=\
    \ strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text,\
    \ \"\")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text\
    \ := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n    text\
    \ := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n    text :=\
    \ strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text,\
    \ \"\")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text\
    \ := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n    text\
    \ := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n    text :=\
    \ strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n    text := strings.Split(text,\
    \ \"\")\n    text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\n\
    \    text := strings.Split(text, \"\")\n    text := strings.Join(text, \"\")\n\
    \    text := strings.ToUpper(text)\n    text := strings.Split(text, \"\")\n  \
    \  text := strings.Join(text, \"\")\n    text := strings.ToUpper(text)\nfunc TestIs_Palindrome(t\
    \ *testing.T) {\n  candidate := is_palindrome\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: true },\n     { actual: candidate(\"aba\"), expected:\
    \ true },\n     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual:\
    \ candidate(\"zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"\
    ), expected: true },\n     { actual: candidate(\"xywyz\"), expected: false },\n\
    \     { actual: candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcd3j89t3_test.go:75:6: expected ''('', found TestIs_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length < 2 {\n        return true\n    }\n    start := 0\n    end := length-1\n\
    \    middle := (start + end) / 2\n    for start < end {\n        if text[start]\
    \ != text[end] {\n            return false\n        }\n        start++\n     \
    \   end--\n    }\n    return true\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxdwa87pe_test.go:18:10: no new variables on left side of :=

    /tmp/tmpxdwa87pe_test.go:18:13: undefined: strings

    /tmp/tmpxdwa87pe_test.go:25:5: middle declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073849
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    text := strings.ToLower(text)\n    length := len(text)\n\
    \    if length == 0 {\n        return true\n    }\n    if length <= 1 {\n    \
    \    return false\n    }\n    start := 0\n    end := length-1\n    middle := length/2\n\
    \    for start < middle {\n        if text[start] != text[end] {\n           \
    \ return false\n        }\n        start++\n        end--\n    }\n    return true\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvuhgwwit_test.go:18:10: no new variables on left side of :=

    /tmp/tmpvuhgwwit_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073940
- exit_code: 1
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    if len(text) == 0 {\n        return true\n    }\n    first\
    \ := text[0]\n    last := text[len(text)-1]\n    for i := 0; i < len(text)/2;\
    \ i++ {\n        if text[i] != first{\n            return false\n        }\n \
    \   }\n    return last == first\n}\n\nfunc TestIs_Palindrome(t *testing.T) {\n\
    \  candidate := is_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: true },\n     { actual: candidate(\"aba\"), expected: true },\n\
    \     { actual: candidate(\"aaaaa\"), expected: true },\n     { actual: candidate(\"\
    zbcd\"), expected: false },\n     { actual: candidate(\"xywyx\"), expected: true\
    \ },\n     { actual: candidate(\"xywyz\"), expected: false },\n     { actual:\
    \ candidate(\"xywzx\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Palindrome (0.00s)\n    --- FAIL: TestIs_Palindrome/test_num__4\
    \ (0.00s)\n        tmpu4u8798g_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073940
- exit_code: 2
  program: "package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
    \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\"\
    )\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text\
    \ string) bool {\n    length := len(text)\n    if length == 0 {\n        return\
    \ true\n    }\n    if length == 1 {\n        return text == text[:len(text)/2]\n\
    \    }\n    middle := length / 2\n    return is_palindrome_test(text, middle)\n\
    }\n\nfunc TestIs_Palindrome(t *testing.T) {\n  candidate := is_palindrome\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: true },\n    \
    \ { actual: candidate(\"aba\"), expected: true },\n     { actual: candidate(\"\
    aaaaa\"), expected: true },\n     { actual: candidate(\"zbcd\"), expected: false\
    \ },\n     { actual: candidate(\"xywyx\"), expected: true },\n     { actual: candidate(\"\
    xywyz\"), expected: false },\n     { actual: candidate(\"xywzx\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2f391w9d_test.go:26:12: undefined: is_palindrome_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073940
