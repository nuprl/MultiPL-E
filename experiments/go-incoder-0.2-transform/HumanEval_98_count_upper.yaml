name: HumanEval_98_count_upper
language: go_test.go
prompt: "package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s, count the number of uppercase vowels in even indices.\n// For\
  \ example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
  )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n"
tests: "func TestCount_Upper(t *testing.T) {\n  candidate := count_upper\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"aBCdEf\"), expected: 1 },\n     { actual:\
  \ candidate(\"abcdefg\"), expected: 0 },\n     { actual: candidate(\"dBBE\"), expected:\
  \ 0 },\n     { actual: candidate(\"B\"), expected: 0 },\n     { actual: candidate(\"\
  U\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n     { actual:\
  \ candidate(\"EEEE\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    count := 0\n    for i := 0; i < len(s); i += 2 {\n        if s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n     \
    \       count++\n        }\n    }\n    return count\n}\n", "    count := 0\n \
    \   for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n        }\n   \
    \ }\n    return count\n}\n", "    vowels := []rune(\"aeiouAEIOU\")\n    count\
    \ := 0\n    for _, r := range s {\n        if r == 'a' || r == 'e' || r == 'i'\
    \ || r == 'o' || r == 'u' {\n            count += vowels[int(r/2)]\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A'\
    \ || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    vowels := []rune{'A', 'E', 'I',\
    \ 'O', 'U'}\n    count := 0\n    for _, r := range s {\n        if r == 'A' ||\
    \ r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n            count++\n      \
    \  }\n    }\n    return count\n}\n", "    vowels := []rune(\"aeiouAEIOU\")\n \
    \   evenIndices := make([]int, len(s))\n    for i := 0; i < len(s); i++ {\n  \
    \      if s[i] == 'e' {\n            evenIndices[i] = 1\n        } else if s[i]\
    \ == 'i' {\n            evenIndices[i] = 2\n        } else if s[i] == 'o' {\n\
    \            evenIndices[i] = 3\n        } else if s[i] == 'u' {\n           \
    \ evenIndices[i] = 4\n        } else if s[i] == 'A' {\n            evenIndices[i]\
    \ = 5\n        } else if s[i] == 'E' {\n            evenIndices[i] = 6\n     \
    \   } else if s[i] == 'I' {\n            evenIndices[i] = 7\n        } else if\
    \ s[i] == 'O' {\n            evenIndices[i] = 8\n        } else if s[i] == 'U'\
    \ {\n            evenIndices[i] = 9\n        }\n    }\n    return len(vowels)\
    \ - len(evenIndices)\n}\n", "    count := 0\n    for i := 0; i < len(s); i++ {\n\
    \        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U' {\n            count++\n        }\n    }\n    return count\n}\n", "    vowels\
    \ := []rune(\"AEIOU\")\n    count := 0\n    for _, r := range s {\n        if\
    \ r == 'A' || r == 'E' || r == 'I' || r == 'O' || r == 'U' {\n            count++\n\
    \        }\n        if r == 'B' || r == 'C' || r == 'D' || r == 'F' || r == 'G'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    vowels\
    \ := []rune(\"AEIOU\")\n    evenIndices := make([]int, len(s))\n    for i := 0;\
    \ i < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            evenIndices[i] = 1\n        }\n    }\n\
    \    return len(vowels[evenIndices])\n}\n", "    count := 0\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    vowels := []rune{'a', 'e', 'i', 'o', 'u'}\n    evenIndices := []int{0,\
    \ 2, 4, 6}\n    count := 0\n    for _, r := range s {\n        if r == 'a' ||\
    \ r == 'e' || r == 'i' || r == 'o' || r == 'u' {\n            count += vowels[evenIndices[len(vowels)/2]]\n\
    \        }\n    }\n    return count\n}\n", "    count := 0\n    for i := 0; i\
    \ < len(s); i++ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    count := 0\n    for _, c := range s {\n        if c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U' {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    count := 0\n    for i := 0; i < len(s); i++\
    \ {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U' {\n            count++\n        }\n    }\n    return count\n}\n", " \
    \   count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' {\n            count++\n\
    \        }\n    }\n    return count\n}\n", "    vowels := []rune{'a', 'e', 'i',\
    \ 'o', 'u'}\n    evenIndices := make([]int, len(s)/2)\n    for i := 0; i < len(s);\
    \ i += 2 {\n        if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' {\n            evenIndices[i/2] = 1\n        }\n    }\n    return\
    \ len(vowels) - len(evenIndices)\n}\n", "    count := 0\n    for i := 0; i < len(s);\
    \ i += 2 {\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\
    \ || s[i] == 'U' {\n            count++\n        }\n    }\n    return count\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
