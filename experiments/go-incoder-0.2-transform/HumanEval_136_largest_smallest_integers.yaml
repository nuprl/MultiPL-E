name: HumanEval_136_largest_smallest_integers
language: go_test.go
prompt: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{None,\
  \ 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{None, None}\n\
  // >>> largest_smallest_integers([]int{0})\n// []interface{}{None, None}\nfunc largest_smallest_integers(lst\
  \ []int) []interface{} {\n"
tests: "func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
  \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}),\
  \ expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1, 3, 2, 4,\
  \ 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
  \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
  \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
  \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}), expected:\
  \ []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3, -5, -6}),\
  \ expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1, -3, -5,\
  \ -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) == 0 {\n        return []interface{}{None, None}\n\
    \    }\n    smallest := lst[0]\n    largest := lst[0]\n    for _, v := range lst\
    \ {\n        if v < smallest {\n            smallest = v\n        }\n        if\
    \ v > largest {\n            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < smallest {\n            smallest = v\n        }\n\
    \        if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == None {\n        return nil\n    }\n    if largest == None {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n", "    smallest := None\n    largest\
    \ := None\n    for _, v := range lst {\n        if v < smallest {\n          \
    \  smallest = v\n        }\n        if v > largest {\n            largest = v\n\
    \        }\n    }\n    if smallest == None {\n        return nil\n    }\n    if\
    \ largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = largest * -1\n        } else {\n  \
    \          smallest = smallest + 1\n        }\n    }\n    if smallest == 0 {\n\
    \        return nil\n    }\n    if smallest > largest {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := 0\n\
    \    largest := 0\n    for _, v := range lst {\n        if v < smallest {\n  \
    \          smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    if len(lst) == 0 {\n        return []interface{}{None,\
    \ None}\n    }\n    max := lst[0]\n    min := lst[0]\n    for _, v := range lst\
    \ {\n        if v > max {\n            max = v\n        }\n        if v < min\
    \ {\n            min = v\n        }\n    }\n    return []interface{}{max, min}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = maxInt(largest, v)\n        } else {\n      \
    \      smallest = minInt(smallest, v)\n        }\n    }\n    if smallest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largestInt := None\n    smallestInt := None\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallestInt == None {\n          \
    \      smallestInt = v\n            } else {\n                smallestInt = min(smallestInt,\
    \ v)\n            }\n        } else {\n            if largestInt == None {\n \
    \               largestInt = v\n            } else {\n                largestInt\
    \ = max(largestInt, v)\n            }\n        }\n    }\n    if smallestInt ==\
    \ None {\n        return nil\n    }\n    if largestInt == None {\n        return\
    \ smallestInt\n    }\n    return []interface{}{smallestInt, largestInt}\n}\n",
  "    result := make([]interface{}, 0, len(lst))\n    for _, v := range lst {\n \
    \       if v < 0 {\n            result = append(result, None)\n        } else\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = largest * -1\n        } else {\n            smallest\
    \ = smallest + 1\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n\
    \    largest := None\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      if smallest == None {\n                smallest = v\n            } else\
    \ {\n                largest = smallest\n                smallest = v\n      \
    \      }\n        } else {\n            if largest == None {\n               \
    \ largest = v\n            } else {\n                if v > largest {\n      \
    \              largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == None {\n        smallest = largest\n    }\n\
    \    if largest == None {\n        largest = smallest\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v > largest {\n            largest = v\n        } else if v < smallest\
    \ {\n            smallest = v\n        }\n    }\n    if largest == 0 {\n     \
    \   return nil\n    }\n    if smallest == 0 {\n        return nil\n    }\n   \
    \ return []interface{}{largest, smallest}\n}\n", "    if len(lst) == 0 {\n   \
    \     return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n    for\
    \ _, v := range lst {\n        if v < smallest {\n            smallest = v\n \
    \       }\n        if v > largest {\n            largest = v\n        }\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    smallest := 0\n    largest\
    \ := 0\n    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    if largest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n", " \
    \   largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = v // largest is now the largest negative integer\n    \
    \    } else {\n            smallest = v // smallest is now the smallest positive\
    \ integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    largest, smallest :=\
    \ 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest =\
    \ v // largest is largest\n        } else {\n            smallest = v // smallest\
    \ is smallest\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n      \
    \  return nil\n    }\n    if len(largest) == 0 {\n        return smallest\n  \
    \  }\n    return []interface{}{largest[0], smallest[0]}\n}\n", "    smallest :=\
    \ []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if v <\
    \ 0 {\n            smallest = append(smallest, v)\n        } else {\n        \
    \    largest = append(largest, v)\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(largest_smallest_integers(smallest), largest...)\n}\n",
  "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = v\n        } else {\n            smallest = v\n       \
    \ }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v // largest is now the largest negative\
    \ integer\n        } else {\n            smallest = v // smallest is now the smallest\
    \ positive integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n\
    \    largest := None\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == None && largest == None {\n      \
    \  return nil\n    }\n    return []interface{}{smallest, largest}\n}\n", "   \
    \ largest, smallest := 0, 0\n    for _, v := range lst {\n        if v > largest\
    \ {\n            largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    result := make([]interface{},\
    \ 0, len(lst))\n    largest, smallest := 0, math.MaxInt64\n    for _, v := range\
    \ lst {\n        if v < smallest {\n            smallest = v\n        }\n    \
    \    if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ < 0 {\n        result = []interface{}{smallest, None}\n    } else {\n      \
    \  result = []interface{}{largest, None}\n    }\n    return result\n}\n", "  \
    \  smallest := []int{}\n    largest := []int{}\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = append(smallest, v)\n        } else\
    \ {\n            largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   smallest := None\n    largest := None\n    for _, v := range lst {\n     \
    \   if v < smallest {\n            smallest = v\n        }\n        if v > largest\
    \ {\n            largest = v\n        }\n    }\n    if smallest == None && largest\
    \ == None {\n        return nil\n    }\n    return []interface{}{smallest, largest}\n\
    }\n", "    if len(lst) == 0 {\n        return []interface{}{None, None}\n    }\n\
    \    smallest := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n\
    \        if v < smallest {\n            smallest = v\n        }\n        if v\
    \ > largest {\n            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v // Keep track of the largest negative\
    \ integer.\n        } else {\n            smallest = v // Keep track of the smallest\
    \ positive integer.\n        }\n    }\n    if smallest == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest, smallest}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    largest, smallest := -1,\
    \ -1\n    for _, v := range lst {\n        if v > largest {\n            largest\
    \ = v\n        }\n        if v < smallest {\n            smallest = v\n      \
    \  }\n    }\n    if largest == -1 {\n        return nil\n    }\n    if smallest\
    \ == -1 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is now the largest negative integer\n\
    \        } else {\n            smallest = v // smallest is now the smallest positive\
    \ integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    largest, smallest :=\
    \ 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest =\
    \ v // largest is now the largest negative integer\n        } else {\n       \
    \     smallest = v // smallest is now the smallest positive integer\n        }\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is now the largest\n        } else\
    \ {\n            smallest = v // smallest is now the smallest\n        }\n   \
    \ }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if smallest == None {\n       \
    \         smallest = v\n            } else {\n                largest = smallest\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == None {\n                largest = v\n            } else {\n     \
    \           if v > largest {\n                    largest = v\n              \
    \  }\n                if v < smallest {\n                    smallest = v\n  \
    \              }\n            }\n        }\n    }\n    if smallest == None {\n\
    \        return nil\n    }\n    if largest == None {\n        return nil\n   \
    \ }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = v // largest is now the largest negative number\n        } else {\n      \
    \      smallest = v // smallest is now the smallest positive number\n        }\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    if len(lst) == 0 {\n        return nil\n    }\n   \
    \ max := lst[0]\n    min := lst[0]\n    for _, v := range lst {\n        if v\
    \ > max {\n            max = v\n        }\n        if v < min {\n            min\
    \ = v\n        }\n    }\n    return []interface{}{max, min}\n}\n", "    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(largest_smallest_integers(smallest), largest...)\n}\n",
  "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if v > largest\
    \ {\n            largest = v\n        }\n        if v < smallest {\n         \
    \   smallest = v\n        }\n    }\n    if largest == 0 {\n        return nil\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v > largest {\n            largest = v\n        }\n        if v <\
    \ smallest {\n            smallest = v\n        }\n    }\n    if largest == 0\
    \ {\n        return nil\n    }\n    if smallest == 0 {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v > largest {\n           \
    \ largest = v\n        }\n        if v < smallest {\n            smallest = v\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    if largest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is now the largest negative number\n\
    \        } else {\n            smallest = v // smallest is now the smallest positive\
    \ number\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n  \
    \  largest := None\n    for _, v := range lst {\n        if v < smallest {\n \
    \           smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest\
    \ := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n        if v > largest {\n\
    \            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if smallest == None {\n       \
    \         smallest = v\n            } else {\n                largest = smallest\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == None {\n                largest = v\n            } else {\n     \
    \           if v > largest {\n                    largest = v\n              \
    \  }\n                if v < smallest {\n                    smallest = v\n  \
    \              }\n            }\n        }\n    }\n    if smallest == None {\n\
    \        smallest = nil\n    }\n    if largest == None {\n        largest = nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = largest * 10 + v\n        } else {\n            smallest = smallest * 10 +\
    \ v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n   \
    \ if largest < 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := 0\n    largest := 0\n    for _, v := range\
    \ lst {\n        if v < smallest {\n            smallest = v\n        }\n    \
    \    if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    if largest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if smallest == nil || largest ==\
    \ nil {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    smallest := None\n    largest := None\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == None {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ None {\n                largest = v\n            } else {\n                if\
    \ v > largest {\n                    largest = v\n                }\n        \
    \        if v < smallest {\n                    smallest = v\n               \
    \ }\n            }\n        }\n    }\n    if smallest == None {\n        return\
    \ nil\n    }\n    if largest == None {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0, 0\n   \
    \ for _, v := range lst {\n        if v > largest {\n            largest = v\n\
    \        }\n        if v < smallest {\n            smallest = v\n        }\n \
    \   }\n    if largest == 0 {\n        return nil\n    }\n    if smallest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largestInt := None\n    smallestInt := None\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallestInt == None {\n          \
    \      smallestInt = v\n            } else {\n                smallestInt = min(smallestInt,\
    \ v)\n            }\n        } else {\n            if largestInt == None {\n \
    \               largestInt = v\n            } else {\n                largestInt\
    \ = max(largestInt, v)\n            }\n        }\n    }\n    if smallestInt ==\
    \ None {\n        return nil\n    }\n    if largestInt == None {\n        return\
    \ smallestInt\n    }\n    return []interface{}{smallestInt, largestInt}\n}\n",
  "    max := -1\n    min := 1\n    for _, v := range lst {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    if min == -1 {\n        return []interface{}{None}\n   \
    \ }\n    if max == -1 {\n        return []interface{}{None}\n    }\n    if min\
    \ > max {\n        return []interface{}{None}\n    }\n    return []interface{}{min,\
    \ max}\n}\n", "    result := make([]interface{}, len(lst))\n    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = v\n        } else {\n            largest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        for _, v := range lst {\n            if v > 0 {\n          \
    \      smallest = v\n            }\n        }\n    }\n    if largest == 0 {\n\
    \        for _, v := range lst {\n            if v < 0 {\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest > 0 {\n        result[0]\
    \ = smallest\n    }\n    if largest < 0 {\n        result[1] = largest\n    }\n\
    \    return result\n}\n", "    largest, smallest := 0, 0\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            largest = v // largest is now the largest\
    \ negative integer\n        } else {\n            smallest = v // smallest is\
    \ now the smallest positive integer\n        }\n    }\n    if largest == 0 {\n\
    \        return nil\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n  \
    \  largest := None\n    for _, v := range lst {\n        if v < smallest {\n \
    \           smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    max := 0\n    min := 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            max = v\n        } else {\n            min =\
    \ v\n        }\n    }\n    if min > max {\n        return nil\n    }\n    return\
    \ []interface{}{max, min}\n}\n", "    if len(lst) == 0 {\n        return []interface{}{}\n\
    \    }\n    smallest := lst[0]\n    largest := lst[0]\n    for _, v := range lst\
    \ {\n        if v < smallest {\n            smallest = v\n        }\n        if\
    \ v > largest {\n            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v // largest is now the largest negative\
    \ integer\n        } else {\n            smallest = v // smallest is now the smallest\
    \ positive integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v > largest {\n           \
    \ largest = v\n        }\n        if v < smallest {\n            smallest = v\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n    largest\
    \ := []int{}\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = append(smallest, v)\n        } else {\n            largest = append(largest,\
    \ v)\n        }\n    }\n    if len(smallest) == 0 {\n        return nil\n    }\n\
    \    if len(largest) == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    var a int\n    var b int\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            a = v\n        } else {\n            b =\
    \ v\n        }\n    }\n    if a == 0 {\n        return nil\n    }\n    if b ==\
    \ 0 {\n        return nil\n    }\n    return []interface{}{a, b}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largestInt := None\n    smallestInt := None\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            if smallestInt == None {\n\
    \                smallestInt = v\n            } else {\n                largestInt\
    \ = v\n            }\n        } else {\n            if largestInt == None {\n\
    \                largestInt = v\n            } else {\n                if v >\
    \ smallestInt {\n                    smallestInt = v\n                }\n    \
    \        }\n        }\n    }\n    if smallestInt == None {\n        return nil\n\
    \    }\n    if largestInt == None {\n        return smallestInt\n    }\n    return\
    \ []interface{}{largestInt, smallestInt}\n}\n", "    smallest := []int{}\n   \
    \ largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      smallest = append(smallest, v)\n        } else {\n            largest =\
    \ append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n        return\
    \ nil\n    }\n    if len(largest) == 0 {\n        return smallest\n    }\n   \
    \ return []interface{}{largest[0], smallest[0]}\n}\n", "    smallest := 0\n  \
    \  largest := 0\n    for _, v := range lst {\n        if v < smallest {\n    \
    \        smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v\n        } else {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := None\n   \
    \ largest := None\n    for _, v := range lst {\n        if v < smallest {\n  \
    \          smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = maxInt(largest, v)\n        } else\
    \ {\n            smallest = minInt(smallest, v)\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is largest negative int\n      \
    \  } else {\n            smallest = v // smallest is smallest positive int\n \
    \       }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := lst[0]\n    largest\
    \ := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n        \
    \    smallest = v\n        }\n        if v > largest {\n            largest =\
    \ v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n   \
    \ if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest\
    \ := lst[0]\n    largest := lst[0]\n    for _, v := range lst {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n        if v > largest {\n\
    \            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < smallest {\n            smallest = v\n        }\n\
    \        if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == None {\n        return nil\n    }\n    if largest == None {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   max := 0\n    min := 0\n    for _, v := range lst {\n        if v > max {\n\
    \            max = v\n        }\n        if v < min {\n            min = v\n \
    \       }\n    }\n    if max == 0 {\n        return []interface{}{None, None}\n\
    \    }\n    if min == 0 {\n        return []interface{}{None, max}\n    }\n  \
    \  return []interface{}{max, min}\n}\n", "    smallest := []int{}\n    largest\
    \ := []int{}\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = append(smallest, v)\n        } else {\n            largest = append(largest,\
    \ v)\n        }\n    }\n    if len(smallest) == 0 {\n        return nil\n    }\n\
    \    if len(largest) == 0 {\n        return nil\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return append(largest_smallest_integers(smallest),\
    \ smallest[len(smallest)-1]), append(largest_smallest_integers(largest), largest[len(largest)-1])\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v > largest {\n            largest = v\n        }\n        if v < smallest {\n\
    \            smallest = v\n        }\n    }\n    if largest == 0 {\n        return\
    \ nil\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v // set largest to largest negative\
    \ value\n        } else {\n            smallest = v // set smallest to smallest\
    \ positive value\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n      \
    \  return nil\n    }\n    if len(largest) == 0 {\n        return smallest\n  \
    \  }\n    return append(smallest, largest...)\n}\n", "    result := make([]interface{},\
    \ len(lst))\n    i := 0\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         result[i] = nil\n        } else {\n            result[i] = v\n     \
    \   }\n        i++\n    }\n    return result\n}\n", "    largest, smallest :=\
    \ 0, 0\n    for _, v := range lst {\n        if v > largest {\n            largest\
    \ = v\n        }\n        if v < smallest {\n            smallest = v\n      \
    \  }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        return nil\n    }\n    if largest == nil {\n    \
    \    return smallest\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if v > largest\
    \ {\n            largest = v\n        }\n        if v < smallest {\n         \
    \   smallest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n      \
    \  return nil\n    }\n    if len(largest) == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest[0], smallest[0]}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ append(smallest, largest...)\n}\n", "    largest, smallest := 0, 0\n    for\
    \ _, v := range lst {\n        if v > largest {\n            largest = v\n   \
    \     }\n        if v < smallest {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    if len(lst) == 0 {\n        return []interface{}{None, None}\n    }\n\
    \    largest, smallest := lst[0], lst[0]\n    for _, v := range lst {\n      \
    \  if v > largest {\n            largest = v\n        }\n        if v < smallest\
    \ {\n            smallest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    var a int\n    var b int\n    for _, v := range lst {\n\
    \        if v < 0 {\n            a = v\n        } else {\n            b = v\n\
    \        }\n    }\n    if a > b {\n        return nil\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n\
    \        } else {\n            largest = append(largest, v)\n        }\n    }\n\
    \    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return smallest\n    }\n    return append(largest_smallest_integers(smallest),\
    \ smallest[len(smallest)-1]), append(largest_smallest_integers(largest), largest[len(largest)-1])\n\
    }\n", "    smallest := None\n    largest := None\n    for _, v := range lst {\n\
    \        if v < smallest {\n            smallest = v\n        }\n        if v\
    \ > largest {\n            largest = v\n        }\n    }\n    if smallest == None\
    \ && largest == None {\n        return nil\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v > largest {\n            largest = v\n        }\n        if v <\
    \ smallest {\n            smallest = v\n        }\n    }\n    if largest == 0\
    \ {\n        return nil\n    }\n    if smallest == 0 {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if smallest == nil || largest ==\
    \ nil {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is now the largest negative integer\n\
    \        } else {\n            smallest = v // smallest is now the smallest positive\
    \ integer\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := -1, -1\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if smallest == -1 {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ -1 {\n                largest = v\n            } else {\n                if\
    \ v > largest {\n                    largest = v\n                }\n        \
    \        if v < smallest {\n                    smallest = v\n               \
    \ }\n            }\n        }\n    }\n    if smallest == -1 {\n        return\
    \ nil\n    }\n    if largest == -1 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v // largest is now the largest negative\
    \ number\n        } else {\n            smallest = v // smallest is now the smallest\
    \ positive number\n        }\n    }\n    if largest == 0 {\n        return nil\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if smallest == None {\n       \
    \         smallest = v\n            } else {\n                largest = smallest\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == None {\n                largest = v\n            } else {\n     \
    \           if v > largest {\n                    largest = v\n              \
    \  }\n                if v < smallest {\n                    smallest = v\n  \
    \              }\n            }\n        }\n    }\n    if smallest == None {\n\
    \        return nil\n    }\n    if largest == None {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    max := 0\n   \
    \ min := 0\n    for _, v := range lst {\n        if v < 0 {\n            max =\
    \ v\n        } else {\n            min = v\n        }\n    }\n    if max == min\
    \ {\n        return nil\n    }\n    return []interface{}{max, min}\n}\n", "  \
    \  smallest := []int{}\n    largest := []int{}\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = append(smallest, v)\n        } else\
    \ {\n            largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   largest, smallest := 0, 0\n    for _, v := range lst {\n        if v > largest\
    \ {\n            largest = v\n        }\n        if v < smallest {\n         \
    \   smallest = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n      \
    \  return nil\n    }\n    if len(largest) == 0 {\n        return smallest\n  \
    \  }\n    return []interface{}{largest[0], smallest[0]}\n}\n", "    max := 0\n\
    \    min := 0\n    for _, v := range lst {\n        if v > max {\n           \
    \ max = v\n        }\n        if v < min {\n            min = v\n        }\n \
    \   }\n    if min == 0 {\n        return []interface{}{None, None}\n    }\n  \
    \  if max == 0 {\n        return []interface{}{None, min}\n    }\n    return []interface{}{max,\
    \ min}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n\
    \        } else {\n            largest = append(largest, v)\n        }\n    }\n\
    \    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    largestInt := None\n    smallestInt := None\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallestInt == None {\n          \
    \      smallestInt = v\n            } else {\n                smallestInt = smallestInt\
    \ * 10 + v\n            }\n        } else {\n            if largestInt == None\
    \ {\n                largestInt = v\n            } else {\n                largestInt\
    \ = largestInt * 10 + v\n            }\n        }\n    }\n    if largestInt ==\
    \ None {\n        return nil\n    }\n    if smallestInt == None {\n        return\
    \ largestInt\n    }\n    return []interface{}{largestInt, smallestInt}\n}\n",
  "    smallest := []int{}\n    largest := []int{}\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = append(smallest, v)\n        } else\
    \ {\n            largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = v // largest is now the largest negative integer\n        } else\
    \ {\n            smallest = v // smallest is now the smallest positive integer\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0, 0\n   \
    \ for _, v := range lst {\n        if v < 0 {\n            largest = largest *\
    \ -1\n        } else {\n            smallest = smallest + 1\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := 0\n    largest := 0\n    for _, v := range\
    \ lst {\n        if v < smallest {\n            smallest = v\n        }\n    \
    \    if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    if largest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = -v\n        } else {\n            smallest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n    \
    \    } else {\n            largest = append(largest, v)\n        }\n    }\n  \
    \  if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return smallest\n    }\n    return append(smallest, largest...)\n\
    }\n", "    smallest := None\n    largest := None\n    for _, v := range lst {\n\
    \        if v < smallest {\n            smallest = v\n        }\n        if v\
    \ > largest {\n            largest = v\n        }\n    }\n    if smallest == None\
    \ {\n        return nil\n    }\n    if largest == None {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v > largest {\n           \
    \ largest = v\n        } else if v < smallest {\n            smallest = v\n  \
    \      }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := nil\n    largest :=\
    \ nil\n    for _, v := range lst {\n        if v < 0 {\n            if smallest\
    \ == nil {\n                smallest = v\n            } else {\n             \
    \   largest = smallest\n                smallest = v\n            }\n        }\
    \ else {\n            if largest == nil {\n                largest = v\n     \
    \       } else {\n                smallest = largest\n                largest\
    \ = v\n            }\n        }\n    }\n    if smallest == nil {\n        return\
    \ nil\n    }\n    if largest == nil {\n        return smallest\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n    largest\
    \ := []int{}\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = append(smallest, v)\n        } else {\n            largest = append(largest,\
    \ v)\n        }\n    }\n    if smallest == nil {\n        return nil\n    }\n\
    \    if largest == nil {\n        return smallest\n    }\n    return append(smallest,\
    \ largest...)\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            largest = v // largest is now the largest\
    \ negative number\n        } else {\n            smallest = v // smallest is now\
    \ the smallest positive number\n        }\n    }\n    if largest == 0 {\n    \
    \    return nil\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0,\
    \ 0\n    for _, v := range lst {\n        if v < 0 {\n            largest = maxInt(largest,\
    \ v)\n        } else {\n            smallest = minInt(smallest, v)\n        }\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    smallest := 0\n    largest := 0\n    for _, v := range lst {\n    \
    \    if v < smallest {\n            smallest = v\n        }\n        if v > largest\
    \ {\n            largest = v\n        }\n    }\n    if smallest == 0 {\n     \
    \   return nil\n    }\n    if largest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0, 0\n   \
    \ for _, v := range lst {\n        if v < 0 {\n            largest = v // largest\
    \ is now the largest negative integer\n        } else {\n            smallest\
    \ = v // smallest is now the smallest positive integer\n        }\n    }\n   \
    \ if largest == 0 {\n        return nil\n    }\n    if smallest == 0 {\n     \
    \   return nil\n    }\n    return []interface{}{largest, smallest}\n}\n", "  \
    \  smallest := 0\n    largest := 0\n    for _, v := range lst {\n        if v\
    \ < smallest {\n            smallest = v\n        }\n        if v > largest {\n\
    \            largest = v\n        }\n    }\n    if smallest == 0 {\n        return\
    \ nil\n    }\n    if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n    \
    \    } else {\n            largest = append(largest, v)\n        }\n    }\n  \
    \  if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n    \
    \    } else {\n            largest = append(largest, v)\n        }\n    }\n  \
    \  if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return nil\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v > largest {\n            largest = v\n        } else if v < smallest {\n \
    \           smallest = v\n        }\n    }\n    if largest == 0 {\n        return\
    \ nil\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v > largest {\n            largest = v\n        }\n        if v <\
    \ smallest {\n            smallest = v\n        }\n    }\n    if largest == 0\
    \ {\n        return nil\n    }\n    if smallest == 0 {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v > largest {\n           \
    \ largest = v\n        }\n        if v < smallest {\n            smallest = v\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    if largest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n    \
    \    } else {\n            largest = append(largest, v)\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return append(smallest, largest...)\n}\n",
  "    smallest := []int{}\n    largest := []int{}\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = append(smallest, v)\n        } else\
    \ {\n            largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   largest, smallest := 0, 0\n    for _, v := range lst {\n        if v > largest\
    \ {\n            largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if largest == 0 {\n        return nil\n    }\n  \
    \  if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < smallest {\n            smallest = v\n        }\n\
    \        if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == None {\n        return nil\n    }\n    if largest == None {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   smallest := []int{}\n    largest := []int{}\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = append(smallest, v)\n        } else\
    \ {\n            largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = v // largest is now the largest negative integer\n    \
    \    } else {\n            smallest = v // smallest is now the smallest positive\
    \ integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    largest, smallest :=\
    \ 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest =\
    \ v // largest is now the largest negative number\n        } else {\n        \
    \    smallest = v // smallest is now the smallest positive number\n        }\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = largest * -1\n        } else {\n  \
    \          smallest = smallest + 1\n        }\n    }\n    if smallest == 0 {\n\
    \        return nil\n    }\n    if smallest > largest {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n\
    \    largest := None\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == None {\n        return nil\n    }\n\
    \    if largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = v // largest is now the largest\n \
    \       } else {\n            smallest = v // smallest is now the smallest\n \
    \       }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0, 0\n   \
    \ for _, v := range lst {\n        if v > largest {\n            largest = v\n\
    \        } else if v < smallest {\n            smallest = v\n        }\n    }\n\
    \    if smallest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := 0\n    largest := 0\n    for _, v := range\
    \ lst {\n        if v < smallest {\n            smallest = v\n        }\n    \
    \    if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    if largest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n      \
    \  return nil\n    }\n    if len(largest) == 0 {\n        return smallest\n  \
    \  }\n    return []interface{}{largest[0], smallest[0]}\n}\n", "    smallest :=\
    \ []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if v <\
    \ 0 {\n            smallest = append(smallest, v)\n        } else {\n        \
    \    largest = append(largest, v)\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(smallest, largest...)\n}\n", "    var a int\n    var\
    \ b int\n    var found bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n            found = true\n            break\n        }\n \
    \       if v > 0 {\n            b = v\n            found = true\n            break\n\
    \        }\n    }\n    if !found {\n        return []interface{}{a, b}\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    smallest := []int{}\n    largest :=\
    \ []int{}\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = append(smallest, v)\n        } else {\n            largest = append(largest,\
    \ v)\n        }\n    }\n    if smallest == nil && largest == nil {\n        return\
    \ nil\n    }\n    return []interface{}{largest, smallest}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v > largest {\n  \
    \          largest = v\n        } else if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    max := 0\n    min := 0\n\
    \    for _, v := range lst {\n        if v < 0 {\n            min = v\n      \
    \  } else {\n            max = v\n        }\n    }\n    if min == 0 {\n      \
    \  return []interface{}{None, min}\n    }\n    if max == 0 {\n        return []interface{}{None,\
    \ max}\n    }\n    return []interface{}{max, min}\n}\n", "    smallest := 0\n\
    \    largest := 0\n    for _, v := range lst {\n        if v < smallest {\n  \
    \          smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            largest = v // largest is largest of negative\
    \ numbers\n        } else {\n            smallest = v // smallest is smallest\
    \ of positive numbers\n        }\n    }\n    if smallest == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := None\n    largest := None\n    for _, v := range lst {\n        if v < smallest\
    \ {\n            smallest = v\n        }\n        if v > largest {\n         \
    \   largest = v\n        }\n    }\n    if smallest == None {\n        return nil\n\
    \    }\n    if largest == None {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    var a int\n    var b int\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            a = v\n        } else {\n            b =\
    \ v\n        }\n    }\n    if a > b {\n        return nil\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            largest = v // largest is now the largest negative\
    \ integer\n        } else {\n            smallest = v // smallest is now the smallest\
    \ positive integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n\
    \    largest := None\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == None {\n        smallest = None\n\
    \    }\n    if largest == None {\n        largest = None\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v > largest {\n            largest = v\n        }\n        if v <\
    \ smallest {\n            smallest = v\n        }\n    }\n    if largest == 0\
    \ {\n        return nil\n    }\n    if smallest == 0 {\n        return nil\n \
    \   }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := nil\n\
    \    largest := nil\n    for _, v := range lst {\n        if v < 0 {\n       \
    \     if smallest == nil {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == nil {\n                largest\
    \ = v\n            } else {\n                smallest = largest\n            \
    \    largest = v\n            }\n        }\n    }\n    if smallest == nil {\n\
    \        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest\
    \ = v\n        } else {\n            smallest = v\n        }\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n    \
    \    } else {\n            largest = append(largest, v)\n        }\n    }\n  \
    \  if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    if len(lst) == 0 {\n        return []interface{}{None, None}\n    }\n\
    \    max := lst[0]\n    min := lst[0]\n    for _, v := range lst {\n        if\
    \ v > max {\n            max = v\n        }\n        if v < min {\n          \
    \  min = v\n        }\n    }\n    return []interface{}{max, min}\n}\n", "    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v > largest {\n           \
    \ largest = v\n        }\n        if v < smallest {\n            smallest = v\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v\n        } else {\n            smallest = v\n\
    \        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    largest, smallest := 0, 0\n   \
    \ for _, v := range lst {\n        if v > largest {\n            largest = v\n\
    \        }\n        if v < smallest {\n            smallest = v\n        }\n \
    \   }\n    if largest == 0 {\n        return nil\n    }\n    if smallest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = smallest\n            \
    \    smallest = v\n            }\n        } else {\n            if largest ==\
    \ nil {\n                largest = v\n            } else {\n                smallest\
    \ = largest\n                largest = v\n            }\n        }\n    }\n  \
    \  if smallest == nil {\n        return nil\n    }\n    if largest == nil {\n\
    \        return smallest\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := []int{}\n    largest := []int{}\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            smallest = append(smallest, v)\n    \
    \    } else {\n            largest = append(largest, v)\n        }\n    }\n  \
    \  if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest) ==\
    \ 0 {\n        return smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n\
    }\n", "    largestInt := None\n    smallestInt := None\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallestInt == None {\n          \
    \      smallestInt = v\n            } else {\n                smallestInt = smallestInt\
    \ * 10 + v\n            }\n        } else {\n            if largestInt == None\
    \ {\n                largestInt = v\n            } else {\n                largestInt\
    \ = largestInt * 10 + v\n            }\n        }\n    }\n    if smallestInt ==\
    \ None {\n        return nil\n    }\n    if largestInt == None {\n        return\
    \ smallestInt\n    }\n    return []interface{}{smallestInt, largestInt}\n}\n",
  "    largest, smallest := -1, -1\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if smallest == -1 {\n                smallest = v\n         \
    \   } else {\n                largest = smallest\n                smallest = v\n\
    \            }\n        } else {\n            if largest == -1 {\n           \
    \     largest = v\n            } else {\n                if v > largest {\n  \
    \                  largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == -1 {\n        return nil\n    }\n    if largest\
    \ == -1 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = v // largest is largest of negative numbers\n\
    \        } else {\n            smallest = v // smallest is smallest of positive\
    \ numbers\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n  \
    \  largest := None\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    if smallest == None {\n                smallest = v\n            } else {\n\
    \                largest = v\n            }\n        } else {\n            if\
    \ largest == None {\n                largest = v\n            } else {\n     \
    \           if v > largest {\n                    largest = v\n              \
    \  }\n                if v < smallest {\n                    smallest = v\n  \
    \              }\n            }\n        }\n    }\n    if smallest == None {\n\
    \        return nil\n    }\n    if largest == None {\n        return nil\n   \
    \ }\n    return []interface{}{largest, smallest}\n}\n", "    var a int\n    var\
    \ b int\n    for _, v := range lst {\n        if v < 0 {\n            a = v\n\
    \        } else {\n            b = v\n        }\n    }\n    if a == 0 {\n    \
    \    return nil\n    }\n    if b == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    if len(lst) == 0 {\n        return []interface{}{None,\
    \ None}\n    }\n    smallest := lst[0]\n    largest := lst[0]\n    for _, v :=\
    \ range lst {\n        if v < smallest {\n            smallest = v\n        }\n\
    \        if v > largest {\n            largest = v\n        }\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    var a interface{}\n    var b interface{}\n\
    \    for _, v := range lst {\n        if v < 0 {\n            a = v\n        }\
    \ else {\n            b = v\n        }\n    }\n    if a == nil {\n        return\
    \ nil\n    }\n    if b == nil {\n        return nil\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            largest = -v\n        } else {\n            smallest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   return []interface{}{largest, smallest}\n}\n", "    smallest := None\n   \
    \ largest := None\n    for _, v := range lst {\n        if v < 0 {\n         \
    \   if smallest == None {\n                smallest = v\n            } else {\n\
    \                largest = smallest\n                smallest = v\n          \
    \  }\n        } else {\n            if largest == None {\n                largest\
    \ = v\n            } else {\n                if v > largest {\n              \
    \      largest = v\n                }\n                if v < smallest {\n   \
    \                 smallest = v\n                }\n            }\n        }\n\
    \    }\n    if smallest == None {\n        return nil\n    }\n    if largest ==\
    \ None {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := 0\n    largest := 0\n    for _, v := range lst {\n    \
    \    if v < smallest {\n            smallest = v\n        }\n        if v > largest\
    \ {\n            largest = v\n        }\n    }\n    if smallest == 0 {\n     \
    \   return nil\n    }\n    if largest == 0 {\n        return nil\n    }\n    return\
    \ []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n    largest\
    \ := []int{}\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = append(smallest, v)\n        } else {\n            largest = append(largest,\
    \ v)\n        }\n    }\n    if smallest == nil {\n        return nil\n    }\n\
    \    if largest == nil {\n        return smallest\n    }\n    return append(smallest,\
    \ largest...)\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            largest = v // largest is now the largest\
    \ negative integer\n        } else {\n            smallest = v // smallest is\
    \ now the smallest positive integer\n        }\n    }\n    if smallest == 0 {\n\
    \        return nil\n    }\n    return []interface{}{largest, smallest}\n}\n",
  "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = v // largest is now the largest negative number\n     \
    \   } else {\n            smallest = v // smallest is now the smallest positive\
    \ number\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n  \
    \  for _, v := range lst {\n        if v < smallest {\n            smallest =\
    \ v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return []interface{}{None, None}\n    }\n    largest, smallest\
    \ := lst[0], lst[0]\n    for _, v := range lst {\n        if v > largest {\n \
    \           largest = v\n        }\n        if v < smallest {\n            smallest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n", " \
    \   result := make([]interface{}, len(lst))\n    for i := range lst {\n      \
    \  if lst[i] < 0 {\n            result[i] = nil\n        } else {\n          \
    \  result[i] = lst[i]\n        }\n    }\n    return result\n}\n", "    var a interface{}\n\
    \    var b interface{}\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        a = v\n        } else {\n            b = v\n        }\n    }\n    if\
    \ a == nil {\n        return nil\n    }\n    if b == nil {\n        return nil\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    smallest := []int{}\n    largest\
    \ := []int{}\n    for _, v := range lst {\n        if v < 0 {\n            smallest\
    \ = append(smallest, v)\n        } else {\n            largest = append(largest,\
    \ v)\n        }\n    }\n    if smallest == nil {\n        return nil\n    }\n\
    \    if largest == nil {\n        return smallest\n    }\n    return append(smallest,\
    \ largest...)\n}\n", "    smallest := []int{}\n    largest := []int{}\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            smallest = append(smallest,\
    \ v)\n        } else {\n            largest = append(largest, v)\n        }\n\
    \    }\n    if len(smallest) == 0 {\n        return nil\n    }\n    if len(largest)\
    \ == 0 {\n        return smallest\n    }\n    return []interface{}{largest[0],\
    \ smallest[0]}\n}\n", "    smallest := None\n    largest := None\n    for _, v\
    \ := range lst {\n        if v < 0 {\n            if smallest == None {\n    \
    \            smallest = v\n            } else {\n                largest = smallest\n\
    \                smallest = v\n            }\n        } else {\n            if\
    \ largest == None {\n                largest = v\n            } else {\n     \
    \           if v > largest {\n                    largest = v\n              \
    \  }\n                if v < smallest {\n                    smallest = v\n  \
    \              }\n            }\n        }\n    }\n    if smallest == None {\n\
    \        smallest = largest\n    }\n    if largest == None {\n        largest\
    \ = smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest\
    \ := []int{}\n    largest := []int{}\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            smallest = append(smallest, v)\n        } else {\n    \
    \        largest = append(largest, v)\n        }\n    }\n    if smallest == nil\
    \ {\n        return nil\n    }\n    if largest == nil {\n        return smallest\n\
    \    }\n    return append(largest_smallest_integers(smallest), largest...)\n}\n",
  "    smallest := []int{}\n    largest := []int{}\n    for _, v := range lst {\n\
    \        if v < 0 {\n            smallest = append(smallest, v)\n        } else\
    \ {\n            largest = append(largest, v)\n        }\n    }\n    if len(smallest)\
    \ == 0 {\n        return nil\n    }\n    if len(largest) == 0 {\n        return\
    \ smallest\n    }\n    return []interface{}{largest[0], smallest[0]}\n}\n", " \
    \   if len(lst) == 0 {\n        return nil\n    }\n    max := lst[0]\n    min\
    \ := lst[0]\n    for _, v := range lst {\n        if v > max {\n            max\
    \ = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n\
    \    return []interface{}{max, min}\n}\n", "    largest, smallest := 0, 0\n  \
    \  for _, v := range lst {\n        if v < 0 {\n            largest = v\n    \
    \    } else {\n            smallest = v\n        }\n    }\n    if smallest ==\
    \ 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = maxInt(largest, v)\n        } else {\n      \
    \      smallest = minInt(smallest, v)\n        }\n    }\n    if smallest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    var a int\n    var b int\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            a = v\n        } else {\n            b = v\n        }\n \
    \   }\n    if a == 0 {\n        return nil\n    }\n    if b == 0 {\n        return\
    \ nil\n    }\n    return []interface{}{a, b}\n}\n", "    if len(lst) == 0 {\n\
    \        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n  \
    \  for _, i := range lst {\n        if i < smallest {\n            smallest =\
    \ i\n        }\n        if i > largest {\n            largest = i\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    largest, smallest\
    \ := 0, 0\n    for _, v := range lst {\n        if v > largest {\n           \
    \ largest = v\n        }\n        if v < smallest {\n            smallest = v\n\
    \        }\n    }\n    if largest == 0 {\n        return nil\n    }\n    if smallest\
    \ == 0 {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    smallest := nil\n    largest := nil\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if smallest == nil {\n                smallest\
    \ = v\n            } else {\n                largest = v\n            }\n    \
    \    } else {\n            if largest == nil {\n                largest = v\n\
    \            } else {\n                if v > largest {\n                    largest\
    \ = v\n                }\n                if v < smallest {\n                \
    \    smallest = v\n                }\n            }\n        }\n    }\n    if\
    \ smallest == nil {\n        smallest = nil\n    }\n    if largest == nil {\n\
    \        largest = nil\n    }\n    return []interface{}{smallest, largest}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
