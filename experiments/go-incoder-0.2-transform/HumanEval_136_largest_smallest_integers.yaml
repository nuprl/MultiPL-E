name: HumanEval_136_largest_smallest_integers
language: go_test.go
prompt: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{None,\
  \ 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{None, None}\n\
  // >>> largest_smallest_integers([]int{0})\n// []interface{}{None, None}\nfunc largest_smallest_integers(lst\
  \ []int) []interface{} {\n"
tests: "func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
  \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}),\
  \ expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1, 3, 2, 4,\
  \ 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
  \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
  \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
  \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}), expected:\
  \ []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3, -5, -6}),\
  \ expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1, -3, -5,\
  \ -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(lst) == 0 {\n        return []interface{}{None, None}\n\
    \    }\n    smallest := lst[0]\n    largest := lst[0]\n    for _, v := range lst\
    \ {\n        if v < smallest {\n            smallest = v\n        }\n        if\
    \ v > largest {\n            largest = v\n        }\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    smallest := None\n    largest := None\n    for _, v :=\
    \ range lst {\n        if v < smallest {\n            smallest = v\n        }\n\
    \        if v > largest {\n            largest = v\n        }\n    }\n    if smallest\
    \ == None {\n        return nil\n    }\n    if largest == None {\n        return\
    \ smallest\n    }\n    return []interface{}{largest, smallest}\n}\n", "    largest,\
    \ smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n        \
    \    largest = maxInt(largest, v)\n        } else {\n            smallest = minInt(smallest,\
    \ v)\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n  \
    \  return []interface{}{largest, smallest}\n}\n", "    smallest := None\n    largest\
    \ := None\n    for _, v := range lst {\n        if v < smallest {\n          \
    \  smallest = v\n        }\n        if v > largest {\n            largest = v\n\
    \        }\n    }\n    if smallest == None {\n        return nil\n    }\n    if\
    \ largest == None {\n        return smallest\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v < 0 {\n            largest = largest * -1\n        } else {\n  \
    \          smallest = smallest + 1\n        }\n    }\n    if smallest == 0 {\n\
    \        return nil\n    }\n    if smallest > largest {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := 0\n\
    \    largest := 0\n    for _, v := range lst {\n        if v < smallest {\n  \
    \          smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n \
    \   if largest == 0 {\n        return nil\n    }\n    return []interface{}{largest,\
    \ smallest}\n}\n", "    if len(lst) == 0 {\n        return []interface{}{None,\
    \ None}\n    }\n    max := lst[0]\n    min := lst[0]\n    for _, v := range lst\
    \ {\n        if v > max {\n            max = v\n        }\n        if v < min\
    \ {\n            min = v\n        }\n    }\n    return []interface{}{max, min}\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = maxInt(largest, v)\n        } else {\n      \
    \      smallest = minInt(smallest, v)\n        }\n    }\n    if smallest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    largestInt := None\n    smallestInt := None\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if smallestInt == None {\n          \
    \      smallestInt = v\n            } else {\n                smallestInt = min(smallestInt,\
    \ v)\n            }\n        } else {\n            if largestInt == None {\n \
    \               largestInt = v\n            } else {\n                largestInt\
    \ = max(largestInt, v)\n            }\n        }\n    }\n    if smallestInt ==\
    \ None {\n        return nil\n    }\n    if largestInt == None {\n        return\
    \ smallestInt\n    }\n    return []interface{}{smallestInt, largestInt}\n}\n",
  "    result := make([]interface{}, 0, len(lst))\n    for _, v := range lst {\n \
    \       if v < 0 {\n            result = append(result, None)\n        } else\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            largest = largest * -1\n        } else {\n            smallest\
    \ = smallest + 1\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    if len(lst) ==\
    \ 0 {\n        return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n\
    \    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := None\n\
    \    largest := None\n    for _, v := range lst {\n        if v < 0 {\n      \
    \      if smallest == None {\n                smallest = v\n            } else\
    \ {\n                largest = smallest\n                smallest = v\n      \
    \      }\n        } else {\n            if largest == None {\n               \
    \ largest = v\n            } else {\n                if v > largest {\n      \
    \              largest = v\n                }\n                if v < smallest\
    \ {\n                    smallest = v\n                }\n            }\n    \
    \    }\n    }\n    if smallest == None {\n        smallest = largest\n    }\n\
    \    if largest == None {\n        largest = smallest\n    }\n    return []interface{}{smallest,\
    \ largest}\n}\n", "    largest, smallest := 0, 0\n    for _, v := range lst {\n\
    \        if v > largest {\n            largest = v\n        } else if v < smallest\
    \ {\n            smallest = v\n        }\n    }\n    if largest == 0 {\n     \
    \   return nil\n    }\n    if smallest == 0 {\n        return nil\n    }\n   \
    \ return []interface{}{largest, smallest}\n}\n", "    if len(lst) == 0 {\n   \
    \     return nil\n    }\n    smallest := lst[0]\n    largest := lst[0]\n    for\
    \ _, v := range lst {\n        if v < smallest {\n            smallest = v\n \
    \       }\n        if v > largest {\n            largest = v\n        }\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    smallest := 0\n    largest\
    \ := 0\n    for _, v := range lst {\n        if v < smallest {\n            smallest\
    \ = v\n        }\n        if v > largest {\n            largest = v\n        }\n\
    \    }\n    if smallest == 0 {\n        return nil\n    }\n    if largest == 0\
    \ {\n        return nil\n    }\n    return []interface{}{largest, smallest}\n\
    }\n", "    if len(lst) == 0 {\n        return nil\n    }\n    smallest := lst[0]\n\
    \    largest := lst[0]\n    for _, v := range lst {\n        if v < smallest {\n\
    \            smallest = v\n        }\n        if v > largest {\n            largest\
    \ = v\n        }\n    }\n    return []interface{}{largest, smallest}\n}\n", " \
    \   largest, smallest := 0, 0\n    for _, v := range lst {\n        if v < 0 {\n\
    \            largest = v // largest is now the largest negative integer\n    \
    \    } else {\n            smallest = v // smallest is now the smallest positive\
    \ integer\n        }\n    }\n    if smallest == 0 {\n        return nil\n    }\n\
    \    return []interface{}{largest, smallest}\n}\n", "    largest, smallest :=\
    \ 0, 0\n    for _, v := range lst {\n        if v < 0 {\n            largest =\
    \ v // largest is largest\n        } else {\n            smallest = v // smallest\
    \ is smallest\n        }\n    }\n    if smallest == 0 {\n        return nil\n\
    \    }\n    return []interface{}{largest, smallest}\n}\n", "    smallest := []int{}\n\
    \    largest := []int{}\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         smallest = append(smallest, v)\n        } else {\n            largest\
    \ = append(largest, v)\n        }\n    }\n    if len(smallest) == 0 {\n      \
    \  return nil\n    }\n    if len(largest) == 0 {\n        return smallest\n  \
    \  }\n    return []interface{}{largest[0], smallest[0]}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
